/*! Menduz diagrams */
const buildInformation = {
  "date": "2020-08-25T13:19:52.980Z",
  "commit": "HEAD",
  "ref": "?"
};
(function () {
	'use strict';

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	function getCjsExportFromNamespace (n) {
		return n && n['default'] || n;
	}

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	var ReactPropTypesSecret_1 = ReactPropTypesSecret;

	var printWarning = function() {};

	{
	  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
	  var loggedTypeFailures = {};
	  var has = Function.call.bind(Object.prototype.hasOwnProperty);

	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  {
	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error(
	              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
	              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
	            );
	            err.name = 'Invariant Violation';
	            throw err;
	          }
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error && !(error instanceof Error)) {
	          printWarning(
	            (componentName || 'React class') + ': type specification of ' +
	            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
	            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
	            'You may have forgotten to pass an argument to the type checker ' +
	            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
	            'shape all require an argument).'
	          );
	        }
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          printWarning(
	            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
	          );
	        }
	      }
	    }
	  }
	}

	/**
	 * Resets warning cache when testing.
	 *
	 * @private
	 */
	checkPropTypes.resetWarningCache = function() {
	  {
	    loggedTypeFailures = {};
	  }
	};

	var checkPropTypes_1 = checkPropTypes;

	var react_development = createCommonjsModule(function (module, exports) {



	{
	  (function() {

	var _assign = objectAssign;
	var checkPropTypes = checkPropTypes_1;

	var ReactVersion = '16.13.1';

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
	var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';
	function getIteratorFn(maybeIterable) {
	  if (maybeIterable === null || typeof maybeIterable !== 'object') {
	    return null;
	  }

	  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

	  if (typeof maybeIterator === 'function') {
	    return maybeIterator;
	  }

	  return null;
	}

	/**
	 * Keeps track of the current dispatcher.
	 */
	var ReactCurrentDispatcher = {
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	};

	/**
	 * Keeps track of the current batch's configuration such as how long an update
	 * should suspend for if it needs to.
	 */
	var ReactCurrentBatchConfig = {
	  suspense: null
	};

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	};

	var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
	function describeComponentFrame (name, source, ownerName) {
	  var sourceInfo = '';

	  if (source) {
	    var path = source.fileName;
	    var fileName = path.replace(BEFORE_SLASH_RE, '');

	    {
	      // In DEV, include code for a common special case:
	      // prefer "folder/index.js" instead of just "index.js".
	      if (/^index\./.test(fileName)) {
	        var match = path.match(BEFORE_SLASH_RE);

	        if (match) {
	          var pathBeforeSlash = match[1];

	          if (pathBeforeSlash) {
	            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
	            fileName = folderName + '/' + fileName;
	          }
	        }
	      }
	    }

	    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
	  } else if (ownerName) {
	    sourceInfo = ' (created by ' + ownerName + ')';
	  }

	  return '\n    in ' + (name || 'Unknown') + sourceInfo;
	}

	var Resolved = 1;
	function refineResolvedLazyComponent(lazyComponent) {
	  return lazyComponent._status === Resolved ? lazyComponent._result : null;
	}

	function getWrappedName(outerType, innerType, wrapperName) {
	  var functionName = innerType.displayName || innerType.name || '';
	  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
	}

	function getComponentName(type) {
	  if (type == null) {
	    // Host root, text node or just invalid type.
	    return null;
	  }

	  {
	    if (typeof type.tag === 'number') {
	      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
	    }
	  }

	  if (typeof type === 'function') {
	    return type.displayName || type.name || null;
	  }

	  if (typeof type === 'string') {
	    return type;
	  }

	  switch (type) {
	    case REACT_FRAGMENT_TYPE:
	      return 'Fragment';

	    case REACT_PORTAL_TYPE:
	      return 'Portal';

	    case REACT_PROFILER_TYPE:
	      return "Profiler";

	    case REACT_STRICT_MODE_TYPE:
	      return 'StrictMode';

	    case REACT_SUSPENSE_TYPE:
	      return 'Suspense';

	    case REACT_SUSPENSE_LIST_TYPE:
	      return 'SuspenseList';
	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_CONTEXT_TYPE:
	        return 'Context.Consumer';

	      case REACT_PROVIDER_TYPE:
	        return 'Context.Provider';

	      case REACT_FORWARD_REF_TYPE:
	        return getWrappedName(type, type.render, 'ForwardRef');

	      case REACT_MEMO_TYPE:
	        return getComponentName(type.type);

	      case REACT_BLOCK_TYPE:
	        return getComponentName(type.render);

	      case REACT_LAZY_TYPE:
	        {
	          var thenable = type;
	          var resolvedThenable = refineResolvedLazyComponent(thenable);

	          if (resolvedThenable) {
	            return getComponentName(resolvedThenable);
	          }

	          break;
	        }
	    }
	  }

	  return null;
	}

	var ReactDebugCurrentFrame = {};
	var currentlyValidatingElement = null;
	function setCurrentlyValidatingElement(element) {
	  {
	    currentlyValidatingElement = element;
	  }
	}

	{
	  // Stack implementation injected by the current renderer.
	  ReactDebugCurrentFrame.getCurrentStack = null;

	  ReactDebugCurrentFrame.getStackAddendum = function () {
	    var stack = ''; // Add an extra top frame while an element is being validated

	    if (currentlyValidatingElement) {
	      var name = getComponentName(currentlyValidatingElement.type);
	      var owner = currentlyValidatingElement._owner;
	      stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
	    } // Delegate to the injected renderer-specific implementation


	    var impl = ReactDebugCurrentFrame.getCurrentStack;

	    if (impl) {
	      stack += impl() || '';
	    }

	    return stack;
	  };
	}

	/**
	 * Used by act() to track whether you're inside an act() scope.
	 */
	var IsSomeRendererActing = {
	  current: false
	};

	var ReactSharedInternals = {
	  ReactCurrentDispatcher: ReactCurrentDispatcher,
	  ReactCurrentBatchConfig: ReactCurrentBatchConfig,
	  ReactCurrentOwner: ReactCurrentOwner,
	  IsSomeRendererActing: IsSomeRendererActing,
	  // Used by renderers to avoid bundling object-assign twice in UMD bundles:
	  assign: _assign
	};

	{
	  _assign(ReactSharedInternals, {
	    // These should not be included in production.
	    ReactDebugCurrentFrame: ReactDebugCurrentFrame,
	    // Shim for React DOM 16.0.0 which still destructured (but not used) this.
	    // TODO: remove in React 17.0.
	    ReactComponentTreeHook: {}
	  });
	}

	// by calls to these methods by a Babel plugin.
	//
	// In PROD (or in packages without access to React internals),
	// they are left as they are instead.

	function warn(format) {
	  {
	    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    printWarning('warn', format, args);
	  }
	}
	function error(format) {
	  {
	    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	      args[_key2 - 1] = arguments[_key2];
	    }

	    printWarning('error', format, args);
	  }
	}

	function printWarning(level, format, args) {
	  // When changing this logic, you might want to also
	  // update consoleWithStackDev.www.js as well.
	  {
	    var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === 'string' && args[args.length - 1].indexOf('\n    in') === 0;

	    if (!hasExistingStack) {
	      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	      var stack = ReactDebugCurrentFrame.getStackAddendum();

	      if (stack !== '') {
	        format += '%s';
	        args = args.concat([stack]);
	      }
	    }

	    var argsWithFormat = args.map(function (item) {
	      return '' + item;
	    }); // Careful: RN currently depends on this prefix

	    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
	    // breaks IE9: https://github.com/facebook/react/issues/13610
	    // eslint-disable-next-line react-internal/no-production-logging

	    Function.prototype.apply.call(console[level], console, argsWithFormat);

	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      throw new Error(message);
	    } catch (x) {}
	  }
	}

	var didWarnStateUpdateForUnmountedComponent = {};

	function warnNoop(publicInstance, callerName) {
	  {
	    var _constructor = publicInstance.constructor;
	    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
	    var warningKey = componentName + "." + callerName;

	    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
	      return;
	    }

	    error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);

	    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
	  }
	}
	/**
	 * This is the abstract API for an update queue.
	 */


	var ReactNoopUpdateQueue = {
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} callerName name of the calling function in the public API.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance, callback, callerName) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} callerName name of the calling function in the public API.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
	    warnNoop(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
	    warnNoop(publicInstance, 'setState');
	  }
	};

	var emptyObject = {};

	{
	  Object.freeze(emptyObject);
	}
	/**
	 * Base class helpers for the updating state of a component.
	 */


	function Component(props, context, updater) {
	  this.props = props;
	  this.context = context; // If a component has string refs, we will assign a different object later.

	  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
	  // renderer.

	  this.updater = updater || ReactNoopUpdateQueue;
	}

	Component.prototype.isReactComponent = {};
	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */

	Component.prototype.setState = function (partialState, callback) {
	  if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
	    {
	      throw Error( "setState(...): takes an object of state variables to update or a function which returns an object of state variables." );
	    }
	  }

	  this.updater.enqueueSetState(this, partialState, callback, 'setState');
	};
	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */


	Component.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
	};
	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */


	{
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };

	  var defineDeprecationWarning = function (methodName, info) {
	    Object.defineProperty(Component.prototype, methodName, {
	      get: function () {
	        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);

	        return undefined;
	      }
	    });
	  };

	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	function ComponentDummy() {}

	ComponentDummy.prototype = Component.prototype;
	/**
	 * Convenience component with default shallow equality check for sCU.
	 */

	function PureComponent(props, context, updater) {
	  this.props = props;
	  this.context = context; // If a component has string refs, we will assign a different object later.

	  this.refs = emptyObject;
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
	pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

	_assign(pureComponentPrototype, Component.prototype);

	pureComponentPrototype.isPureReactComponent = true;

	// an immutable object with a single mutable value
	function createRef() {
	  var refObject = {
	    current: null
	  };

	  {
	    Object.seal(refObject);
	  }

	  return refObject;
	}

	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};
	var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;

	{
	  didWarnAboutStringRefs = {};
	}

	function hasValidRef(config) {
	  {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }

	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }

	  return config.key !== undefined;
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    {
	      if (!specialPropKeyWarningShown) {
	        specialPropKeyWarningShown = true;

	        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
	      }
	    }
	  };

	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}

	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    {
	      if (!specialPropRefWarningShown) {
	        specialPropRefWarningShown = true;

	        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
	      }
	    }
	  };

	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}

	function warnIfStringRefCannotBeAutoConverted(config) {
	  {
	    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
	      var componentName = getComponentName(ReactCurrentOwner.current.type);

	      if (!didWarnAboutStringRefs[componentName]) {
	        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);

	        didWarnAboutStringRefs[componentName] = true;
	      }
	    }
	  }
	}
	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, instanceof check
	 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} props
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} owner
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @internal
	 */


	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allows us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,
	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,
	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.

	    Object.defineProperty(element._store, 'validated', {
	      configurable: false,
	      enumerable: false,
	      writable: true,
	      value: false
	    }); // self and source are DEV only properties.

	    Object.defineProperty(element, '_self', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: self
	    }); // Two elements created in two different places should be considered
	    // equal for testing purposes and therefore we hide it from enumeration.

	    Object.defineProperty(element, '_source', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: source
	    });

	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};
	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://reactjs.org/docs/react-api.html#createelement
	 */

	function createElement(type, config, children) {
	  var propName; // Reserved names are extracted

	  var props = {};
	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;

	      {
	        warnIfStringRefCannotBeAutoConverted(config);
	      }
	    }

	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  } // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.


	  var childrenLength = arguments.length - 2;

	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);

	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }

	    {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }

	    props.children = childArray;
	  } // Resolve default props


	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;

	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  {
	    if (key || ref) {
	      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

	      if (key) {
	        defineKeyPropWarningGetter(props, displayName);
	      }

	      if (ref) {
	        defineRefPropWarningGetter(props, displayName);
	      }
	    }
	  }

	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	}
	function cloneAndReplaceKey(oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
	  return newElement;
	}
	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://reactjs.org/docs/react-api.html#cloneelement
	 */

	function cloneElement(element, config, children) {
	  if (!!(element === null || element === undefined)) {
	    {
	      throw Error( "React.cloneElement(...): The argument must be a React element, but you passed " + element + "." );
	    }
	  }

	  var propName; // Original props are copied

	  var props = _assign({}, element.props); // Reserved names are extracted


	  var key = element.key;
	  var ref = element.ref; // Self is preserved since the owner is preserved.

	  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.

	  var source = element._source; // Owner will be preserved, unless ref is overridden

	  var owner = element._owner;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }

	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    } // Remaining properties override existing props


	    var defaultProps;

	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }

	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  } // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.


	  var childrenLength = arguments.length - 2;

	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);

	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }

	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	}
	/**
	 * Verifies the object is a ReactElement.
	 * See https://reactjs.org/docs/react-api.html#isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a ReactElement.
	 * @final
	 */

	function isValidElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';
	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });
	  return '$' + escapedString;
	}
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */


	var didWarnAboutMaps = false;
	var userProvidedKeyEscapeRegex = /\/+/g;

	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}

	var POOL_SIZE = 10;
	var traverseContextPool = [];

	function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
	  if (traverseContextPool.length) {
	    var traverseContext = traverseContextPool.pop();
	    traverseContext.result = mapResult;
	    traverseContext.keyPrefix = keyPrefix;
	    traverseContext.func = mapFunction;
	    traverseContext.context = mapContext;
	    traverseContext.count = 0;
	    return traverseContext;
	  } else {
	    return {
	      result: mapResult,
	      keyPrefix: keyPrefix,
	      func: mapFunction,
	      context: mapContext,
	      count: 0
	    };
	  }
	}

	function releaseTraverseContext(traverseContext) {
	  traverseContext.result = null;
	  traverseContext.keyPrefix = null;
	  traverseContext.func = null;
	  traverseContext.context = null;
	  traverseContext.count = 0;

	  if (traverseContextPool.length < POOL_SIZE) {
	    traverseContextPool.push(traverseContext);
	  }
	}
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */


	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  var invokeCallback = false;

	  if (children === null) {
	    invokeCallback = true;
	  } else {
	    switch (type) {
	      case 'string':
	      case 'number':
	        invokeCallback = true;
	        break;

	      case 'object':
	        switch (children.$$typeof) {
	          case REACT_ELEMENT_TYPE:
	          case REACT_PORTAL_TYPE:
	            invokeCallback = true;
	        }

	    }
	  }

	  if (invokeCallback) {
	    callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.

	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);

	    if (typeof iteratorFn === 'function') {

	      {
	        // Warn about using Maps as children
	        if (iteratorFn === children.entries) {
	          if (!didWarnAboutMaps) {
	            warn('Using Maps as children is deprecated and will be removed in ' + 'a future major release. Consider converting children to ' + 'an array of keyed ReactElements instead.');
	          }

	          didWarnAboutMaps = true;
	        }
	      }

	      var iterator = iteratorFn.call(children);
	      var step;
	      var ii = 0;

	      while (!(step = iterator.next()).done) {
	        child = step.value;
	        nextName = nextNamePrefix + getComponentKey(child, ii++);
	        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	      }
	    } else if (type === 'object') {
	      var addendum = '';

	      {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
	      }

	      var childrenString = '' + children;

	      {
	        {
	          throw Error( "Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + ")." + addendum );
	        }
	      }
	    }
	  }

	  return subtreeCount;
	}
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */


	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */


	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (typeof component === 'object' && component !== null && component.key != null) {
	    // Explicit key
	    return escape(component.key);
	  } // Implicit key determined by the index in the set


	  return index.toString(36);
	}

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;
	  func.call(context, child, bookKeeping.count++);
	}
	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */


	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }

	  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  releaseTraverseContext(traverseContext);
	}

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;
	  var mappedChild = func.call(context, child, bookKeeping.count++);

	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
	      return c;
	    });
	  } else if (mappedChild != null) {
	    if (isValidElement(mappedChild)) {
	      mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }

	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';

	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }

	  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  releaseTraverseContext(traverseContext);
	}
	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */


	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }

	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}
	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrencount
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */


	function countChildren(children) {
	  return traverseAllChildren(children, function () {
	    return null;
	  }, null);
	}
	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
	 */


	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
	    return child;
	  });
	  return result;
	}
	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */


	function onlyChild(children) {
	  if (!isValidElement(children)) {
	    {
	      throw Error( "React.Children.only expected to receive a single React element child." );
	    }
	  }

	  return children;
	}

	function createContext(defaultValue, calculateChangedBits) {
	  if (calculateChangedBits === undefined) {
	    calculateChangedBits = null;
	  } else {
	    {
	      if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {
	        error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
	      }
	    }
	  }

	  var context = {
	    $$typeof: REACT_CONTEXT_TYPE,
	    _calculateChangedBits: calculateChangedBits,
	    // As a workaround to support multiple concurrent renderers, we categorize
	    // some renderers as primary and others as secondary. We only expect
	    // there to be two concurrent renderers at most: React Native (primary) and
	    // Fabric (secondary); React DOM (primary) and React ART (secondary).
	    // Secondary renderers store their context values on separate fields.
	    _currentValue: defaultValue,
	    _currentValue2: defaultValue,
	    // Used to track how many concurrent renderers this context currently
	    // supports within in a single renderer. Such as parallel server rendering.
	    _threadCount: 0,
	    // These are circular
	    Provider: null,
	    Consumer: null
	  };
	  context.Provider = {
	    $$typeof: REACT_PROVIDER_TYPE,
	    _context: context
	  };
	  var hasWarnedAboutUsingNestedContextConsumers = false;
	  var hasWarnedAboutUsingConsumerProvider = false;

	  {
	    // A separate object, but proxies back to the original context object for
	    // backwards compatibility. It has a different $$typeof, so we can properly
	    // warn for the incorrect usage of Context as a Consumer.
	    var Consumer = {
	      $$typeof: REACT_CONTEXT_TYPE,
	      _context: context,
	      _calculateChangedBits: context._calculateChangedBits
	    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

	    Object.defineProperties(Consumer, {
	      Provider: {
	        get: function () {
	          if (!hasWarnedAboutUsingConsumerProvider) {
	            hasWarnedAboutUsingConsumerProvider = true;

	            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
	          }

	          return context.Provider;
	        },
	        set: function (_Provider) {
	          context.Provider = _Provider;
	        }
	      },
	      _currentValue: {
	        get: function () {
	          return context._currentValue;
	        },
	        set: function (_currentValue) {
	          context._currentValue = _currentValue;
	        }
	      },
	      _currentValue2: {
	        get: function () {
	          return context._currentValue2;
	        },
	        set: function (_currentValue2) {
	          context._currentValue2 = _currentValue2;
	        }
	      },
	      _threadCount: {
	        get: function () {
	          return context._threadCount;
	        },
	        set: function (_threadCount) {
	          context._threadCount = _threadCount;
	        }
	      },
	      Consumer: {
	        get: function () {
	          if (!hasWarnedAboutUsingNestedContextConsumers) {
	            hasWarnedAboutUsingNestedContextConsumers = true;

	            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
	          }

	          return context.Consumer;
	        }
	      }
	    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

	    context.Consumer = Consumer;
	  }

	  {
	    context._currentRenderer = null;
	    context._currentRenderer2 = null;
	  }

	  return context;
	}

	function lazy(ctor) {
	  var lazyType = {
	    $$typeof: REACT_LAZY_TYPE,
	    _ctor: ctor,
	    // React uses these fields to store the result.
	    _status: -1,
	    _result: null
	  };

	  {
	    // In production, this would just set it on the object.
	    var defaultProps;
	    var propTypes;
	    Object.defineProperties(lazyType, {
	      defaultProps: {
	        configurable: true,
	        get: function () {
	          return defaultProps;
	        },
	        set: function (newDefaultProps) {
	          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

	          defaultProps = newDefaultProps; // Match production behavior more closely:

	          Object.defineProperty(lazyType, 'defaultProps', {
	            enumerable: true
	          });
	        }
	      },
	      propTypes: {
	        configurable: true,
	        get: function () {
	          return propTypes;
	        },
	        set: function (newPropTypes) {
	          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

	          propTypes = newPropTypes; // Match production behavior more closely:

	          Object.defineProperty(lazyType, 'propTypes', {
	            enumerable: true
	          });
	        }
	      }
	    });
	  }

	  return lazyType;
	}

	function forwardRef(render) {
	  {
	    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
	      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
	    } else if (typeof render !== 'function') {
	      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
	    } else {
	      if (render.length !== 0 && render.length !== 2) {
	        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
	      }
	    }

	    if (render != null) {
	      if (render.defaultProps != null || render.propTypes != null) {
	        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
	      }
	    }
	  }

	  return {
	    $$typeof: REACT_FORWARD_REF_TYPE,
	    render: render
	  };
	}

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	}

	function memo(type, compare) {
	  {
	    if (!isValidElementType(type)) {
	      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
	    }
	  }

	  return {
	    $$typeof: REACT_MEMO_TYPE,
	    type: type,
	    compare: compare === undefined ? null : compare
	  };
	}

	function resolveDispatcher() {
	  var dispatcher = ReactCurrentDispatcher.current;

	  if (!(dispatcher !== null)) {
	    {
	      throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem." );
	    }
	  }

	  return dispatcher;
	}

	function useContext(Context, unstable_observedBits) {
	  var dispatcher = resolveDispatcher();

	  {
	    if (unstable_observedBits !== undefined) {
	      error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '');
	    } // TODO: add a more generic warning for invalid values.


	    if (Context._context !== undefined) {
	      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
	      // and nobody should be using this in existing code.

	      if (realContext.Consumer === Context) {
	        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
	      } else if (realContext.Provider === Context) {
	        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
	      }
	    }
	  }

	  return dispatcher.useContext(Context, unstable_observedBits);
	}
	function useState(initialState) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useState(initialState);
	}
	function useReducer(reducer, initialArg, init) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useReducer(reducer, initialArg, init);
	}
	function useRef(initialValue) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useRef(initialValue);
	}
	function useEffect(create, deps) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useEffect(create, deps);
	}
	function useLayoutEffect(create, deps) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useLayoutEffect(create, deps);
	}
	function useCallback(callback, deps) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useCallback(callback, deps);
	}
	function useMemo(create, deps) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useMemo(create, deps);
	}
	function useImperativeHandle(ref, create, deps) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useImperativeHandle(ref, create, deps);
	}
	function useDebugValue(value, formatterFn) {
	  {
	    var dispatcher = resolveDispatcher();
	    return dispatcher.useDebugValue(value, formatterFn);
	  }
	}

	var propTypesMisspellWarningShown;

	{
	  propTypesMisspellWarningShown = false;
	}

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = getComponentName(ReactCurrentOwner.current.type);

	    if (name) {
	      return '\n\nCheck the render method of `' + name + '`.';
	    }
	  }

	  return '';
	}

	function getSourceInfoErrorAddendum(source) {
	  if (source !== undefined) {
	    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
	    var lineNumber = source.lineNumber;
	    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
	  }

	  return '';
	}

	function getSourceInfoErrorAddendumForProps(elementProps) {
	  if (elementProps !== null && elementProps !== undefined) {
	    return getSourceInfoErrorAddendum(elementProps.__source);
	  }

	  return '';
	}
	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */


	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();

	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

	    if (parentName) {
	      info = "\n\nCheck the top-level render call using <" + parentName + ">.";
	    }
	  }

	  return info;
	}
	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */


	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }

	  element._store.validated = true;
	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

	  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
	    return;
	  }

	  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.

	  var childOwner = '';

	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
	  }

	  setCurrentlyValidatingElement(element);

	  {
	    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
	  }

	  setCurrentlyValidatingElement(null);
	}
	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */


	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }

	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];

	      if (isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);

	    if (typeof iteratorFn === 'function') {
	      // Entry iterators used to provide implicit keys,
	      // but now we print a separate warning for them later.
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;

	        while (!(step = iterator.next()).done) {
	          if (isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}
	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */


	function validatePropTypes(element) {
	  {
	    var type = element.type;

	    if (type === null || type === undefined || typeof type === 'string') {
	      return;
	    }

	    var name = getComponentName(type);
	    var propTypes;

	    if (typeof type === 'function') {
	      propTypes = type.propTypes;
	    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
	    // Inner props are checked in the reconciler.
	    type.$$typeof === REACT_MEMO_TYPE)) {
	      propTypes = type.propTypes;
	    } else {
	      return;
	    }

	    if (propTypes) {
	      setCurrentlyValidatingElement(element);
	      checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
	      setCurrentlyValidatingElement(null);
	    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
	      propTypesMisspellWarningShown = true;

	      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
	    }

	    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
	      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
	    }
	  }
	}
	/**
	 * Given a fragment, validate that it can only be provided with fragment props
	 * @param {ReactElement} fragment
	 */


	function validateFragmentProps(fragment) {
	  {
	    setCurrentlyValidatingElement(fragment);
	    var keys = Object.keys(fragment.props);

	    for (var i = 0; i < keys.length; i++) {
	      var key = keys[i];

	      if (key !== 'children' && key !== 'key') {
	        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

	        break;
	      }
	    }

	    if (fragment.ref !== null) {
	      error('Invalid attribute `ref` supplied to `React.Fragment`.');
	    }

	    setCurrentlyValidatingElement(null);
	  }
	}
	function createElementWithValidation(type, props, children) {
	  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
	  // succeed and there will likely be errors in render.

	  if (!validType) {
	    var info = '';

	    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
	    }

	    var sourceInfo = getSourceInfoErrorAddendumForProps(props);

	    if (sourceInfo) {
	      info += sourceInfo;
	    } else {
	      info += getDeclarationErrorAddendum();
	    }

	    var typeString;

	    if (type === null) {
	      typeString = 'null';
	    } else if (Array.isArray(type)) {
	      typeString = 'array';
	    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
	      typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
	      info = ' Did you accidentally export a JSX literal instead of a component?';
	    } else {
	      typeString = typeof type;
	    }

	    {
	      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
	    }
	  }

	  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
	  // TODO: Drop this when these are no longer allowed as the type argument.

	  if (element == null) {
	    return element;
	  } // Skip key warning if the type isn't valid since our key validation logic
	  // doesn't expect a non-string/function type and can throw confusing errors.
	  // We don't want exception behavior to differ between dev and prod.
	  // (Rendering will throw with a helpful message and as soon as the type is
	  // fixed, the key warnings will appear.)


	  if (validType) {
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], type);
	    }
	  }

	  if (type === REACT_FRAGMENT_TYPE) {
	    validateFragmentProps(element);
	  } else {
	    validatePropTypes(element);
	  }

	  return element;
	}
	var didWarnAboutDeprecatedCreateFactory = false;
	function createFactoryWithValidation(type) {
	  var validatedFactory = createElementWithValidation.bind(null, type);
	  validatedFactory.type = type;

	  {
	    if (!didWarnAboutDeprecatedCreateFactory) {
	      didWarnAboutDeprecatedCreateFactory = true;

	      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
	    } // Legacy hook: remove it


	    Object.defineProperty(validatedFactory, 'type', {
	      enumerable: false,
	      get: function () {
	        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');

	        Object.defineProperty(this, 'type', {
	          value: type
	        });
	        return type;
	      }
	    });
	  }

	  return validatedFactory;
	}
	function cloneElementWithValidation(element, props, children) {
	  var newElement = cloneElement.apply(this, arguments);

	  for (var i = 2; i < arguments.length; i++) {
	    validateChildKeys(arguments[i], newElement.type);
	  }

	  validatePropTypes(newElement);
	  return newElement;
	}

	{

	  try {
	    var frozenObject = Object.freeze({});
	    var testMap = new Map([[frozenObject, null]]);
	    var testSet = new Set([frozenObject]); // This is necessary for Rollup to not consider these unused.
	    // https://github.com/rollup/rollup/issues/1771
	    // TODO: we can remove these if Rollup fixes the bug.

	    testMap.set(0, 0);
	    testSet.add(0);
	  } catch (e) {
	  }
	}

	var createElement$1 =  createElementWithValidation ;
	var cloneElement$1 =  cloneElementWithValidation ;
	var createFactory =  createFactoryWithValidation ;
	var Children = {
	  map: mapChildren,
	  forEach: forEachChildren,
	  count: countChildren,
	  toArray: toArray,
	  only: onlyChild
	};

	exports.Children = Children;
	exports.Component = Component;
	exports.Fragment = REACT_FRAGMENT_TYPE;
	exports.Profiler = REACT_PROFILER_TYPE;
	exports.PureComponent = PureComponent;
	exports.StrictMode = REACT_STRICT_MODE_TYPE;
	exports.Suspense = REACT_SUSPENSE_TYPE;
	exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
	exports.cloneElement = cloneElement$1;
	exports.createContext = createContext;
	exports.createElement = createElement$1;
	exports.createFactory = createFactory;
	exports.createRef = createRef;
	exports.forwardRef = forwardRef;
	exports.isValidElement = isValidElement;
	exports.lazy = lazy;
	exports.memo = memo;
	exports.useCallback = useCallback;
	exports.useContext = useContext;
	exports.useDebugValue = useDebugValue;
	exports.useEffect = useEffect;
	exports.useImperativeHandle = useImperativeHandle;
	exports.useLayoutEffect = useLayoutEffect;
	exports.useMemo = useMemo;
	exports.useReducer = useReducer;
	exports.useRef = useRef;
	exports.useState = useState;
	exports.version = ReactVersion;
	  })();
	}
	});
	var react_development_1 = react_development.Children;
	var react_development_2 = react_development.Component;
	var react_development_3 = react_development.Fragment;
	var react_development_4 = react_development.Profiler;
	var react_development_5 = react_development.PureComponent;
	var react_development_6 = react_development.StrictMode;
	var react_development_7 = react_development.Suspense;
	var react_development_8 = react_development.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
	var react_development_9 = react_development.cloneElement;
	var react_development_10 = react_development.createContext;
	var react_development_11 = react_development.createElement;
	var react_development_12 = react_development.createFactory;
	var react_development_13 = react_development.createRef;
	var react_development_14 = react_development.forwardRef;
	var react_development_15 = react_development.isValidElement;
	var react_development_16 = react_development.lazy;
	var react_development_17 = react_development.memo;
	var react_development_18 = react_development.useCallback;
	var react_development_19 = react_development.useContext;
	var react_development_20 = react_development.useDebugValue;
	var react_development_21 = react_development.useEffect;
	var react_development_22 = react_development.useImperativeHandle;
	var react_development_23 = react_development.useLayoutEffect;
	var react_development_24 = react_development.useMemo;
	var react_development_25 = react_development.useReducer;
	var react_development_26 = react_development.useRef;
	var react_development_27 = react_development.useState;
	var react_development_28 = react_development.version;

	var react = createCommonjsModule(function (module) {

	{
	  module.exports = react_development;
	}
	});
	var react_1 = react.Children;
	var react_2 = react.Component;
	var react_3 = react.PropTypes;
	var react_4 = react.createElement;
	var react_5 = react.useEffect;
	var react_6 = react.useState;
	var react_7 = react.useRef;
	var react_8 = react.useContext;
	var react_9 = react.useMemo;
	var react_10 = react.useDebugValue;
	var react_11 = react.useCallback;
	var react_12 = react.useLayoutEffect;
	var react_13 = react.PureComponent;
	var react_14 = react.createContext;

	var scheduler_development = createCommonjsModule(function (module, exports) {



	{
	  (function() {

	var enableSchedulerDebugging = false;
	var enableProfiling = true;

	var requestHostCallback;
	var requestHostTimeout;
	var cancelHostTimeout;
	var shouldYieldToHost;
	var requestPaint;

	if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive
	// implementation using setTimeout.
	typeof window === 'undefined' || // Check if MessageChannel is supported, too.
	typeof MessageChannel !== 'function') {
	  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
	  // fallback to a naive implementation.
	  var _callback = null;
	  var _timeoutID = null;

	  var _flushCallback = function () {
	    if (_callback !== null) {
	      try {
	        var currentTime = exports.unstable_now();
	        var hasRemainingTime = true;

	        _callback(hasRemainingTime, currentTime);

	        _callback = null;
	      } catch (e) {
	        setTimeout(_flushCallback, 0);
	        throw e;
	      }
	    }
	  };

	  var initialTime = Date.now();

	  exports.unstable_now = function () {
	    return Date.now() - initialTime;
	  };

	  requestHostCallback = function (cb) {
	    if (_callback !== null) {
	      // Protect against re-entrancy.
	      setTimeout(requestHostCallback, 0, cb);
	    } else {
	      _callback = cb;
	      setTimeout(_flushCallback, 0);
	    }
	  };

	  requestHostTimeout = function (cb, ms) {
	    _timeoutID = setTimeout(cb, ms);
	  };

	  cancelHostTimeout = function () {
	    clearTimeout(_timeoutID);
	  };

	  shouldYieldToHost = function () {
	    return false;
	  };

	  requestPaint = exports.unstable_forceFrameRate = function () {};
	} else {
	  // Capture local references to native APIs, in case a polyfill overrides them.
	  var performance = window.performance;
	  var _Date = window.Date;
	  var _setTimeout = window.setTimeout;
	  var _clearTimeout = window.clearTimeout;

	  if (typeof console !== 'undefined') {
	    // TODO: Scheduler no longer requires these methods to be polyfilled. But
	    // maybe we want to continue warning if they don't exist, to preserve the
	    // option to rely on it in the future?
	    var requestAnimationFrame = window.requestAnimationFrame;
	    var cancelAnimationFrame = window.cancelAnimationFrame; // TODO: Remove fb.me link

	    if (typeof requestAnimationFrame !== 'function') {
	      // Using console['error'] to evade Babel and ESLint
	      console['error']("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
	    }

	    if (typeof cancelAnimationFrame !== 'function') {
	      // Using console['error'] to evade Babel and ESLint
	      console['error']("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
	    }
	  }

	  if (typeof performance === 'object' && typeof performance.now === 'function') {
	    exports.unstable_now = function () {
	      return performance.now();
	    };
	  } else {
	    var _initialTime = _Date.now();

	    exports.unstable_now = function () {
	      return _Date.now() - _initialTime;
	    };
	  }

	  var isMessageLoopRunning = false;
	  var scheduledHostCallback = null;
	  var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
	  // thread, like user events. By default, it yields multiple times per frame.
	  // It does not attempt to align with frame boundaries, since most tasks don't
	  // need to be frame aligned; for those that do, use requestAnimationFrame.

	  var yieldInterval = 5;
	  var deadline = 0; // TODO: Make this configurable

	  {
	    // `isInputPending` is not available. Since we have no way of knowing if
	    // there's pending input, always yield at the end of the frame.
	    shouldYieldToHost = function () {
	      return exports.unstable_now() >= deadline;
	    }; // Since we yield every frame regardless, `requestPaint` has no effect.


	    requestPaint = function () {};
	  }

	  exports.unstable_forceFrameRate = function (fps) {
	    if (fps < 0 || fps > 125) {
	      // Using console['error'] to evade Babel and ESLint
	      console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');
	      return;
	    }

	    if (fps > 0) {
	      yieldInterval = Math.floor(1000 / fps);
	    } else {
	      // reset the framerate
	      yieldInterval = 5;
	    }
	  };

	  var performWorkUntilDeadline = function () {
	    if (scheduledHostCallback !== null) {
	      var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
	      // cycle. This means there's always time remaining at the beginning of
	      // the message event.

	      deadline = currentTime + yieldInterval;
	      var hasTimeRemaining = true;

	      try {
	        var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);

	        if (!hasMoreWork) {
	          isMessageLoopRunning = false;
	          scheduledHostCallback = null;
	        } else {
	          // If there's more work, schedule the next message event at the end
	          // of the preceding one.
	          port.postMessage(null);
	        }
	      } catch (error) {
	        // If a scheduler task throws, exit the current browser task so the
	        // error can be observed.
	        port.postMessage(null);
	        throw error;
	      }
	    } else {
	      isMessageLoopRunning = false;
	    } // Yielding to the browser will give it a chance to paint, so we can
	  };

	  var channel = new MessageChannel();
	  var port = channel.port2;
	  channel.port1.onmessage = performWorkUntilDeadline;

	  requestHostCallback = function (callback) {
	    scheduledHostCallback = callback;

	    if (!isMessageLoopRunning) {
	      isMessageLoopRunning = true;
	      port.postMessage(null);
	    }
	  };

	  requestHostTimeout = function (callback, ms) {
	    taskTimeoutID = _setTimeout(function () {
	      callback(exports.unstable_now());
	    }, ms);
	  };

	  cancelHostTimeout = function () {
	    _clearTimeout(taskTimeoutID);

	    taskTimeoutID = -1;
	  };
	}

	function push(heap, node) {
	  var index = heap.length;
	  heap.push(node);
	  siftUp(heap, node, index);
	}
	function peek(heap) {
	  var first = heap[0];
	  return first === undefined ? null : first;
	}
	function pop(heap) {
	  var first = heap[0];

	  if (first !== undefined) {
	    var last = heap.pop();

	    if (last !== first) {
	      heap[0] = last;
	      siftDown(heap, last, 0);
	    }

	    return first;
	  } else {
	    return null;
	  }
	}

	function siftUp(heap, node, i) {
	  var index = i;

	  while (true) {
	    var parentIndex = index - 1 >>> 1;
	    var parent = heap[parentIndex];

	    if (parent !== undefined && compare(parent, node) > 0) {
	      // The parent is larger. Swap positions.
	      heap[parentIndex] = node;
	      heap[index] = parent;
	      index = parentIndex;
	    } else {
	      // The parent is smaller. Exit.
	      return;
	    }
	  }
	}

	function siftDown(heap, node, i) {
	  var index = i;
	  var length = heap.length;

	  while (index < length) {
	    var leftIndex = (index + 1) * 2 - 1;
	    var left = heap[leftIndex];
	    var rightIndex = leftIndex + 1;
	    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

	    if (left !== undefined && compare(left, node) < 0) {
	      if (right !== undefined && compare(right, left) < 0) {
	        heap[index] = right;
	        heap[rightIndex] = node;
	        index = rightIndex;
	      } else {
	        heap[index] = left;
	        heap[leftIndex] = node;
	        index = leftIndex;
	      }
	    } else if (right !== undefined && compare(right, node) < 0) {
	      heap[index] = right;
	      heap[rightIndex] = node;
	      index = rightIndex;
	    } else {
	      // Neither child is smaller. Exit.
	      return;
	    }
	  }
	}

	function compare(a, b) {
	  // Compare sort index first, then task id.
	  var diff = a.sortIndex - b.sortIndex;
	  return diff !== 0 ? diff : a.id - b.id;
	}

	// TODO: Use symbols?
	var NoPriority = 0;
	var ImmediatePriority = 1;
	var UserBlockingPriority = 2;
	var NormalPriority = 3;
	var LowPriority = 4;
	var IdlePriority = 5;

	var runIdCounter = 0;
	var mainThreadIdCounter = 0;
	var profilingStateSize = 4;
	var sharedProfilingBuffer =  // $FlowFixMe Flow doesn't know about SharedArrayBuffer
	typeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer
	typeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9
	;
	var profilingState =  sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks

	var PRIORITY = 0;
	var CURRENT_TASK_ID = 1;
	var CURRENT_RUN_ID = 2;
	var QUEUE_SIZE = 3;

	{
	  profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue
	  // array might include canceled tasks.

	  profilingState[QUEUE_SIZE] = 0;
	  profilingState[CURRENT_TASK_ID] = 0;
	} // Bytes per element is 4


	var INITIAL_EVENT_LOG_SIZE = 131072;
	var MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes

	var eventLogSize = 0;
	var eventLogBuffer = null;
	var eventLog = null;
	var eventLogIndex = 0;
	var TaskStartEvent = 1;
	var TaskCompleteEvent = 2;
	var TaskErrorEvent = 3;
	var TaskCancelEvent = 4;
	var TaskRunEvent = 5;
	var TaskYieldEvent = 6;
	var SchedulerSuspendEvent = 7;
	var SchedulerResumeEvent = 8;

	function logEvent(entries) {
	  if (eventLog !== null) {
	    var offset = eventLogIndex;
	    eventLogIndex += entries.length;

	    if (eventLogIndex + 1 > eventLogSize) {
	      eventLogSize *= 2;

	      if (eventLogSize > MAX_EVENT_LOG_SIZE) {
	        // Using console['error'] to evade Babel and ESLint
	        console['error']("Scheduler Profiling: Event log exceeded maximum size. Don't " + 'forget to call `stopLoggingProfilingEvents()`.');
	        stopLoggingProfilingEvents();
	        return;
	      }

	      var newEventLog = new Int32Array(eventLogSize * 4);
	      newEventLog.set(eventLog);
	      eventLogBuffer = newEventLog.buffer;
	      eventLog = newEventLog;
	    }

	    eventLog.set(entries, offset);
	  }
	}

	function startLoggingProfilingEvents() {
	  eventLogSize = INITIAL_EVENT_LOG_SIZE;
	  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
	  eventLog = new Int32Array(eventLogBuffer);
	  eventLogIndex = 0;
	}
	function stopLoggingProfilingEvents() {
	  var buffer = eventLogBuffer;
	  eventLogSize = 0;
	  eventLogBuffer = null;
	  eventLog = null;
	  eventLogIndex = 0;
	  return buffer;
	}
	function markTaskStart(task, ms) {
	  {
	    profilingState[QUEUE_SIZE]++;

	    if (eventLog !== null) {
	      // performance.now returns a float, representing milliseconds. When the
	      // event is logged, it's coerced to an int. Convert to microseconds to
	      // maintain extra degrees of precision.
	      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);
	    }
	  }
	}
	function markTaskCompleted(task, ms) {
	  {
	    profilingState[PRIORITY] = NoPriority;
	    profilingState[CURRENT_TASK_ID] = 0;
	    profilingState[QUEUE_SIZE]--;

	    if (eventLog !== null) {
	      logEvent([TaskCompleteEvent, ms * 1000, task.id]);
	    }
	  }
	}
	function markTaskCanceled(task, ms) {
	  {
	    profilingState[QUEUE_SIZE]--;

	    if (eventLog !== null) {
	      logEvent([TaskCancelEvent, ms * 1000, task.id]);
	    }
	  }
	}
	function markTaskErrored(task, ms) {
	  {
	    profilingState[PRIORITY] = NoPriority;
	    profilingState[CURRENT_TASK_ID] = 0;
	    profilingState[QUEUE_SIZE]--;

	    if (eventLog !== null) {
	      logEvent([TaskErrorEvent, ms * 1000, task.id]);
	    }
	  }
	}
	function markTaskRun(task, ms) {
	  {
	    runIdCounter++;
	    profilingState[PRIORITY] = task.priorityLevel;
	    profilingState[CURRENT_TASK_ID] = task.id;
	    profilingState[CURRENT_RUN_ID] = runIdCounter;

	    if (eventLog !== null) {
	      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);
	    }
	  }
	}
	function markTaskYield(task, ms) {
	  {
	    profilingState[PRIORITY] = NoPriority;
	    profilingState[CURRENT_TASK_ID] = 0;
	    profilingState[CURRENT_RUN_ID] = 0;

	    if (eventLog !== null) {
	      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);
	    }
	  }
	}
	function markSchedulerSuspended(ms) {
	  {
	    mainThreadIdCounter++;

	    if (eventLog !== null) {
	      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);
	    }
	  }
	}
	function markSchedulerUnsuspended(ms) {
	  {
	    if (eventLog !== null) {
	      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);
	    }
	  }
	}

	/* eslint-disable no-var */
	// Math.pow(2, 30) - 1
	// 0b111111111111111111111111111111

	var maxSigned31BitInt = 1073741823; // Times out immediately

	var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

	var USER_BLOCKING_PRIORITY = 250;
	var NORMAL_PRIORITY_TIMEOUT = 5000;
	var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

	var IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap

	var taskQueue = [];
	var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

	var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
	var currentTask = null;
	var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.

	var isPerformingWork = false;
	var isHostCallbackScheduled = false;
	var isHostTimeoutScheduled = false;

	function advanceTimers(currentTime) {
	  // Check for tasks that are no longer delayed and add them to the queue.
	  var timer = peek(timerQueue);

	  while (timer !== null) {
	    if (timer.callback === null) {
	      // Timer was cancelled.
	      pop(timerQueue);
	    } else if (timer.startTime <= currentTime) {
	      // Timer fired. Transfer to the task queue.
	      pop(timerQueue);
	      timer.sortIndex = timer.expirationTime;
	      push(taskQueue, timer);

	      {
	        markTaskStart(timer, currentTime);
	        timer.isQueued = true;
	      }
	    } else {
	      // Remaining timers are pending.
	      return;
	    }

	    timer = peek(timerQueue);
	  }
	}

	function handleTimeout(currentTime) {
	  isHostTimeoutScheduled = false;
	  advanceTimers(currentTime);

	  if (!isHostCallbackScheduled) {
	    if (peek(taskQueue) !== null) {
	      isHostCallbackScheduled = true;
	      requestHostCallback(flushWork);
	    } else {
	      var firstTimer = peek(timerQueue);

	      if (firstTimer !== null) {
	        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
	      }
	    }
	  }
	}

	function flushWork(hasTimeRemaining, initialTime) {
	  {
	    markSchedulerUnsuspended(initialTime);
	  } // We'll need a host callback the next time work is scheduled.


	  isHostCallbackScheduled = false;

	  if (isHostTimeoutScheduled) {
	    // We scheduled a timeout but it's no longer needed. Cancel it.
	    isHostTimeoutScheduled = false;
	    cancelHostTimeout();
	  }

	  isPerformingWork = true;
	  var previousPriorityLevel = currentPriorityLevel;

	  try {
	    if (enableProfiling) {
	      try {
	        return workLoop(hasTimeRemaining, initialTime);
	      } catch (error) {
	        if (currentTask !== null) {
	          var currentTime = exports.unstable_now();
	          markTaskErrored(currentTask, currentTime);
	          currentTask.isQueued = false;
	        }

	        throw error;
	      }
	    } else {
	      // No catch in prod codepath.
	      return workLoop(hasTimeRemaining, initialTime);
	    }
	  } finally {
	    currentTask = null;
	    currentPriorityLevel = previousPriorityLevel;
	    isPerformingWork = false;

	    {
	      var _currentTime = exports.unstable_now();

	      markSchedulerSuspended(_currentTime);
	    }
	  }
	}

	function workLoop(hasTimeRemaining, initialTime) {
	  var currentTime = initialTime;
	  advanceTimers(currentTime);
	  currentTask = peek(taskQueue);

	  while (currentTask !== null && !(enableSchedulerDebugging )) {
	    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
	      // This currentTask hasn't expired, and we've reached the deadline.
	      break;
	    }

	    var callback = currentTask.callback;

	    if (callback !== null) {
	      currentTask.callback = null;
	      currentPriorityLevel = currentTask.priorityLevel;
	      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
	      markTaskRun(currentTask, currentTime);
	      var continuationCallback = callback(didUserCallbackTimeout);
	      currentTime = exports.unstable_now();

	      if (typeof continuationCallback === 'function') {
	        currentTask.callback = continuationCallback;
	        markTaskYield(currentTask, currentTime);
	      } else {
	        {
	          markTaskCompleted(currentTask, currentTime);
	          currentTask.isQueued = false;
	        }

	        if (currentTask === peek(taskQueue)) {
	          pop(taskQueue);
	        }
	      }

	      advanceTimers(currentTime);
	    } else {
	      pop(taskQueue);
	    }

	    currentTask = peek(taskQueue);
	  } // Return whether there's additional work


	  if (currentTask !== null) {
	    return true;
	  } else {
	    var firstTimer = peek(timerQueue);

	    if (firstTimer !== null) {
	      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
	    }

	    return false;
	  }
	}

	function unstable_runWithPriority(priorityLevel, eventHandler) {
	  switch (priorityLevel) {
	    case ImmediatePriority:
	    case UserBlockingPriority:
	    case NormalPriority:
	    case LowPriority:
	    case IdlePriority:
	      break;

	    default:
	      priorityLevel = NormalPriority;
	  }

	  var previousPriorityLevel = currentPriorityLevel;
	  currentPriorityLevel = priorityLevel;

	  try {
	    return eventHandler();
	  } finally {
	    currentPriorityLevel = previousPriorityLevel;
	  }
	}

	function unstable_next(eventHandler) {
	  var priorityLevel;

	  switch (currentPriorityLevel) {
	    case ImmediatePriority:
	    case UserBlockingPriority:
	    case NormalPriority:
	      // Shift down to normal priority
	      priorityLevel = NormalPriority;
	      break;

	    default:
	      // Anything lower than normal priority should remain at the current level.
	      priorityLevel = currentPriorityLevel;
	      break;
	  }

	  var previousPriorityLevel = currentPriorityLevel;
	  currentPriorityLevel = priorityLevel;

	  try {
	    return eventHandler();
	  } finally {
	    currentPriorityLevel = previousPriorityLevel;
	  }
	}

	function unstable_wrapCallback(callback) {
	  var parentPriorityLevel = currentPriorityLevel;
	  return function () {
	    // This is a fork of runWithPriority, inlined for performance.
	    var previousPriorityLevel = currentPriorityLevel;
	    currentPriorityLevel = parentPriorityLevel;

	    try {
	      return callback.apply(this, arguments);
	    } finally {
	      currentPriorityLevel = previousPriorityLevel;
	    }
	  };
	}

	function timeoutForPriorityLevel(priorityLevel) {
	  switch (priorityLevel) {
	    case ImmediatePriority:
	      return IMMEDIATE_PRIORITY_TIMEOUT;

	    case UserBlockingPriority:
	      return USER_BLOCKING_PRIORITY;

	    case IdlePriority:
	      return IDLE_PRIORITY;

	    case LowPriority:
	      return LOW_PRIORITY_TIMEOUT;

	    case NormalPriority:
	    default:
	      return NORMAL_PRIORITY_TIMEOUT;
	  }
	}

	function unstable_scheduleCallback(priorityLevel, callback, options) {
	  var currentTime = exports.unstable_now();
	  var startTime;
	  var timeout;

	  if (typeof options === 'object' && options !== null) {
	    var delay = options.delay;

	    if (typeof delay === 'number' && delay > 0) {
	      startTime = currentTime + delay;
	    } else {
	      startTime = currentTime;
	    }

	    timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);
	  } else {
	    timeout = timeoutForPriorityLevel(priorityLevel);
	    startTime = currentTime;
	  }

	  var expirationTime = startTime + timeout;
	  var newTask = {
	    id: taskIdCounter++,
	    callback: callback,
	    priorityLevel: priorityLevel,
	    startTime: startTime,
	    expirationTime: expirationTime,
	    sortIndex: -1
	  };

	  {
	    newTask.isQueued = false;
	  }

	  if (startTime > currentTime) {
	    // This is a delayed task.
	    newTask.sortIndex = startTime;
	    push(timerQueue, newTask);

	    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
	      // All tasks are delayed, and this is the task with the earliest delay.
	      if (isHostTimeoutScheduled) {
	        // Cancel an existing timeout.
	        cancelHostTimeout();
	      } else {
	        isHostTimeoutScheduled = true;
	      } // Schedule a timeout.


	      requestHostTimeout(handleTimeout, startTime - currentTime);
	    }
	  } else {
	    newTask.sortIndex = expirationTime;
	    push(taskQueue, newTask);

	    {
	      markTaskStart(newTask, currentTime);
	      newTask.isQueued = true;
	    } // Schedule a host callback, if needed. If we're already performing work,
	    // wait until the next time we yield.


	    if (!isHostCallbackScheduled && !isPerformingWork) {
	      isHostCallbackScheduled = true;
	      requestHostCallback(flushWork);
	    }
	  }

	  return newTask;
	}

	function unstable_pauseExecution() {
	}

	function unstable_continueExecution() {

	  if (!isHostCallbackScheduled && !isPerformingWork) {
	    isHostCallbackScheduled = true;
	    requestHostCallback(flushWork);
	  }
	}

	function unstable_getFirstCallbackNode() {
	  return peek(taskQueue);
	}

	function unstable_cancelCallback(task) {
	  {
	    if (task.isQueued) {
	      var currentTime = exports.unstable_now();
	      markTaskCanceled(task, currentTime);
	      task.isQueued = false;
	    }
	  } // Null out the callback to indicate the task has been canceled. (Can't
	  // remove from the queue because you can't remove arbitrary nodes from an
	  // array based heap, only the first one.)


	  task.callback = null;
	}

	function unstable_getCurrentPriorityLevel() {
	  return currentPriorityLevel;
	}

	function unstable_shouldYield() {
	  var currentTime = exports.unstable_now();
	  advanceTimers(currentTime);
	  var firstTask = peek(taskQueue);
	  return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();
	}

	var unstable_requestPaint = requestPaint;
	var unstable_Profiling =  {
	  startLoggingProfilingEvents: startLoggingProfilingEvents,
	  stopLoggingProfilingEvents: stopLoggingProfilingEvents,
	  sharedProfilingBuffer: sharedProfilingBuffer
	} ;

	exports.unstable_IdlePriority = IdlePriority;
	exports.unstable_ImmediatePriority = ImmediatePriority;
	exports.unstable_LowPriority = LowPriority;
	exports.unstable_NormalPriority = NormalPriority;
	exports.unstable_Profiling = unstable_Profiling;
	exports.unstable_UserBlockingPriority = UserBlockingPriority;
	exports.unstable_cancelCallback = unstable_cancelCallback;
	exports.unstable_continueExecution = unstable_continueExecution;
	exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
	exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
	exports.unstable_next = unstable_next;
	exports.unstable_pauseExecution = unstable_pauseExecution;
	exports.unstable_requestPaint = unstable_requestPaint;
	exports.unstable_runWithPriority = unstable_runWithPriority;
	exports.unstable_scheduleCallback = unstable_scheduleCallback;
	exports.unstable_shouldYield = unstable_shouldYield;
	exports.unstable_wrapCallback = unstable_wrapCallback;
	  })();
	}
	});
	var scheduler_development_1 = scheduler_development.unstable_now;
	var scheduler_development_2 = scheduler_development.unstable_forceFrameRate;
	var scheduler_development_3 = scheduler_development.unstable_IdlePriority;
	var scheduler_development_4 = scheduler_development.unstable_ImmediatePriority;
	var scheduler_development_5 = scheduler_development.unstable_LowPriority;
	var scheduler_development_6 = scheduler_development.unstable_NormalPriority;
	var scheduler_development_7 = scheduler_development.unstable_Profiling;
	var scheduler_development_8 = scheduler_development.unstable_UserBlockingPriority;
	var scheduler_development_9 = scheduler_development.unstable_cancelCallback;
	var scheduler_development_10 = scheduler_development.unstable_continueExecution;
	var scheduler_development_11 = scheduler_development.unstable_getCurrentPriorityLevel;
	var scheduler_development_12 = scheduler_development.unstable_getFirstCallbackNode;
	var scheduler_development_13 = scheduler_development.unstable_next;
	var scheduler_development_14 = scheduler_development.unstable_pauseExecution;
	var scheduler_development_15 = scheduler_development.unstable_requestPaint;
	var scheduler_development_16 = scheduler_development.unstable_runWithPriority;
	var scheduler_development_17 = scheduler_development.unstable_scheduleCallback;
	var scheduler_development_18 = scheduler_development.unstable_shouldYield;
	var scheduler_development_19 = scheduler_development.unstable_wrapCallback;

	var scheduler = createCommonjsModule(function (module) {

	{
	  module.exports = scheduler_development;
	}
	});

	var schedulerTracing_development = createCommonjsModule(function (module, exports) {



	{
	  (function() {

	var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

	var interactionIDCounter = 0;
	var threadIDCounter = 0; // Set of currently traced interactions.
	// Interactions "stack"–
	// Meaning that newly traced interactions are appended to the previously active set.
	// When an interaction goes out of scope, the previous set (if any) is restored.

	exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

	exports.__subscriberRef = null;

	{
	  exports.__interactionsRef = {
	    current: new Set()
	  };
	  exports.__subscriberRef = {
	    current: null
	  };
	}
	function unstable_clear(callback) {

	  var prevInteractions = exports.__interactionsRef.current;
	  exports.__interactionsRef.current = new Set();

	  try {
	    return callback();
	  } finally {
	    exports.__interactionsRef.current = prevInteractions;
	  }
	}
	function unstable_getCurrent() {
	  {
	    return exports.__interactionsRef.current;
	  }
	}
	function unstable_getThreadID() {
	  return ++threadIDCounter;
	}
	function unstable_trace(name, timestamp, callback) {
	  var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

	  var interaction = {
	    __count: 1,
	    id: interactionIDCounter++,
	    name: name,
	    timestamp: timestamp
	  };
	  var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
	  // To do that, clone the current interactions.
	  // The previous set will be restored upon completion.

	  var interactions = new Set(prevInteractions);
	  interactions.add(interaction);
	  exports.__interactionsRef.current = interactions;
	  var subscriber = exports.__subscriberRef.current;
	  var returnValue;

	  try {
	    if (subscriber !== null) {
	      subscriber.onInteractionTraced(interaction);
	    }
	  } finally {
	    try {
	      if (subscriber !== null) {
	        subscriber.onWorkStarted(interactions, threadID);
	      }
	    } finally {
	      try {
	        returnValue = callback();
	      } finally {
	        exports.__interactionsRef.current = prevInteractions;

	        try {
	          if (subscriber !== null) {
	            subscriber.onWorkStopped(interactions, threadID);
	          }
	        } finally {
	          interaction.__count--; // If no async work was scheduled for this interaction,
	          // Notify subscribers that it's completed.

	          if (subscriber !== null && interaction.__count === 0) {
	            subscriber.onInteractionScheduledWorkCompleted(interaction);
	          }
	        }
	      }
	    }
	  }

	  return returnValue;
	}
	function unstable_wrap(callback) {
	  var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

	  var wrappedInteractions = exports.__interactionsRef.current;
	  var subscriber = exports.__subscriberRef.current;

	  if (subscriber !== null) {
	    subscriber.onWorkScheduled(wrappedInteractions, threadID);
	  } // Update the pending async work count for the current interactions.
	  // Update after calling subscribers in case of error.


	  wrappedInteractions.forEach(function (interaction) {
	    interaction.__count++;
	  });
	  var hasRun = false;

	  function wrapped() {
	    var prevInteractions = exports.__interactionsRef.current;
	    exports.__interactionsRef.current = wrappedInteractions;
	    subscriber = exports.__subscriberRef.current;

	    try {
	      var returnValue;

	      try {
	        if (subscriber !== null) {
	          subscriber.onWorkStarted(wrappedInteractions, threadID);
	        }
	      } finally {
	        try {
	          returnValue = callback.apply(undefined, arguments);
	        } finally {
	          exports.__interactionsRef.current = prevInteractions;

	          if (subscriber !== null) {
	            subscriber.onWorkStopped(wrappedInteractions, threadID);
	          }
	        }
	      }

	      return returnValue;
	    } finally {
	      if (!hasRun) {
	        // We only expect a wrapped function to be executed once,
	        // But in the event that it's executed more than once–
	        // Only decrement the outstanding interaction counts once.
	        hasRun = true; // Update pending async counts for all wrapped interactions.
	        // If this was the last scheduled async work for any of them,
	        // Mark them as completed.

	        wrappedInteractions.forEach(function (interaction) {
	          interaction.__count--;

	          if (subscriber !== null && interaction.__count === 0) {
	            subscriber.onInteractionScheduledWorkCompleted(interaction);
	          }
	        });
	      }
	    }
	  }

	  wrapped.cancel = function cancel() {
	    subscriber = exports.__subscriberRef.current;

	    try {
	      if (subscriber !== null) {
	        subscriber.onWorkCanceled(wrappedInteractions, threadID);
	      }
	    } finally {
	      // Update pending async counts for all wrapped interactions.
	      // If this was the last scheduled async work for any of them,
	      // Mark them as completed.
	      wrappedInteractions.forEach(function (interaction) {
	        interaction.__count--;

	        if (subscriber && interaction.__count === 0) {
	          subscriber.onInteractionScheduledWorkCompleted(interaction);
	        }
	      });
	    }
	  };

	  return wrapped;
	}

	var subscribers = null;

	{
	  subscribers = new Set();
	}

	function unstable_subscribe(subscriber) {
	  {
	    subscribers.add(subscriber);

	    if (subscribers.size === 1) {
	      exports.__subscriberRef.current = {
	        onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
	        onInteractionTraced: onInteractionTraced,
	        onWorkCanceled: onWorkCanceled,
	        onWorkScheduled: onWorkScheduled,
	        onWorkStarted: onWorkStarted,
	        onWorkStopped: onWorkStopped
	      };
	    }
	  }
	}
	function unstable_unsubscribe(subscriber) {
	  {
	    subscribers.delete(subscriber);

	    if (subscribers.size === 0) {
	      exports.__subscriberRef.current = null;
	    }
	  }
	}

	function onInteractionTraced(interaction) {
	  var didCatchError = false;
	  var caughtError = null;
	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onInteractionTraced(interaction);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onInteractionScheduledWorkCompleted(interaction) {
	  var didCatchError = false;
	  var caughtError = null;
	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onInteractionScheduledWorkCompleted(interaction);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onWorkScheduled(interactions, threadID) {
	  var didCatchError = false;
	  var caughtError = null;
	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onWorkScheduled(interactions, threadID);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onWorkStarted(interactions, threadID) {
	  var didCatchError = false;
	  var caughtError = null;
	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onWorkStarted(interactions, threadID);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onWorkStopped(interactions, threadID) {
	  var didCatchError = false;
	  var caughtError = null;
	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onWorkStopped(interactions, threadID);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onWorkCanceled(interactions, threadID) {
	  var didCatchError = false;
	  var caughtError = null;
	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onWorkCanceled(interactions, threadID);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	exports.unstable_clear = unstable_clear;
	exports.unstable_getCurrent = unstable_getCurrent;
	exports.unstable_getThreadID = unstable_getThreadID;
	exports.unstable_subscribe = unstable_subscribe;
	exports.unstable_trace = unstable_trace;
	exports.unstable_unsubscribe = unstable_unsubscribe;
	exports.unstable_wrap = unstable_wrap;
	  })();
	}
	});
	var schedulerTracing_development_1 = schedulerTracing_development.__interactionsRef;
	var schedulerTracing_development_2 = schedulerTracing_development.__subscriberRef;
	var schedulerTracing_development_3 = schedulerTracing_development.unstable_clear;
	var schedulerTracing_development_4 = schedulerTracing_development.unstable_getCurrent;
	var schedulerTracing_development_5 = schedulerTracing_development.unstable_getThreadID;
	var schedulerTracing_development_6 = schedulerTracing_development.unstable_subscribe;
	var schedulerTracing_development_7 = schedulerTracing_development.unstable_trace;
	var schedulerTracing_development_8 = schedulerTracing_development.unstable_unsubscribe;
	var schedulerTracing_development_9 = schedulerTracing_development.unstable_wrap;

	var tracing = createCommonjsModule(function (module) {

	{
	  module.exports = schedulerTracing_development;
	}
	});

	var reactDom_development = createCommonjsModule(function (module, exports) {



	{
	  (function() {

	var React = react;
	var _assign = objectAssign;
	var Scheduler = scheduler;
	var checkPropTypes = checkPropTypes_1;
	var tracing$1 = tracing;

	var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED; // Prevent newer renderers from RTE when used with older react package versions.
	// Current owner and dispatcher used to share the same ref,
	// but PR #14548 split them out to better support the react-debug-tools package.

	if (!ReactSharedInternals.hasOwnProperty('ReactCurrentDispatcher')) {
	  ReactSharedInternals.ReactCurrentDispatcher = {
	    current: null
	  };
	}

	if (!ReactSharedInternals.hasOwnProperty('ReactCurrentBatchConfig')) {
	  ReactSharedInternals.ReactCurrentBatchConfig = {
	    suspense: null
	  };
	}

	// by calls to these methods by a Babel plugin.
	//
	// In PROD (or in packages without access to React internals),
	// they are left as they are instead.

	function warn(format) {
	  {
	    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    printWarning('warn', format, args);
	  }
	}
	function error(format) {
	  {
	    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	      args[_key2 - 1] = arguments[_key2];
	    }

	    printWarning('error', format, args);
	  }
	}

	function printWarning(level, format, args) {
	  // When changing this logic, you might want to also
	  // update consoleWithStackDev.www.js as well.
	  {
	    var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === 'string' && args[args.length - 1].indexOf('\n    in') === 0;

	    if (!hasExistingStack) {
	      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	      var stack = ReactDebugCurrentFrame.getStackAddendum();

	      if (stack !== '') {
	        format += '%s';
	        args = args.concat([stack]);
	      }
	    }

	    var argsWithFormat = args.map(function (item) {
	      return '' + item;
	    }); // Careful: RN currently depends on this prefix

	    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
	    // breaks IE9: https://github.com/facebook/react/issues/13610
	    // eslint-disable-next-line react-internal/no-production-logging

	    Function.prototype.apply.call(console[level], console, argsWithFormat);

	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      throw new Error(message);
	    } catch (x) {}
	  }
	}

	if (!React) {
	  {
	    throw Error( "ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM." );
	  }
	}

	var invokeGuardedCallbackImpl = function (name, func, context, a, b, c, d, e, f) {
	  var funcArgs = Array.prototype.slice.call(arguments, 3);

	  try {
	    func.apply(context, funcArgs);
	  } catch (error) {
	    this.onError(error);
	  }
	};

	{
	  // In DEV mode, we swap out invokeGuardedCallback for a special version
	  // that plays more nicely with the browser's DevTools. The idea is to preserve
	  // "Pause on exceptions" behavior. Because React wraps all user-provided
	  // functions in invokeGuardedCallback, and the production version of
	  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
	  // like caught exceptions, and the DevTools won't pause unless the developer
	  // takes the extra step of enabling pause on caught exceptions. This is
	  // unintuitive, though, because even though React has caught the error, from
	  // the developer's perspective, the error is uncaught.
	  //
	  // To preserve the expected "Pause on exceptions" behavior, we don't use a
	  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
	  // DOM node, and call the user-provided callback from inside an event handler
	  // for that fake event. If the callback throws, the error is "captured" using
	  // a global event handler. But because the error happens in a different
	  // event loop context, it does not interrupt the normal program flow.
	  // Effectively, this gives us try-catch behavior without actually using
	  // try-catch. Neat!
	  // Check that the browser supports the APIs we need to implement our special
	  // DEV version of invokeGuardedCallback
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');

	    var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
	      // If document doesn't exist we know for sure we will crash in this method
	      // when we call document.createEvent(). However this can cause confusing
	      // errors: https://github.com/facebookincubator/create-react-app/issues/3482
	      // So we preemptively throw with a better message instead.
	      if (!(typeof document !== 'undefined')) {
	        {
	          throw Error( "The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous." );
	        }
	      }

	      var evt = document.createEvent('Event'); // Keeps track of whether the user-provided callback threw an error. We
	      // set this to true at the beginning, then set it to false right after
	      // calling the function. If the function errors, `didError` will never be
	      // set to false. This strategy works even if the browser is flaky and
	      // fails to call our global error handler, because it doesn't rely on
	      // the error event at all.

	      var didError = true; // Keeps track of the value of window.event so that we can reset it
	      // during the callback to let user code access window.event in the
	      // browsers that support it.

	      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
	      // dispatching: https://github.com/facebook/react/issues/13688

	      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event'); // Create an event handler for our fake event. We will synchronously
	      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
	      // call the user-provided callback.

	      var funcArgs = Array.prototype.slice.call(arguments, 3);

	      function callCallback() {
	        // We immediately remove the callback from event listeners so that
	        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
	        // nested call would trigger the fake event handlers of any call higher
	        // in the stack.
	        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
	        // window.event assignment in both IE <= 10 as they throw an error
	        // "Member not found" in strict mode, and in Firefox which does not
	        // support window.event.

	        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
	          window.event = windowEvent;
	        }

	        func.apply(context, funcArgs);
	        didError = false;
	      } // Create a global error event handler. We use this to capture the value
	      // that was thrown. It's possible that this error handler will fire more
	      // than once; for example, if non-React code also calls `dispatchEvent`
	      // and a handler for that event throws. We should be resilient to most of
	      // those cases. Even if our error event handler fires more than once, the
	      // last error event is always used. If the callback actually does error,
	      // we know that the last error event is the correct one, because it's not
	      // possible for anything else to have happened in between our callback
	      // erroring and the code that follows the `dispatchEvent` call below. If
	      // the callback doesn't error, but the error event was fired, we know to
	      // ignore it because `didError` will be false, as described above.


	      var error; // Use this to track whether the error event is ever called.

	      var didSetError = false;
	      var isCrossOriginError = false;

	      function handleWindowError(event) {
	        error = event.error;
	        didSetError = true;

	        if (error === null && event.colno === 0 && event.lineno === 0) {
	          isCrossOriginError = true;
	        }

	        if (event.defaultPrevented) {
	          // Some other error handler has prevented default.
	          // Browsers silence the error report if this happens.
	          // We'll remember this to later decide whether to log it or not.
	          if (error != null && typeof error === 'object') {
	            try {
	              error._suppressLogging = true;
	            } catch (inner) {// Ignore.
	            }
	          }
	        }
	      } // Create a fake event type.


	      var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

	      window.addEventListener('error', handleWindowError);
	      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
	      // errors, it will trigger our global error handler.

	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);

	      if (windowEventDescriptor) {
	        Object.defineProperty(window, 'event', windowEventDescriptor);
	      }

	      if (didError) {
	        if (!didSetError) {
	          // The callback errored, but the error event never fired.
	          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
	        } else if (isCrossOriginError) {
	          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
	        }

	        this.onError(error);
	      } // Remove our event listeners


	      window.removeEventListener('error', handleWindowError);
	    };

	    invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
	  }
	}

	var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

	var hasError = false;
	var caughtError = null; // Used by event system to capture/rethrow the first error.

	var hasRethrowError = false;
	var rethrowError = null;
	var reporter = {
	  onError: function (error) {
	    hasError = true;
	    caughtError = error;
	  }
	};
	/**
	 * Call a function while guarding against errors that happens within it.
	 * Returns an error if it throws, otherwise null.
	 *
	 * In production, this is implemented using a try-catch. The reason we don't
	 * use a try-catch directly is so that we can swap out a different
	 * implementation in DEV mode.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} context The context to use when calling the function
	 * @param {...*} args Arguments for function
	 */

	function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
	  hasError = false;
	  caughtError = null;
	  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
	}
	/**
	 * Same as invokeGuardedCallback, but instead of returning an error, it stores
	 * it in a global so it can be rethrown by `rethrowCaughtError` later.
	 * TODO: See if caughtError and rethrowError can be unified.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} context The context to use when calling the function
	 * @param {...*} args Arguments for function
	 */

	function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
	  invokeGuardedCallback.apply(this, arguments);

	  if (hasError) {
	    var error = clearCaughtError();

	    if (!hasRethrowError) {
	      hasRethrowError = true;
	      rethrowError = error;
	    }
	  }
	}
	/**
	 * During execution of guarded functions we will capture the first error which
	 * we will rethrow to be handled by the top level error handler.
	 */

	function rethrowCaughtError() {
	  if (hasRethrowError) {
	    var error = rethrowError;
	    hasRethrowError = false;
	    rethrowError = null;
	    throw error;
	  }
	}
	function hasCaughtError() {
	  return hasError;
	}
	function clearCaughtError() {
	  if (hasError) {
	    var error = caughtError;
	    hasError = false;
	    caughtError = null;
	    return error;
	  } else {
	    {
	      {
	        throw Error( "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }
	  }
	}

	var getFiberCurrentPropsFromNode = null;
	var getInstanceFromNode = null;
	var getNodeFromInstance = null;
	function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
	  getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
	  getInstanceFromNode = getInstanceFromNodeImpl;
	  getNodeFromInstance = getNodeFromInstanceImpl;

	  {
	    if (!getNodeFromInstance || !getInstanceFromNode) {
	      error('EventPluginUtils.setComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.');
	    }
	  }
	}
	var validateEventDispatches;

	{
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;
	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

	    if (instancesIsArr !== listenersIsArr || instancesLen !== listenersLen) {
	      error('EventPluginUtils: Invalid `event`.');
	    }
	  };
	}
	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */


	function executeDispatch(event, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = getNodeFromInstance(inst);
	  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
	  event.currentTarget = null;
	}
	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */

	function executeDispatchesInOrder(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;

	  {
	    validateEventDispatches(event);
	  }

	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      } // Listeners and Instances are two parallel arrays that are always in sync.


	      executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, dispatchListeners, dispatchInstances);
	  }

	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}

	var FunctionComponent = 0;
	var ClassComponent = 1;
	var IndeterminateComponent = 2; // Before we know whether it is function or class

	var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

	var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

	var HostComponent = 5;
	var HostText = 6;
	var Fragment = 7;
	var Mode = 8;
	var ContextConsumer = 9;
	var ContextProvider = 10;
	var ForwardRef = 11;
	var Profiler = 12;
	var SuspenseComponent = 13;
	var MemoComponent = 14;
	var SimpleMemoComponent = 15;
	var LazyComponent = 16;
	var IncompleteClassComponent = 17;
	var DehydratedFragment = 18;
	var SuspenseListComponent = 19;
	var FundamentalComponent = 20;
	var ScopeComponent = 21;
	var Block = 22;

	/**
	 * Injectable ordering of event plugins.
	 */
	var eventPluginOrder = null;
	/**
	 * Injectable mapping from names to event plugin modules.
	 */

	var namesToPlugins = {};
	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */

	function recomputePluginOrdering() {
	  if (!eventPluginOrder) {
	    // Wait until an `eventPluginOrder` is injected.
	    return;
	  }

	  for (var pluginName in namesToPlugins) {
	    var pluginModule = namesToPlugins[pluginName];
	    var pluginIndex = eventPluginOrder.indexOf(pluginName);

	    if (!(pluginIndex > -1)) {
	      {
	        throw Error( "EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`." );
	      }
	    }

	    if (plugins[pluginIndex]) {
	      continue;
	    }

	    if (!pluginModule.extractEvents) {
	      {
	        throw Error( "EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not." );
	      }
	    }

	    plugins[pluginIndex] = pluginModule;
	    var publishedEvents = pluginModule.eventTypes;

	    for (var eventName in publishedEvents) {
	      if (!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)) {
	        {
	          throw Error( "EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`." );
	        }
	      }
	    }
	  }
	}
	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */


	function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
	  if (!!eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	    {
	      throw Error( "EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + eventName + "`." );
	    }
	  }

	  eventNameDispatchConfigs[eventName] = dispatchConfig;
	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
	      }
	    }

	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
	    return true;
	  }

	  return false;
	}
	/**
	 * Publishes a registration name that is used to identify dispatched events.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */


	function publishRegistrationName(registrationName, pluginModule, eventName) {
	  if (!!registrationNameModules[registrationName]) {
	    {
	      throw Error( "EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + registrationName + "`." );
	    }
	  }

	  registrationNameModules[registrationName] = pluginModule;
	  registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

	  {
	    var lowerCasedName = registrationName.toLowerCase();
	    possibleRegistrationNames[lowerCasedName] = registrationName;

	    if (registrationName === 'onDoubleClick') {
	      possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}
	/**
	 * Registers plugins so that they can extract and dispatch events.
	 */

	/**
	 * Ordered list of injected plugins.
	 */


	var plugins = [];
	/**
	 * Mapping from event name to dispatch config
	 */

	var eventNameDispatchConfigs = {};
	/**
	 * Mapping from registration name to plugin module
	 */

	var registrationNameModules = {};
	/**
	 * Mapping from registration name to event name
	 */

	var registrationNameDependencies = {};
	/**
	 * Mapping from lowercase registration names to the properly cased version,
	 * used to warn in the case of missing event handlers. Available
	 * only in true.
	 * @type {Object}
	 */

	var possibleRegistrationNames =  {} ; // Trust the developer to only use possibleRegistrationNames in true

	/**
	 * Injects an ordering of plugins (by plugin name). This allows the ordering
	 * to be decoupled from injection of the actual plugins so that ordering is
	 * always deterministic regardless of packaging, on-the-fly injection, etc.
	 *
	 * @param {array} InjectedEventPluginOrder
	 * @internal
	 */

	function injectEventPluginOrder(injectedEventPluginOrder) {
	  if (!!eventPluginOrder) {
	    {
	      throw Error( "EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React." );
	    }
	  } // Clone the ordering so it cannot be dynamically mutated.


	  eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
	  recomputePluginOrdering();
	}
	/**
	 * Injects plugins to be used by plugin event system. The plugin names must be
	 * in the ordering injected by `injectEventPluginOrder`.
	 *
	 * Plugins can be injected as part of page initialization or on-the-fly.
	 *
	 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	 * @internal
	 */

	function injectEventPluginsByName(injectedNamesToPlugins) {
	  var isOrderingDirty = false;

	  for (var pluginName in injectedNamesToPlugins) {
	    if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	      continue;
	    }

	    var pluginModule = injectedNamesToPlugins[pluginName];

	    if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
	      if (!!namesToPlugins[pluginName]) {
	        {
	          throw Error( "EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`." );
	        }
	      }

	      namesToPlugins[pluginName] = pluginModule;
	      isOrderingDirty = true;
	    }
	  }

	  if (isOrderingDirty) {
	    recomputePluginOrdering();
	  }
	}

	var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');

	var PLUGIN_EVENT_SYSTEM = 1;
	var IS_REPLAYED = 1 << 5;
	var IS_FIRST_ANCESTOR = 1 << 6;

	var restoreImpl = null;
	var restoreTarget = null;
	var restoreQueue = null;

	function restoreStateOfTarget(target) {
	  // We perform this translation at the end of the event loop so that we
	  // always receive the correct fiber here
	  var internalInstance = getInstanceFromNode(target);

	  if (!internalInstance) {
	    // Unmounted
	    return;
	  }

	  if (!(typeof restoreImpl === 'function')) {
	    {
	      throw Error( "setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }

	  var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.

	  if (stateNode) {
	    var _props = getFiberCurrentPropsFromNode(stateNode);

	    restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
	  }
	}

	function setRestoreImplementation(impl) {
	  restoreImpl = impl;
	}
	function enqueueStateRestore(target) {
	  if (restoreTarget) {
	    if (restoreQueue) {
	      restoreQueue.push(target);
	    } else {
	      restoreQueue = [target];
	    }
	  } else {
	    restoreTarget = target;
	  }
	}
	function needsStateRestore() {
	  return restoreTarget !== null || restoreQueue !== null;
	}
	function restoreStateIfNeeded() {
	  if (!restoreTarget) {
	    return;
	  }

	  var target = restoreTarget;
	  var queuedTargets = restoreQueue;
	  restoreTarget = null;
	  restoreQueue = null;
	  restoreStateOfTarget(target);

	  if (queuedTargets) {
	    for (var i = 0; i < queuedTargets.length; i++) {
	      restoreStateOfTarget(queuedTargets[i]);
	    }
	  }
	}

	var enableProfilerTimer = true; // Trace which interactions trigger each commit.

	var enableDeprecatedFlareAPI = false; // Experimental Host Component support.

	var enableFundamentalAPI = false; // Experimental Scope support.
	var warnAboutStringRefs = false;

	// the renderer. Such as when we're dispatching events or if third party
	// libraries need to call batchedUpdates. Eventually, this API will go away when
	// everything is batched by default. We'll then have a similar API to opt-out of
	// scheduled work and instead do synchronous work.
	// Defaults

	var batchedUpdatesImpl = function (fn, bookkeeping) {
	  return fn(bookkeeping);
	};

	var discreteUpdatesImpl = function (fn, a, b, c, d) {
	  return fn(a, b, c, d);
	};

	var flushDiscreteUpdatesImpl = function () {};

	var batchedEventUpdatesImpl = batchedUpdatesImpl;
	var isInsideEventHandler = false;
	var isBatchingEventUpdates = false;

	function finishEventHandler() {
	  // Here we wait until all updates have propagated, which is important
	  // when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  // Then we restore state of any controlled component.
	  var controlledComponentsHavePendingUpdates = needsStateRestore();

	  if (controlledComponentsHavePendingUpdates) {
	    // If a controlled event was fired, we may need to restore the state of
	    // the DOM node back to the controlled value. This is necessary when React
	    // bails out of the update without touching the DOM.
	    flushDiscreteUpdatesImpl();
	    restoreStateIfNeeded();
	  }
	}

	function batchedUpdates(fn, bookkeeping) {
	  if (isInsideEventHandler) {
	    // If we are currently inside another batch, we need to wait until it
	    // fully completes before restoring state.
	    return fn(bookkeeping);
	  }

	  isInsideEventHandler = true;

	  try {
	    return batchedUpdatesImpl(fn, bookkeeping);
	  } finally {
	    isInsideEventHandler = false;
	    finishEventHandler();
	  }
	}
	function batchedEventUpdates(fn, a, b) {
	  if (isBatchingEventUpdates) {
	    // If we are currently inside another batch, we need to wait until it
	    // fully completes before restoring state.
	    return fn(a, b);
	  }

	  isBatchingEventUpdates = true;

	  try {
	    return batchedEventUpdatesImpl(fn, a, b);
	  } finally {
	    isBatchingEventUpdates = false;
	    finishEventHandler();
	  }
	} // This is for the React Flare event system
	function discreteUpdates(fn, a, b, c, d) {
	  var prevIsInsideEventHandler = isInsideEventHandler;
	  isInsideEventHandler = true;

	  try {
	    return discreteUpdatesImpl(fn, a, b, c, d);
	  } finally {
	    isInsideEventHandler = prevIsInsideEventHandler;

	    if (!isInsideEventHandler) {
	      finishEventHandler();
	    }
	  }
	}
	function flushDiscreteUpdatesIfNeeded(timeStamp) {
	  // event.timeStamp isn't overly reliable due to inconsistencies in
	  // how different browsers have historically provided the time stamp.
	  // Some browsers provide high-resolution time stamps for all events,
	  // some provide low-resolution time stamps for all events. FF < 52
	  // even mixes both time stamps together. Some browsers even report
	  // negative time stamps or time stamps that are 0 (iOS9) in some cases.
	  // Given we are only comparing two time stamps with equality (!==),
	  // we are safe from the resolution differences. If the time stamp is 0
	  // we bail-out of preventing the flush, which can affect semantics,
	  // such as if an earlier flush removes or adds event listeners that
	  // are fired in the subsequent flush. However, this is the same
	  // behaviour as we had before this change, so the risks are low.
	  if (!isInsideEventHandler && (!enableDeprecatedFlareAPI  )) {
	    flushDiscreteUpdatesImpl();
	  }
	}
	function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
	  batchedUpdatesImpl = _batchedUpdatesImpl;
	  discreteUpdatesImpl = _discreteUpdatesImpl;
	  flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
	  batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
	}

	var DiscreteEvent = 0;
	var UserBlockingEvent = 1;
	var ContinuousEvent = 2;

	// A reserved attribute.
	// It is handled by React separately and shouldn't be written to the DOM.
	var RESERVED = 0; // A simple string attribute.
	// Attributes that aren't in the whitelist are presumed to have this type.

	var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
	// "enumerated" attributes with "true" and "false" as possible values.
	// When true, it should be set to a "true" string.
	// When false, it should be set to a "false" string.

	var BOOLEANISH_STRING = 2; // A real boolean attribute.
	// When true, it should be present (set either to an empty string or its name).
	// When false, it should be omitted.

	var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
	// When true, it should be present (set either to an empty string or its name).
	// When false, it should be omitted.
	// For any other value, should be present with that value.

	var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
	// When falsy, it should be removed.

	var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
	// When falsy, it should be removed.

	var POSITIVE_NUMERIC = 6;

	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
	/* eslint-enable max-len */

	var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
	var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};
	function isAttributeNameSafe(attributeName) {
	  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
	    return true;
	  }

	  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
	    return false;
	  }

	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }

	  illegalAttributeNameCache[attributeName] = true;

	  {
	    error('Invalid attribute name: `%s`', attributeName);
	  }

	  return false;
	}
	function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
	  if (propertyInfo !== null) {
	    return propertyInfo.type === RESERVED;
	  }

	  if (isCustomComponentTag) {
	    return false;
	  }

	  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
	    return true;
	  }

	  return false;
	}
	function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
	  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
	    return false;
	  }

	  switch (typeof value) {
	    case 'function': // $FlowIssue symbol is perfectly valid here

	    case 'symbol':
	      // eslint-disable-line
	      return true;

	    case 'boolean':
	      {
	        if (isCustomComponentTag) {
	          return false;
	        }

	        if (propertyInfo !== null) {
	          return !propertyInfo.acceptsBooleans;
	        } else {
	          var prefix = name.toLowerCase().slice(0, 5);
	          return prefix !== 'data-' && prefix !== 'aria-';
	        }
	      }

	    default:
	      return false;
	  }
	}
	function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
	  if (value === null || typeof value === 'undefined') {
	    return true;
	  }

	  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
	    return true;
	  }

	  if (isCustomComponentTag) {
	    return false;
	  }

	  if (propertyInfo !== null) {
	    switch (propertyInfo.type) {
	      case BOOLEAN:
	        return !value;

	      case OVERLOADED_BOOLEAN:
	        return value === false;

	      case NUMERIC:
	        return isNaN(value);

	      case POSITIVE_NUMERIC:
	        return isNaN(value) || value < 1;
	    }
	  }

	  return false;
	}
	function getPropertyInfo(name) {
	  return properties.hasOwnProperty(name) ? properties[name] : null;
	}

	function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL) {
	  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
	  this.attributeName = attributeName;
	  this.attributeNamespace = attributeNamespace;
	  this.mustUseProperty = mustUseProperty;
	  this.propertyName = name;
	  this.type = type;
	  this.sanitizeURL = sanitizeURL;
	} // When adding attributes to this list, be sure to also add them to
	// the `possibleStandardNames` module to ensure casing and incorrect
	// name warnings.


	var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

	var reservedProps = ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
	// elements (not just inputs). Now that ReactDOMInput assigns to the
	// defaultValue property -- do we need this?
	'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];

	reservedProps.forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false);
	}); // A few React string attributes have a different name.
	// This is a mapping from React prop names to the attribute names.

	[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
	  var name = _ref[0],
	      attributeName = _ref[1];
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, // attributeName
	  null, // attributeNamespace
	  false);
	}); // These are "enumerated" HTML attributes that accept "true" and "false".
	// In React, we let users pass `true` and `false` even though technically
	// these aren't boolean attributes (they are coerced to strings).

	['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false);
	}); // These are "enumerated" SVG attributes that accept "true" and "false".
	// In React, we let users pass `true` and `false` even though technically
	// these aren't boolean attributes (they are coerced to strings).
	// Since these are SVG attributes, their attribute names are case-sensitive.

	['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false);
	}); // These are HTML boolean attributes.

	['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
	// on the client side because the browsers are inconsistent. Instead we call focus().
	'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
	'itemScope'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false);
	}); // These are the few React props that we set as DOM properties
	// rather than attributes. These are all booleans.

	['checked', // Note: `option.selected` is not updated if `select.multiple` is
	// disabled with `removeAttribute`. We have special logic for handling this.
	'multiple', 'muted', 'selected' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false);
	}); // These are HTML attributes that are "overloaded booleans": they behave like
	// booleans, but can also accept a string value.

	['capture', 'download' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false);
	}); // These are HTML attributes that must be positive numbers.

	['cols', 'rows', 'size', 'span' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false);
	}); // These are HTML attributes that must be numbers.

	['rowSpan', 'start'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false);
	});
	var CAMELIZE = /[\-\:]([a-z])/g;

	var capitalize = function (token) {
	  return token[1].toUpperCase();
	}; // This is a list of all SVG attributes that need special casing, namespacing,
	// or boolean value assignment. Regular attributes that just accept strings
	// and have the same names are omitted, just like in the HTML whitelist.
	// Some of these attributes can be hard to find. This list was created by
	// scraping the MDN documentation.


	['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, null, // attributeNamespace
	  false);
	}); // String SVG attributes with the xlink namespace.

	['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, 'http://www.w3.org/1999/xlink', false);
	}); // String SVG attributes with the xml namespace.

	['xml:base', 'xml:lang', 'xml:space' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, 'http://www.w3.org/XML/1998/namespace', false);
	}); // These attribute exists both in HTML and SVG.
	// The attribute name is case-sensitive in SVG so we can't just use
	// the React name like we do for attributes that exist only in HTML.

	['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
	  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
	  attributeName.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false);
	}); // These attributes accept URLs. These must not allow javascript: URLS.
	// These will also need to accept Trusted Types object in the future.

	var xlinkHref = 'xlinkHref';
	properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty
	'xlink:href', 'http://www.w3.org/1999/xlink', true);
	['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
	  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
	  attributeName.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  true);
	});

	var ReactDebugCurrentFrame = null;

	{
	  ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	} // A javascript: URL can contain leading C0 control or \u0020 SPACE,
	// and any newline or tab are filtered out as if they're not part of the URL.
	// https://url.spec.whatwg.org/#url-parsing
	// Tab or newline are defined as \r\n\t:
	// https://infra.spec.whatwg.org/#ascii-tab-or-newline
	// A C0 control is a code point in the range \u0000 NULL to \u001F
	// INFORMATION SEPARATOR ONE, inclusive:
	// https://infra.spec.whatwg.org/#c0-control-or-space

	/* eslint-disable max-len */


	var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
	var didWarn = false;

	function sanitizeURL(url) {
	  {
	    if (!didWarn && isJavaScriptProtocol.test(url)) {
	      didWarn = true;

	      error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
	    }
	  }
	}

	/**
	 * Get the value for a property on a node. Only used in DEV for SSR validation.
	 * The "expected" argument is used as a hint of what the expected value is.
	 * Some properties have multiple equivalent values.
	 */
	function getValueForProperty(node, name, expected, propertyInfo) {
	  {
	    if (propertyInfo.mustUseProperty) {
	      var propertyName = propertyInfo.propertyName;
	      return node[propertyName];
	    } else {
	      if ( propertyInfo.sanitizeURL) {
	        // If we haven't fully disabled javascript: URLs, and if
	        // the hydration is successful of a javascript: URL, we
	        // still want to warn on the client.
	        sanitizeURL('' + expected);
	      }

	      var attributeName = propertyInfo.attributeName;
	      var stringValue = null;

	      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
	        if (node.hasAttribute(attributeName)) {
	          var value = node.getAttribute(attributeName);

	          if (value === '') {
	            return true;
	          }

	          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	            return value;
	          }

	          if (value === '' + expected) {
	            return expected;
	          }

	          return value;
	        }
	      } else if (node.hasAttribute(attributeName)) {
	        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	          // We had an attribute but shouldn't have had one, so read it
	          // for the error message.
	          return node.getAttribute(attributeName);
	        }

	        if (propertyInfo.type === BOOLEAN) {
	          // If this was a boolean, it doesn't matter what the value is
	          // the fact that we have it is the same as the expected.
	          return expected;
	        } // Even if this property uses a namespace we use getAttribute
	        // because we assume its namespaced name is the same as our config.
	        // To use getAttributeNS we need the local name which we don't have
	        // in our config atm.


	        stringValue = node.getAttribute(attributeName);
	      }

	      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	        return stringValue === null ? expected : stringValue;
	      } else if (stringValue === '' + expected) {
	        return expected;
	      } else {
	        return stringValue;
	      }
	    }
	  }
	}
	/**
	 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
	 * The third argument is used as a hint of what the expected value is. Some
	 * attributes have multiple equivalent values.
	 */

	function getValueForAttribute(node, name, expected) {
	  {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }

	    if (!node.hasAttribute(name)) {
	      return expected === undefined ? undefined : null;
	    }

	    var value = node.getAttribute(name);

	    if (value === '' + expected) {
	      return expected;
	    }

	    return value;
	  }
	}
	/**
	 * Sets the value for a property on a node.
	 *
	 * @param {DOMElement} node
	 * @param {string} name
	 * @param {*} value
	 */

	function setValueForProperty(node, name, value, isCustomComponentTag) {
	  var propertyInfo = getPropertyInfo(name);

	  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
	    return;
	  }

	  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
	    value = null;
	  } // If the prop isn't in the special list, treat it as a simple attribute.


	  if (isCustomComponentTag || propertyInfo === null) {
	    if (isAttributeNameSafe(name)) {
	      var _attributeName = name;

	      if (value === null) {
	        node.removeAttribute(_attributeName);
	      } else {
	        node.setAttribute(_attributeName,  '' + value);
	      }
	    }

	    return;
	  }

	  var mustUseProperty = propertyInfo.mustUseProperty;

	  if (mustUseProperty) {
	    var propertyName = propertyInfo.propertyName;

	    if (value === null) {
	      var type = propertyInfo.type;
	      node[propertyName] = type === BOOLEAN ? false : '';
	    } else {
	      // Contrary to `setAttribute`, object properties are properly
	      // `toString`ed by IE8/9.
	      node[propertyName] = value;
	    }

	    return;
	  } // The rest are treated as attributes with special cases.


	  var attributeName = propertyInfo.attributeName,
	      attributeNamespace = propertyInfo.attributeNamespace;

	  if (value === null) {
	    node.removeAttribute(attributeName);
	  } else {
	    var _type = propertyInfo.type;
	    var attributeValue;

	    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
	      // If attribute type is boolean, we know for sure it won't be an execution sink
	      // and we won't require Trusted Type here.
	      attributeValue = '';
	    } else {
	      // `setAttribute` with objects becomes only `[object]` in IE8/9,
	      // ('' + value) makes it output the correct toString()-value.
	      {
	        attributeValue = '' + value;
	      }

	      if (propertyInfo.sanitizeURL) {
	        sanitizeURL(attributeValue.toString());
	      }
	    }

	    if (attributeNamespace) {
	      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
	    } else {
	      node.setAttribute(attributeName, attributeValue);
	    }
	  }
	}

	var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
	function describeComponentFrame (name, source, ownerName) {
	  var sourceInfo = '';

	  if (source) {
	    var path = source.fileName;
	    var fileName = path.replace(BEFORE_SLASH_RE, '');

	    {
	      // In DEV, include code for a common special case:
	      // prefer "folder/index.js" instead of just "index.js".
	      if (/^index\./.test(fileName)) {
	        var match = path.match(BEFORE_SLASH_RE);

	        if (match) {
	          var pathBeforeSlash = match[1];

	          if (pathBeforeSlash) {
	            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
	            fileName = folderName + '/' + fileName;
	          }
	        }
	      }
	    }

	    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
	  } else if (ownerName) {
	    sourceInfo = ' (created by ' + ownerName + ')';
	  }

	  return '\n    in ' + (name || 'Unknown') + sourceInfo;
	}

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';
	function getIteratorFn(maybeIterable) {
	  if (maybeIterable === null || typeof maybeIterable !== 'object') {
	    return null;
	  }

	  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

	  if (typeof maybeIterator === 'function') {
	    return maybeIterator;
	  }

	  return null;
	}

	var Uninitialized = -1;
	var Pending = 0;
	var Resolved = 1;
	var Rejected = 2;
	function refineResolvedLazyComponent(lazyComponent) {
	  return lazyComponent._status === Resolved ? lazyComponent._result : null;
	}
	function initializeLazyComponentType(lazyComponent) {
	  if (lazyComponent._status === Uninitialized) {
	    lazyComponent._status = Pending;
	    var ctor = lazyComponent._ctor;
	    var thenable = ctor();
	    lazyComponent._result = thenable;
	    thenable.then(function (moduleObject) {
	      if (lazyComponent._status === Pending) {
	        var defaultExport = moduleObject.default;

	        {
	          if (defaultExport === undefined) {
	            error('lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + "const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
	          }
	        }

	        lazyComponent._status = Resolved;
	        lazyComponent._result = defaultExport;
	      }
	    }, function (error) {
	      if (lazyComponent._status === Pending) {
	        lazyComponent._status = Rejected;
	        lazyComponent._result = error;
	      }
	    });
	  }
	}

	function getWrappedName(outerType, innerType, wrapperName) {
	  var functionName = innerType.displayName || innerType.name || '';
	  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
	}

	function getComponentName(type) {
	  if (type == null) {
	    // Host root, text node or just invalid type.
	    return null;
	  }

	  {
	    if (typeof type.tag === 'number') {
	      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
	    }
	  }

	  if (typeof type === 'function') {
	    return type.displayName || type.name || null;
	  }

	  if (typeof type === 'string') {
	    return type;
	  }

	  switch (type) {
	    case REACT_FRAGMENT_TYPE:
	      return 'Fragment';

	    case REACT_PORTAL_TYPE:
	      return 'Portal';

	    case REACT_PROFILER_TYPE:
	      return "Profiler";

	    case REACT_STRICT_MODE_TYPE:
	      return 'StrictMode';

	    case REACT_SUSPENSE_TYPE:
	      return 'Suspense';

	    case REACT_SUSPENSE_LIST_TYPE:
	      return 'SuspenseList';
	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_CONTEXT_TYPE:
	        return 'Context.Consumer';

	      case REACT_PROVIDER_TYPE:
	        return 'Context.Provider';

	      case REACT_FORWARD_REF_TYPE:
	        return getWrappedName(type, type.render, 'ForwardRef');

	      case REACT_MEMO_TYPE:
	        return getComponentName(type.type);

	      case REACT_BLOCK_TYPE:
	        return getComponentName(type.render);

	      case REACT_LAZY_TYPE:
	        {
	          var thenable = type;
	          var resolvedThenable = refineResolvedLazyComponent(thenable);

	          if (resolvedThenable) {
	            return getComponentName(resolvedThenable);
	          }

	          break;
	        }
	    }
	  }

	  return null;
	}

	var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

	function describeFiber(fiber) {
	  switch (fiber.tag) {
	    case HostRoot:
	    case HostPortal:
	    case HostText:
	    case Fragment:
	    case ContextProvider:
	    case ContextConsumer:
	      return '';

	    default:
	      var owner = fiber._debugOwner;
	      var source = fiber._debugSource;
	      var name = getComponentName(fiber.type);
	      var ownerName = null;

	      if (owner) {
	        ownerName = getComponentName(owner.type);
	      }

	      return describeComponentFrame(name, source, ownerName);
	  }
	}

	function getStackByFiberInDevAndProd(workInProgress) {
	  var info = '';
	  var node = workInProgress;

	  do {
	    info += describeFiber(node);
	    node = node.return;
	  } while (node);

	  return info;
	}
	var current = null;
	var isRendering = false;
	function getCurrentFiberOwnerNameInDevOrNull() {
	  {
	    if (current === null) {
	      return null;
	    }

	    var owner = current._debugOwner;

	    if (owner !== null && typeof owner !== 'undefined') {
	      return getComponentName(owner.type);
	    }
	  }

	  return null;
	}
	function getCurrentFiberStackInDev() {
	  {
	    if (current === null) {
	      return '';
	    } // Safe because if current fiber exists, we are reconciling,
	    // and it is guaranteed to be the work-in-progress version.


	    return getStackByFiberInDevAndProd(current);
	  }
	}
	function resetCurrentFiber() {
	  {
	    ReactDebugCurrentFrame$1.getCurrentStack = null;
	    current = null;
	    isRendering = false;
	  }
	}
	function setCurrentFiber(fiber) {
	  {
	    ReactDebugCurrentFrame$1.getCurrentStack = getCurrentFiberStackInDev;
	    current = fiber;
	    isRendering = false;
	  }
	}
	function setIsRendering(rendering) {
	  {
	    isRendering = rendering;
	  }
	}

	// Flow does not allow string concatenation of most non-string types. To work
	// around this limitation, we use an opaque type that can only be obtained by
	// passing the value through getToStringValue first.
	function toString(value) {
	  return '' + value;
	}
	function getToStringValue(value) {
	  switch (typeof value) {
	    case 'boolean':
	    case 'number':
	    case 'object':
	    case 'string':
	    case 'undefined':
	      return value;

	    default:
	      // function, symbol are assigned as empty strings
	      return '';
	  }
	}

	var ReactDebugCurrentFrame$2 = null;
	var ReactControlledValuePropTypes = {
	  checkPropTypes: null
	};

	{
	  ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
	  var hasReadOnlyValue = {
	    button: true,
	    checkbox: true,
	    image: true,
	    hidden: true,
	    radio: true,
	    reset: true,
	    submit: true
	  };
	  var propTypes = {
	    value: function (props, propName, componentName) {
	      if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI ) {
	        return null;
	      }

	      return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	    },
	    checked: function (props, propName, componentName) {
	      if (props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI ) {
	        return null;
	      }

	      return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	    }
	  };
	  /**
	   * Provide a linked `value` attribute for controlled forms. You should not use
	   * this outside of the ReactDOM controlled form components.
	   */

	  ReactControlledValuePropTypes.checkPropTypes = function (tagName, props) {
	    checkPropTypes(propTypes, props, 'prop', tagName, ReactDebugCurrentFrame$2.getStackAddendum);
	  };
	}

	function isCheckable(elem) {
	  var type = elem.type;
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
	}

	function getTracker(node) {
	  return node._valueTracker;
	}

	function detachTracker(node) {
	  node._valueTracker = null;
	}

	function getValueFromNode(node) {
	  var value = '';

	  if (!node) {
	    return value;
	  }

	  if (isCheckable(node)) {
	    value = node.checked ? 'true' : 'false';
	  } else {
	    value = node.value;
	  }

	  return value;
	}

	function trackValueOnNode(node) {
	  var valueField = isCheckable(node) ? 'checked' : 'value';
	  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
	  var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
	  // and don't track value will cause over reporting of changes,
	  // but it's better then a hard failure
	  // (needed for certain tests that spyOn input values and Safari)

	  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
	    return;
	  }

	  var get = descriptor.get,
	      set = descriptor.set;
	  Object.defineProperty(node, valueField, {
	    configurable: true,
	    get: function () {
	      return get.call(this);
	    },
	    set: function (value) {
	      currentValue = '' + value;
	      set.call(this, value);
	    }
	  }); // We could've passed this the first time
	  // but it triggers a bug in IE11 and Edge 14/15.
	  // Calling defineProperty() again should be equivalent.
	  // https://github.com/facebook/react/issues/11768

	  Object.defineProperty(node, valueField, {
	    enumerable: descriptor.enumerable
	  });
	  var tracker = {
	    getValue: function () {
	      return currentValue;
	    },
	    setValue: function (value) {
	      currentValue = '' + value;
	    },
	    stopTracking: function () {
	      detachTracker(node);
	      delete node[valueField];
	    }
	  };
	  return tracker;
	}

	function track(node) {
	  if (getTracker(node)) {
	    return;
	  } // TODO: Once it's just Fiber we can move this to node._wrapperState


	  node._valueTracker = trackValueOnNode(node);
	}
	function updateValueIfChanged(node) {
	  if (!node) {
	    return false;
	  }

	  var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
	  // that trying again will succeed

	  if (!tracker) {
	    return true;
	  }

	  var lastValue = tracker.getValue();
	  var nextValue = getValueFromNode(node);

	  if (nextValue !== lastValue) {
	    tracker.setValue(nextValue);
	    return true;
	  }

	  return false;
	}

	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;

	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}
	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */


	function getHostProps(element, props) {
	  var node = element;
	  var checked = props.checked;

	  var hostProps = _assign({}, props, {
	    defaultChecked: undefined,
	    defaultValue: undefined,
	    value: undefined,
	    checked: checked != null ? checked : node._wrapperState.initialChecked
	  });

	  return hostProps;
	}
	function initWrapperState(element, props) {
	  {
	    ReactControlledValuePropTypes.checkPropTypes('input', props);

	    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	      error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

	      didWarnCheckedDefaultChecked = true;
	    }

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

	      didWarnValueDefaultValue = true;
	    }
	  }

	  var node = element;
	  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
	  node._wrapperState = {
	    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
	    controlled: isControlled(props)
	  };
	}
	function updateChecked(element, props) {
	  var node = element;
	  var checked = props.checked;

	  if (checked != null) {
	    setValueForProperty(node, 'checked', checked, false);
	  }
	}
	function updateWrapper(element, props) {
	  var node = element;

	  {
	    var controlled = isControlled(props);

	    if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	      error('A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);

	      didWarnUncontrolledToControlled = true;
	    }

	    if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	      error('A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);

	      didWarnControlledToUncontrolled = true;
	    }
	  }

	  updateChecked(element, props);
	  var value = getToStringValue(props.value);
	  var type = props.type;

	  if (value != null) {
	    if (type === 'number') {
	      if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
	      // eslint-disable-next-line
	      node.value != value) {
	        node.value = toString(value);
	      }
	    } else if (node.value !== toString(value)) {
	      node.value = toString(value);
	    }
	  } else if (type === 'submit' || type === 'reset') {
	    // Submit/reset inputs need the attribute removed completely to avoid
	    // blank-text buttons.
	    node.removeAttribute('value');
	    return;
	  }

	  {
	    // When syncing the value attribute, the value comes from a cascade of
	    // properties:
	    //  1. The value React property
	    //  2. The defaultValue React property
	    //  3. Otherwise there should be no change
	    if (props.hasOwnProperty('value')) {
	      setDefaultValue(node, props.type, value);
	    } else if (props.hasOwnProperty('defaultValue')) {
	      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
	    }
	  }

	  {
	    // When syncing the checked attribute, it only changes when it needs
	    // to be removed, such as transitioning from a checkbox into a text input
	    if (props.checked == null && props.defaultChecked != null) {
	      node.defaultChecked = !!props.defaultChecked;
	    }
	  }
	}
	function postMountWrapper(element, props, isHydrating) {
	  var node = element; // Do not assign value if it is already set. This prevents user text input
	  // from being lost during SSR hydration.

	  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
	    var type = props.type;
	    var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
	    // default value provided by the browser. See: #12872

	    if (isButton && (props.value === undefined || props.value === null)) {
	      return;
	    }

	    var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
	    // from being lost during SSR hydration.

	    if (!isHydrating) {
	      {
	        // When syncing the value attribute, the value property should use
	        // the wrapperState._initialValue property. This uses:
	        //
	        //   1. The value React property when present
	        //   2. The defaultValue React property when present
	        //   3. An empty string
	        if (initialValue !== node.value) {
	          node.value = initialValue;
	        }
	      }
	    }

	    {
	      // Otherwise, the value attribute is synchronized to the property,
	      // so we assign defaultValue to the same thing as the value property
	      // assignment step above.
	      node.defaultValue = initialValue;
	    }
	  } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	  // this is needed to work around a chrome bug where setting defaultChecked
	  // will sometimes influence the value of checked (even after detachment).
	  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	  // We need to temporarily unset name to avoid disrupting radio button groups.


	  var name = node.name;

	  if (name !== '') {
	    node.name = '';
	  }

	  {
	    // When syncing the checked attribute, both the checked property and
	    // attribute are assigned at the same time using defaultChecked. This uses:
	    //
	    //   1. The checked React property when present
	    //   2. The defaultChecked React property when present
	    //   3. Otherwise, false
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !!node._wrapperState.initialChecked;
	  }

	  if (name !== '') {
	    node.name = name;
	  }
	}
	function restoreControlledState(element, props) {
	  var node = element;
	  updateWrapper(node, props);
	  updateNamedCousins(node, props);
	}

	function updateNamedCousins(rootNode, props) {
	  var name = props.name;

	  if (props.type === 'radio' && name != null) {
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    } // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form. It might not even be in the
	    // document. Let's just use the local `querySelectorAll` to ensure we don't
	    // miss anything.


	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];

	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      } // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.


	      var otherProps = getFiberCurrentPropsFromNode$1(otherNode);

	      if (!otherProps) {
	        {
	          throw Error( "ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported." );
	        }
	      } // We need update the tracked value on the named cousin since the value
	      // was changed but the input saw no event or value set


	      updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.

	      updateWrapper(otherNode, otherProps);
	    }
	  }
	} // In Chrome, assigning defaultValue to certain input types triggers input validation.
	// For number inputs, the display value loses trailing decimal points. For email inputs,
	// Chrome raises "The specified value <x> is not a valid email address".
	//
	// Here we check to see if the defaultValue has actually changed, avoiding these problems
	// when the user is inputting text
	//
	// https://github.com/facebook/react/issues/7253


	function setDefaultValue(node, type, value) {
	  if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
	  type !== 'number' || node.ownerDocument.activeElement !== node) {
	    if (value == null) {
	      node.defaultValue = toString(node._wrapperState.initialValue);
	    } else if (node.defaultValue !== toString(value)) {
	      node.defaultValue = toString(value);
	    }
	  }
	}

	var didWarnSelectedSetOnOption = false;
	var didWarnInvalidChild = false;

	function flattenChildren(children) {
	  var content = ''; // Flatten children. We'll warn if they are invalid
	  // during validateProps() which runs for hydration too.
	  // Note that this would throw on non-element objects.
	  // Elements are stringified (which is normally irrelevant
	  // but matters for <fbt>).

	  React.Children.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }

	    content += child; // Note: we don't warn about invalid children here.
	    // Instead, this is done separately below so that
	    // it happens during the hydration codepath too.
	  });
	  return content;
	}
	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */


	function validateProps(element, props) {
	  {
	    // This mirrors the codepath above, but runs for hydration too.
	    // Warn about invalid children here so that client and hydration are consistent.
	    // TODO: this seems like it could cause a DEV-only throw for hydration
	    // if children contains a non-element object. We should try to avoid that.
	    if (typeof props.children === 'object' && props.children !== null) {
	      React.Children.forEach(props.children, function (child) {
	        if (child == null) {
	          return;
	        }

	        if (typeof child === 'string' || typeof child === 'number') {
	          return;
	        }

	        if (typeof child.type !== 'string') {
	          return;
	        }

	        if (!didWarnInvalidChild) {
	          didWarnInvalidChild = true;

	          error('Only strings and numbers are supported as <option> children.');
	        }
	      });
	    } // TODO: Remove support for `selected` in <option>.


	    if (props.selected != null && !didWarnSelectedSetOnOption) {
	      error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');

	      didWarnSelectedSetOnOption = true;
	    }
	  }
	}
	function postMountWrapper$1(element, props) {
	  // value="" should make a value attribute (#6219)
	  if (props.value != null) {
	    element.setAttribute('value', toString(getToStringValue(props.value)));
	  }
	}
	function getHostProps$1(element, props) {
	  var hostProps = _assign({
	    children: undefined
	  }, props);

	  var content = flattenChildren(props.children);

	  if (content) {
	    hostProps.children = content;
	  }

	  return hostProps;
	}

	var didWarnValueDefaultValue$1;

	{
	  didWarnValueDefaultValue$1 = false;
	}

	function getDeclarationErrorAddendum() {
	  var ownerName = getCurrentFiberOwnerNameInDevOrNull();

	  if (ownerName) {
	    return '\n\nCheck the render method of `' + ownerName + '`.';
	  }

	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];
	/**
	 * Validation function for `value` and `defaultValue`.
	 */

	function checkSelectPropTypes(props) {
	  {
	    ReactControlledValuePropTypes.checkPropTypes('select', props);

	    for (var i = 0; i < valuePropNames.length; i++) {
	      var propName = valuePropNames[i];

	      if (props[propName] == null) {
	        continue;
	      }

	      var isArray = Array.isArray(props[propName]);

	      if (props.multiple && !isArray) {
	        error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
	      } else if (!props.multiple && isArray) {
	        error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
	      }
	    }
	  }
	}

	function updateOptions(node, multiple, propValue, setDefaultSelected) {
	  var options = node.options;

	  if (multiple) {
	    var selectedValues = propValue;
	    var selectedValue = {};

	    for (var i = 0; i < selectedValues.length; i++) {
	      // Prefix to avoid chaos with special keys.
	      selectedValue['$' + selectedValues[i]] = true;
	    }

	    for (var _i = 0; _i < options.length; _i++) {
	      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);

	      if (options[_i].selected !== selected) {
	        options[_i].selected = selected;
	      }

	      if (selected && setDefaultSelected) {
	        options[_i].defaultSelected = true;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    var _selectedValue = toString(getToStringValue(propValue));

	    var defaultSelected = null;

	    for (var _i2 = 0; _i2 < options.length; _i2++) {
	      if (options[_i2].value === _selectedValue) {
	        options[_i2].selected = true;

	        if (setDefaultSelected) {
	          options[_i2].defaultSelected = true;
	        }

	        return;
	      }

	      if (defaultSelected === null && !options[_i2].disabled) {
	        defaultSelected = options[_i2];
	      }
	    }

	    if (defaultSelected !== null) {
	      defaultSelected.selected = true;
	    }
	  }
	}
	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */


	function getHostProps$2(element, props) {
	  return _assign({}, props, {
	    value: undefined
	  });
	}
	function initWrapperState$1(element, props) {
	  var node = element;

	  {
	    checkSelectPropTypes(props);
	  }

	  node._wrapperState = {
	    wasMultiple: !!props.multiple
	  };

	  {
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
	      error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');

	      didWarnValueDefaultValue$1 = true;
	    }
	  }
	}
	function postMountWrapper$2(element, props) {
	  var node = element;
	  node.multiple = !!props.multiple;
	  var value = props.value;

	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  } else if (props.defaultValue != null) {
	    updateOptions(node, !!props.multiple, props.defaultValue, true);
	  }
	}
	function postUpdateWrapper(element, props) {
	  var node = element;
	  var wasMultiple = node._wrapperState.wasMultiple;
	  node._wrapperState.wasMultiple = !!props.multiple;
	  var value = props.value;

	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  } else if (wasMultiple !== !!props.multiple) {
	    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	    if (props.defaultValue != null) {
	      updateOptions(node, !!props.multiple, props.defaultValue, true);
	    } else {
	      // Revert the select back to its default unselected state.
	      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
	    }
	  }
	}
	function restoreControlledState$1(element, props) {
	  var node = element;
	  var value = props.value;

	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  }
	}

	var didWarnValDefaultVal = false;

	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	function getHostProps$3(element, props) {
	  var node = element;

	  if (!(props.dangerouslySetInnerHTML == null)) {
	    {
	      throw Error( "`dangerouslySetInnerHTML` does not make sense on <textarea>." );
	    }
	  } // Always set children to the same thing. In IE9, the selection range will
	  // get reset if `textContent` is mutated.  We could add a check in setTextContent
	  // to only set the value if/when the value differs from the node value (which would
	  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
	  // solution. The value can be a boolean or object so that's why it's forced
	  // to be a string.


	  var hostProps = _assign({}, props, {
	    value: undefined,
	    defaultValue: undefined,
	    children: toString(node._wrapperState.initialValue)
	  });

	  return hostProps;
	}
	function initWrapperState$2(element, props) {
	  var node = element;

	  {
	    ReactControlledValuePropTypes.checkPropTypes('textarea', props);

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	      error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');

	      didWarnValDefaultVal = true;
	    }
	  }

	  var initialValue = props.value; // Only bother fetching default value if we're going to use it

	  if (initialValue == null) {
	    var children = props.children,
	        defaultValue = props.defaultValue;

	    if (children != null) {
	      {
	        error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
	      }

	      {
	        if (!(defaultValue == null)) {
	          {
	            throw Error( "If you supply `defaultValue` on a <textarea>, do not pass children." );
	          }
	        }

	        if (Array.isArray(children)) {
	          if (!(children.length <= 1)) {
	            {
	              throw Error( "<textarea> can only have at most one child." );
	            }
	          }

	          children = children[0];
	        }

	        defaultValue = children;
	      }
	    }

	    if (defaultValue == null) {
	      defaultValue = '';
	    }

	    initialValue = defaultValue;
	  }

	  node._wrapperState = {
	    initialValue: getToStringValue(initialValue)
	  };
	}
	function updateWrapper$1(element, props) {
	  var node = element;
	  var value = getToStringValue(props.value);
	  var defaultValue = getToStringValue(props.defaultValue);

	  if (value != null) {
	    // Cast `value` to a string to ensure the value is set correctly. While
	    // browsers typically do this as necessary, jsdom doesn't.
	    var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

	    if (newValue !== node.value) {
	      node.value = newValue;
	    }

	    if (props.defaultValue == null && node.defaultValue !== newValue) {
	      node.defaultValue = newValue;
	    }
	  }

	  if (defaultValue != null) {
	    node.defaultValue = toString(defaultValue);
	  }
	}
	function postMountWrapper$3(element, props) {
	  var node = element; // This is in postMount because we need access to the DOM node, which is not
	  // available until after the component has mounted.

	  var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
	  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
	  // will populate textContent as well.
	  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

	  if (textContent === node._wrapperState.initialValue) {
	    if (textContent !== '' && textContent !== null) {
	      node.value = textContent;
	    }
	  }
	}
	function restoreControlledState$2(element, props) {
	  // DOM component is still mounted; update
	  updateWrapper$1(element, props);
	}

	var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
	var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
	var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
	var Namespaces = {
	  html: HTML_NAMESPACE,
	  mathml: MATH_NAMESPACE,
	  svg: SVG_NAMESPACE
	}; // Assumes there is no parent namespace.

	function getIntrinsicNamespace(type) {
	  switch (type) {
	    case 'svg':
	      return SVG_NAMESPACE;

	    case 'math':
	      return MATH_NAMESPACE;

	    default:
	      return HTML_NAMESPACE;
	  }
	}
	function getChildNamespace(parentNamespace, type) {
	  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
	    // No (or default) parent namespace: potential entry point.
	    return getIntrinsicNamespace(type);
	  }

	  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
	    // We're leaving SVG.
	    return HTML_NAMESPACE;
	  } // By default, pass namespace below.


	  return parentNamespace;
	}

	/* globals MSApp */

	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */
	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};

	var reusableSVGContainer;
	/**
	 * Set the innerHTML property of a node
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */

	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  if (node.namespaceURI === Namespaces.svg) {

	    if (!('innerHTML' in node)) {
	      // IE does not have innerHTML for SVG nodes, so instead we inject the
	      // new markup in a temp node and then move the child nodes across into
	      // the target node
	      reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	      reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
	      var svgNode = reusableSVGContainer.firstChild;

	      while (node.firstChild) {
	        node.removeChild(node.firstChild);
	      }

	      while (svgNode.firstChild) {
	        node.appendChild(svgNode.firstChild);
	      }

	      return;
	    }
	  }

	  node.innerHTML = html;
	});

	/**
	 * HTML nodeType values that represent the type of the node
	 */
	var ELEMENT_NODE = 1;
	var TEXT_NODE = 3;
	var COMMENT_NODE = 8;
	var DOCUMENT_NODE = 9;
	var DOCUMENT_FRAGMENT_NODE = 11;

	/**
	 * Set the textContent property of a node. For text updates, it's faster
	 * to set the `nodeValue` of the Text node directly instead of using
	 * `.textContent` which will remove the existing node and create a new one.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */

	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;

	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }

	  node.textContent = text;
	};

	// Do not use the below two methods directly!
	// Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
	// (It is the only module that is allowed to access these methods.)
	function unsafeCastStringToDOMTopLevelType(topLevelType) {
	  return topLevelType;
	}
	function unsafeCastDOMTopLevelTypeToString(topLevelType) {
	  return topLevelType;
	}

	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */

	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};
	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  return prefixes;
	}
	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */


	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};
	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */

	var prefixedEventNames = {};
	/**
	 * Element to check for prefixes on.
	 */

	var style = {};
	/**
	 * Bootstrap if a DOM exists.
	 */

	if (canUseDOM) {
	  style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.

	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  } // Same as above


	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}
	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */


	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }

	  var prefixMap = vendorPrefixes[eventName];

	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }

	  return eventName;
	}

	/**
	 * To identify top level events in ReactDOM, we use constants defined by this
	 * module. This is the only module that uses the unsafe* methods to express
	 * that the constants actually correspond to the browser event names. This lets
	 * us save some bundle size by avoiding a top level type -> event name map.
	 * The rest of ReactDOM code should import top level types from this file.
	 */

	var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
	var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
	var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
	var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
	var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
	var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
	var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
	var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
	var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
	var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
	var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
	var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
	var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
	var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
	var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
	var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
	var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
	var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
	var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType('auxclick');
	var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
	var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
	var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
	var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
	var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
	var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
	var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
	var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
	var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
	var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
	var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
	var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
	var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
	var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
	var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
	var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
	var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
	var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
	var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
	var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
	var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
	var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
	var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
	var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
	var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
	var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
	var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
	var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
	var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
	var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
	var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
	var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
	var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
	var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
	var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
	var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');
	var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
	var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
	var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
	var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
	var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
	var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
	var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
	var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
	var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
	var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
	var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
	var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
	var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
	var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
	var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
	var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
	var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
	var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
	var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
	var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
	var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
	var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
	var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
	var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
	var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel'); // List of events that need to be individually attached to media elements.
	// Note that events in this list will *not* be listened to at the top level
	// unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.

	var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];
	function getRawEventName(topLevelType) {
	  return unsafeCastDOMTopLevelTypeToString(topLevelType);
	}

	var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // prettier-ignore

	var elementListenerMap = new PossiblyWeakMap();
	function getListenerMapForElement(element) {
	  var listenerMap = elementListenerMap.get(element);

	  if (listenerMap === undefined) {
	    listenerMap = new Map();
	    elementListenerMap.set(element, listenerMap);
	  }

	  return listenerMap;
	}

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 *
	 * Note that this module is currently shared and assumed to be stateless.
	 * If this becomes an actual Map, that will break.
	 */
	function get(key) {
	  return key._reactInternalFiber;
	}
	function has(key) {
	  return key._reactInternalFiber !== undefined;
	}
	function set(key, value) {
	  key._reactInternalFiber = value;
	}

	// Don't change these two values. They're used by React Dev Tools.
	var NoEffect =
	/*              */
	0;
	var PerformedWork =
	/*         */
	1; // You can change the rest (and add more).

	var Placement =
	/*             */
	2;
	var Update =
	/*                */
	4;
	var PlacementAndUpdate =
	/*    */
	6;
	var Deletion =
	/*              */
	8;
	var ContentReset =
	/*          */
	16;
	var Callback =
	/*              */
	32;
	var DidCapture =
	/*            */
	64;
	var Ref =
	/*                   */
	128;
	var Snapshot =
	/*              */
	256;
	var Passive =
	/*               */
	512;
	var Hydrating =
	/*             */
	1024;
	var HydratingAndUpdate =
	/*    */
	1028; // Passive & Update & Callback & Ref & Snapshot

	var LifecycleEffectMask =
	/*   */
	932; // Union of all host effects

	var HostEffectMask =
	/*        */
	2047;
	var Incomplete =
	/*            */
	2048;
	var ShouldCapture =
	/*         */
	4096;

	var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
	function getNearestMountedFiber(fiber) {
	  var node = fiber;
	  var nearestMounted = fiber;

	  if (!fiber.alternate) {
	    // If there is no alternate, this might be a new tree that isn't inserted
	    // yet. If it is, then it will have a pending insertion effect on it.
	    var nextNode = node;

	    do {
	      node = nextNode;

	      if ((node.effectTag & (Placement | Hydrating)) !== NoEffect) {
	        // This is an insertion or in-progress hydration. The nearest possible
	        // mounted fiber is the parent but we need to continue to figure out
	        // if that one is still mounted.
	        nearestMounted = node.return;
	      }

	      nextNode = node.return;
	    } while (nextNode);
	  } else {
	    while (node.return) {
	      node = node.return;
	    }
	  }

	  if (node.tag === HostRoot) {
	    // TODO: Check if this was a nested HostRoot when used with
	    // renderContainerIntoSubtree.
	    return nearestMounted;
	  } // If we didn't hit the root, that means that we're in an disconnected tree
	  // that has been unmounted.


	  return null;
	}
	function getSuspenseInstanceFromFiber(fiber) {
	  if (fiber.tag === SuspenseComponent) {
	    var suspenseState = fiber.memoizedState;

	    if (suspenseState === null) {
	      var current = fiber.alternate;

	      if (current !== null) {
	        suspenseState = current.memoizedState;
	      }
	    }

	    if (suspenseState !== null) {
	      return suspenseState.dehydrated;
	    }
	  }

	  return null;
	}
	function getContainerFromFiber(fiber) {
	  return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
	}
	function isFiberMounted(fiber) {
	  return getNearestMountedFiber(fiber) === fiber;
	}
	function isMounted(component) {
	  {
	    var owner = ReactCurrentOwner.current;

	    if (owner !== null && owner.tag === ClassComponent) {
	      var ownerFiber = owner;
	      var instance = ownerFiber.stateNode;

	      if (!instance._warnedAboutRefsInRender) {
	        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component');
	      }

	      instance._warnedAboutRefsInRender = true;
	    }
	  }

	  var fiber = get(component);

	  if (!fiber) {
	    return false;
	  }

	  return getNearestMountedFiber(fiber) === fiber;
	}

	function assertIsMounted(fiber) {
	  if (!(getNearestMountedFiber(fiber) === fiber)) {
	    {
	      throw Error( "Unable to find node on an unmounted component." );
	    }
	  }
	}

	function findCurrentFiberUsingSlowPath(fiber) {
	  var alternate = fiber.alternate;

	  if (!alternate) {
	    // If there is no alternate, then we only need to check if it is mounted.
	    var nearestMounted = getNearestMountedFiber(fiber);

	    if (!(nearestMounted !== null)) {
	      {
	        throw Error( "Unable to find node on an unmounted component." );
	      }
	    }

	    if (nearestMounted !== fiber) {
	      return null;
	    }

	    return fiber;
	  } // If we have two possible branches, we'll walk backwards up to the root
	  // to see what path the root points to. On the way we may hit one of the
	  // special cases and we'll deal with them.


	  var a = fiber;
	  var b = alternate;

	  while (true) {
	    var parentA = a.return;

	    if (parentA === null) {
	      // We're at the root.
	      break;
	    }

	    var parentB = parentA.alternate;

	    if (parentB === null) {
	      // There is no alternate. This is an unusual case. Currently, it only
	      // happens when a Suspense component is hidden. An extra fragment fiber
	      // is inserted in between the Suspense fiber and its children. Skip
	      // over this extra fragment fiber and proceed to the next parent.
	      var nextParent = parentA.return;

	      if (nextParent !== null) {
	        a = b = nextParent;
	        continue;
	      } // If there's no parent, we're at the root.


	      break;
	    } // If both copies of the parent fiber point to the same child, we can
	    // assume that the child is current. This happens when we bailout on low
	    // priority: the bailed out fiber's child reuses the current child.


	    if (parentA.child === parentB.child) {
	      var child = parentA.child;

	      while (child) {
	        if (child === a) {
	          // We've determined that A is the current branch.
	          assertIsMounted(parentA);
	          return fiber;
	        }

	        if (child === b) {
	          // We've determined that B is the current branch.
	          assertIsMounted(parentA);
	          return alternate;
	        }

	        child = child.sibling;
	      } // We should never have an alternate for any mounting node. So the only
	      // way this could possibly happen is if this was unmounted, if at all.


	      {
	        {
	          throw Error( "Unable to find node on an unmounted component." );
	        }
	      }
	    }

	    if (a.return !== b.return) {
	      // The return pointer of A and the return pointer of B point to different
	      // fibers. We assume that return pointers never criss-cross, so A must
	      // belong to the child set of A.return, and B must belong to the child
	      // set of B.return.
	      a = parentA;
	      b = parentB;
	    } else {
	      // The return pointers point to the same fiber. We'll have to use the
	      // default, slow path: scan the child sets of each parent alternate to see
	      // which child belongs to which set.
	      //
	      // Search parent A's child set
	      var didFindChild = false;
	      var _child = parentA.child;

	      while (_child) {
	        if (_child === a) {
	          didFindChild = true;
	          a = parentA;
	          b = parentB;
	          break;
	        }

	        if (_child === b) {
	          didFindChild = true;
	          b = parentA;
	          a = parentB;
	          break;
	        }

	        _child = _child.sibling;
	      }

	      if (!didFindChild) {
	        // Search parent B's child set
	        _child = parentB.child;

	        while (_child) {
	          if (_child === a) {
	            didFindChild = true;
	            a = parentB;
	            b = parentA;
	            break;
	          }

	          if (_child === b) {
	            didFindChild = true;
	            b = parentB;
	            a = parentA;
	            break;
	          }

	          _child = _child.sibling;
	        }

	        if (!didFindChild) {
	          {
	            throw Error( "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue." );
	          }
	        }
	      }
	    }

	    if (!(a.alternate === b)) {
	      {
	        throw Error( "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }
	  } // If the root is not a host container, we're in a disconnected tree. I.e.
	  // unmounted.


	  if (!(a.tag === HostRoot)) {
	    {
	      throw Error( "Unable to find node on an unmounted component." );
	    }
	  }

	  if (a.stateNode.current === a) {
	    // We've determined that A is the current branch.
	    return fiber;
	  } // Otherwise B has to be current branch.


	  return alternate;
	}
	function findCurrentHostFiber(parent) {
	  var currentParent = findCurrentFiberUsingSlowPath(parent);

	  if (!currentParent) {
	    return null;
	  } // Next we'll drill down this component to find the first HostComponent/Text.


	  var node = currentParent;

	  while (true) {
	    if (node.tag === HostComponent || node.tag === HostText) {
	      return node;
	    } else if (node.child) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === currentParent) {
	      return null;
	    }

	    while (!node.sibling) {
	      if (!node.return || node.return === currentParent) {
	        return null;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  } // Flow needs the return null here, but ESLint complains about it.
	  // eslint-disable-next-line no-unreachable


	  return null;
	}
	function findCurrentHostFiberWithNoPortals(parent) {
	  var currentParent = findCurrentFiberUsingSlowPath(parent);

	  if (!currentParent) {
	    return null;
	  } // Next we'll drill down this component to find the first HostComponent/Text.


	  var node = currentParent;

	  while (true) {
	    if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI ) {
	      return node;
	    } else if (node.child && node.tag !== HostPortal) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === currentParent) {
	      return null;
	    }

	    while (!node.sibling) {
	      if (!node.return || node.return === currentParent) {
	        return null;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  } // Flow needs the return null here, but ESLint complains about it.
	  // eslint-disable-next-line no-unreachable


	  return null;
	}

	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  if (!(next != null)) {
	    {
	      throw Error( "accumulateInto(...): Accumulated items must not be null or undefined." );
	    }
	  }

	  if (current == null) {
	    return next;
	  } // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).


	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }

	    current.push(next);
	    return current;
	  }

	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 * @param {function} cb Callback invoked with each element or a collection.
	 * @param {?} [scope] Scope used as `this` in a callback.
	 */
	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */

	var eventQueue = null;
	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @private
	 */

	var executeDispatchesAndRelease = function (event) {
	  if (event) {
	    executeDispatchesInOrder(event);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};

	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e);
	};

	function runEventsInBatch(events) {
	  if (events !== null) {
	    eventQueue = accumulateInto(eventQueue, events);
	  } // Set `eventQueue` to null before processing it so that we can tell if more
	  // events get enqueued while processing.


	  var processingEventQueue = eventQueue;
	  eventQueue = null;

	  if (!processingEventQueue) {
	    return;
	  }

	  forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);

	  if (!!eventQueue) {
	    {
	      throw Error( "processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented." );
	    }
	  } // This would be a good time to rethrow if any of the event handlers threw.


	  rethrowCaughtError();
	}

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */

	function getEventTarget(nativeEvent) {
	  // Fallback to nativeEvent.srcElement for IE9
	  // https://github.com/facebook/react/issues/12506
	  var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html


	  return target.nodeType === TEXT_NODE ? target.parentNode : target;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */

	function isEventSupported(eventNameSuffix) {
	  if (!canUseDOM) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  return isSupported;
	}

	/**
	 * Summary of `DOMEventPluginSystem` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactDOMEventListener, which is injected and can therefore support
	 *    pluggable event sources. This is the only work that occurs in the main
	 *    thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginRegistry`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginRegistry` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginRegistry` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|PluginRegistry|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
	var callbackBookkeepingPool = [];

	function releaseTopLevelCallbackBookKeeping(instance) {
	  instance.topLevelType = null;
	  instance.nativeEvent = null;
	  instance.targetInst = null;
	  instance.ancestors.length = 0;

	  if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
	    callbackBookkeepingPool.push(instance);
	  }
	} // Used to store ancestor hierarchy in top level callback


	function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags) {
	  if (callbackBookkeepingPool.length) {
	    var instance = callbackBookkeepingPool.pop();
	    instance.topLevelType = topLevelType;
	    instance.eventSystemFlags = eventSystemFlags;
	    instance.nativeEvent = nativeEvent;
	    instance.targetInst = targetInst;
	    return instance;
	  }

	  return {
	    topLevelType: topLevelType,
	    eventSystemFlags: eventSystemFlags,
	    nativeEvent: nativeEvent,
	    targetInst: targetInst,
	    ancestors: []
	  };
	}
	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */


	function findRootContainerNode(inst) {
	  if (inst.tag === HostRoot) {
	    return inst.stateNode.containerInfo;
	  } // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.


	  while (inst.return) {
	    inst = inst.return;
	  }

	  if (inst.tag !== HostRoot) {
	    // This can happen if we're in a detached tree.
	    return null;
	  }

	  return inst.stateNode.containerInfo;
	}
	/**
	 * Allows registered plugins an opportunity to extract events from top-level
	 * native browser events.
	 *
	 * @return {*} An accumulation of synthetic events.
	 * @internal
	 */


	function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
	  var events = null;

	  for (var i = 0; i < plugins.length; i++) {
	    // Not every plugin in the ordering may be loaded at runtime.
	    var possiblePlugin = plugins[i];

	    if (possiblePlugin) {
	      var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);

	      if (extractedEvents) {
	        events = accumulateInto(events, extractedEvents);
	      }
	    }
	  }

	  return events;
	}

	function runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
	  var events = extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
	  runEventsInBatch(events);
	}

	function handleTopLevel(bookKeeping) {
	  var targetInst = bookKeeping.targetInst; // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.

	  var ancestor = targetInst;

	  do {
	    if (!ancestor) {
	      var ancestors = bookKeeping.ancestors;
	      ancestors.push(ancestor);
	      break;
	    }

	    var root = findRootContainerNode(ancestor);

	    if (!root) {
	      break;
	    }

	    var tag = ancestor.tag;

	    if (tag === HostComponent || tag === HostText) {
	      bookKeeping.ancestors.push(ancestor);
	    }

	    ancestor = getClosestInstanceFromNode(root);
	  } while (ancestor);

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    var eventTarget = getEventTarget(bookKeeping.nativeEvent);
	    var topLevelType = bookKeeping.topLevelType;
	    var nativeEvent = bookKeeping.nativeEvent;
	    var eventSystemFlags = bookKeeping.eventSystemFlags; // If this is the first ancestor, we mark it on the system flags

	    if (i === 0) {
	      eventSystemFlags |= IS_FIRST_ANCESTOR;
	    }

	    runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, eventTarget, eventSystemFlags);
	  }
	}

	function dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst) {
	  var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags);

	  try {
	    // Event queue being processed in the same cycle allows
	    // `preventDefault`.
	    batchedEventUpdates(handleTopLevel, bookKeeping);
	  } finally {
	    releaseTopLevelCallbackBookKeeping(bookKeeping);
	  }
	}
	/**
	 * We listen for bubbled touch events on the document object.
	 *
	 * Firefox v8.01 (and possibly others) exhibited strange behavior when
	 * mounting `onmousemove` events at some node that was not the document
	 * element. The symptoms were that if your mouse is not moving over something
	 * contained within that mount point (for example on the background) the
	 * top-level listeners for `onmousemove` won't be called. However, if you
	 * register the `mousemove` on the document object, then it will of course
	 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	 * top-level listeners to the document object only, at least for these
	 * movement types of events and possibly all events.
	 *
	 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	 *
	 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	 * they bubble to document.
	 *
	 * @param {string} registrationName Name of listener (e.g. `onClick`).
	 * @param {object} mountAt Container where to mount the listener
	 */

	function legacyListenToEvent(registrationName, mountAt) {
	  var listenerMap = getListenerMapForElement(mountAt);
	  var dependencies = registrationNameDependencies[registrationName];

	  for (var i = 0; i < dependencies.length; i++) {
	    var dependency = dependencies[i];
	    legacyListenToTopLevelEvent(dependency, mountAt, listenerMap);
	  }
	}
	function legacyListenToTopLevelEvent(topLevelType, mountAt, listenerMap) {
	  if (!listenerMap.has(topLevelType)) {
	    switch (topLevelType) {
	      case TOP_SCROLL:
	        trapCapturedEvent(TOP_SCROLL, mountAt);
	        break;

	      case TOP_FOCUS:
	      case TOP_BLUR:
	        trapCapturedEvent(TOP_FOCUS, mountAt);
	        trapCapturedEvent(TOP_BLUR, mountAt); // We set the flag for a single dependency later in this function,
	        // but this ensures we mark both as attached rather than just one.

	        listenerMap.set(TOP_BLUR, null);
	        listenerMap.set(TOP_FOCUS, null);
	        break;

	      case TOP_CANCEL:
	      case TOP_CLOSE:
	        if (isEventSupported(getRawEventName(topLevelType))) {
	          trapCapturedEvent(topLevelType, mountAt);
	        }

	        break;

	      case TOP_INVALID:
	      case TOP_SUBMIT:
	      case TOP_RESET:
	        // We listen to them on the target DOM elements.
	        // Some of them bubble so we don't want them to fire twice.
	        break;

	      default:
	        // By default, listen on the top level to all non-media events.
	        // Media events don't bubble so adding the listener wouldn't do anything.
	        var isMediaEvent = mediaEventTypes.indexOf(topLevelType) !== -1;

	        if (!isMediaEvent) {
	          trapBubbledEvent(topLevelType, mountAt);
	        }

	        break;
	    }

	    listenerMap.set(topLevelType, null);
	  }
	}
	function isListeningToAllDependencies(registrationName, mountAt) {
	  var listenerMap = getListenerMapForElement(mountAt);
	  var dependencies = registrationNameDependencies[registrationName];

	  for (var i = 0; i < dependencies.length; i++) {
	    var dependency = dependencies[i];

	    if (!listenerMap.has(dependency)) {
	      return false;
	    }
	  }

	  return true;
	}

	var attemptUserBlockingHydration;
	function setAttemptUserBlockingHydration(fn) {
	  attemptUserBlockingHydration = fn;
	}
	var attemptContinuousHydration;
	function setAttemptContinuousHydration(fn) {
	  attemptContinuousHydration = fn;
	}
	var attemptHydrationAtCurrentPriority;
	function setAttemptHydrationAtCurrentPriority(fn) {
	  attemptHydrationAtCurrentPriority = fn;
	} // TODO: Upgrade this definition once we're on a newer version of Flow that
	var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.

	var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
	// if the last target was dehydrated.

	var queuedFocus = null;
	var queuedDrag = null;
	var queuedMouse = null; // For pointer events there can be one latest event per pointerId.

	var queuedPointers = new Map();
	var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.

	var queuedExplicitHydrationTargets = [];
	function hasQueuedDiscreteEvents() {
	  return queuedDiscreteEvents.length > 0;
	}
	var discreteReplayableEvents = [TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_TOUCH_CANCEL, TOP_TOUCH_END, TOP_TOUCH_START, TOP_AUX_CLICK, TOP_DOUBLE_CLICK, TOP_POINTER_CANCEL, TOP_POINTER_DOWN, TOP_POINTER_UP, TOP_DRAG_END, TOP_DRAG_START, TOP_DROP, TOP_COMPOSITION_END, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_INPUT, TOP_TEXT_INPUT, TOP_CLOSE, TOP_CANCEL, TOP_COPY, TOP_CUT, TOP_PASTE, TOP_CLICK, TOP_CHANGE, TOP_CONTEXT_MENU, TOP_RESET, TOP_SUBMIT];
	var continuousReplayableEvents = [TOP_FOCUS, TOP_BLUR, TOP_DRAG_ENTER, TOP_DRAG_LEAVE, TOP_MOUSE_OVER, TOP_MOUSE_OUT, TOP_POINTER_OVER, TOP_POINTER_OUT, TOP_GOT_POINTER_CAPTURE, TOP_LOST_POINTER_CAPTURE];
	function isReplayableDiscreteEvent(eventType) {
	  return discreteReplayableEvents.indexOf(eventType) > -1;
	}

	function trapReplayableEventForDocument(topLevelType, document, listenerMap) {
	  legacyListenToTopLevelEvent(topLevelType, document, listenerMap);
	}

	function eagerlyTrapReplayableEvents(container, document) {
	  var listenerMapForDoc = getListenerMapForElement(document); // Discrete

	  discreteReplayableEvents.forEach(function (topLevelType) {
	    trapReplayableEventForDocument(topLevelType, document, listenerMapForDoc);
	  }); // Continuous

	  continuousReplayableEvents.forEach(function (topLevelType) {
	    trapReplayableEventForDocument(topLevelType, document, listenerMapForDoc);
	  });
	}

	function createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
	  return {
	    blockedOn: blockedOn,
	    topLevelType: topLevelType,
	    eventSystemFlags: eventSystemFlags | IS_REPLAYED,
	    nativeEvent: nativeEvent,
	    container: container
	  };
	}

	function queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
	  var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
	  queuedDiscreteEvents.push(queuedEvent);
	} // Resets the replaying for this type of continuous event to no event.

	function clearIfContinuousEvent(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case TOP_FOCUS:
	    case TOP_BLUR:
	      queuedFocus = null;
	      break;

	    case TOP_DRAG_ENTER:
	    case TOP_DRAG_LEAVE:
	      queuedDrag = null;
	      break;

	    case TOP_MOUSE_OVER:
	    case TOP_MOUSE_OUT:
	      queuedMouse = null;
	      break;

	    case TOP_POINTER_OVER:
	    case TOP_POINTER_OUT:
	      {
	        var pointerId = nativeEvent.pointerId;
	        queuedPointers.delete(pointerId);
	        break;
	      }

	    case TOP_GOT_POINTER_CAPTURE:
	    case TOP_LOST_POINTER_CAPTURE:
	      {
	        var _pointerId = nativeEvent.pointerId;
	        queuedPointerCaptures.delete(_pointerId);
	        break;
	      }
	  }
	}

	function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
	  if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
	    var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);

	    if (blockedOn !== null) {
	      var _fiber2 = getInstanceFromNode$1(blockedOn);

	      if (_fiber2 !== null) {
	        // Attempt to increase the priority of this target.
	        attemptContinuousHydration(_fiber2);
	      }
	    }

	    return queuedEvent;
	  } // If we have already queued this exact event, then it's because
	  // the different event systems have different DOM event listeners.
	  // We can accumulate the flags and store a single event to be
	  // replayed.


	  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
	  return existingQueuedEvent;
	}

	function queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
	  // These set relatedTarget to null because the replayed event will be treated as if we
	  // moved from outside the window (no target) onto the target once it hydrates.
	  // Instead of mutating we could clone the event.
	  switch (topLevelType) {
	    case TOP_FOCUS:
	      {
	        var focusEvent = nativeEvent;
	        queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, topLevelType, eventSystemFlags, container, focusEvent);
	        return true;
	      }

	    case TOP_DRAG_ENTER:
	      {
	        var dragEvent = nativeEvent;
	        queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, topLevelType, eventSystemFlags, container, dragEvent);
	        return true;
	      }

	    case TOP_MOUSE_OVER:
	      {
	        var mouseEvent = nativeEvent;
	        queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, topLevelType, eventSystemFlags, container, mouseEvent);
	        return true;
	      }

	    case TOP_POINTER_OVER:
	      {
	        var pointerEvent = nativeEvent;
	        var pointerId = pointerEvent.pointerId;
	        queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, topLevelType, eventSystemFlags, container, pointerEvent));
	        return true;
	      }

	    case TOP_GOT_POINTER_CAPTURE:
	      {
	        var _pointerEvent = nativeEvent;
	        var _pointerId2 = _pointerEvent.pointerId;
	        queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, topLevelType, eventSystemFlags, container, _pointerEvent));
	        return true;
	      }
	  }

	  return false;
	} // Check if this target is unblocked. Returns true if it's unblocked.

	function attemptExplicitHydrationTarget(queuedTarget) {
	  // TODO: This function shares a lot of logic with attemptToDispatchEvent.
	  // Try to unify them. It's a bit tricky since it would require two return
	  // values.
	  var targetInst = getClosestInstanceFromNode(queuedTarget.target);

	  if (targetInst !== null) {
	    var nearestMounted = getNearestMountedFiber(targetInst);

	    if (nearestMounted !== null) {
	      var tag = nearestMounted.tag;

	      if (tag === SuspenseComponent) {
	        var instance = getSuspenseInstanceFromFiber(nearestMounted);

	        if (instance !== null) {
	          // We're blocked on hydrating this boundary.
	          // Increase its priority.
	          queuedTarget.blockedOn = instance;
	          Scheduler.unstable_runWithPriority(queuedTarget.priority, function () {
	            attemptHydrationAtCurrentPriority(nearestMounted);
	          });
	          return;
	        }
	      } else if (tag === HostRoot) {
	        var root = nearestMounted.stateNode;

	        if (root.hydrate) {
	          queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
	          // a root other than sync.

	          return;
	        }
	      }
	    }
	  }

	  queuedTarget.blockedOn = null;
	}

	function attemptReplayContinuousQueuedEvent(queuedEvent) {
	  if (queuedEvent.blockedOn !== null) {
	    return false;
	  }

	  var nextBlockedOn = attemptToDispatchEvent(queuedEvent.topLevelType, queuedEvent.eventSystemFlags, queuedEvent.container, queuedEvent.nativeEvent);

	  if (nextBlockedOn !== null) {
	    // We're still blocked. Try again later.
	    var _fiber3 = getInstanceFromNode$1(nextBlockedOn);

	    if (_fiber3 !== null) {
	      attemptContinuousHydration(_fiber3);
	    }

	    queuedEvent.blockedOn = nextBlockedOn;
	    return false;
	  }

	  return true;
	}

	function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
	  if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
	    map.delete(key);
	  }
	}

	function replayUnblockedEvents() {
	  hasScheduledReplayAttempt = false; // First replay discrete events.

	  while (queuedDiscreteEvents.length > 0) {
	    var nextDiscreteEvent = queuedDiscreteEvents[0];

	    if (nextDiscreteEvent.blockedOn !== null) {
	      // We're still blocked.
	      // Increase the priority of this boundary to unblock
	      // the next discrete event.
	      var _fiber4 = getInstanceFromNode$1(nextDiscreteEvent.blockedOn);

	      if (_fiber4 !== null) {
	        attemptUserBlockingHydration(_fiber4);
	      }

	      break;
	    }

	    var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.topLevelType, nextDiscreteEvent.eventSystemFlags, nextDiscreteEvent.container, nextDiscreteEvent.nativeEvent);

	    if (nextBlockedOn !== null) {
	      // We're still blocked. Try again later.
	      nextDiscreteEvent.blockedOn = nextBlockedOn;
	    } else {
	      // We've successfully replayed the first event. Let's try the next one.
	      queuedDiscreteEvents.shift();
	    }
	  } // Next replay any continuous events.


	  if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
	    queuedFocus = null;
	  }

	  if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
	    queuedDrag = null;
	  }

	  if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
	    queuedMouse = null;
	  }

	  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
	  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
	}

	function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
	  if (queuedEvent.blockedOn === unblocked) {
	    queuedEvent.blockedOn = null;

	    if (!hasScheduledReplayAttempt) {
	      hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
	      // now unblocked. This first might not actually be unblocked yet.
	      // We could check it early to avoid scheduling an unnecessary callback.

	      Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
	    }
	  }
	}

	function retryIfBlockedOn(unblocked) {
	  // Mark anything that was blocked on this as no longer blocked
	  // and eligible for a replay.
	  if (queuedDiscreteEvents.length > 0) {
	    scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
	    // worth it because we expect very few discrete events to queue up and once
	    // we are actually fully unblocked it will be fast to replay them.

	    for (var i = 1; i < queuedDiscreteEvents.length; i++) {
	      var queuedEvent = queuedDiscreteEvents[i];

	      if (queuedEvent.blockedOn === unblocked) {
	        queuedEvent.blockedOn = null;
	      }
	    }
	  }

	  if (queuedFocus !== null) {
	    scheduleCallbackIfUnblocked(queuedFocus, unblocked);
	  }

	  if (queuedDrag !== null) {
	    scheduleCallbackIfUnblocked(queuedDrag, unblocked);
	  }

	  if (queuedMouse !== null) {
	    scheduleCallbackIfUnblocked(queuedMouse, unblocked);
	  }

	  var unblock = function (queuedEvent) {
	    return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
	  };

	  queuedPointers.forEach(unblock);
	  queuedPointerCaptures.forEach(unblock);

	  for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
	    var queuedTarget = queuedExplicitHydrationTargets[_i];

	    if (queuedTarget.blockedOn === unblocked) {
	      queuedTarget.blockedOn = null;
	    }
	  }

	  while (queuedExplicitHydrationTargets.length > 0) {
	    var nextExplicitTarget = queuedExplicitHydrationTargets[0];

	    if (nextExplicitTarget.blockedOn !== null) {
	      // We're still blocked.
	      break;
	    } else {
	      attemptExplicitHydrationTarget(nextExplicitTarget);

	      if (nextExplicitTarget.blockedOn === null) {
	        // We're unblocked.
	        queuedExplicitHydrationTargets.shift();
	      }
	    }
	  }
	}

	function addEventBubbleListener(element, eventType, listener) {
	  element.addEventListener(eventType, listener, false);
	}
	function addEventCaptureListener(element, eventType, listener) {
	  element.addEventListener(eventType, listener, true);
	}

	// do it in two places, which duplicates logic
	// and increases the bundle size, we do it all
	// here once. If we remove or refactor the
	// SimpleEventPlugin, we should also remove or
	// update the below line.

	var simpleEventPluginEventTypes = {};
	var topLevelEventsToDispatchConfig = new Map();
	var eventPriorities = new Map(); // We store most of the events in this module in pairs of two strings so we can re-use
	// the code required to apply the same logic for event prioritization and that of the
	// SimpleEventPlugin. This complicates things slightly, but the aim is to reduce code
	// duplication (for which there would be quite a bit). For the events that are not needed
	// for the SimpleEventPlugin (otherDiscreteEvents) we process them separately as an
	// array of top level events.
	// Lastly, we ignore prettier so we can keep the formatting sane.
	// prettier-ignore

	var discreteEventPairsForSimpleEventPlugin = [TOP_BLUR, 'blur', TOP_CANCEL, 'cancel', TOP_CLICK, 'click', TOP_CLOSE, 'close', TOP_CONTEXT_MENU, 'contextMenu', TOP_COPY, 'copy', TOP_CUT, 'cut', TOP_AUX_CLICK, 'auxClick', TOP_DOUBLE_CLICK, 'doubleClick', TOP_DRAG_END, 'dragEnd', TOP_DRAG_START, 'dragStart', TOP_DROP, 'drop', TOP_FOCUS, 'focus', TOP_INPUT, 'input', TOP_INVALID, 'invalid', TOP_KEY_DOWN, 'keyDown', TOP_KEY_PRESS, 'keyPress', TOP_KEY_UP, 'keyUp', TOP_MOUSE_DOWN, 'mouseDown', TOP_MOUSE_UP, 'mouseUp', TOP_PASTE, 'paste', TOP_PAUSE, 'pause', TOP_PLAY, 'play', TOP_POINTER_CANCEL, 'pointerCancel', TOP_POINTER_DOWN, 'pointerDown', TOP_POINTER_UP, 'pointerUp', TOP_RATE_CHANGE, 'rateChange', TOP_RESET, 'reset', TOP_SEEKED, 'seeked', TOP_SUBMIT, 'submit', TOP_TOUCH_CANCEL, 'touchCancel', TOP_TOUCH_END, 'touchEnd', TOP_TOUCH_START, 'touchStart', TOP_VOLUME_CHANGE, 'volumeChange'];
	var otherDiscreteEvents = [TOP_CHANGE, TOP_SELECTION_CHANGE, TOP_TEXT_INPUT, TOP_COMPOSITION_START, TOP_COMPOSITION_END, TOP_COMPOSITION_UPDATE]; // prettier-ignore

	var userBlockingPairsForSimpleEventPlugin = [TOP_DRAG, 'drag', TOP_DRAG_ENTER, 'dragEnter', TOP_DRAG_EXIT, 'dragExit', TOP_DRAG_LEAVE, 'dragLeave', TOP_DRAG_OVER, 'dragOver', TOP_MOUSE_MOVE, 'mouseMove', TOP_MOUSE_OUT, 'mouseOut', TOP_MOUSE_OVER, 'mouseOver', TOP_POINTER_MOVE, 'pointerMove', TOP_POINTER_OUT, 'pointerOut', TOP_POINTER_OVER, 'pointerOver', TOP_SCROLL, 'scroll', TOP_TOGGLE, 'toggle', TOP_TOUCH_MOVE, 'touchMove', TOP_WHEEL, 'wheel']; // prettier-ignore

	var continuousPairsForSimpleEventPlugin = [TOP_ABORT, 'abort', TOP_ANIMATION_END, 'animationEnd', TOP_ANIMATION_ITERATION, 'animationIteration', TOP_ANIMATION_START, 'animationStart', TOP_CAN_PLAY, 'canPlay', TOP_CAN_PLAY_THROUGH, 'canPlayThrough', TOP_DURATION_CHANGE, 'durationChange', TOP_EMPTIED, 'emptied', TOP_ENCRYPTED, 'encrypted', TOP_ENDED, 'ended', TOP_ERROR, 'error', TOP_GOT_POINTER_CAPTURE, 'gotPointerCapture', TOP_LOAD, 'load', TOP_LOADED_DATA, 'loadedData', TOP_LOADED_METADATA, 'loadedMetadata', TOP_LOAD_START, 'loadStart', TOP_LOST_POINTER_CAPTURE, 'lostPointerCapture', TOP_PLAYING, 'playing', TOP_PROGRESS, 'progress', TOP_SEEKING, 'seeking', TOP_STALLED, 'stalled', TOP_SUSPEND, 'suspend', TOP_TIME_UPDATE, 'timeUpdate', TOP_TRANSITION_END, 'transitionEnd', TOP_WAITING, 'waiting'];
	/**
	 * Turns
	 * ['abort', ...]
	 * into
	 * eventTypes = {
	 *   'abort': {
	 *     phasedRegistrationNames: {
	 *       bubbled: 'onAbort',
	 *       captured: 'onAbortCapture',
	 *     },
	 *     dependencies: [TOP_ABORT],
	 *   },
	 *   ...
	 * };
	 * topLevelEventsToDispatchConfig = new Map([
	 *   [TOP_ABORT, { sameConfig }],
	 * ]);
	 */

	function processSimpleEventPluginPairsByPriority(eventTypes, priority) {
	  // As the event types are in pairs of two, we need to iterate
	  // through in twos. The events are in pairs of two to save code
	  // and improve init perf of processing this array, as it will
	  // result in far fewer object allocations and property accesses
	  // if we only use three arrays to process all the categories of
	  // instead of tuples.
	  for (var i = 0; i < eventTypes.length; i += 2) {
	    var topEvent = eventTypes[i];
	    var event = eventTypes[i + 1];
	    var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
	    var onEvent = 'on' + capitalizedEvent;
	    var config = {
	      phasedRegistrationNames: {
	        bubbled: onEvent,
	        captured: onEvent + 'Capture'
	      },
	      dependencies: [topEvent],
	      eventPriority: priority
	    };
	    eventPriorities.set(topEvent, priority);
	    topLevelEventsToDispatchConfig.set(topEvent, config);
	    simpleEventPluginEventTypes[event] = config;
	  }
	}

	function processTopEventPairsByPriority(eventTypes, priority) {
	  for (var i = 0; i < eventTypes.length; i++) {
	    eventPriorities.set(eventTypes[i], priority);
	  }
	} // SimpleEventPlugin


	processSimpleEventPluginPairsByPriority(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
	processSimpleEventPluginPairsByPriority(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
	processSimpleEventPluginPairsByPriority(continuousPairsForSimpleEventPlugin, ContinuousEvent); // Not used by SimpleEventPlugin

	processTopEventPairsByPriority(otherDiscreteEvents, DiscreteEvent);
	function getEventPriorityForPluginSystem(topLevelType) {
	  var priority = eventPriorities.get(topLevelType); // Default to a ContinuousEvent. Note: we might
	  // want to warn if we can't detect the priority
	  // for the event.

	  return priority === undefined ? ContinuousEvent : priority;
	}

	// Intentionally not named imports because Rollup would use dynamic dispatch for
	var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
	    runWithPriority = Scheduler.unstable_runWithPriority; // TODO: can we stop exporting these?

	var _enabled = true;
	function setEnabled(enabled) {
	  _enabled = !!enabled;
	}
	function isEnabled() {
	  return _enabled;
	}
	function trapBubbledEvent(topLevelType, element) {
	  trapEventForPluginEventSystem(element, topLevelType, false);
	}
	function trapCapturedEvent(topLevelType, element) {
	  trapEventForPluginEventSystem(element, topLevelType, true);
	}

	function trapEventForPluginEventSystem(container, topLevelType, capture) {
	  var listener;

	  switch (getEventPriorityForPluginSystem(topLevelType)) {
	    case DiscreteEvent:
	      listener = dispatchDiscreteEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
	      break;

	    case UserBlockingEvent:
	      listener = dispatchUserBlockingUpdate.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
	      break;

	    case ContinuousEvent:
	    default:
	      listener = dispatchEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
	      break;
	  }

	  var rawEventName = getRawEventName(topLevelType);

	  if (capture) {
	    addEventCaptureListener(container, rawEventName, listener);
	  } else {
	    addEventBubbleListener(container, rawEventName, listener);
	  }
	}

	function dispatchDiscreteEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
	  flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
	  discreteUpdates(dispatchEvent, topLevelType, eventSystemFlags, container, nativeEvent);
	}

	function dispatchUserBlockingUpdate(topLevelType, eventSystemFlags, container, nativeEvent) {
	  runWithPriority(UserBlockingPriority, dispatchEvent.bind(null, topLevelType, eventSystemFlags, container, nativeEvent));
	}

	function dispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
	  if (!_enabled) {
	    return;
	  }

	  if (hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(topLevelType)) {
	    // If we already have a queue of discrete events, and this is another discrete
	    // event, then we can't dispatch it regardless of its target, since they
	    // need to dispatch in order.
	    queueDiscreteEvent(null, // Flags that we're not actually blocked on anything as far as we know.
	    topLevelType, eventSystemFlags, container, nativeEvent);
	    return;
	  }

	  var blockedOn = attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent);

	  if (blockedOn === null) {
	    // We successfully dispatched this event.
	    clearIfContinuousEvent(topLevelType, nativeEvent);
	    return;
	  }

	  if (isReplayableDiscreteEvent(topLevelType)) {
	    // This this to be replayed later once the target is available.
	    queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
	    return;
	  }

	  if (queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent)) {
	    return;
	  } // We need to clear only if we didn't queue because
	  // queueing is accummulative.


	  clearIfContinuousEvent(topLevelType, nativeEvent); // This is not replayable so we'll invoke it but without a target,
	  // in case the event system needs to trace it.

	  {
	    dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, null);
	  }
	} // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.

	function attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
	  // TODO: Warn if _enabled is false.
	  var nativeEventTarget = getEventTarget(nativeEvent);
	  var targetInst = getClosestInstanceFromNode(nativeEventTarget);

	  if (targetInst !== null) {
	    var nearestMounted = getNearestMountedFiber(targetInst);

	    if (nearestMounted === null) {
	      // This tree has been unmounted already. Dispatch without a target.
	      targetInst = null;
	    } else {
	      var tag = nearestMounted.tag;

	      if (tag === SuspenseComponent) {
	        var instance = getSuspenseInstanceFromFiber(nearestMounted);

	        if (instance !== null) {
	          // Queue the event to be replayed later. Abort dispatching since we
	          // don't want this event dispatched twice through the event system.
	          // TODO: If this is the first discrete event in the queue. Schedule an increased
	          // priority for this boundary.
	          return instance;
	        } // This shouldn't happen, something went wrong but to avoid blocking
	        // the whole system, dispatch the event without a target.
	        // TODO: Warn.


	        targetInst = null;
	      } else if (tag === HostRoot) {
	        var root = nearestMounted.stateNode;

	        if (root.hydrate) {
	          // If this happens during a replay something went wrong and it might block
	          // the whole system.
	          return getContainerFromFiber(nearestMounted);
	        }

	        targetInst = null;
	      } else if (nearestMounted !== targetInst) {
	        // If we get an event (ex: img onload) before committing that
	        // component's mount, ignore it for now (that is, treat it as if it was an
	        // event on a non-React tree). We might also consider queueing events and
	        // dispatching them after the mount.
	        targetInst = null;
	      }
	    }
	  }

	  {
	    dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst);
	  } // We're not blocked on anything.


	  return null;
	}

	// List derived from Gecko source code:
	// https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
	var shorthandToLonghand = {
	  animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
	  background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
	  backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
	  border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
	  borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
	  borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
	  borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
	  borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
	  borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
	  borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
	  borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
	  borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
	  borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
	  borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
	  borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
	  borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
	  borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
	  columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
	  columns: ['columnCount', 'columnWidth'],
	  flex: ['flexBasis', 'flexGrow', 'flexShrink'],
	  flexFlow: ['flexDirection', 'flexWrap'],
	  font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
	  fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
	  gap: ['columnGap', 'rowGap'],
	  grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
	  gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
	  gridColumn: ['gridColumnEnd', 'gridColumnStart'],
	  gridColumnGap: ['columnGap'],
	  gridGap: ['columnGap', 'rowGap'],
	  gridRow: ['gridRowEnd', 'gridRowStart'],
	  gridRowGap: ['rowGap'],
	  gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
	  listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
	  margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
	  marker: ['markerEnd', 'markerMid', 'markerStart'],
	  mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
	  maskPosition: ['maskPositionX', 'maskPositionY'],
	  outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
	  overflow: ['overflowX', 'overflowY'],
	  padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
	  placeContent: ['alignContent', 'justifyContent'],
	  placeItems: ['alignItems', 'justifyItems'],
	  placeSelf: ['alignSelf', 'justifySelf'],
	  textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
	  textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
	  transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
	  wordWrap: ['overflowWrap']
	};

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  columns: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridArea: true,
	  gridRow: true,
	  gridRowEnd: true,
	  gridRowSpan: true,
	  gridRowStart: true,
	  gridColumn: true,
	  gridColumnEnd: true,
	  gridColumnSpan: true,
	  gridColumnStart: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,
	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};
	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */

	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}
	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */


	var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.

	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */

	function dangerousStyleValue(name, value, isCustomProperty) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901
	  var isEmpty = value == null || typeof value === 'boolean' || value === '';

	  if (isEmpty) {
	    return '';
	  }

	  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
	    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
	  }

	  return ('' + value).trim();
	}

	var uppercasePattern = /([A-Z])/g;
	var msPattern = /^ms-/;
	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 */

	function hyphenateStyleName(name) {
	  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
	}

	var warnValidStyle = function () {};

	{
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
	  var msPattern$1 = /^-ms-/;
	  var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

	  var badStyleValueWithSemicolonPattern = /;\s*$/;
	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;
	  var warnedForInfinityValue = false;

	  var camelize = function (string) {
	    return string.replace(hyphenPattern, function (_, character) {
	      return character.toUpperCase();
	    });
	  };

	  var warnHyphenatedStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;

	    error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
	    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	    // is converted to lowercase `ms`.
	    camelize(name.replace(msPattern$1, 'ms-')));
	  };

	  var warnBadVendoredStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;

	    error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
	  };

	  var warnStyleValueWithSemicolon = function (name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;

	    error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
	  };

	  var warnStyleValueIsNaN = function (name, value) {
	    if (warnedForNaNValue) {
	      return;
	    }

	    warnedForNaNValue = true;

	    error('`NaN` is an invalid value for the `%s` css style property.', name);
	  };

	  var warnStyleValueIsInfinity = function (name, value) {
	    if (warnedForInfinityValue) {
	      return;
	    }

	    warnedForInfinityValue = true;

	    error('`Infinity` is an invalid value for the `%s` css style property.', name);
	  };

	  warnValidStyle = function (name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }

	    if (typeof value === 'number') {
	      if (isNaN(value)) {
	        warnStyleValueIsNaN(name, value);
	      } else if (!isFinite(value)) {
	        warnStyleValueIsInfinity(name, value);
	      }
	    }
	  };
	}

	var warnValidStyle$1 = warnValidStyle;

	/**
	 * Operations for dealing with CSS properties.
	 */

	/**
	 * This creates a string that is expected to be equivalent to the style
	 * attribute generated by server-side rendering. It by-passes warnings and
	 * security checks so it's not safe to use this value for anything other than
	 * comparison. It is only used in DEV for SSR validation.
	 */

	function createDangerousStringForStyles(styles) {
	  {
	    var serialized = '';
	    var delimiter = '';

	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }

	      var styleValue = styles[styleName];

	      if (styleValue != null) {
	        var isCustomProperty = styleName.indexOf('--') === 0;
	        serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
	        delimiter = ';';
	      }
	    }

	    return serialized || null;
	  }
	}
	/**
	 * Sets the value for multiple styles on a node.  If a value is specified as
	 * '' (empty string), the corresponding style property will be unset.
	 *
	 * @param {DOMElement} node
	 * @param {object} styles
	 */

	function setValueForStyles(node, styles) {
	  var style = node.style;

	  for (var styleName in styles) {
	    if (!styles.hasOwnProperty(styleName)) {
	      continue;
	    }

	    var isCustomProperty = styleName.indexOf('--') === 0;

	    {
	      if (!isCustomProperty) {
	        warnValidStyle$1(styleName, styles[styleName]);
	      }
	    }

	    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

	    if (styleName === 'float') {
	      styleName = 'cssFloat';
	    }

	    if (isCustomProperty) {
	      style.setProperty(styleName, styleValue);
	    } else {
	      style[styleName] = styleValue;
	    }
	  }
	}

	function isValueEmpty(value) {
	  return value == null || typeof value === 'boolean' || value === '';
	}
	/**
	 * Given {color: 'red', overflow: 'hidden'} returns {
	 *   color: 'color',
	 *   overflowX: 'overflow',
	 *   overflowY: 'overflow',
	 * }. This can be read as "the overflowY property was set by the overflow
	 * shorthand". That is, the values are the property that each was derived from.
	 */


	function expandShorthandMap(styles) {
	  var expanded = {};

	  for (var key in styles) {
	    var longhands = shorthandToLonghand[key] || [key];

	    for (var i = 0; i < longhands.length; i++) {
	      expanded[longhands[i]] = key;
	    }
	  }

	  return expanded;
	}
	/**
	 * When mixing shorthand and longhand property names, we warn during updates if
	 * we expect an incorrect result to occur. In particular, we warn for:
	 *
	 * Updating a shorthand property (longhand gets overwritten):
	 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
	 *   becomes .style.font = 'baz'
	 * Removing a shorthand property (longhand gets lost too):
	 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
	 *   becomes .style.font = ''
	 * Removing a longhand property (should revert to shorthand; doesn't):
	 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
	 *   becomes .style.fontVariant = ''
	 */


	function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
	  {

	    if (!nextStyles) {
	      return;
	    }

	    var expandedUpdates = expandShorthandMap(styleUpdates);
	    var expandedStyles = expandShorthandMap(nextStyles);
	    var warnedAbout = {};

	    for (var key in expandedUpdates) {
	      var originalKey = expandedUpdates[key];
	      var correctOriginalKey = expandedStyles[key];

	      if (correctOriginalKey && originalKey !== correctOriginalKey) {
	        var warningKey = originalKey + ',' + correctOriginalKey;

	        if (warnedAbout[warningKey]) {
	          continue;
	        }

	        warnedAbout[warningKey] = true;

	        error('%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
	      }
	    }
	  }
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.
	var omittedCloseTags = {
	  area: true,
	  base: true,
	  br: true,
	  col: true,
	  embed: true,
	  hr: true,
	  img: true,
	  input: true,
	  keygen: true,
	  link: true,
	  meta: true,
	  param: true,
	  source: true,
	  track: true,
	  wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

	};

	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = _assign({
	  menuitem: true
	}, omittedCloseTags);

	var HTML = '__html';
	var ReactDebugCurrentFrame$3 = null;

	{
	  ReactDebugCurrentFrame$3 = ReactSharedInternals.ReactDebugCurrentFrame;
	}

	function assertValidProps(tag, props) {
	  if (!props) {
	    return;
	  } // Note the use of `==` which checks for null or undefined.


	  if (voidElementTags[tag]) {
	    if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
	      {
	        throw Error( tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`." + ( ReactDebugCurrentFrame$3.getStackAddendum() ) );
	      }
	    }
	  }

	  if (props.dangerouslySetInnerHTML != null) {
	    if (!(props.children == null)) {
	      {
	        throw Error( "Can only set one of `children` or `props.dangerouslySetInnerHTML`." );
	      }
	    }

	    if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML)) {
	      {
	        throw Error( "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information." );
	      }
	    }
	  }

	  {
	    if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
	      error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
	    }
	  }

	  if (!(props.style == null || typeof props.style === 'object')) {
	    {
	      throw Error( "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX." + ( ReactDebugCurrentFrame$3.getStackAddendum() ) );
	    }
	  }
	}

	function isCustomComponent(tagName, props) {
	  if (tagName.indexOf('-') === -1) {
	    return typeof props.is === 'string';
	  }

	  switch (tagName) {
	    // These are reserved SVG and MathML elements.
	    // We don't mind this whitelist too much because we expect it to never grow.
	    // The alternative is to track the namespace in a few places which is convoluted.
	    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
	    case 'annotation-xml':
	    case 'color-profile':
	    case 'font-face':
	    case 'font-face-src':
	    case 'font-face-uri':
	    case 'font-face-format':
	    case 'font-face-name':
	    case 'missing-glyph':
	      return false;

	    default:
	      return true;
	  }
	}

	// When adding attributes to the HTML or SVG whitelist, be sure to
	// also add them to this module to ensure casing and incorrect name
	// warnings.
	var possibleStandardNames = {
	  // HTML
	  accept: 'accept',
	  acceptcharset: 'acceptCharset',
	  'accept-charset': 'acceptCharset',
	  accesskey: 'accessKey',
	  action: 'action',
	  allowfullscreen: 'allowFullScreen',
	  alt: 'alt',
	  as: 'as',
	  async: 'async',
	  autocapitalize: 'autoCapitalize',
	  autocomplete: 'autoComplete',
	  autocorrect: 'autoCorrect',
	  autofocus: 'autoFocus',
	  autoplay: 'autoPlay',
	  autosave: 'autoSave',
	  capture: 'capture',
	  cellpadding: 'cellPadding',
	  cellspacing: 'cellSpacing',
	  challenge: 'challenge',
	  charset: 'charSet',
	  checked: 'checked',
	  children: 'children',
	  cite: 'cite',
	  class: 'className',
	  classid: 'classID',
	  classname: 'className',
	  cols: 'cols',
	  colspan: 'colSpan',
	  content: 'content',
	  contenteditable: 'contentEditable',
	  contextmenu: 'contextMenu',
	  controls: 'controls',
	  controlslist: 'controlsList',
	  coords: 'coords',
	  crossorigin: 'crossOrigin',
	  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
	  data: 'data',
	  datetime: 'dateTime',
	  default: 'default',
	  defaultchecked: 'defaultChecked',
	  defaultvalue: 'defaultValue',
	  defer: 'defer',
	  dir: 'dir',
	  disabled: 'disabled',
	  disablepictureinpicture: 'disablePictureInPicture',
	  download: 'download',
	  draggable: 'draggable',
	  enctype: 'encType',
	  for: 'htmlFor',
	  form: 'form',
	  formmethod: 'formMethod',
	  formaction: 'formAction',
	  formenctype: 'formEncType',
	  formnovalidate: 'formNoValidate',
	  formtarget: 'formTarget',
	  frameborder: 'frameBorder',
	  headers: 'headers',
	  height: 'height',
	  hidden: 'hidden',
	  high: 'high',
	  href: 'href',
	  hreflang: 'hrefLang',
	  htmlfor: 'htmlFor',
	  httpequiv: 'httpEquiv',
	  'http-equiv': 'httpEquiv',
	  icon: 'icon',
	  id: 'id',
	  innerhtml: 'innerHTML',
	  inputmode: 'inputMode',
	  integrity: 'integrity',
	  is: 'is',
	  itemid: 'itemID',
	  itemprop: 'itemProp',
	  itemref: 'itemRef',
	  itemscope: 'itemScope',
	  itemtype: 'itemType',
	  keyparams: 'keyParams',
	  keytype: 'keyType',
	  kind: 'kind',
	  label: 'label',
	  lang: 'lang',
	  list: 'list',
	  loop: 'loop',
	  low: 'low',
	  manifest: 'manifest',
	  marginwidth: 'marginWidth',
	  marginheight: 'marginHeight',
	  max: 'max',
	  maxlength: 'maxLength',
	  media: 'media',
	  mediagroup: 'mediaGroup',
	  method: 'method',
	  min: 'min',
	  minlength: 'minLength',
	  multiple: 'multiple',
	  muted: 'muted',
	  name: 'name',
	  nomodule: 'noModule',
	  nonce: 'nonce',
	  novalidate: 'noValidate',
	  open: 'open',
	  optimum: 'optimum',
	  pattern: 'pattern',
	  placeholder: 'placeholder',
	  playsinline: 'playsInline',
	  poster: 'poster',
	  preload: 'preload',
	  profile: 'profile',
	  radiogroup: 'radioGroup',
	  readonly: 'readOnly',
	  referrerpolicy: 'referrerPolicy',
	  rel: 'rel',
	  required: 'required',
	  reversed: 'reversed',
	  role: 'role',
	  rows: 'rows',
	  rowspan: 'rowSpan',
	  sandbox: 'sandbox',
	  scope: 'scope',
	  scoped: 'scoped',
	  scrolling: 'scrolling',
	  seamless: 'seamless',
	  selected: 'selected',
	  shape: 'shape',
	  size: 'size',
	  sizes: 'sizes',
	  span: 'span',
	  spellcheck: 'spellCheck',
	  src: 'src',
	  srcdoc: 'srcDoc',
	  srclang: 'srcLang',
	  srcset: 'srcSet',
	  start: 'start',
	  step: 'step',
	  style: 'style',
	  summary: 'summary',
	  tabindex: 'tabIndex',
	  target: 'target',
	  title: 'title',
	  type: 'type',
	  usemap: 'useMap',
	  value: 'value',
	  width: 'width',
	  wmode: 'wmode',
	  wrap: 'wrap',
	  // SVG
	  about: 'about',
	  accentheight: 'accentHeight',
	  'accent-height': 'accentHeight',
	  accumulate: 'accumulate',
	  additive: 'additive',
	  alignmentbaseline: 'alignmentBaseline',
	  'alignment-baseline': 'alignmentBaseline',
	  allowreorder: 'allowReorder',
	  alphabetic: 'alphabetic',
	  amplitude: 'amplitude',
	  arabicform: 'arabicForm',
	  'arabic-form': 'arabicForm',
	  ascent: 'ascent',
	  attributename: 'attributeName',
	  attributetype: 'attributeType',
	  autoreverse: 'autoReverse',
	  azimuth: 'azimuth',
	  basefrequency: 'baseFrequency',
	  baselineshift: 'baselineShift',
	  'baseline-shift': 'baselineShift',
	  baseprofile: 'baseProfile',
	  bbox: 'bbox',
	  begin: 'begin',
	  bias: 'bias',
	  by: 'by',
	  calcmode: 'calcMode',
	  capheight: 'capHeight',
	  'cap-height': 'capHeight',
	  clip: 'clip',
	  clippath: 'clipPath',
	  'clip-path': 'clipPath',
	  clippathunits: 'clipPathUnits',
	  cliprule: 'clipRule',
	  'clip-rule': 'clipRule',
	  color: 'color',
	  colorinterpolation: 'colorInterpolation',
	  'color-interpolation': 'colorInterpolation',
	  colorinterpolationfilters: 'colorInterpolationFilters',
	  'color-interpolation-filters': 'colorInterpolationFilters',
	  colorprofile: 'colorProfile',
	  'color-profile': 'colorProfile',
	  colorrendering: 'colorRendering',
	  'color-rendering': 'colorRendering',
	  contentscripttype: 'contentScriptType',
	  contentstyletype: 'contentStyleType',
	  cursor: 'cursor',
	  cx: 'cx',
	  cy: 'cy',
	  d: 'd',
	  datatype: 'datatype',
	  decelerate: 'decelerate',
	  descent: 'descent',
	  diffuseconstant: 'diffuseConstant',
	  direction: 'direction',
	  display: 'display',
	  divisor: 'divisor',
	  dominantbaseline: 'dominantBaseline',
	  'dominant-baseline': 'dominantBaseline',
	  dur: 'dur',
	  dx: 'dx',
	  dy: 'dy',
	  edgemode: 'edgeMode',
	  elevation: 'elevation',
	  enablebackground: 'enableBackground',
	  'enable-background': 'enableBackground',
	  end: 'end',
	  exponent: 'exponent',
	  externalresourcesrequired: 'externalResourcesRequired',
	  fill: 'fill',
	  fillopacity: 'fillOpacity',
	  'fill-opacity': 'fillOpacity',
	  fillrule: 'fillRule',
	  'fill-rule': 'fillRule',
	  filter: 'filter',
	  filterres: 'filterRes',
	  filterunits: 'filterUnits',
	  floodopacity: 'floodOpacity',
	  'flood-opacity': 'floodOpacity',
	  floodcolor: 'floodColor',
	  'flood-color': 'floodColor',
	  focusable: 'focusable',
	  fontfamily: 'fontFamily',
	  'font-family': 'fontFamily',
	  fontsize: 'fontSize',
	  'font-size': 'fontSize',
	  fontsizeadjust: 'fontSizeAdjust',
	  'font-size-adjust': 'fontSizeAdjust',
	  fontstretch: 'fontStretch',
	  'font-stretch': 'fontStretch',
	  fontstyle: 'fontStyle',
	  'font-style': 'fontStyle',
	  fontvariant: 'fontVariant',
	  'font-variant': 'fontVariant',
	  fontweight: 'fontWeight',
	  'font-weight': 'fontWeight',
	  format: 'format',
	  from: 'from',
	  fx: 'fx',
	  fy: 'fy',
	  g1: 'g1',
	  g2: 'g2',
	  glyphname: 'glyphName',
	  'glyph-name': 'glyphName',
	  glyphorientationhorizontal: 'glyphOrientationHorizontal',
	  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
	  glyphorientationvertical: 'glyphOrientationVertical',
	  'glyph-orientation-vertical': 'glyphOrientationVertical',
	  glyphref: 'glyphRef',
	  gradienttransform: 'gradientTransform',
	  gradientunits: 'gradientUnits',
	  hanging: 'hanging',
	  horizadvx: 'horizAdvX',
	  'horiz-adv-x': 'horizAdvX',
	  horizoriginx: 'horizOriginX',
	  'horiz-origin-x': 'horizOriginX',
	  ideographic: 'ideographic',
	  imagerendering: 'imageRendering',
	  'image-rendering': 'imageRendering',
	  in2: 'in2',
	  in: 'in',
	  inlist: 'inlist',
	  intercept: 'intercept',
	  k1: 'k1',
	  k2: 'k2',
	  k3: 'k3',
	  k4: 'k4',
	  k: 'k',
	  kernelmatrix: 'kernelMatrix',
	  kernelunitlength: 'kernelUnitLength',
	  kerning: 'kerning',
	  keypoints: 'keyPoints',
	  keysplines: 'keySplines',
	  keytimes: 'keyTimes',
	  lengthadjust: 'lengthAdjust',
	  letterspacing: 'letterSpacing',
	  'letter-spacing': 'letterSpacing',
	  lightingcolor: 'lightingColor',
	  'lighting-color': 'lightingColor',
	  limitingconeangle: 'limitingConeAngle',
	  local: 'local',
	  markerend: 'markerEnd',
	  'marker-end': 'markerEnd',
	  markerheight: 'markerHeight',
	  markermid: 'markerMid',
	  'marker-mid': 'markerMid',
	  markerstart: 'markerStart',
	  'marker-start': 'markerStart',
	  markerunits: 'markerUnits',
	  markerwidth: 'markerWidth',
	  mask: 'mask',
	  maskcontentunits: 'maskContentUnits',
	  maskunits: 'maskUnits',
	  mathematical: 'mathematical',
	  mode: 'mode',
	  numoctaves: 'numOctaves',
	  offset: 'offset',
	  opacity: 'opacity',
	  operator: 'operator',
	  order: 'order',
	  orient: 'orient',
	  orientation: 'orientation',
	  origin: 'origin',
	  overflow: 'overflow',
	  overlineposition: 'overlinePosition',
	  'overline-position': 'overlinePosition',
	  overlinethickness: 'overlineThickness',
	  'overline-thickness': 'overlineThickness',
	  paintorder: 'paintOrder',
	  'paint-order': 'paintOrder',
	  panose1: 'panose1',
	  'panose-1': 'panose1',
	  pathlength: 'pathLength',
	  patterncontentunits: 'patternContentUnits',
	  patterntransform: 'patternTransform',
	  patternunits: 'patternUnits',
	  pointerevents: 'pointerEvents',
	  'pointer-events': 'pointerEvents',
	  points: 'points',
	  pointsatx: 'pointsAtX',
	  pointsaty: 'pointsAtY',
	  pointsatz: 'pointsAtZ',
	  prefix: 'prefix',
	  preservealpha: 'preserveAlpha',
	  preserveaspectratio: 'preserveAspectRatio',
	  primitiveunits: 'primitiveUnits',
	  property: 'property',
	  r: 'r',
	  radius: 'radius',
	  refx: 'refX',
	  refy: 'refY',
	  renderingintent: 'renderingIntent',
	  'rendering-intent': 'renderingIntent',
	  repeatcount: 'repeatCount',
	  repeatdur: 'repeatDur',
	  requiredextensions: 'requiredExtensions',
	  requiredfeatures: 'requiredFeatures',
	  resource: 'resource',
	  restart: 'restart',
	  result: 'result',
	  results: 'results',
	  rotate: 'rotate',
	  rx: 'rx',
	  ry: 'ry',
	  scale: 'scale',
	  security: 'security',
	  seed: 'seed',
	  shaperendering: 'shapeRendering',
	  'shape-rendering': 'shapeRendering',
	  slope: 'slope',
	  spacing: 'spacing',
	  specularconstant: 'specularConstant',
	  specularexponent: 'specularExponent',
	  speed: 'speed',
	  spreadmethod: 'spreadMethod',
	  startoffset: 'startOffset',
	  stddeviation: 'stdDeviation',
	  stemh: 'stemh',
	  stemv: 'stemv',
	  stitchtiles: 'stitchTiles',
	  stopcolor: 'stopColor',
	  'stop-color': 'stopColor',
	  stopopacity: 'stopOpacity',
	  'stop-opacity': 'stopOpacity',
	  strikethroughposition: 'strikethroughPosition',
	  'strikethrough-position': 'strikethroughPosition',
	  strikethroughthickness: 'strikethroughThickness',
	  'strikethrough-thickness': 'strikethroughThickness',
	  string: 'string',
	  stroke: 'stroke',
	  strokedasharray: 'strokeDasharray',
	  'stroke-dasharray': 'strokeDasharray',
	  strokedashoffset: 'strokeDashoffset',
	  'stroke-dashoffset': 'strokeDashoffset',
	  strokelinecap: 'strokeLinecap',
	  'stroke-linecap': 'strokeLinecap',
	  strokelinejoin: 'strokeLinejoin',
	  'stroke-linejoin': 'strokeLinejoin',
	  strokemiterlimit: 'strokeMiterlimit',
	  'stroke-miterlimit': 'strokeMiterlimit',
	  strokewidth: 'strokeWidth',
	  'stroke-width': 'strokeWidth',
	  strokeopacity: 'strokeOpacity',
	  'stroke-opacity': 'strokeOpacity',
	  suppresscontenteditablewarning: 'suppressContentEditableWarning',
	  suppresshydrationwarning: 'suppressHydrationWarning',
	  surfacescale: 'surfaceScale',
	  systemlanguage: 'systemLanguage',
	  tablevalues: 'tableValues',
	  targetx: 'targetX',
	  targety: 'targetY',
	  textanchor: 'textAnchor',
	  'text-anchor': 'textAnchor',
	  textdecoration: 'textDecoration',
	  'text-decoration': 'textDecoration',
	  textlength: 'textLength',
	  textrendering: 'textRendering',
	  'text-rendering': 'textRendering',
	  to: 'to',
	  transform: 'transform',
	  typeof: 'typeof',
	  u1: 'u1',
	  u2: 'u2',
	  underlineposition: 'underlinePosition',
	  'underline-position': 'underlinePosition',
	  underlinethickness: 'underlineThickness',
	  'underline-thickness': 'underlineThickness',
	  unicode: 'unicode',
	  unicodebidi: 'unicodeBidi',
	  'unicode-bidi': 'unicodeBidi',
	  unicoderange: 'unicodeRange',
	  'unicode-range': 'unicodeRange',
	  unitsperem: 'unitsPerEm',
	  'units-per-em': 'unitsPerEm',
	  unselectable: 'unselectable',
	  valphabetic: 'vAlphabetic',
	  'v-alphabetic': 'vAlphabetic',
	  values: 'values',
	  vectoreffect: 'vectorEffect',
	  'vector-effect': 'vectorEffect',
	  version: 'version',
	  vertadvy: 'vertAdvY',
	  'vert-adv-y': 'vertAdvY',
	  vertoriginx: 'vertOriginX',
	  'vert-origin-x': 'vertOriginX',
	  vertoriginy: 'vertOriginY',
	  'vert-origin-y': 'vertOriginY',
	  vhanging: 'vHanging',
	  'v-hanging': 'vHanging',
	  videographic: 'vIdeographic',
	  'v-ideographic': 'vIdeographic',
	  viewbox: 'viewBox',
	  viewtarget: 'viewTarget',
	  visibility: 'visibility',
	  vmathematical: 'vMathematical',
	  'v-mathematical': 'vMathematical',
	  vocab: 'vocab',
	  widths: 'widths',
	  wordspacing: 'wordSpacing',
	  'word-spacing': 'wordSpacing',
	  writingmode: 'writingMode',
	  'writing-mode': 'writingMode',
	  x1: 'x1',
	  x2: 'x2',
	  x: 'x',
	  xchannelselector: 'xChannelSelector',
	  xheight: 'xHeight',
	  'x-height': 'xHeight',
	  xlinkactuate: 'xlinkActuate',
	  'xlink:actuate': 'xlinkActuate',
	  xlinkarcrole: 'xlinkArcrole',
	  'xlink:arcrole': 'xlinkArcrole',
	  xlinkhref: 'xlinkHref',
	  'xlink:href': 'xlinkHref',
	  xlinkrole: 'xlinkRole',
	  'xlink:role': 'xlinkRole',
	  xlinkshow: 'xlinkShow',
	  'xlink:show': 'xlinkShow',
	  xlinktitle: 'xlinkTitle',
	  'xlink:title': 'xlinkTitle',
	  xlinktype: 'xlinkType',
	  'xlink:type': 'xlinkType',
	  xmlbase: 'xmlBase',
	  'xml:base': 'xmlBase',
	  xmllang: 'xmlLang',
	  'xml:lang': 'xmlLang',
	  xmlns: 'xmlns',
	  'xml:space': 'xmlSpace',
	  xmlnsxlink: 'xmlnsXlink',
	  'xmlns:xlink': 'xmlnsXlink',
	  xmlspace: 'xmlSpace',
	  y1: 'y1',
	  y2: 'y2',
	  y: 'y',
	  ychannelselector: 'yChannelSelector',
	  z: 'z',
	  zoomandpan: 'zoomAndPan'
	};

	var ariaProperties = {
	  'aria-current': 0,
	  // state
	  'aria-details': 0,
	  'aria-disabled': 0,
	  // state
	  'aria-hidden': 0,
	  // state
	  'aria-invalid': 0,
	  // state
	  'aria-keyshortcuts': 0,
	  'aria-label': 0,
	  'aria-roledescription': 0,
	  // Widget Attributes
	  'aria-autocomplete': 0,
	  'aria-checked': 0,
	  'aria-expanded': 0,
	  'aria-haspopup': 0,
	  'aria-level': 0,
	  'aria-modal': 0,
	  'aria-multiline': 0,
	  'aria-multiselectable': 0,
	  'aria-orientation': 0,
	  'aria-placeholder': 0,
	  'aria-pressed': 0,
	  'aria-readonly': 0,
	  'aria-required': 0,
	  'aria-selected': 0,
	  'aria-sort': 0,
	  'aria-valuemax': 0,
	  'aria-valuemin': 0,
	  'aria-valuenow': 0,
	  'aria-valuetext': 0,
	  // Live Region Attributes
	  'aria-atomic': 0,
	  'aria-busy': 0,
	  'aria-live': 0,
	  'aria-relevant': 0,
	  // Drag-and-Drop Attributes
	  'aria-dropeffect': 0,
	  'aria-grabbed': 0,
	  // Relationship Attributes
	  'aria-activedescendant': 0,
	  'aria-colcount': 0,
	  'aria-colindex': 0,
	  'aria-colspan': 0,
	  'aria-controls': 0,
	  'aria-describedby': 0,
	  'aria-errormessage': 0,
	  'aria-flowto': 0,
	  'aria-labelledby': 0,
	  'aria-owns': 0,
	  'aria-posinset': 0,
	  'aria-rowcount': 0,
	  'aria-rowindex': 0,
	  'aria-rowspan': 0,
	  'aria-setsize': 0
	};

	var warnedProperties = {};
	var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
	var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
	var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

	function validateProperty(tagName, name) {
	  {
	    if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
	      return true;
	    }

	    if (rARIACamel.test(name)) {
	      var ariaName = 'aria-' + name.slice(4).toLowerCase();
	      var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
	      // DOM properties, then it is an invalid aria-* attribute.

	      if (correctName == null) {
	        error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);

	        warnedProperties[name] = true;
	        return true;
	      } // aria-* attributes should be lowercase; suggest the lowercase version.


	      if (name !== correctName) {
	        error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);

	        warnedProperties[name] = true;
	        return true;
	      }
	    }

	    if (rARIA.test(name)) {
	      var lowerCasedName = name.toLowerCase();
	      var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
	      // DOM properties, then it is an invalid aria-* attribute.

	      if (standardName == null) {
	        warnedProperties[name] = true;
	        return false;
	      } // aria-* attributes should be lowercase; suggest the lowercase version.


	      if (name !== standardName) {
	        error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);

	        warnedProperties[name] = true;
	        return true;
	      }
	    }
	  }

	  return true;
	}

	function warnInvalidARIAProps(type, props) {
	  {
	    var invalidProps = [];

	    for (var key in props) {
	      var isValid = validateProperty(type, key);

	      if (!isValid) {
	        invalidProps.push(key);
	      }
	    }

	    var unknownPropString = invalidProps.map(function (prop) {
	      return '`' + prop + '`';
	    }).join(', ');

	    if (invalidProps.length === 1) {
	      error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
	    } else if (invalidProps.length > 1) {
	      error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
	    }
	  }
	}

	function validateProperties(type, props) {
	  if (isCustomComponent(type, props)) {
	    return;
	  }

	  warnInvalidARIAProps(type, props);
	}

	var didWarnValueNull = false;
	function validateProperties$1(type, props) {
	  {
	    if (type !== 'input' && type !== 'textarea' && type !== 'select') {
	      return;
	    }

	    if (props != null && props.value === null && !didWarnValueNull) {
	      didWarnValueNull = true;

	      if (type === 'select' && props.multiple) {
	        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
	      } else {
	        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
	      }
	    }
	  }
	}

	var validateProperty$1 = function () {};

	{
	  var warnedProperties$1 = {};
	  var _hasOwnProperty = Object.prototype.hasOwnProperty;
	  var EVENT_NAME_REGEX = /^on./;
	  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
	  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
	  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

	  validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
	    if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
	      return true;
	    }

	    var lowerCasedName = name.toLowerCase();

	    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
	      error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');

	      warnedProperties$1[name] = true;
	      return true;
	    } // We can't rely on the event system being injected on the server.


	    if (canUseEventSystem) {
	      if (registrationNameModules.hasOwnProperty(name)) {
	        return true;
	      }

	      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

	      if (registrationName != null) {
	        error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);

	        warnedProperties$1[name] = true;
	        return true;
	      }

	      if (EVENT_NAME_REGEX.test(name)) {
	        error('Unknown event handler property `%s`. It will be ignored.', name);

	        warnedProperties$1[name] = true;
	        return true;
	      }
	    } else if (EVENT_NAME_REGEX.test(name)) {
	      // If no event plugins have been injected, we are in a server environment.
	      // So we can't tell if the event name is correct for sure, but we can filter
	      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
	      if (INVALID_EVENT_NAME_REGEX.test(name)) {
	        error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
	      }

	      warnedProperties$1[name] = true;
	      return true;
	    } // Let the ARIA attribute hook validate ARIA attributes


	    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
	      return true;
	    }

	    if (lowerCasedName === 'innerhtml') {
	      error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (lowerCasedName === 'aria') {
	      error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
	      error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (typeof value === 'number' && isNaN(value)) {
	      error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    var propertyInfo = getPropertyInfo(name);
	    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

	    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
	      var standardName = possibleStandardNames[lowerCasedName];

	      if (standardName !== name) {
	        error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);

	        warnedProperties$1[name] = true;
	        return true;
	      }
	    } else if (!isReserved && name !== lowerCasedName) {
	      // Unknown attributes should have lowercase casing since that's how they
	      // will be cased anyway with server rendering.
	      error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
	      if (value) {
	        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
	      } else {
	        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
	      }

	      warnedProperties$1[name] = true;
	      return true;
	    } // Now that we've validated casing, do not validate
	    // data types for reserved props


	    if (isReserved) {
	      return true;
	    } // Warn when a known attribute is a bad type


	    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
	      warnedProperties$1[name] = true;
	      return false;
	    } // Warn when passing the strings 'false' or 'true' into a boolean prop


	    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
	      error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    return true;
	  };
	}

	var warnUnknownProperties = function (type, props, canUseEventSystem) {
	  {
	    var unknownProps = [];

	    for (var key in props) {
	      var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);

	      if (!isValid) {
	        unknownProps.push(key);
	      }
	    }

	    var unknownPropString = unknownProps.map(function (prop) {
	      return '`' + prop + '`';
	    }).join(', ');

	    if (unknownProps.length === 1) {
	      error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
	    } else if (unknownProps.length > 1) {
	      error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
	    }
	  }
	};

	function validateProperties$2(type, props, canUseEventSystem) {
	  if (isCustomComponent(type, props)) {
	    return;
	  }

	  warnUnknownProperties(type, props, canUseEventSystem);
	}

	var didWarnInvalidHydration = false;
	var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
	var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
	var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
	var AUTOFOCUS = 'autoFocus';
	var CHILDREN = 'children';
	var STYLE = 'style';
	var HTML$1 = '__html';
	var HTML_NAMESPACE$1 = Namespaces.html;
	var warnedUnknownTags;
	var suppressHydrationWarning;
	var validatePropertiesInDevelopment;
	var warnForTextDifference;
	var warnForPropDifference;
	var warnForExtraAttributes;
	var warnForInvalidEventListener;
	var canDiffStyleForHydrationWarning;
	var normalizeMarkupForTextOrAttribute;
	var normalizeHTML;

	{
	  warnedUnknownTags = {
	    // Chrome is the only major browser not shipping <time>. But as of July
	    // 2017 it intends to ship it due to widespread usage. We intentionally
	    // *don't* warn for <time> even if it's unrecognized by Chrome because
	    // it soon will be, and many apps have been using it anyway.
	    time: true,
	    // There are working polyfills for <dialog>. Let people use it.
	    dialog: true,
	    // Electron ships a custom <webview> tag to display external web content in
	    // an isolated frame and process.
	    // This tag is not present in non Electron environments such as JSDom which
	    // is often used for testing purposes.
	    // @see https://electronjs.org/docs/api/webview-tag
	    webview: true
	  };

	  validatePropertiesInDevelopment = function (type, props) {
	    validateProperties(type, props);
	    validateProperties$1(type, props);
	    validateProperties$2(type, props,
	    /* canUseEventSystem */
	    true);
	  }; // IE 11 parses & normalizes the style attribute as opposed to other
	  // browsers. It adds spaces and sorts the properties in some
	  // non-alphabetical order. Handling that would require sorting CSS
	  // properties in the client & server versions or applying
	  // `expectedStyle` to a temporary DOM node to read its `style` attribute
	  // normalized. Since it only affects IE, we're skipping style warnings
	  // in that browser completely in favor of doing all that work.
	  // See https://github.com/facebook/react/issues/11807


	  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
	  // It also can turn \u0000 into \uFFFD inside attributes.
	  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
	  // If we have a mismatch, it might be caused by that.
	  // We will still patch up in this case but not fire the warning.

	  var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
	  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

	  normalizeMarkupForTextOrAttribute = function (markup) {
	    var markupString = typeof markup === 'string' ? markup : '' + markup;
	    return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
	  };

	  warnForTextDifference = function (serverText, clientText) {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
	    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

	    if (normalizedServerText === normalizedClientText) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
	  };

	  warnForPropDifference = function (propName, serverValue, clientValue) {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
	    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

	    if (normalizedServerValue === normalizedClientValue) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
	  };

	  warnForExtraAttributes = function (attributeNames) {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;
	    var names = [];
	    attributeNames.forEach(function (name) {
	      names.push(name);
	    });

	    error('Extra attributes from the server: %s', names);
	  };

	  warnForInvalidEventListener = function (registrationName, listener) {
	    if (listener === false) {
	      error('Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
	    } else {
	      error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
	    }
	  }; // Parse the HTML and read it back to normalize the HTML string so that it
	  // can be used for comparison.


	  normalizeHTML = function (parent, html) {
	    // We could have created a separate document here to avoid
	    // re-initializing custom elements if they exist. But this breaks
	    // how <noscript> is being handled. So we use the same document.
	    // See the discussion in https://github.com/facebook/react/pull/11157.
	    var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
	    testElement.innerHTML = html;
	    return testElement.innerHTML;
	  };
	}

	function ensureListeningTo(rootContainerElement, registrationName) {
	  var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
	  var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
	  legacyListenToEvent(registrationName, doc);
	}

	function getOwnerDocumentFromRootContainer(rootContainerElement) {
	  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
	}

	function noop() {}

	function trapClickOnNonInteractiveElement(node) {
	  // Mobile Safari does not fire properly bubble click events on
	  // non-interactive elements, which means delegated click listeners do not
	  // fire. The workaround for this bug involves attaching an empty click
	  // listener on the target node.
	  // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	  // Just set it using the onclick property so that we don't have to manage any
	  // bookkeeping for it. Not sure if we need to clear it when the listener is
	  // removed.
	  // TODO: Only do this for the relevant Safaris maybe?
	  node.onclick = noop;
	}

	function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
	  for (var propKey in nextProps) {
	    if (!nextProps.hasOwnProperty(propKey)) {
	      continue;
	    }

	    var nextProp = nextProps[propKey];

	    if (propKey === STYLE) {
	      {
	        if (nextProp) {
	          // Freeze the next style object so that we can assume it won't be
	          // mutated. We have already warned for this in the past.
	          Object.freeze(nextProp);
	        }
	      } // Relies on `updateStylesByID` not mutating `styleUpdates`.


	      setValueForStyles(domElement, nextProp);
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

	      if (nextHtml != null) {
	        setInnerHTML(domElement, nextHtml);
	      }
	    } else if (propKey === CHILDREN) {
	      if (typeof nextProp === 'string') {
	        // Avoid setting initial textContent when the text is empty. In IE11 setting
	        // textContent on a <textarea> will cause the placeholder to not
	        // show within the <textarea> until it has been focused and blurred again.
	        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
	        var canSetTextContent = tag !== 'textarea' || nextProp !== '';

	        if (canSetTextContent) {
	          setTextContent(domElement, nextProp);
	        }
	      } else if (typeof nextProp === 'number') {
	        setTextContent(domElement, '' + nextProp);
	      }
	    } else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        if ( typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }

	        ensureListeningTo(rootContainerElement, propKey);
	      }
	    } else if (nextProp != null) {
	      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
	    }
	  }
	}

	function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
	  // TODO: Handle wasCustomComponentTag
	  for (var i = 0; i < updatePayload.length; i += 2) {
	    var propKey = updatePayload[i];
	    var propValue = updatePayload[i + 1];

	    if (propKey === STYLE) {
	      setValueForStyles(domElement, propValue);
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      setInnerHTML(domElement, propValue);
	    } else if (propKey === CHILDREN) {
	      setTextContent(domElement, propValue);
	    } else {
	      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
	    }
	  }
	}

	function createElement(type, props, rootContainerElement, parentNamespace) {
	  var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
	  // tags get no namespace.

	  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
	  var domElement;
	  var namespaceURI = parentNamespace;

	  if (namespaceURI === HTML_NAMESPACE$1) {
	    namespaceURI = getIntrinsicNamespace(type);
	  }

	  if (namespaceURI === HTML_NAMESPACE$1) {
	    {
	      isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
	      // allow <SVG> or <mATH>.

	      if (!isCustomComponentTag && type !== type.toLowerCase()) {
	        error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);
	      }
	    }

	    if (type === 'script') {
	      // Create the script via .innerHTML so its "parser-inserted" flag is
	      // set to true and it does not execute
	      var div = ownerDocument.createElement('div');

	      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
	      // This is guaranteed to yield a script element.

	      var firstChild = div.firstChild;
	      domElement = div.removeChild(firstChild);
	    } else if (typeof props.is === 'string') {
	      // $FlowIssue `createElement` should be updated for Web Components
	      domElement = ownerDocument.createElement(type, {
	        is: props.is
	      });
	    } else {
	      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
	      // See discussion in https://github.com/facebook/react/pull/6896
	      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	      domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
	      // attributes on `select`s needs to be added before `option`s are inserted.
	      // This prevents:
	      // - a bug where the `select` does not scroll to the correct option because singular
	      //  `select` elements automatically pick the first item #13222
	      // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
	      // See https://github.com/facebook/react/issues/13222
	      // and https://github.com/facebook/react/issues/14239

	      if (type === 'select') {
	        var node = domElement;

	        if (props.multiple) {
	          node.multiple = true;
	        } else if (props.size) {
	          // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
	          // it is possible that no option is selected.
	          //
	          // This is only necessary when a select in "single selection mode".
	          node.size = props.size;
	        }
	      }
	    }
	  } else {
	    domElement = ownerDocument.createElementNS(namespaceURI, type);
	  }

	  {
	    if (namespaceURI === HTML_NAMESPACE$1) {
	      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
	        warnedUnknownTags[type] = true;

	        error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
	      }
	    }
	  }

	  return domElement;
	}
	function createTextNode(text, rootContainerElement) {
	  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
	}
	function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
	  var isCustomComponentTag = isCustomComponent(tag, rawProps);

	  {
	    validatePropertiesInDevelopment(tag, rawProps);
	  } // TODO: Make sure that we check isMounted before firing any of these events.


	  var props;

	  switch (tag) {
	    case 'iframe':
	    case 'object':
	    case 'embed':
	      trapBubbledEvent(TOP_LOAD, domElement);
	      props = rawProps;
	      break;

	    case 'video':
	    case 'audio':
	      // Create listener for each media event
	      for (var i = 0; i < mediaEventTypes.length; i++) {
	        trapBubbledEvent(mediaEventTypes[i], domElement);
	      }

	      props = rawProps;
	      break;

	    case 'source':
	      trapBubbledEvent(TOP_ERROR, domElement);
	      props = rawProps;
	      break;

	    case 'img':
	    case 'image':
	    case 'link':
	      trapBubbledEvent(TOP_ERROR, domElement);
	      trapBubbledEvent(TOP_LOAD, domElement);
	      props = rawProps;
	      break;

	    case 'form':
	      trapBubbledEvent(TOP_RESET, domElement);
	      trapBubbledEvent(TOP_SUBMIT, domElement);
	      props = rawProps;
	      break;

	    case 'details':
	      trapBubbledEvent(TOP_TOGGLE, domElement);
	      props = rawProps;
	      break;

	    case 'input':
	      initWrapperState(domElement, rawProps);
	      props = getHostProps(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.

	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;

	    case 'option':
	      validateProps(domElement, rawProps);
	      props = getHostProps$1(domElement, rawProps);
	      break;

	    case 'select':
	      initWrapperState$1(domElement, rawProps);
	      props = getHostProps$2(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.

	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;

	    case 'textarea':
	      initWrapperState$2(domElement, rawProps);
	      props = getHostProps$3(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.

	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;

	    default:
	      props = rawProps;
	  }

	  assertValidProps(tag, props);
	  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

	  switch (tag) {
	    case 'input':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper(domElement, rawProps, false);
	      break;

	    case 'textarea':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper$3(domElement);
	      break;

	    case 'option':
	      postMountWrapper$1(domElement, rawProps);
	      break;

	    case 'select':
	      postMountWrapper$2(domElement, rawProps);
	      break;

	    default:
	      if (typeof props.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }

	      break;
	  }
	} // Calculate the diff between the two objects.

	function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
	  {
	    validatePropertiesInDevelopment(tag, nextRawProps);
	  }

	  var updatePayload = null;
	  var lastProps;
	  var nextProps;

	  switch (tag) {
	    case 'input':
	      lastProps = getHostProps(domElement, lastRawProps);
	      nextProps = getHostProps(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    case 'option':
	      lastProps = getHostProps$1(domElement, lastRawProps);
	      nextProps = getHostProps$1(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    case 'select':
	      lastProps = getHostProps$2(domElement, lastRawProps);
	      nextProps = getHostProps$2(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    case 'textarea':
	      lastProps = getHostProps$3(domElement, lastRawProps);
	      nextProps = getHostProps$3(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    default:
	      lastProps = lastRawProps;
	      nextProps = nextRawProps;

	      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }

	      break;
	  }

	  assertValidProps(tag, nextProps);
	  var propKey;
	  var styleName;
	  var styleUpdates = null;

	  for (propKey in lastProps) {
	    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	      continue;
	    }

	    if (propKey === STYLE) {
	      var lastStyle = lastProps[propKey];

	      for (styleName in lastStyle) {
	        if (lastStyle.hasOwnProperty(styleName)) {
	          if (!styleUpdates) {
	            styleUpdates = {};
	          }

	          styleUpdates[styleName] = '';
	        }
	      }
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
	      // This is a special case. If any listener updates we need to ensure
	      // that the "current" fiber pointer gets updated so we need a commit
	      // to update this element.
	      if (!updatePayload) {
	        updatePayload = [];
	      }
	    } else {
	      // For all other deleted properties we add it to the queue. We use
	      // the whitelist in the commit phase instead.
	      (updatePayload = updatePayload || []).push(propKey, null);
	    }
	  }

	  for (propKey in nextProps) {
	    var nextProp = nextProps[propKey];
	    var lastProp = lastProps != null ? lastProps[propKey] : undefined;

	    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	      continue;
	    }

	    if (propKey === STYLE) {
	      {
	        if (nextProp) {
	          // Freeze the next style object so that we can assume it won't be
	          // mutated. We have already warned for this in the past.
	          Object.freeze(nextProp);
	        }
	      }

	      if (lastProp) {
	        // Unset styles on `lastProp` but not on `nextProp`.
	        for (styleName in lastProp) {
	          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	            if (!styleUpdates) {
	              styleUpdates = {};
	            }

	            styleUpdates[styleName] = '';
	          }
	        } // Update styles that changed since `lastProp`.


	        for (styleName in nextProp) {
	          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	            if (!styleUpdates) {
	              styleUpdates = {};
	            }

	            styleUpdates[styleName] = nextProp[styleName];
	          }
	        }
	      } else {
	        // Relies on `updateStylesByID` not mutating `styleUpdates`.
	        if (!styleUpdates) {
	          if (!updatePayload) {
	            updatePayload = [];
	          }

	          updatePayload.push(propKey, styleUpdates);
	        }

	        styleUpdates = nextProp;
	      }
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
	      var lastHtml = lastProp ? lastProp[HTML$1] : undefined;

	      if (nextHtml != null) {
	        if (lastHtml !== nextHtml) {
	          (updatePayload = updatePayload || []).push(propKey, nextHtml);
	        }
	      }
	    } else if (propKey === CHILDREN) {
	      if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
	        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
	      }
	    } else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        // We eagerly listen to this even though we haven't committed yet.
	        if ( typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }

	        ensureListeningTo(rootContainerElement, propKey);
	      }

	      if (!updatePayload && lastProp !== nextProp) {
	        // This is a special case. If any listener updates we need to ensure
	        // that the "current" props pointer gets updated so we need a commit
	        // to update this element.
	        updatePayload = [];
	      }
	    } else {
	      // For any other property we always add it to the queue and then we
	      // filter it out using the whitelist during the commit.
	      (updatePayload = updatePayload || []).push(propKey, nextProp);
	    }
	  }

	  if (styleUpdates) {
	    {
	      validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
	    }

	    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
	  }

	  return updatePayload;
	} // Apply the diff.

	function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
	  // Update checked *before* name.
	  // In the middle of an update, it is possible to have multiple checked.
	  // When a checked radio tries to change name, browser makes another radio's checked false.
	  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
	    updateChecked(domElement, nextRawProps);
	  }

	  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
	  var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

	  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
	  // changed.

	  switch (tag) {
	    case 'input':
	      // Update the wrapper around inputs *after* updating props. This has to
	      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
	      // raise warnings and prevent the new value from being assigned.
	      updateWrapper(domElement, nextRawProps);
	      break;

	    case 'textarea':
	      updateWrapper$1(domElement, nextRawProps);
	      break;

	    case 'select':
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      postUpdateWrapper(domElement, nextRawProps);
	      break;
	  }
	}

	function getPossibleStandardName(propName) {
	  {
	    var lowerCasedName = propName.toLowerCase();

	    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
	      return null;
	    }

	    return possibleStandardNames[lowerCasedName] || null;
	  }
	}

	function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
	  var isCustomComponentTag;
	  var extraAttributeNames;

	  {
	    suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
	    isCustomComponentTag = isCustomComponent(tag, rawProps);
	    validatePropertiesInDevelopment(tag, rawProps);
	  } // TODO: Make sure that we check isMounted before firing any of these events.


	  switch (tag) {
	    case 'iframe':
	    case 'object':
	    case 'embed':
	      trapBubbledEvent(TOP_LOAD, domElement);
	      break;

	    case 'video':
	    case 'audio':
	      // Create listener for each media event
	      for (var i = 0; i < mediaEventTypes.length; i++) {
	        trapBubbledEvent(mediaEventTypes[i], domElement);
	      }

	      break;

	    case 'source':
	      trapBubbledEvent(TOP_ERROR, domElement);
	      break;

	    case 'img':
	    case 'image':
	    case 'link':
	      trapBubbledEvent(TOP_ERROR, domElement);
	      trapBubbledEvent(TOP_LOAD, domElement);
	      break;

	    case 'form':
	      trapBubbledEvent(TOP_RESET, domElement);
	      trapBubbledEvent(TOP_SUBMIT, domElement);
	      break;

	    case 'details':
	      trapBubbledEvent(TOP_TOGGLE, domElement);
	      break;

	    case 'input':
	      initWrapperState(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.

	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;

	    case 'option':
	      validateProps(domElement, rawProps);
	      break;

	    case 'select':
	      initWrapperState$1(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.

	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;

	    case 'textarea':
	      initWrapperState$2(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.

	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;
	  }

	  assertValidProps(tag, rawProps);

	  {
	    extraAttributeNames = new Set();
	    var attributes = domElement.attributes;

	    for (var _i = 0; _i < attributes.length; _i++) {
	      var name = attributes[_i].name.toLowerCase();

	      switch (name) {
	        // Built-in SSR attribute is whitelisted
	        case 'data-reactroot':
	          break;
	        // Controlled attributes are not validated
	        // TODO: Only ignore them on controlled tags.

	        case 'value':
	          break;

	        case 'checked':
	          break;

	        case 'selected':
	          break;

	        default:
	          // Intentionally use the original name.
	          // See discussion in https://github.com/facebook/react/pull/10676.
	          extraAttributeNames.add(attributes[_i].name);
	      }
	    }
	  }

	  var updatePayload = null;

	  for (var propKey in rawProps) {
	    if (!rawProps.hasOwnProperty(propKey)) {
	      continue;
	    }

	    var nextProp = rawProps[propKey];

	    if (propKey === CHILDREN) {
	      // For text content children we compare against textContent. This
	      // might match additional HTML that is hidden when we read it using
	      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
	      // satisfies our requirement. Our requirement is not to produce perfect
	      // HTML and attributes. Ideally we should preserve structure but it's
	      // ok not to if the visible content is still enough to indicate what
	      // even listeners these nodes might be wired up to.
	      // TODO: Warn if there is more than a single textNode as a child.
	      // TODO: Should we use domElement.firstChild.nodeValue to compare?
	      if (typeof nextProp === 'string') {
	        if (domElement.textContent !== nextProp) {
	          if ( !suppressHydrationWarning) {
	            warnForTextDifference(domElement.textContent, nextProp);
	          }

	          updatePayload = [CHILDREN, nextProp];
	        }
	      } else if (typeof nextProp === 'number') {
	        if (domElement.textContent !== '' + nextProp) {
	          if ( !suppressHydrationWarning) {
	            warnForTextDifference(domElement.textContent, nextProp);
	          }

	          updatePayload = [CHILDREN, '' + nextProp];
	        }
	      }
	    } else if (registrationNameModules.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        if ( typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }

	        ensureListeningTo(rootContainerElement, propKey);
	      }
	    } else if ( // Convince Flow we've calculated it (it's DEV-only in this method.)
	    typeof isCustomComponentTag === 'boolean') {
	      // Validate that the properties correspond to their expected values.
	      var serverValue = void 0;
	      var propertyInfo = getPropertyInfo(propKey);

	      if (suppressHydrationWarning) ; else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
	      // TODO: Only ignore them on controlled tags.
	      propKey === 'value' || propKey === 'checked' || propKey === 'selected') ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	        var serverHTML = domElement.innerHTML;
	        var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
	        var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : '');

	        if (expectedHTML !== serverHTML) {
	          warnForPropDifference(propKey, serverHTML, expectedHTML);
	        }
	      } else if (propKey === STYLE) {
	        // $FlowFixMe - Should be inferred as not undefined.
	        extraAttributeNames.delete(propKey);

	        if (canDiffStyleForHydrationWarning) {
	          var expectedStyle = createDangerousStringForStyles(nextProp);
	          serverValue = domElement.getAttribute('style');

	          if (expectedStyle !== serverValue) {
	            warnForPropDifference(propKey, serverValue, expectedStyle);
	          }
	        }
	      } else if (isCustomComponentTag) {
	        // $FlowFixMe - Should be inferred as not undefined.
	        extraAttributeNames.delete(propKey.toLowerCase());
	        serverValue = getValueForAttribute(domElement, propKey, nextProp);

	        if (nextProp !== serverValue) {
	          warnForPropDifference(propKey, serverValue, nextProp);
	        }
	      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
	        var isMismatchDueToBadCasing = false;

	        if (propertyInfo !== null) {
	          // $FlowFixMe - Should be inferred as not undefined.
	          extraAttributeNames.delete(propertyInfo.attributeName);
	          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
	        } else {
	          var ownNamespace = parentNamespace;

	          if (ownNamespace === HTML_NAMESPACE$1) {
	            ownNamespace = getIntrinsicNamespace(tag);
	          }

	          if (ownNamespace === HTML_NAMESPACE$1) {
	            // $FlowFixMe - Should be inferred as not undefined.
	            extraAttributeNames.delete(propKey.toLowerCase());
	          } else {
	            var standardName = getPossibleStandardName(propKey);

	            if (standardName !== null && standardName !== propKey) {
	              // If an SVG prop is supplied with bad casing, it will
	              // be successfully parsed from HTML, but will produce a mismatch
	              // (and would be incorrectly rendered on the client).
	              // However, we already warn about bad casing elsewhere.
	              // So we'll skip the misleading extra mismatch warning in this case.
	              isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

	              extraAttributeNames.delete(standardName);
	            } // $FlowFixMe - Should be inferred as not undefined.


	            extraAttributeNames.delete(propKey);
	          }

	          serverValue = getValueForAttribute(domElement, propKey, nextProp);
	        }

	        if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
	          warnForPropDifference(propKey, serverValue, nextProp);
	        }
	      }
	    }
	  }

	  {
	    // $FlowFixMe - Should be inferred as not undefined.
	    if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
	      // $FlowFixMe - Should be inferred as not undefined.
	      warnForExtraAttributes(extraAttributeNames);
	    }
	  }

	  switch (tag) {
	    case 'input':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper(domElement, rawProps, true);
	      break;

	    case 'textarea':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper$3(domElement);
	      break;

	    case 'select':
	    case 'option':
	      // For input and textarea we current always set the value property at
	      // post mount to force it to diverge from attributes. However, for
	      // option and select we don't quite do the same thing and select
	      // is not resilient to the DOM state changing so we don't do that here.
	      // TODO: Consider not doing this for input and textarea.
	      break;

	    default:
	      if (typeof rawProps.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }

	      break;
	  }

	  return updatePayload;
	}
	function diffHydratedText(textNode, text) {
	  var isDifferent = textNode.nodeValue !== text;
	  return isDifferent;
	}
	function warnForUnmatchedText(textNode, text) {
	  {
	    warnForTextDifference(textNode.nodeValue, text);
	  }
	}
	function warnForDeletedHydratableElement(parentNode, child) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
	  }
	}
	function warnForDeletedHydratableText(parentNode, child) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
	  }
	}
	function warnForInsertedHydratedElement(parentNode, tag, props) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
	  }
	}
	function warnForInsertedHydratedText(parentNode, text) {
	  {
	    if (text === '') {
	      // We expect to insert empty text nodes since they're not represented in
	      // the HTML.
	      // TODO: Remove this special case if we can just avoid inserting empty
	      // text nodes.
	      return;
	    }

	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
	  }
	}
	function restoreControlledState$3(domElement, tag, props) {
	  switch (tag) {
	    case 'input':
	      restoreControlledState(domElement, props);
	      return;

	    case 'textarea':
	      restoreControlledState$2(domElement, props);
	      return;

	    case 'select':
	      restoreControlledState$1(domElement, props);
	      return;
	  }
	}

	function getActiveElement(doc) {
	  doc = doc || (typeof document !== 'undefined' ? document : undefined);

	  if (typeof doc === 'undefined') {
	    return null;
	  }

	  try {
	    return doc.activeElement || doc.body;
	  } catch (e) {
	    return doc.body;
	  }
	}

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */

	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }

	  return node;
	}
	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */


	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }

	    node = node.parentNode;
	  }
	}
	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */


	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === TEXT_NODE) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	/**
	 * @param {DOMElement} outerNode
	 * @return {?object}
	 */

	function getOffsets(outerNode) {
	  var ownerDocument = outerNode.ownerDocument;
	  var win = ownerDocument && ownerDocument.defaultView || window;
	  var selection = win.getSelection && win.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode,
	      anchorOffset = selection.anchorOffset,
	      focusNode = selection.focusNode,
	      focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
	  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
	  // expose properties, triggering a "Permission denied error" if any of its
	  // properties are accessed. The only seemingly possible way to avoid erroring
	  // is to access a property that typically works for non-anonymous divs and
	  // catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

	  try {
	    /* eslint-disable no-unused-expressions */
	    anchorNode.nodeType;
	    focusNode.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
	}
	/**
	 * Returns {start, end} where `start` is the character/codepoint index of
	 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
	 * `end` is the index of (focusNode, focusOffset).
	 *
	 * Returns null if you pass in garbage input but we should probably just crash.
	 *
	 * Exported only for testing.
	 */

	function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
	  var length = 0;
	  var start = -1;
	  var end = -1;
	  var indexWithinAnchor = 0;
	  var indexWithinFocus = 0;
	  var node = outerNode;
	  var parentNode = null;

	  outer: while (true) {
	    var next = null;

	    while (true) {
	      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
	        start = length + anchorOffset;
	      }

	      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
	        end = length + focusOffset;
	      }

	      if (node.nodeType === TEXT_NODE) {
	        length += node.nodeValue.length;
	      }

	      if ((next = node.firstChild) === null) {
	        break;
	      } // Moving from `node` to its first child `next`.


	      parentNode = node;
	      node = next;
	    }

	    while (true) {
	      if (node === outerNode) {
	        // If `outerNode` has children, this is always the second time visiting
	        // it. If it has no children, this is still the first loop, and the only
	        // valid selection is anchorNode and focusNode both equal to this node
	        // and both offsets 0, in which case we will have handled above.
	        break outer;
	      }

	      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
	        start = length;
	      }

	      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
	        end = length;
	      }

	      if ((next = node.nextSibling) !== null) {
	        break;
	      }

	      node = parentNode;
	      parentNode = node.parentNode;
	    } // Moving from `node` to its next sibling `next`.


	    node = next;
	  }

	  if (start === -1 || end === -1) {
	    // This should never happen. (Would happen if the anchor/focus nodes aren't
	    // actually inside the passed-in node.)
	    return null;
	  }

	  return {
	    start: start,
	    end: end
	  };
	}
	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */

	function setOffsets(node, offsets) {
	  var doc = node.ownerDocument || document;
	  var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
	  // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
	  // fails when pasting 100+ items)

	  if (!win.getSelection) {
	    return;
	  }

	  var selection = win.getSelection();
	  var length = node.textContent.length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.

	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
	      return;
	    }

	    var range = doc.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	function isTextNode(node) {
	  return node && node.nodeType === TEXT_NODE;
	}

	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	function isInDocument(node) {
	  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
	}

	function isSameOriginFrame(iframe) {
	  try {
	    // Accessing the contentDocument of a HTMLIframeElement can cause the browser
	    // to throw, e.g. if it has a cross-origin src attribute.
	    // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
	    // iframe.contentDocument.defaultView;
	    // A safety way is to access one of the cross origin properties: Window or Location
	    // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
	    // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
	    return typeof iframe.contentWindow.location.href === 'string';
	  } catch (err) {
	    return false;
	  }
	}

	function getActiveElementDeep() {
	  var win = window;
	  var element = getActiveElement();

	  while (element instanceof win.HTMLIFrameElement) {
	    if (isSameOriginFrame(element)) {
	      win = element.contentWindow;
	    } else {
	      return element;
	    }

	    element = getActiveElement(win.document);
	  }

	  return element;
	}
	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */

	/**
	 * @hasSelectionCapabilities: we get the element types that support selection
	 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
	 * and `selectionEnd` rows.
	 */


	function hasSelectionCapabilities(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
	}
	function getSelectionInformation() {
	  var focusedElem = getActiveElementDeep();
	  return {
	    // Used by Flare
	    activeElementDetached: null,
	    focusedElem: focusedElem,
	    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
	  };
	}
	/**
	 * @restoreSelection: If any selection information was potentially lost,
	 * restore it. This is useful when performing operations that could remove dom
	 * nodes and place them back in, resulting in focus being lost.
	 */

	function restoreSelection(priorSelectionInformation) {
	  var curFocusedElem = getActiveElementDeep();
	  var priorFocusedElem = priorSelectionInformation.focusedElem;
	  var priorSelectionRange = priorSelectionInformation.selectionRange;

	  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
	      setSelection(priorFocusedElem, priorSelectionRange);
	    } // Focusing a node can change the scroll position, which is undesirable


	    var ancestors = [];
	    var ancestor = priorFocusedElem;

	    while (ancestor = ancestor.parentNode) {
	      if (ancestor.nodeType === ELEMENT_NODE) {
	        ancestors.push({
	          element: ancestor,
	          left: ancestor.scrollLeft,
	          top: ancestor.scrollTop
	        });
	      }
	    }

	    if (typeof priorFocusedElem.focus === 'function') {
	      priorFocusedElem.focus();
	    }

	    for (var i = 0; i < ancestors.length; i++) {
	      var info = ancestors[i];
	      info.element.scrollLeft = info.left;
	      info.element.scrollTop = info.top;
	    }
	  }
	}
	/**
	 * @getSelection: Gets the selection bounds of a focused textarea, input or
	 * contentEditable node.
	 * -@input: Look up selection bounds of this input
	 * -@return {start: selectionStart, end: selectionEnd}
	 */

	function getSelection(input) {
	  var selection;

	  if ('selectionStart' in input) {
	    // Modern browser with input or textarea.
	    selection = {
	      start: input.selectionStart,
	      end: input.selectionEnd
	    };
	  } else {
	    // Content editable or old IE textarea.
	    selection = getOffsets(input);
	  }

	  return selection || {
	    start: 0,
	    end: 0
	  };
	}
	/**
	 * @setSelection: Sets the selection bounds of a textarea or input and focuses
	 * the input.
	 * -@input     Set selection bounds of this input or textarea
	 * -@offsets   Object of same form that is returned from get*
	 */

	function setSelection(input, offsets) {
	  var start = offsets.start,
	      end = offsets.end;

	  if (end === undefined) {
	    end = start;
	  }

	  if ('selectionStart' in input) {
	    input.selectionStart = start;
	    input.selectionEnd = Math.min(end, input.value.length);
	  } else {
	    setOffsets(input, offsets);
	  }
	}

	var validateDOMNesting = function () {};

	var updatedAncestorInfo = function () {};

	{
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.
	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

	  var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
	  var emptyAncestorInfo = {
	    current: null,
	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,
	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  updatedAncestorInfo = function (oldInfo, tag) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);

	    var info = {
	      tag: tag
	    };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }

	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    } // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.current = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }

	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }

	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }

	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }

	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }

	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }

	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };
	  /**
	   * Returns whether
	   */


	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';

	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but

	      case 'option':
	        return tag === '#text';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

	      case 'html':
	        return tag === 'head' || tag === 'body' || tag === 'frameset';

	      case 'frameset':
	        return tag === 'frame';

	      case '#document':
	        return tag === 'html';
	    } // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frameset':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };
	  /**
	   * Returns whether
	   */


	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	      case 'pre':
	      case 'listing':
	      case 'table':
	      case 'hr':
	      case 'xmp':
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  var didWarn$1 = {};

	  validateDOMNesting = function (childTag, childText, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;

	    if (childText != null) {
	      if (childTag != null) {
	        error('validateDOMNesting: when childText is passed, childTag should be null');
	      }

	      childTag = '#text';
	    }

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var invalidParentOrAncestor = invalidParent || invalidAncestor;

	    if (!invalidParentOrAncestor) {
	      return;
	    }

	    var ancestorTag = invalidParentOrAncestor.tag;
	    var addendum = getCurrentFiberStackInDev();
	    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;

	    if (didWarn$1[warnKey]) {
	      return;
	    }

	    didWarn$1[warnKey] = true;
	    var tagDisplayName = childTag;
	    var whitespaceInfo = '';

	    if (childTag === '#text') {
	      if (/\S/.test(childText)) {
	        tagDisplayName = 'Text nodes';
	      } else {
	        tagDisplayName = 'Whitespace text nodes';
	        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
	      }
	    } else {
	      tagDisplayName = '<' + childTag + '>';
	    }

	    if (invalidParent) {
	      var info = '';

	      if (ancestorTag === 'table' && childTag === 'tr') {
	        info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
	      }

	      error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
	    } else {
	      error('validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.', tagDisplayName, ancestorTag);
	    }
	  };
	}

	var SUPPRESS_HYDRATION_WARNING$1;

	{
	  SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
	}

	var SUSPENSE_START_DATA = '$';
	var SUSPENSE_END_DATA = '/$';
	var SUSPENSE_PENDING_START_DATA = '$?';
	var SUSPENSE_FALLBACK_START_DATA = '$!';
	var STYLE$1 = 'style';
	var eventsEnabled = null;
	var selectionInformation = null;

	function shouldAutoFocusHostComponent(type, props) {
	  switch (type) {
	    case 'button':
	    case 'input':
	    case 'select':
	    case 'textarea':
	      return !!props.autoFocus;
	  }

	  return false;
	}
	function getRootHostContext(rootContainerInstance) {
	  var type;
	  var namespace;
	  var nodeType = rootContainerInstance.nodeType;

	  switch (nodeType) {
	    case DOCUMENT_NODE:
	    case DOCUMENT_FRAGMENT_NODE:
	      {
	        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
	        var root = rootContainerInstance.documentElement;
	        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
	        break;
	      }

	    default:
	      {
	        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
	        var ownNamespace = container.namespaceURI || null;
	        type = container.tagName;
	        namespace = getChildNamespace(ownNamespace, type);
	        break;
	      }
	  }

	  {
	    var validatedTag = type.toLowerCase();
	    var ancestorInfo = updatedAncestorInfo(null, validatedTag);
	    return {
	      namespace: namespace,
	      ancestorInfo: ancestorInfo
	    };
	  }
	}
	function getChildHostContext(parentHostContext, type, rootContainerInstance) {
	  {
	    var parentHostContextDev = parentHostContext;
	    var namespace = getChildNamespace(parentHostContextDev.namespace, type);
	    var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
	    return {
	      namespace: namespace,
	      ancestorInfo: ancestorInfo
	    };
	  }
	}
	function getPublicInstance(instance) {
	  return instance;
	}
	function prepareForCommit(containerInfo) {
	  eventsEnabled = isEnabled();
	  selectionInformation = getSelectionInformation();
	  setEnabled(false);
	}
	function resetAfterCommit(containerInfo) {
	  restoreSelection(selectionInformation);
	  setEnabled(eventsEnabled);
	  eventsEnabled = null;

	  selectionInformation = null;
	}
	function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
	  var parentNamespace;

	  {
	    // TODO: take namespace into account when validating.
	    var hostContextDev = hostContext;
	    validateDOMNesting(type, null, hostContextDev.ancestorInfo);

	    if (typeof props.children === 'string' || typeof props.children === 'number') {
	      var string = '' + props.children;
	      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
	      validateDOMNesting(null, string, ownAncestorInfo);
	    }

	    parentNamespace = hostContextDev.namespace;
	  }

	  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
	  precacheFiberNode(internalInstanceHandle, domElement);
	  updateFiberProps(domElement, props);
	  return domElement;
	}
	function appendInitialChild(parentInstance, child) {
	  parentInstance.appendChild(child);
	}
	function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
	  setInitialProperties(domElement, type, props, rootContainerInstance);
	  return shouldAutoFocusHostComponent(type, props);
	}
	function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
	  {
	    var hostContextDev = hostContext;

	    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
	      var string = '' + newProps.children;
	      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
	      validateDOMNesting(null, string, ownAncestorInfo);
	    }
	  }

	  return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
	}
	function shouldSetTextContent(type, props) {
	  return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
	}
	function shouldDeprioritizeSubtree(type, props) {
	  return !!props.hidden;
	}
	function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
	  {
	    var hostContextDev = hostContext;
	    validateDOMNesting(null, text, hostContextDev.ancestorInfo);
	  }

	  var textNode = createTextNode(text, rootContainerInstance);
	  precacheFiberNode(internalInstanceHandle, textNode);
	  return textNode;
	}
	// if a component just imports ReactDOM (e.g. for findDOMNode).
	// Some environments might not have setTimeout or clearTimeout.

	var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
	var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
	var noTimeout = -1; // -------------------
	function commitMount(domElement, type, newProps, internalInstanceHandle) {
	  // Despite the naming that might imply otherwise, this method only
	  // fires if there is an `Update` effect scheduled during mounting.
	  // This happens if `finalizeInitialChildren` returns `true` (which it
	  // does to implement the `autoFocus` attribute on the client). But
	  // there are also other cases when this might happen (such as patching
	  // up text content during hydration mismatch). So we'll check this again.
	  if (shouldAutoFocusHostComponent(type, newProps)) {
	    domElement.focus();
	  }
	}
	function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
	  // Update the props handle so that we know which props are the ones with
	  // with current event handlers.
	  updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.

	  updateProperties(domElement, updatePayload, type, oldProps, newProps);
	}
	function resetTextContent(domElement) {
	  setTextContent(domElement, '');
	}
	function commitTextUpdate(textInstance, oldText, newText) {
	  textInstance.nodeValue = newText;
	}
	function appendChild(parentInstance, child) {
	  parentInstance.appendChild(child);
	}
	function appendChildToContainer(container, child) {
	  var parentNode;

	  if (container.nodeType === COMMENT_NODE) {
	    parentNode = container.parentNode;
	    parentNode.insertBefore(child, container);
	  } else {
	    parentNode = container;
	    parentNode.appendChild(child);
	  } // This container might be used for a portal.
	  // If something inside a portal is clicked, that click should bubble
	  // through the React tree. However, on Mobile Safari the click would
	  // never bubble through the *DOM* tree unless an ancestor with onclick
	  // event exists. So we wouldn't see it and dispatch it.
	  // This is why we ensure that non React root containers have inline onclick
	  // defined.
	  // https://github.com/facebook/react/issues/11918


	  var reactRootContainer = container._reactRootContainer;

	  if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
	    // TODO: This cast may not be sound for SVG, MathML or custom elements.
	    trapClickOnNonInteractiveElement(parentNode);
	  }
	}
	function insertBefore(parentInstance, child, beforeChild) {
	  parentInstance.insertBefore(child, beforeChild);
	}
	function insertInContainerBefore(container, child, beforeChild) {
	  if (container.nodeType === COMMENT_NODE) {
	    container.parentNode.insertBefore(child, beforeChild);
	  } else {
	    container.insertBefore(child, beforeChild);
	  }
	}
	function removeChild(parentInstance, child) {
	  parentInstance.removeChild(child);
	}
	function removeChildFromContainer(container, child) {
	  if (container.nodeType === COMMENT_NODE) {
	    container.parentNode.removeChild(child);
	  } else {
	    container.removeChild(child);
	  }
	}

	function hideInstance(instance) {
	  // pass host context to this method?


	  instance = instance;
	  var style = instance.style;

	  if (typeof style.setProperty === 'function') {
	    style.setProperty('display', 'none', 'important');
	  } else {
	    style.display = 'none';
	  }
	}
	function hideTextInstance(textInstance) {
	  textInstance.nodeValue = '';
	}
	function unhideInstance(instance, props) {
	  instance = instance;
	  var styleProp = props[STYLE$1];
	  var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
	  instance.style.display = dangerousStyleValue('display', display);
	}
	function unhideTextInstance(textInstance, text) {
	  textInstance.nodeValue = text;
	} // -------------------
	function canHydrateInstance(instance, type, props) {
	  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
	    return null;
	  } // This has now been refined to an element node.


	  return instance;
	}
	function canHydrateTextInstance(instance, text) {
	  if (text === '' || instance.nodeType !== TEXT_NODE) {
	    // Empty strings are not parsed by HTML so there won't be a correct match here.
	    return null;
	  } // This has now been refined to a text node.


	  return instance;
	}
	function isSuspenseInstancePending(instance) {
	  return instance.data === SUSPENSE_PENDING_START_DATA;
	}
	function isSuspenseInstanceFallback(instance) {
	  return instance.data === SUSPENSE_FALLBACK_START_DATA;
	}

	function getNextHydratable(node) {
	  // Skip non-hydratable nodes.
	  for (; node != null; node = node.nextSibling) {
	    var nodeType = node.nodeType;

	    if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
	      break;
	    }
	  }

	  return node;
	}

	function getNextHydratableSibling(instance) {
	  return getNextHydratable(instance.nextSibling);
	}
	function getFirstHydratableChild(parentInstance) {
	  return getNextHydratable(parentInstance.firstChild);
	}
	function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
	  precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
	  // get attached.

	  updateFiberProps(instance, props);
	  var parentNamespace;

	  {
	    var hostContextDev = hostContext;
	    parentNamespace = hostContextDev.namespace;
	  }

	  return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
	}
	function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
	  precacheFiberNode(internalInstanceHandle, textInstance);
	  return diffHydratedText(textInstance, text);
	}
	function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
	  var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
	  // There might be nested nodes so we need to keep track of how
	  // deep we are and only break out when we're back on top.

	  var depth = 0;

	  while (node) {
	    if (node.nodeType === COMMENT_NODE) {
	      var data = node.data;

	      if (data === SUSPENSE_END_DATA) {
	        if (depth === 0) {
	          return getNextHydratableSibling(node);
	        } else {
	          depth--;
	        }
	      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
	        depth++;
	      }
	    }

	    node = node.nextSibling;
	  } // TODO: Warn, we didn't find the end comment boundary.


	  return null;
	} // Returns the SuspenseInstance if this node is a direct child of a
	// SuspenseInstance. I.e. if its previous sibling is a Comment with
	// SUSPENSE_x_START_DATA. Otherwise, null.

	function getParentSuspenseInstance(targetInstance) {
	  var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
	  // There might be nested nodes so we need to keep track of how
	  // deep we are and only break out when we're back on top.

	  var depth = 0;

	  while (node) {
	    if (node.nodeType === COMMENT_NODE) {
	      var data = node.data;

	      if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
	        if (depth === 0) {
	          return node;
	        } else {
	          depth--;
	        }
	      } else if (data === SUSPENSE_END_DATA) {
	        depth++;
	      }
	    }

	    node = node.previousSibling;
	  }

	  return null;
	}
	function commitHydratedContainer(container) {
	  // Retry if any event replaying was blocked on this.
	  retryIfBlockedOn(container);
	}
	function commitHydratedSuspenseInstance(suspenseInstance) {
	  // Retry if any event replaying was blocked on this.
	  retryIfBlockedOn(suspenseInstance);
	}
	function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
	  {
	    warnForUnmatchedText(textInstance, text);
	  }
	}
	function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
	  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
	    warnForUnmatchedText(textInstance, text);
	  }
	}
	function didNotHydrateContainerInstance(parentContainer, instance) {
	  {
	    if (instance.nodeType === ELEMENT_NODE) {
	      warnForDeletedHydratableElement(parentContainer, instance);
	    } else if (instance.nodeType === COMMENT_NODE) ; else {
	      warnForDeletedHydratableText(parentContainer, instance);
	    }
	  }
	}
	function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
	  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
	    if (instance.nodeType === ELEMENT_NODE) {
	      warnForDeletedHydratableElement(parentInstance, instance);
	    } else if (instance.nodeType === COMMENT_NODE) ; else {
	      warnForDeletedHydratableText(parentInstance, instance);
	    }
	  }
	}
	function didNotFindHydratableContainerInstance(parentContainer, type, props) {
	  {
	    warnForInsertedHydratedElement(parentContainer, type);
	  }
	}
	function didNotFindHydratableContainerTextInstance(parentContainer, text) {
	  {
	    warnForInsertedHydratedText(parentContainer, text);
	  }
	}
	function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
	  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
	    warnForInsertedHydratedElement(parentInstance, type);
	  }
	}
	function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
	  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
	    warnForInsertedHydratedText(parentInstance, text);
	  }
	}
	function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
	  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) ;
	}

	var randomKey = Math.random().toString(36).slice(2);
	var internalInstanceKey = '__reactInternalInstance$' + randomKey;
	var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;
	var internalContainerInstanceKey = '__reactContainere$' + randomKey;
	function precacheFiberNode(hostInst, node) {
	  node[internalInstanceKey] = hostInst;
	}
	function markContainerAsRoot(hostRoot, node) {
	  node[internalContainerInstanceKey] = hostRoot;
	}
	function unmarkContainerAsRoot(node) {
	  node[internalContainerInstanceKey] = null;
	}
	function isContainerMarkedAsRoot(node) {
	  return !!node[internalContainerInstanceKey];
	} // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
	// If the target node is part of a hydrated or not yet rendered subtree, then
	// this may also return a SuspenseComponent or HostRoot to indicate that.
	// Conceptually the HostRoot fiber is a child of the Container node. So if you
	// pass the Container node as the targetNode, you will not actually get the
	// HostRoot back. To get to the HostRoot, you need to pass a child of it.
	// The same thing applies to Suspense boundaries.

	function getClosestInstanceFromNode(targetNode) {
	  var targetInst = targetNode[internalInstanceKey];

	  if (targetInst) {
	    // Don't return HostRoot or SuspenseComponent here.
	    return targetInst;
	  } // If the direct event target isn't a React owned DOM node, we need to look
	  // to see if one of its parents is a React owned DOM node.


	  var parentNode = targetNode.parentNode;

	  while (parentNode) {
	    // We'll check if this is a container root that could include
	    // React nodes in the future. We need to check this first because
	    // if we're a child of a dehydrated container, we need to first
	    // find that inner container before moving on to finding the parent
	    // instance. Note that we don't check this field on  the targetNode
	    // itself because the fibers are conceptually between the container
	    // node and the first child. It isn't surrounding the container node.
	    // If it's not a container, we check if it's an instance.
	    targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];

	    if (targetInst) {
	      // Since this wasn't the direct target of the event, we might have
	      // stepped past dehydrated DOM nodes to get here. However they could
	      // also have been non-React nodes. We need to answer which one.
	      // If we the instance doesn't have any children, then there can't be
	      // a nested suspense boundary within it. So we can use this as a fast
	      // bailout. Most of the time, when people add non-React children to
	      // the tree, it is using a ref to a child-less DOM node.
	      // Normally we'd only need to check one of the fibers because if it
	      // has ever gone from having children to deleting them or vice versa
	      // it would have deleted the dehydrated boundary nested inside already.
	      // However, since the HostRoot starts out with an alternate it might
	      // have one on the alternate so we need to check in case this was a
	      // root.
	      var alternate = targetInst.alternate;

	      if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
	        // Next we need to figure out if the node that skipped past is
	        // nested within a dehydrated boundary and if so, which one.
	        var suspenseInstance = getParentSuspenseInstance(targetNode);

	        while (suspenseInstance !== null) {
	          // We found a suspense instance. That means that we haven't
	          // hydrated it yet. Even though we leave the comments in the
	          // DOM after hydrating, and there are boundaries in the DOM
	          // that could already be hydrated, we wouldn't have found them
	          // through this pass since if the target is hydrated it would
	          // have had an internalInstanceKey on it.
	          // Let's get the fiber associated with the SuspenseComponent
	          // as the deepest instance.
	          var targetSuspenseInst = suspenseInstance[internalInstanceKey];

	          if (targetSuspenseInst) {
	            return targetSuspenseInst;
	          } // If we don't find a Fiber on the comment, it might be because
	          // we haven't gotten to hydrate it yet. There might still be a
	          // parent boundary that hasn't above this one so we need to find
	          // the outer most that is known.


	          suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
	          // host component also hasn't hydrated yet. We can return it
	          // below since it will bail out on the isMounted check later.
	        }
	      }

	      return targetInst;
	    }

	    targetNode = parentNode;
	    parentNode = targetNode.parentNode;
	  }

	  return null;
	}
	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */

	function getInstanceFromNode$1(node) {
	  var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];

	  if (inst) {
	    if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
	      return inst;
	    } else {
	      return null;
	    }
	  }

	  return null;
	}
	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */

	function getNodeFromInstance$1(inst) {
	  if (inst.tag === HostComponent || inst.tag === HostText) {
	    // In Fiber this, is just the state node right now. We assume it will be
	    // a host component or host text.
	    return inst.stateNode;
	  } // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.


	  {
	    {
	      throw Error( "getNodeFromInstance: Invalid argument." );
	    }
	  }
	}
	function getFiberCurrentPropsFromNode$1(node) {
	  return node[internalEventHandlersKey] || null;
	}
	function updateFiberProps(node, props) {
	  node[internalEventHandlersKey] = props;
	}

	function getParent(inst) {
	  do {
	    inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
	    // That is depending on if we want nested subtrees (layers) to bubble
	    // events to their parent. We could also go through parentNode on the
	    // host node but that wouldn't work for React Native and doesn't let us
	    // do the portal feature.
	  } while (inst && inst.tag !== HostComponent);

	  if (inst) {
	    return inst;
	  }

	  return null;
	}
	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */


	function getLowestCommonAncestor(instA, instB) {
	  var depthA = 0;

	  for (var tempA = instA; tempA; tempA = getParent(tempA)) {
	    depthA++;
	  }

	  var depthB = 0;

	  for (var tempB = instB; tempB; tempB = getParent(tempB)) {
	    depthB++;
	  } // If A is deeper, crawl up.


	  while (depthA - depthB > 0) {
	    instA = getParent(instA);
	    depthA--;
	  } // If B is deeper, crawl up.


	  while (depthB - depthA > 0) {
	    instB = getParent(instB);
	    depthB--;
	  } // Walk in lockstep until we find a match.


	  var depth = depthA;

	  while (depth--) {
	    if (instA === instB || instA === instB.alternate) {
	      return instA;
	    }

	    instA = getParent(instA);
	    instB = getParent(instB);
	  }

	  return null;
	}
	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */

	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];

	  while (inst) {
	    path.push(inst);
	    inst = getParent(inst);
	  }

	  var i;

	  for (i = path.length; i-- > 0;) {
	    fn(path[i], 'captured', arg);
	  }

	  for (i = 0; i < path.length; i++) {
	    fn(path[i], 'bubbled', arg);
	  }
	}
	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */

	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];

	  while (true) {
	    if (!from) {
	      break;
	    }

	    if (from === common) {
	      break;
	    }

	    var alternate = from.alternate;

	    if (alternate !== null && alternate === common) {
	      break;
	    }

	    pathFrom.push(from);
	    from = getParent(from);
	  }

	  var pathTo = [];

	  while (true) {
	    if (!to) {
	      break;
	    }

	    if (to === common) {
	      break;
	    }

	    var _alternate = to.alternate;

	    if (_alternate !== null && _alternate === common) {
	      break;
	    }

	    pathTo.push(to);
	    to = getParent(to);
	  }

	  for (var i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], 'bubbled', argFrom);
	  }

	  for (var _i = pathTo.length; _i-- > 0;) {
	    fn(pathTo[_i], 'captured', argTo);
	  }
	}

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	    case 'onMouseEnter':
	      return !!(props.disabled && isInteractive(type));

	    default:
	      return false;
	  }
	}
	/**
	 * @param {object} inst The instance, which is the source of events.
	 * @param {string} registrationName Name of listener (e.g. `onClick`).
	 * @return {?function} The stored callback.
	 */


	function getListener(inst, registrationName) {
	  var listener; // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
	  // live here; needs to be moved to a better place soon

	  var stateNode = inst.stateNode;

	  if (!stateNode) {
	    // Work in progress (ex: onload events in incremental mode).
	    return null;
	  }

	  var props = getFiberCurrentPropsFromNode(stateNode);

	  if (!props) {
	    // Work in progress.
	    return null;
	  }

	  listener = props[registrationName];

	  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
	    return null;
	  }

	  if (!(!listener || typeof listener === 'function')) {
	    {
	      throw Error( "Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type." );
	    }
	  }

	  return listener;
	}

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}
	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing even a
	 * single one.
	 */

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */


	function accumulateDirectionalDispatches(inst, phase, event) {
	  {
	    if (!inst) {
	      error('Dispatching inst must not be null');
	    }
	  }

	  var listener = listenerAtPhase(inst, event, phase);

	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}
	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */


	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}
	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */


	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (inst && event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);

	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}
	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */


	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}
	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}
	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * These variables store information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 *
	 */
	var root = null;
	var startText = null;
	var fallbackText = null;
	function initialize(nativeEventTarget) {
	  root = nativeEventTarget;
	  startText = getText();
	  return true;
	}
	function reset() {
	  root = null;
	  startText = null;
	  fallbackText = null;
	}
	function getData() {
	  if (fallbackText) {
	    return fallbackText;
	  }

	  var start;
	  var startValue = startText;
	  var startLength = startValue.length;
	  var end;
	  var endValue = getText();
	  var endLength = endValue.length;

	  for (start = 0; start < startLength; start++) {
	    if (startValue[start] !== endValue[start]) {
	      break;
	    }
	  }

	  var minEnd = startLength - start;

	  for (end = 1; end <= minEnd; end++) {
	    if (startValue[startLength - end] !== endValue[endLength - end]) {
	      break;
	    }
	  }

	  var sliceTail = end > 1 ? 1 - end : undefined;
	  fallbackText = endValue.slice(start, sliceTail);
	  return fallbackText;
	}
	function getText() {
	  if ('value' in root) {
	    return root.value;
	  }

	  return root.textContent;
	}

	var EVENT_POOL_SIZE = 10;
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: function () {
	    return null;
	  },
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	function functionThatReturnsTrue() {
	  return true;
	}

	function functionThatReturnsFalse() {
	  return false;
	}
	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */


	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	    delete this.isDefaultPrevented;
	    delete this.isPropagationStopped;
	  }

	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;
	  var Interface = this.constructor.Interface;

	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }

	    {
	      delete this[propName]; // this has a getter/setter for warnings
	    }

	    var normalize = Interface[propName];

	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

	  if (defaultPrevented) {
	    this.isDefaultPrevented = functionThatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = functionThatReturnsFalse;
	  }

	  this.isPropagationStopped = functionThatReturnsFalse;
	  return this;
	}

	_assign(SyntheticEvent.prototype, {
	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;

	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else if (typeof event.returnValue !== 'unknown') {
	      event.returnValue = false;
	    }

	    this.isDefaultPrevented = functionThatReturnsTrue;
	  },
	  stopPropagation: function () {
	    var event = this.nativeEvent;

	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else if (typeof event.cancelBubble !== 'unknown') {
	      // The ChangeEventPlugin registers a "propertychange" event for
	      // IE. This event does not support bubbling or cancelling, and
	      // any references to cancelBubble throw "Member not found".  A
	      // typeof check of "unknown" circumvents this issue (and is also
	      // IE specific).
	      event.cancelBubble = true;
	    }

	    this.isPropagationStopped = functionThatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = functionThatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: functionThatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;

	    for (var propName in Interface) {
	      {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      }
	    }

	    this.dispatchConfig = null;
	    this._targetInst = null;
	    this.nativeEvent = null;
	    this.isDefaultPrevented = functionThatReturnsFalse;
	    this.isPropagationStopped = functionThatReturnsFalse;
	    this._dispatchListeners = null;
	    this._dispatchInstances = null;

	    {
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'isDefaultPrevented', getPooledWarningPropertyDefinition('isDefaultPrevented', functionThatReturnsFalse));
	      Object.defineProperty(this, 'isPropagationStopped', getPooledWarningPropertyDefinition('isPropagationStopped', functionThatReturnsFalse));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', function () {}));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', function () {}));
	    }
	  }
	});

	SyntheticEvent.Interface = EventInterface;
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 */

	SyntheticEvent.extend = function (Interface) {
	  var Super = this;

	  var E = function () {};

	  E.prototype = Super.prototype;
	  var prototype = new E();

	  function Class() {
	    return Super.apply(this, arguments);
	  }

	  _assign(prototype, Class.prototype);

	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;
	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.extend = Super.extend;
	  addEventPoolingTo(Class);
	  return Class;
	};

	addEventPoolingTo(SyntheticEvent);
	/**
	 * Helper to nullify syntheticEvent instance properties when destructing
	 *
	 * @param {String} propName
	 * @param {?object} getVal
	 * @return {object} defineProperty object
	 */

	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };

	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }

	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }

	  function warn(action, result) {
	    {
	      error("This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result);
	    }
	  }
	}

	function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
	  var EventConstructor = this;

	  if (EventConstructor.eventPool.length) {
	    var instance = EventConstructor.eventPool.pop();
	    EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
	    return instance;
	  }

	  return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
	}

	function releasePooledEvent(event) {
	  var EventConstructor = this;

	  if (!(event instanceof EventConstructor)) {
	    {
	      throw Error( "Trying to release an event instance into a pool of a different type." );
	    }
	  }

	  event.destructor();

	  if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
	    EventConstructor.eventPool.push(event);
	  }
	}

	function addEventPoolingTo(EventConstructor) {
	  EventConstructor.eventPool = [];
	  EventConstructor.getPooled = getPooledEvent;
	  EventConstructor.release = releasePooledEvent;
	}

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */

	var SyntheticCompositionEvent = SyntheticEvent.extend({
	  data: null
	});

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */

	var SyntheticInputEvent = SyntheticEvent.extend({
	  data: null
	});

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

	var START_KEYCODE = 229;
	var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
	var documentMode = null;

	if (canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	} // Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.


	var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.

	var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE); // Events and their corresponding property names.

	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: 'onBeforeInput',
	      captured: 'onBeforeInputCapture'
	    },
	    dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionEnd',
	      captured: 'onCompositionEndCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionStart',
	      captured: 'onCompositionStartCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionUpdate',
	      captured: 'onCompositionUpdateCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
	  }
	}; // Track whether we've ever handled a keypress on the space key.

	var hasSpaceKeypress = false;
	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */

	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}
	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */


	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case TOP_COMPOSITION_START:
	      return eventTypes.compositionStart;

	    case TOP_COMPOSITION_END:
	      return eventTypes.compositionEnd;

	    case TOP_COMPOSITION_UPDATE:
	      return eventTypes.compositionUpdate;
	  }
	}
	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */


	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
	}
	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */


	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case TOP_KEY_UP:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

	    case TOP_KEY_DOWN:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;

	    case TOP_KEY_PRESS:
	    case TOP_MOUSE_DOWN:
	    case TOP_BLUR:
	      // Events are not possible without cancelling IME.
	      return true;

	    default:
	      return false;
	  }
	}
	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */


	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;

	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }

	  return null;
	}
	/**
	 * Check if a composition event was triggered by Korean IME.
	 * Our fallback mode does not work well with IE's Korean IME,
	 * so just use native composition events when Korean IME is used.
	 * Although CompositionEvent.locale property is deprecated,
	 * it is available in IE, where our fallback mode is enabled.
	 *
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */


	function isUsingKoreanIME(nativeEvent) {
	  return nativeEvent.locale === 'ko';
	} // Track the current IME composition status, if any.


	var isComposing = false;
	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */

	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!isComposing) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!isComposing && eventType === eventTypes.compositionStart) {
	      isComposing = initialize(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (isComposing) {
	        fallbackData = getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);

	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  accumulateTwoPhaseDispatches(event);
	  return event;
	}
	/**
	 * @param {TopLevelType} topLevelType Number from `TopLevelType`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */


	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case TOP_COMPOSITION_END:
	      return getDataFromCustomEvent(nativeEvent);

	    case TOP_KEY_PRESS:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;

	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case TOP_TEXT_INPUT:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to ignore it.

	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}
	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {number} topLevelType Number from `TopLevelEventTypes`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */


	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (isComposing) {
	    if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = getData();
	      reset();
	      isComposing = false;
	      return chars;
	    }

	    return null;
	  }

	  switch (topLevelType) {
	    case TOP_PASTE:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;

	    case TOP_KEY_PRESS:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (!isKeypressCommand(nativeEvent)) {
	        // IE fires the `keypress` event when a user types an emoji via
	        // Touch keyboard of Windows.  In such a case, the `char` property
	        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
	        // is 2, the property `which` does not represent an emoji correctly.
	        // In such a case, we directly return the `char` property instead of
	        // using `which`.
	        if (nativeEvent.char && nativeEvent.char.length > 1) {
	          return nativeEvent.char;
	        } else if (nativeEvent.which) {
	          return String.fromCharCode(nativeEvent.which);
	        }
	      }

	      return null;

	    case TOP_COMPOSITION_END:
	      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

	    default:
	      return null;
	  }
	}
	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */


	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  } // If no characters are being inserted, no BeforeInput event should
	  // be fired.


	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
	  event.data = chars;
	  accumulateTwoPhaseDispatches(event);
	  return event;
	}
	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */


	var BeforeInputEventPlugin = {
	  eventTypes: eventTypes,
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
	    var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	    var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

	    if (composition === null) {
	      return beforeInput;
	    }

	    if (beforeInput === null) {
	      return composition;
	    }

	    return [composition, beforeInput];
	  }
	};

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  color: true,
	  date: true,
	  datetime: true,
	  'datetime-local': true,
	  email: true,
	  month: true,
	  number: true,
	  password: true,
	  range: true,
	  search: true,
	  tel: true,
	  text: true,
	  time: true,
	  url: true,
	  week: true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }

	  if (nodeName === 'textarea') {
	    return true;
	  }

	  return false;
	}

	var eventTypes$1 = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: 'onChange',
	      captured: 'onChangeCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
	  }
	};

	function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
	  var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
	  event.type = 'change'; // Flag this event loop as needing state restore.

	  enqueueStateRestore(target);
	  accumulateTwoPhaseDispatches(event);
	  return event;
	}
	/**
	 * For IE shims
	 */


	var activeElement = null;
	var activeElementInst = null;
	/**
	 * SECTION: handle `change` event
	 */

	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.

	  batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  runEventsInBatch(event);
	}

	function getInstIfValueChanged(targetInst) {
	  var targetNode = getNodeFromInstance$1(targetInst);

	  if (updateValueIfChanged(targetNode)) {
	    return targetInst;
	  }
	}

	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === TOP_CHANGE) {
	    return targetInst;
	  }
	}
	/**
	 * SECTION: handle `input` event
	 */


	var isInputEventSupported = false;

	if (canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
	}
	/**
	 * (For IE <=9) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */


	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}
	/**
	 * (For IE <=9) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */


	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  activeElement = null;
	  activeElementInst = null;
	}
	/**
	 * (For IE <=9) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */


	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }

	  if (getInstIfValueChanged(activeElementInst)) {
	    manualDispatchChangeEvent(nativeEvent);
	  }
	}

	function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
	  if (topLevelType === TOP_FOCUS) {
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === TOP_BLUR) {
	    stopWatchingForValueChange();
	  }
	} // For IE8 and IE9.


	function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
	  if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    return getInstIfValueChanged(activeElementInst);
	  }
	}
	/**
	 * SECTION: handle `click` event
	 */


	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetInstForClickEvent(topLevelType, targetInst) {
	  if (topLevelType === TOP_CLICK) {
	    return getInstIfValueChanged(targetInst);
	  }
	}

	function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
	    return getInstIfValueChanged(targetInst);
	  }
	}

	function handleControlledInputBlur(node) {
	  var state = node._wrapperState;

	  if (!state || !state.controlled || node.type !== 'number') {
	    return;
	  }

	  {
	    // If controlled, assign the value attribute to the current value on blur
	    setDefaultValue(node, 'number', node.value);
	  }
	}
	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */


	var ChangeEventPlugin = {
	  eventTypes: eventTypes$1,
	  _isInputEventSupported: isInputEventSupported,
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
	    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
	    var getTargetInstFunc, handleEventFunc;

	    if (shouldUseChangeEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForChangeEvent;
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventPolyfill;
	        handleEventFunc = handleEventsForInputEventPolyfill;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }

	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst);

	      if (inst) {
	        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    } // When blurring, set the value attribute for number inputs


	    if (topLevelType === TOP_BLUR) {
	      handleControlledInputBlur(targetNode);
	    }
	  }
	};

	var SyntheticUIEvent = SyntheticEvent.extend({
	  view: null,
	  detail: null
	});

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */
	var modifierKeyToProp = {
	  Alt: 'altKey',
	  Control: 'ctrlKey',
	  Meta: 'metaKey',
	  Shift: 'shiftKey'
	}; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
	// getModifierState. If getModifierState is not supported, we map it to a set of
	// modifier keys exposed by the event. In this case, Lock-keys are not supported.

	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;

	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }

	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	var previousScreenX = 0;
	var previousScreenY = 0; // Use flags to signal movementX/Y has already been set

	var isMovementXSet = false;
	var isMovementYSet = false;
	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var SyntheticMouseEvent = SyntheticUIEvent.extend({
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  pageX: null,
	  pageY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: null,
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  movementX: function (event) {
	    if ('movementX' in event) {
	      return event.movementX;
	    }

	    var screenX = previousScreenX;
	    previousScreenX = event.screenX;

	    if (!isMovementXSet) {
	      isMovementXSet = true;
	      return 0;
	    }

	    return event.type === 'mousemove' ? event.screenX - screenX : 0;
	  },
	  movementY: function (event) {
	    if ('movementY' in event) {
	      return event.movementY;
	    }

	    var screenY = previousScreenY;
	    previousScreenY = event.screenY;

	    if (!isMovementYSet) {
	      isMovementYSet = true;
	      return 0;
	    }

	    return event.type === 'mousemove' ? event.screenY - screenY : 0;
	  }
	});

	/**
	 * @interface PointerEvent
	 * @see http://www.w3.org/TR/pointerevents/
	 */

	var SyntheticPointerEvent = SyntheticMouseEvent.extend({
	  pointerId: null,
	  width: null,
	  height: null,
	  pressure: null,
	  tangentialPressure: null,
	  tiltX: null,
	  tiltY: null,
	  twist: null,
	  pointerType: null,
	  isPrimary: null
	});

	var eventTypes$2 = {
	  mouseEnter: {
	    registrationName: 'onMouseEnter',
	    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
	  },
	  mouseLeave: {
	    registrationName: 'onMouseLeave',
	    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
	  },
	  pointerEnter: {
	    registrationName: 'onPointerEnter',
	    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
	  },
	  pointerLeave: {
	    registrationName: 'onPointerLeave',
	    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
	  }
	};
	var EnterLeaveEventPlugin = {
	  eventTypes: eventTypes$2,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
	    var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
	    var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;

	    if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0 && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      // If this is an over event with a target, then we've already dispatched
	      // the event in the out event of the other target. If this is replayed,
	      // then it's because we couldn't dispatch against this target previously
	      // so we have to do it now instead.
	      return null;
	    }

	    if (!isOutEvent && !isOverEvent) {
	      // Must not be a mouse or pointer in or out - ignoring.
	      return null;
	    }

	    var win;

	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;

	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;

	    if (isOutEvent) {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? getClosestInstanceFromNode(related) : null;

	      if (to !== null) {
	        var nearestMounted = getNearestMountedFiber(to);

	        if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
	          to = null;
	        }
	      }
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var eventInterface, leaveEventType, enterEventType, eventTypePrefix;

	    if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
	      eventInterface = SyntheticMouseEvent;
	      leaveEventType = eventTypes$2.mouseLeave;
	      enterEventType = eventTypes$2.mouseEnter;
	      eventTypePrefix = 'mouse';
	    } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
	      eventInterface = SyntheticPointerEvent;
	      leaveEventType = eventTypes$2.pointerLeave;
	      enterEventType = eventTypes$2.pointerEnter;
	      eventTypePrefix = 'pointer';
	    }

	    var fromNode = from == null ? win : getNodeFromInstance$1(from);
	    var toNode = to == null ? win : getNodeFromInstance$1(to);
	    var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
	    leave.type = eventTypePrefix + 'leave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;
	    var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
	    enter.type = eventTypePrefix + 'enter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;
	    accumulateEnterLeaveDispatches(leave, enter, from, to); // If we are not processing the first ancestor, then we
	    // should not process the same nativeEvent again, as we
	    // will have already processed it in the first ancestor.

	    if ((eventSystemFlags & IS_FIRST_ANCESTOR) === 0) {
	      return [leave];
	    }

	    return [leave, enter];
	  }
	};

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
	  ;
	}

	var objectIs = typeof Object.is === 'function' ? Object.is : is;

	var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */

	function shallowEqual(objA, objB) {
	  if (objectIs(objA, objB)) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  } // Test for A's keys different from B.


	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
	var eventTypes$3 = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: 'onSelect',
	      captured: 'onSelectCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
	  }
	};
	var activeElement$1 = null;
	var activeElementInst$1 = null;
	var lastSelection = null;
	var mouseDown = false;
	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */

	function getSelection$1(node) {
	  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else {
	    var win = node.ownerDocument && node.ownerDocument.defaultView || window;
	    var selection = win.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  }
	}
	/**
	 * Get document associated with the event target.
	 *
	 * @param {object} nativeEventTarget
	 * @return {Document}
	 */


	function getEventTargetDocument(eventTarget) {
	  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
	}
	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @param {object} nativeEventTarget
	 * @return {?SyntheticEvent}
	 */


	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  var doc = getEventTargetDocument(nativeEventTarget);

	  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
	    return null;
	  } // Only fire when selection has actually changed.


	  var currentSelection = getSelection$1(activeElement$1);

	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;
	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);
	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement$1;
	    accumulateTwoPhaseDispatches(syntheticEvent);
	    return syntheticEvent;
	  }

	  return null;
	}
	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */


	var SelectEventPlugin = {
	  eventTypes: eventTypes$3,
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, container) {
	    var containerOrDoc = container || getEventTargetDocument(nativeEventTarget); // Track whether all listeners exists for this plugin. If none exist, we do
	    // not extract events. See #3639.

	    if (!containerOrDoc || !isListeningToAllDependencies('onSelect', containerOrDoc)) {
	      return null;
	    }

	    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case TOP_FOCUS:
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement$1 = targetNode;
	          activeElementInst$1 = targetInst;
	          lastSelection = null;
	        }

	        break;

	      case TOP_BLUR:
	        activeElement$1 = null;
	        activeElementInst$1 = null;
	        lastSelection = null;
	        break;
	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.

	      case TOP_MOUSE_DOWN:
	        mouseDown = true;
	        break;

	      case TOP_CONTEXT_MENU:
	      case TOP_MOUSE_UP:
	      case TOP_DRAG_END:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.

	      case TOP_SELECTION_CHANGE:
	        if (skipSelectionChangeEvent) {
	          break;
	        }

	      // falls through

	      case TOP_KEY_DOWN:
	      case TOP_KEY_UP:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  }
	};

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */

	var SyntheticAnimationEvent = SyntheticEvent.extend({
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	});

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */

	var SyntheticClipboardEvent = SyntheticEvent.extend({
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	});

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var SyntheticFocusEvent = SyntheticUIEvent.extend({
	  relatedTarget: null
	});

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
	  // report Enter as charCode 10 when ctrl is pressed.


	  if (charCode === 10) {
	    charCode = 13;
	  } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.


	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */

	var normalizeKey = {
	  Esc: 'Escape',
	  Spacebar: ' ',
	  Left: 'ArrowLeft',
	  Up: 'ArrowUp',
	  Right: 'ArrowRight',
	  Down: 'ArrowDown',
	  Del: 'Delete',
	  Win: 'OS',
	  Menu: 'ContextMenu',
	  Apps: 'ContextMenu',
	  Scroll: 'ScrollLock',
	  MozPrintableKey: 'Unidentified'
	};
	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */

	var translateToKey = {
	  '8': 'Backspace',
	  '9': 'Tab',
	  '12': 'Clear',
	  '13': 'Enter',
	  '16': 'Shift',
	  '17': 'Control',
	  '18': 'Alt',
	  '19': 'Pause',
	  '20': 'CapsLock',
	  '27': 'Escape',
	  '32': ' ',
	  '33': 'PageUp',
	  '34': 'PageDown',
	  '35': 'End',
	  '36': 'Home',
	  '37': 'ArrowLeft',
	  '38': 'ArrowUp',
	  '39': 'ArrowRight',
	  '40': 'ArrowDown',
	  '45': 'Insert',
	  '46': 'Delete',
	  '112': 'F1',
	  '113': 'F2',
	  '114': 'F3',
	  '115': 'F4',
	  '116': 'F5',
	  '117': 'F6',
	  '118': 'F7',
	  '119': 'F8',
	  '120': 'F9',
	  '121': 'F10',
	  '122': 'F11',
	  '123': 'F12',
	  '144': 'NumLock',
	  '145': 'ScrollLock',
	  '224': 'Meta'
	};
	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */

	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.
	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

	    if (key !== 'Unidentified') {
	      return key;
	    }
	  } // Browser does not implement `key`, polyfill as much of it as we can.


	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.

	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }

	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }

	  return '';
	}

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.
	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }

	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.
	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }

	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }

	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }

	    return 0;
	  }
	});

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var SyntheticDragEvent = SyntheticMouseEvent.extend({
	  dataTransfer: null
	});

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */

	var SyntheticTouchEvent = SyntheticUIEvent.extend({
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	});

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */

	var SyntheticTransitionEvent = SyntheticEvent.extend({
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	});

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var SyntheticWheelEvent = SyntheticMouseEvent.extend({
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,
	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	});

	var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];
	var SimpleEventPlugin = {
	  // simpleEventPluginEventTypes gets populated from
	  // the DOMEventProperties module.
	  eventTypes: simpleEventPluginEventTypes,
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
	    var dispatchConfig = topLevelEventsToDispatchConfig.get(topLevelType);

	    if (!dispatchConfig) {
	      return null;
	    }

	    var EventConstructor;

	    switch (topLevelType) {
	      case TOP_KEY_PRESS:
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }

	      /* falls through */

	      case TOP_KEY_DOWN:
	      case TOP_KEY_UP:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;

	      case TOP_BLUR:
	      case TOP_FOCUS:
	        EventConstructor = SyntheticFocusEvent;
	        break;

	      case TOP_CLICK:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }

	      /* falls through */

	      case TOP_AUX_CLICK:
	      case TOP_DOUBLE_CLICK:
	      case TOP_MOUSE_DOWN:
	      case TOP_MOUSE_MOVE:
	      case TOP_MOUSE_UP: // TODO: Disabled elements should not respond to mouse events

	      /* falls through */

	      case TOP_MOUSE_OUT:
	      case TOP_MOUSE_OVER:
	      case TOP_CONTEXT_MENU:
	        EventConstructor = SyntheticMouseEvent;
	        break;

	      case TOP_DRAG:
	      case TOP_DRAG_END:
	      case TOP_DRAG_ENTER:
	      case TOP_DRAG_EXIT:
	      case TOP_DRAG_LEAVE:
	      case TOP_DRAG_OVER:
	      case TOP_DRAG_START:
	      case TOP_DROP:
	        EventConstructor = SyntheticDragEvent;
	        break;

	      case TOP_TOUCH_CANCEL:
	      case TOP_TOUCH_END:
	      case TOP_TOUCH_MOVE:
	      case TOP_TOUCH_START:
	        EventConstructor = SyntheticTouchEvent;
	        break;

	      case TOP_ANIMATION_END:
	      case TOP_ANIMATION_ITERATION:
	      case TOP_ANIMATION_START:
	        EventConstructor = SyntheticAnimationEvent;
	        break;

	      case TOP_TRANSITION_END:
	        EventConstructor = SyntheticTransitionEvent;
	        break;

	      case TOP_SCROLL:
	        EventConstructor = SyntheticUIEvent;
	        break;

	      case TOP_WHEEL:
	        EventConstructor = SyntheticWheelEvent;
	        break;

	      case TOP_COPY:
	      case TOP_CUT:
	      case TOP_PASTE:
	        EventConstructor = SyntheticClipboardEvent;
	        break;

	      case TOP_GOT_POINTER_CAPTURE:
	      case TOP_LOST_POINTER_CAPTURE:
	      case TOP_POINTER_CANCEL:
	      case TOP_POINTER_DOWN:
	      case TOP_POINTER_MOVE:
	      case TOP_POINTER_OUT:
	      case TOP_POINTER_OVER:
	      case TOP_POINTER_UP:
	        EventConstructor = SyntheticPointerEvent;
	        break;

	      default:
	        {
	          if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
	            error('SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
	          }
	        } // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0


	        EventConstructor = SyntheticEvent;
	        break;
	    }

	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    accumulateTwoPhaseDispatches(event);
	    return event;
	  }
	};

	/**
	 * Specifies a deterministic ordering of `EventPlugin`s. A convenient way to
	 * reason about plugins, without having to package every one of them. This
	 * is better than having plugins be ordered in the same order that they
	 * are injected because that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */

	var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];
	/**
	 * Inject modules for resolving DOM hierarchy and plugin ordering.
	 */

	injectEventPluginOrder(DOMEventPluginOrder);
	setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);
	/**
	 * Some important event plugins included by default (without having to require
	 * them).
	 */

	injectEventPluginsByName({
	  SimpleEventPlugin: SimpleEventPlugin,
	  EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	  ChangeEventPlugin: ChangeEventPlugin,
	  SelectEventPlugin: SelectEventPlugin,
	  BeforeInputEventPlugin: BeforeInputEventPlugin
	});

	// Prefix measurements so that it's possible to filter them.
	// Longer prefixes are hard to read in DevTools.
	var reactEmoji = "\u269B";
	var warningEmoji = "\u26D4";
	var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function'; // Keep track of current fiber so that we know the path to unwind on pause.
	// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?

	var currentFiber = null; // If we're in the middle of user code, which fiber and method is it?
	// Reusing `currentFiber` would be confusing for this because user code fiber
	// can change during commit phase too, but we don't need to unwind it (since
	// lifecycles in the commit phase don't resemble a tree).

	var currentPhase = null;
	var currentPhaseFiber = null; // Did lifecycle hook schedule an update? This is often a performance problem,
	// so we will keep track of it, and include it in the report.
	// Track commits caused by cascading updates.

	var isCommitting = false;
	var hasScheduledUpdateInCurrentCommit = false;
	var hasScheduledUpdateInCurrentPhase = false;
	var commitCountInCurrentWorkLoop = 0;
	var effectCountInCurrentCommit = 0;
	// to avoid stretch the commit phase with measurement overhead.

	var labelsInCurrentCommit = new Set();

	var formatMarkName = function (markName) {
	  return reactEmoji + " " + markName;
	};

	var formatLabel = function (label, warning) {
	  var prefix = warning ? warningEmoji + " " : reactEmoji + " ";
	  var suffix = warning ? " Warning: " + warning : '';
	  return "" + prefix + label + suffix;
	};

	var beginMark = function (markName) {
	  performance.mark(formatMarkName(markName));
	};

	var clearMark = function (markName) {
	  performance.clearMarks(formatMarkName(markName));
	};

	var endMark = function (label, markName, warning) {
	  var formattedMarkName = formatMarkName(markName);
	  var formattedLabel = formatLabel(label, warning);

	  try {
	    performance.measure(formattedLabel, formattedMarkName);
	  } catch (err) {} // If previous mark was missing for some reason, this will throw.
	  // This could only happen if React crashed in an unexpected place earlier.
	  // Don't pile on with more errors.
	  // Clear marks immediately to avoid growing buffer.


	  performance.clearMarks(formattedMarkName);
	  performance.clearMeasures(formattedLabel);
	};

	var getFiberMarkName = function (label, debugID) {
	  return label + " (#" + debugID + ")";
	};

	var getFiberLabel = function (componentName, isMounted, phase) {
	  if (phase === null) {
	    // These are composite component total time measurements.
	    return componentName + " [" + (isMounted ? 'update' : 'mount') + "]";
	  } else {
	    // Composite component methods.
	    return componentName + "." + phase;
	  }
	};

	var beginFiberMark = function (fiber, phase) {
	  var componentName = getComponentName(fiber.type) || 'Unknown';
	  var debugID = fiber._debugID;
	  var isMounted = fiber.alternate !== null;
	  var label = getFiberLabel(componentName, isMounted, phase);

	  if (isCommitting && labelsInCurrentCommit.has(label)) {
	    // During the commit phase, we don't show duplicate labels because
	    // there is a fixed overhead for every measurement, and we don't
	    // want to stretch the commit phase beyond necessary.
	    return false;
	  }

	  labelsInCurrentCommit.add(label);
	  var markName = getFiberMarkName(label, debugID);
	  beginMark(markName);
	  return true;
	};

	var clearFiberMark = function (fiber, phase) {
	  var componentName = getComponentName(fiber.type) || 'Unknown';
	  var debugID = fiber._debugID;
	  var isMounted = fiber.alternate !== null;
	  var label = getFiberLabel(componentName, isMounted, phase);
	  var markName = getFiberMarkName(label, debugID);
	  clearMark(markName);
	};

	var endFiberMark = function (fiber, phase, warning) {
	  var componentName = getComponentName(fiber.type) || 'Unknown';
	  var debugID = fiber._debugID;
	  var isMounted = fiber.alternate !== null;
	  var label = getFiberLabel(componentName, isMounted, phase);
	  var markName = getFiberMarkName(label, debugID);
	  endMark(label, markName, warning);
	};

	var shouldIgnoreFiber = function (fiber) {
	  // Host components should be skipped in the timeline.
	  // We could check typeof fiber.type, but does this work with RN?
	  switch (fiber.tag) {
	    case HostRoot:
	    case HostComponent:
	    case HostText:
	    case HostPortal:
	    case Fragment:
	    case ContextProvider:
	    case ContextConsumer:
	    case Mode:
	      return true;

	    default:
	      return false;
	  }
	};

	var clearPendingPhaseMeasurement = function () {
	  if (currentPhase !== null && currentPhaseFiber !== null) {
	    clearFiberMark(currentPhaseFiber, currentPhase);
	  }

	  currentPhaseFiber = null;
	  currentPhase = null;
	  hasScheduledUpdateInCurrentPhase = false;
	};

	var pauseTimers = function () {
	  // Stops all currently active measurements so that they can be resumed
	  // if we continue in a later deferred loop from the same unit of work.
	  var fiber = currentFiber;

	  while (fiber) {
	    if (fiber._debugIsCurrentlyTiming) {
	      endFiberMark(fiber, null, null);
	    }

	    fiber = fiber.return;
	  }
	};

	var resumeTimersRecursively = function (fiber) {
	  if (fiber.return !== null) {
	    resumeTimersRecursively(fiber.return);
	  }

	  if (fiber._debugIsCurrentlyTiming) {
	    beginFiberMark(fiber, null);
	  }
	};

	var resumeTimers = function () {
	  // Resumes all measurements that were active during the last deferred loop.
	  if (currentFiber !== null) {
	    resumeTimersRecursively(currentFiber);
	  }
	};

	function recordEffect() {
	  {
	    effectCountInCurrentCommit++;
	  }
	}
	function recordScheduleUpdate() {
	  {
	    if (isCommitting) {
	      hasScheduledUpdateInCurrentCommit = true;
	    }

	    if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
	      hasScheduledUpdateInCurrentPhase = true;
	    }
	  }
	}
	function startWorkTimer(fiber) {
	  {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    } // If we pause, this is the fiber to unwind from.


	    currentFiber = fiber;

	    if (!beginFiberMark(fiber, null)) {
	      return;
	    }

	    fiber._debugIsCurrentlyTiming = true;
	  }
	}
	function cancelWorkTimer(fiber) {
	  {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    } // Remember we shouldn't complete measurement for this fiber.
	    // Otherwise flamechart will be deep even for small updates.


	    fiber._debugIsCurrentlyTiming = false;
	    clearFiberMark(fiber, null);
	  }
	}
	function stopWorkTimer(fiber) {
	  {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    } // If we pause, its parent is the fiber to unwind from.


	    currentFiber = fiber.return;

	    if (!fiber._debugIsCurrentlyTiming) {
	      return;
	    }

	    fiber._debugIsCurrentlyTiming = false;
	    endFiberMark(fiber, null, null);
	  }
	}
	function stopFailedWorkTimer(fiber) {
	  {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    } // If we pause, its parent is the fiber to unwind from.


	    currentFiber = fiber.return;

	    if (!fiber._debugIsCurrentlyTiming) {
	      return;
	    }

	    fiber._debugIsCurrentlyTiming = false;
	    var warning = fiber.tag === SuspenseComponent ? 'Rendering was suspended' : 'An error was thrown inside this error boundary';
	    endFiberMark(fiber, null, warning);
	  }
	}
	function startPhaseTimer(fiber, phase) {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    clearPendingPhaseMeasurement();

	    if (!beginFiberMark(fiber, phase)) {
	      return;
	    }

	    currentPhaseFiber = fiber;
	    currentPhase = phase;
	  }
	}
	function stopPhaseTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    if (currentPhase !== null && currentPhaseFiber !== null) {
	      var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
	      endFiberMark(currentPhaseFiber, currentPhase, warning);
	    }

	    currentPhase = null;
	    currentPhaseFiber = null;
	  }
	}
	function startWorkLoopTimer(nextUnitOfWork) {
	  {
	    currentFiber = nextUnitOfWork;

	    if (!supportsUserTiming) {
	      return;
	    }

	    commitCountInCurrentWorkLoop = 0; // This is top level call.
	    // Any other measurements are performed within.

	    beginMark('(React Tree Reconciliation)'); // Resume any measurements that were in progress during the last loop.

	    resumeTimers();
	  }
	}
	function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    var warning = null;

	    if (interruptedBy !== null) {
	      if (interruptedBy.tag === HostRoot) {
	        warning = 'A top-level update interrupted the previous render';
	      } else {
	        var componentName = getComponentName(interruptedBy.type) || 'Unknown';
	        warning = "An update to " + componentName + " interrupted the previous render";
	      }
	    } else if (commitCountInCurrentWorkLoop > 1) {
	      warning = 'There were cascading updates';
	    }

	    commitCountInCurrentWorkLoop = 0;
	    var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)'; // Pause any measurements until the next loop.

	    pauseTimers();
	    endMark(label, '(React Tree Reconciliation)', warning);
	  }
	}
	function startCommitTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    isCommitting = true;
	    hasScheduledUpdateInCurrentCommit = false;
	    labelsInCurrentCommit.clear();
	    beginMark('(Committing Changes)');
	  }
	}
	function stopCommitTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    var warning = null;

	    if (hasScheduledUpdateInCurrentCommit) {
	      warning = 'Lifecycle hook scheduled a cascading update';
	    } else if (commitCountInCurrentWorkLoop > 0) {
	      warning = 'Caused by a cascading update in earlier commit';
	    }

	    hasScheduledUpdateInCurrentCommit = false;
	    commitCountInCurrentWorkLoop++;
	    isCommitting = false;
	    labelsInCurrentCommit.clear();
	    endMark('(Committing Changes)', '(Committing Changes)', warning);
	  }
	}
	function startCommitSnapshotEffectsTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    effectCountInCurrentCommit = 0;
	    beginMark('(Committing Snapshot Effects)');
	  }
	}
	function stopCommitSnapshotEffectsTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    var count = effectCountInCurrentCommit;
	    effectCountInCurrentCommit = 0;
	    endMark("(Committing Snapshot Effects: " + count + " Total)", '(Committing Snapshot Effects)', null);
	  }
	}
	function startCommitHostEffectsTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    effectCountInCurrentCommit = 0;
	    beginMark('(Committing Host Effects)');
	  }
	}
	function stopCommitHostEffectsTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    var count = effectCountInCurrentCommit;
	    effectCountInCurrentCommit = 0;
	    endMark("(Committing Host Effects: " + count + " Total)", '(Committing Host Effects)', null);
	  }
	}
	function startCommitLifeCyclesTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    effectCountInCurrentCommit = 0;
	    beginMark('(Calling Lifecycle Methods)');
	  }
	}
	function stopCommitLifeCyclesTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    var count = effectCountInCurrentCommit;
	    effectCountInCurrentCommit = 0;
	    endMark("(Calling Lifecycle Methods: " + count + " Total)", '(Calling Lifecycle Methods)', null);
	  }
	}

	var valueStack = [];
	var fiberStack;

	{
	  fiberStack = [];
	}

	var index = -1;

	function createCursor(defaultValue) {
	  return {
	    current: defaultValue
	  };
	}

	function pop(cursor, fiber) {
	  if (index < 0) {
	    {
	      error('Unexpected pop.');
	    }

	    return;
	  }

	  {
	    if (fiber !== fiberStack[index]) {
	      error('Unexpected Fiber popped.');
	    }
	  }

	  cursor.current = valueStack[index];
	  valueStack[index] = null;

	  {
	    fiberStack[index] = null;
	  }

	  index--;
	}

	function push(cursor, value, fiber) {
	  index++;
	  valueStack[index] = cursor.current;

	  {
	    fiberStack[index] = fiber;
	  }

	  cursor.current = value;
	}

	var warnedAboutMissingGetChildContext;

	{
	  warnedAboutMissingGetChildContext = {};
	}

	var emptyContextObject = {};

	{
	  Object.freeze(emptyContextObject);
	} // A cursor to the current merged context object on the stack.


	var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

	var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
	// We use this to get access to the parent context after we have already
	// pushed the next context provider, and now need to merge their contexts.

	var previousContext = emptyContextObject;

	function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
	  {
	    if (didPushOwnContextIfProvider && isContextProvider(Component)) {
	      // If the fiber is a context provider itself, when we read its context
	      // we may have already pushed its own child context on the stack. A context
	      // provider should not "see" its own child context. Therefore we read the
	      // previous (parent) context instead for a context provider.
	      return previousContext;
	    }

	    return contextStackCursor.current;
	  }
	}

	function cacheContext(workInProgress, unmaskedContext, maskedContext) {
	  {
	    var instance = workInProgress.stateNode;
	    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
	    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
	  }
	}

	function getMaskedContext(workInProgress, unmaskedContext) {
	  {
	    var type = workInProgress.type;
	    var contextTypes = type.contextTypes;

	    if (!contextTypes) {
	      return emptyContextObject;
	    } // Avoid recreating masked context unless unmasked context has changed.
	    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
	    // This may trigger infinite loops if componentWillReceiveProps calls setState.


	    var instance = workInProgress.stateNode;

	    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
	      return instance.__reactInternalMemoizedMaskedChildContext;
	    }

	    var context = {};

	    for (var key in contextTypes) {
	      context[key] = unmaskedContext[key];
	    }

	    {
	      var name = getComponentName(type) || 'Unknown';
	      checkPropTypes(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
	    } // Cache unmasked context so we can avoid recreating masked context unless necessary.
	    // Context is created before the class component is instantiated so check for instance.


	    if (instance) {
	      cacheContext(workInProgress, unmaskedContext, context);
	    }

	    return context;
	  }
	}

	function hasContextChanged() {
	  {
	    return didPerformWorkStackCursor.current;
	  }
	}

	function isContextProvider(type) {
	  {
	    var childContextTypes = type.childContextTypes;
	    return childContextTypes !== null && childContextTypes !== undefined;
	  }
	}

	function popContext(fiber) {
	  {
	    pop(didPerformWorkStackCursor, fiber);
	    pop(contextStackCursor, fiber);
	  }
	}

	function popTopLevelContextObject(fiber) {
	  {
	    pop(didPerformWorkStackCursor, fiber);
	    pop(contextStackCursor, fiber);
	  }
	}

	function pushTopLevelContextObject(fiber, context, didChange) {
	  {
	    if (!(contextStackCursor.current === emptyContextObject)) {
	      {
	        throw Error( "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }

	    push(contextStackCursor, context, fiber);
	    push(didPerformWorkStackCursor, didChange, fiber);
	  }
	}

	function processChildContext(fiber, type, parentContext) {
	  {
	    var instance = fiber.stateNode;
	    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
	    // It has only been added in Fiber to match the (unintentional) behavior in Stack.

	    if (typeof instance.getChildContext !== 'function') {
	      {
	        var componentName = getComponentName(type) || 'Unknown';

	        if (!warnedAboutMissingGetChildContext[componentName]) {
	          warnedAboutMissingGetChildContext[componentName] = true;

	          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
	        }
	      }

	      return parentContext;
	    }

	    var childContext;
	    startPhaseTimer(fiber, 'getChildContext');
	    childContext = instance.getChildContext();
	    stopPhaseTimer();

	    for (var contextKey in childContext) {
	      if (!(contextKey in childContextTypes)) {
	        {
	          throw Error( (getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes." );
	        }
	      }
	    }

	    {
	      var name = getComponentName(type) || 'Unknown';
	      checkPropTypes(childContextTypes, childContext, 'child context', name, // In practice, there is one case in which we won't get a stack. It's when
	      // somebody calls unstable_renderSubtreeIntoContainer() and we process
	      // context from the parent component instance. The stack will be missing
	      // because it's outside of the reconciliation, and so the pointer has not
	      // been set. This is rare and doesn't matter. We'll also remove that API.
	      getCurrentFiberStackInDev);
	    }

	    return _assign({}, parentContext, {}, childContext);
	  }
	}

	function pushContextProvider(workInProgress) {
	  {
	    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
	    // If the instance does not exist yet, we will push null at first,
	    // and replace it on the stack later when invalidating the context.

	    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
	    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

	    previousContext = contextStackCursor.current;
	    push(contextStackCursor, memoizedMergedChildContext, workInProgress);
	    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
	    return true;
	  }
	}

	function invalidateContextProvider(workInProgress, type, didChange) {
	  {
	    var instance = workInProgress.stateNode;

	    if (!instance) {
	      {
	        throw Error( "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }

	    if (didChange) {
	      // Merge parent and own context.
	      // Skip this if we're not updating due to sCU.
	      // This avoids unnecessarily recomputing memoized values.
	      var mergedContext = processChildContext(workInProgress, type, previousContext);
	      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
	      // It is important to unwind the context in the reverse order.

	      pop(didPerformWorkStackCursor, workInProgress);
	      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

	      push(contextStackCursor, mergedContext, workInProgress);
	      push(didPerformWorkStackCursor, didChange, workInProgress);
	    } else {
	      pop(didPerformWorkStackCursor, workInProgress);
	      push(didPerformWorkStackCursor, didChange, workInProgress);
	    }
	  }
	}

	function findCurrentUnmaskedContext(fiber) {
	  {
	    // Currently this is only used with renderSubtreeIntoContainer; not sure if it
	    // makes sense elsewhere
	    if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
	      {
	        throw Error( "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }

	    var node = fiber;

	    do {
	      switch (node.tag) {
	        case HostRoot:
	          return node.stateNode.context;

	        case ClassComponent:
	          {
	            var Component = node.type;

	            if (isContextProvider(Component)) {
	              return node.stateNode.__reactInternalMemoizedMergedChildContext;
	            }

	            break;
	          }
	      }

	      node = node.return;
	    } while (node !== null);

	    {
	      {
	        throw Error( "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }
	  }
	}

	var LegacyRoot = 0;
	var BlockingRoot = 1;
	var ConcurrentRoot = 2;

	var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,
	    Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,
	    Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,
	    Scheduler_shouldYield = Scheduler.unstable_shouldYield,
	    Scheduler_requestPaint = Scheduler.unstable_requestPaint,
	    Scheduler_now = Scheduler.unstable_now,
	    Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
	    Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
	    Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
	    Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,
	    Scheduler_LowPriority = Scheduler.unstable_LowPriority,
	    Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;

	{
	  // Provide explicit error message when production+profiling bundle of e.g.
	  // react-dom is used with production (non-profiling) bundle of
	  // scheduler/tracing
	  if (!(tracing$1.__interactionsRef != null && tracing$1.__interactionsRef.current != null)) {
	    {
	      throw Error( "It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling" );
	    }
	  }
	}

	var fakeCallbackNode = {}; // Except for NoPriority, these correspond to Scheduler priorities. We use
	// ascending numbers so we can compare them like numbers. They start at 90 to
	// avoid clashing with Scheduler's priorities.

	var ImmediatePriority = 99;
	var UserBlockingPriority$1 = 98;
	var NormalPriority = 97;
	var LowPriority = 96;
	var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.

	var NoPriority = 90;
	var shouldYield = Scheduler_shouldYield;
	var requestPaint = // Fall back gracefully if we're running an older version of Scheduler.
	Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
	var syncQueue = null;
	var immediateQueueCallbackNode = null;
	var isFlushingSyncQueue = false;
	var initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
	// This will be the case for modern browsers that support `performance.now`. In
	// older browsers, Scheduler falls back to `Date.now`, which returns a Unix
	// timestamp. In that case, subtract the module initialization time to simulate
	// the behavior of performance.now and keep our times small enough to fit
	// within 32 bits.
	// TODO: Consider lifting this into Scheduler.

	var now = initialTimeMs < 10000 ? Scheduler_now : function () {
	  return Scheduler_now() - initialTimeMs;
	};
	function getCurrentPriorityLevel() {
	  switch (Scheduler_getCurrentPriorityLevel()) {
	    case Scheduler_ImmediatePriority:
	      return ImmediatePriority;

	    case Scheduler_UserBlockingPriority:
	      return UserBlockingPriority$1;

	    case Scheduler_NormalPriority:
	      return NormalPriority;

	    case Scheduler_LowPriority:
	      return LowPriority;

	    case Scheduler_IdlePriority:
	      return IdlePriority;

	    default:
	      {
	        {
	          throw Error( "Unknown priority level." );
	        }
	      }

	  }
	}

	function reactPriorityToSchedulerPriority(reactPriorityLevel) {
	  switch (reactPriorityLevel) {
	    case ImmediatePriority:
	      return Scheduler_ImmediatePriority;

	    case UserBlockingPriority$1:
	      return Scheduler_UserBlockingPriority;

	    case NormalPriority:
	      return Scheduler_NormalPriority;

	    case LowPriority:
	      return Scheduler_LowPriority;

	    case IdlePriority:
	      return Scheduler_IdlePriority;

	    default:
	      {
	        {
	          throw Error( "Unknown priority level." );
	        }
	      }

	  }
	}

	function runWithPriority$1(reactPriorityLevel, fn) {
	  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
	  return Scheduler_runWithPriority(priorityLevel, fn);
	}
	function scheduleCallback(reactPriorityLevel, callback, options) {
	  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
	  return Scheduler_scheduleCallback(priorityLevel, callback, options);
	}
	function scheduleSyncCallback(callback) {
	  // Push this callback into an internal queue. We'll flush these either in
	  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
	  if (syncQueue === null) {
	    syncQueue = [callback]; // Flush the queue in the next tick, at the earliest.

	    immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
	  } else {
	    // Push onto existing queue. Don't need to schedule a callback because
	    // we already scheduled one when we created the queue.
	    syncQueue.push(callback);
	  }

	  return fakeCallbackNode;
	}
	function cancelCallback(callbackNode) {
	  if (callbackNode !== fakeCallbackNode) {
	    Scheduler_cancelCallback(callbackNode);
	  }
	}
	function flushSyncCallbackQueue() {
	  if (immediateQueueCallbackNode !== null) {
	    var node = immediateQueueCallbackNode;
	    immediateQueueCallbackNode = null;
	    Scheduler_cancelCallback(node);
	  }

	  flushSyncCallbackQueueImpl();
	}

	function flushSyncCallbackQueueImpl() {
	  if (!isFlushingSyncQueue && syncQueue !== null) {
	    // Prevent re-entrancy.
	    isFlushingSyncQueue = true;
	    var i = 0;

	    try {
	      var _isSync = true;
	      var queue = syncQueue;
	      runWithPriority$1(ImmediatePriority, function () {
	        for (; i < queue.length; i++) {
	          var callback = queue[i];

	          do {
	            callback = callback(_isSync);
	          } while (callback !== null);
	        }
	      });
	      syncQueue = null;
	    } catch (error) {
	      // If something throws, leave the remaining callbacks on the queue.
	      if (syncQueue !== null) {
	        syncQueue = syncQueue.slice(i + 1);
	      } // Resume flushing in the next tick


	      Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
	      throw error;
	    } finally {
	      isFlushingSyncQueue = false;
	    }
	  }
	}

	var NoMode = 0;
	var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
	// tag instead

	var BlockingMode = 2;
	var ConcurrentMode = 4;
	var ProfileMode = 8;

	// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
	// Math.pow(2, 30) - 1
	// 0b111111111111111111111111111111
	var MAX_SIGNED_31_BIT_INT = 1073741823;

	var NoWork = 0; // TODO: Think of a better name for Never. The key difference with Idle is that
	// Never work can be committed in an inconsistent state without tearing the UI.
	// The main example is offscreen content, like a hidden subtree. So one possible
	// name is Offscreen. However, it also includes dehydrated Suspense boundaries,
	// which are inconsistent in the sense that they haven't finished yet, but
	// aren't visibly inconsistent because the server rendered HTML matches what the
	// hydrated tree would look like.

	var Never = 1; // Idle is slightly higher priority than Never. It must completely finish in
	// order to be consistent.

	var Idle = 2; // Continuous Hydration is slightly higher than Idle and is used to increase
	// priority of hover targets.

	var ContinuousHydration = 3;
	var Sync = MAX_SIGNED_31_BIT_INT;
	var Batched = Sync - 1;
	var UNIT_SIZE = 10;
	var MAGIC_NUMBER_OFFSET = Batched - 1; // 1 unit of expiration time represents 10ms.

	function msToExpirationTime(ms) {
	  // Always subtract from the offset so that we don't clash with the magic number for NoWork.
	  return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
	}
	function expirationTimeToMs(expirationTime) {
	  return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
	}

	function ceiling(num, precision) {
	  return ((num / precision | 0) + 1) * precision;
	}

	function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
	  return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
	} // TODO: This corresponds to Scheduler's NormalPriority, not LowPriority. Update
	// the names to reflect.


	var LOW_PRIORITY_EXPIRATION = 5000;
	var LOW_PRIORITY_BATCH_SIZE = 250;
	function computeAsyncExpiration(currentTime) {
	  return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
	}
	function computeSuspenseExpiration(currentTime, timeoutMs) {
	  // TODO: Should we warn if timeoutMs is lower than the normal pri expiration time?
	  return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
	} // We intentionally set a higher expiration time for interactive updates in
	// dev than in production.
	//
	// If the main thread is being blocked so long that you hit the expiration,
	// it's a problem that could be solved with better scheduling.
	//
	// People will be more likely to notice this and fix it with the long
	// expiration time in development.
	//
	// In production we opt for better UX at the risk of masking scheduling
	// problems, by expiring fast.

	var HIGH_PRIORITY_EXPIRATION =  500 ;
	var HIGH_PRIORITY_BATCH_SIZE = 100;
	function computeInteractiveExpiration(currentTime) {
	  return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
	}
	function inferPriorityFromExpirationTime(currentTime, expirationTime) {
	  if (expirationTime === Sync) {
	    return ImmediatePriority;
	  }

	  if (expirationTime === Never || expirationTime === Idle) {
	    return IdlePriority;
	  }

	  var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);

	  if (msUntil <= 0) {
	    return ImmediatePriority;
	  }

	  if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) {
	    return UserBlockingPriority$1;
	  }

	  if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) {
	    return NormalPriority;
	  } // TODO: Handle LowPriority
	  // Assume anything lower has idle priority


	  return IdlePriority;
	}

	var ReactStrictModeWarnings = {
	  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
	  flushPendingUnsafeLifecycleWarnings: function () {},
	  recordLegacyContextWarning: function (fiber, instance) {},
	  flushLegacyContextWarning: function () {},
	  discardPendingWarnings: function () {}
	};

	{
	  var findStrictRoot = function (fiber) {
	    var maybeStrictRoot = null;
	    var node = fiber;

	    while (node !== null) {
	      if (node.mode & StrictMode) {
	        maybeStrictRoot = node;
	      }

	      node = node.return;
	    }

	    return maybeStrictRoot;
	  };

	  var setToSortedString = function (set) {
	    var array = [];
	    set.forEach(function (value) {
	      array.push(value);
	    });
	    return array.sort().join(', ');
	  };

	  var pendingComponentWillMountWarnings = [];
	  var pendingUNSAFE_ComponentWillMountWarnings = [];
	  var pendingComponentWillReceivePropsWarnings = [];
	  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	  var pendingComponentWillUpdateWarnings = [];
	  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

	  var didWarnAboutUnsafeLifecycles = new Set();

	  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
	    // Dedup strategy: Warn once per component.
	    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
	      return;
	    }

	    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
	    instance.componentWillMount.__suppressDeprecationWarning !== true) {
	      pendingComponentWillMountWarnings.push(fiber);
	    }

	    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {
	      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
	    }

	    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
	      pendingComponentWillReceivePropsWarnings.push(fiber);
	    }

	    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
	    }

	    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
	      pendingComponentWillUpdateWarnings.push(fiber);
	    }

	    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
	      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
	    }
	  };

	  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
	    // We do an initial pass to gather component names
	    var componentWillMountUniqueNames = new Set();

	    if (pendingComponentWillMountWarnings.length > 0) {
	      pendingComponentWillMountWarnings.forEach(function (fiber) {
	        componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingComponentWillMountWarnings = [];
	    }

	    var UNSAFE_componentWillMountUniqueNames = new Set();

	    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
	      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
	        UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingUNSAFE_ComponentWillMountWarnings = [];
	    }

	    var componentWillReceivePropsUniqueNames = new Set();

	    if (pendingComponentWillReceivePropsWarnings.length > 0) {
	      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
	        componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingComponentWillReceivePropsWarnings = [];
	    }

	    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

	    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
	      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
	        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	    }

	    var componentWillUpdateUniqueNames = new Set();

	    if (pendingComponentWillUpdateWarnings.length > 0) {
	      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
	        componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingComponentWillUpdateWarnings = [];
	    }

	    var UNSAFE_componentWillUpdateUniqueNames = new Set();

	    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
	      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
	        UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingUNSAFE_ComponentWillUpdateWarnings = [];
	    } // Finally, we flush all the warnings
	    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'


	    if (UNSAFE_componentWillMountUniqueNames.size > 0) {
	      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);

	      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
	    }

	    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
	      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

	      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
	    }

	    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
	      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

	      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
	    }

	    if (componentWillMountUniqueNames.size > 0) {
	      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

	      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
	    }

	    if (componentWillReceivePropsUniqueNames.size > 0) {
	      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

	      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
	    }

	    if (componentWillUpdateUniqueNames.size > 0) {
	      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

	      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
	    }
	  };

	  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

	  var didWarnAboutLegacyContext = new Set();

	  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
	    var strictRoot = findStrictRoot(fiber);

	    if (strictRoot === null) {
	      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');

	      return;
	    } // Dedup strategy: Warn once per component.


	    if (didWarnAboutLegacyContext.has(fiber.type)) {
	      return;
	    }

	    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

	    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
	      if (warningsForRoot === undefined) {
	        warningsForRoot = [];
	        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
	      }

	      warningsForRoot.push(fiber);
	    }
	  };

	  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
	    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
	      if (fiberArray.length === 0) {
	        return;
	      }

	      var firstFiber = fiberArray[0];
	      var uniqueNames = new Set();
	      fiberArray.forEach(function (fiber) {
	        uniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutLegacyContext.add(fiber.type);
	      });
	      var sortedNames = setToSortedString(uniqueNames);
	      var firstComponentStack = getStackByFiberInDevAndProd(firstFiber);

	      error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://fb.me/react-legacy-context' + '%s', sortedNames, firstComponentStack);
	    });
	  };

	  ReactStrictModeWarnings.discardPendingWarnings = function () {
	    pendingComponentWillMountWarnings = [];
	    pendingUNSAFE_ComponentWillMountWarnings = [];
	    pendingComponentWillReceivePropsWarnings = [];
	    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	    pendingComponentWillUpdateWarnings = [];
	    pendingUNSAFE_ComponentWillUpdateWarnings = [];
	    pendingLegacyContextWarning = new Map();
	  };
	}

	var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

	var failedBoundaries = null;
	var setRefreshHandler = function (handler) {
	  {
	    resolveFamily = handler;
	  }
	};
	function resolveFunctionForHotReloading(type) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return type;
	    }

	    var family = resolveFamily(type);

	    if (family === undefined) {
	      return type;
	    } // Use the latest known implementation.


	    return family.current;
	  }
	}
	function resolveClassForHotReloading(type) {
	  // No implementation differences.
	  return resolveFunctionForHotReloading(type);
	}
	function resolveForwardRefForHotReloading(type) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return type;
	    }

	    var family = resolveFamily(type);

	    if (family === undefined) {
	      // Check if we're dealing with a real forwardRef. Don't want to crash early.
	      if (type !== null && type !== undefined && typeof type.render === 'function') {
	        // ForwardRef is special because its resolved .type is an object,
	        // but it's possible that we only have its inner render function in the map.
	        // If that inner render function is different, we'll build a new forwardRef type.
	        var currentRender = resolveFunctionForHotReloading(type.render);

	        if (type.render !== currentRender) {
	          var syntheticType = {
	            $$typeof: REACT_FORWARD_REF_TYPE,
	            render: currentRender
	          };

	          if (type.displayName !== undefined) {
	            syntheticType.displayName = type.displayName;
	          }

	          return syntheticType;
	        }
	      }

	      return type;
	    } // Use the latest known implementation.


	    return family.current;
	  }
	}
	function isCompatibleFamilyForHotReloading(fiber, element) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return false;
	    }

	    var prevType = fiber.elementType;
	    var nextType = element.type; // If we got here, we know types aren't === equal.

	    var needsCompareFamilies = false;
	    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

	    switch (fiber.tag) {
	      case ClassComponent:
	        {
	          if (typeof nextType === 'function') {
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      case FunctionComponent:
	        {
	          if (typeof nextType === 'function') {
	            needsCompareFamilies = true;
	          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
	            // We don't know the inner type yet.
	            // We're going to assume that the lazy inner type is stable,
	            // and so it is sufficient to avoid reconciling it away.
	            // We're not going to unwrap or actually use the new lazy type.
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      case ForwardRef:
	        {
	          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
	            needsCompareFamilies = true;
	          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      case MemoComponent:
	      case SimpleMemoComponent:
	        {
	          if ($$typeofNextType === REACT_MEMO_TYPE) {
	            // TODO: if it was but can no longer be simple,
	            // we shouldn't set this.
	            needsCompareFamilies = true;
	          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      default:
	        return false;
	    } // Check if both types have a family and it's the same one.


	    if (needsCompareFamilies) {
	      // Note: memo() and forwardRef() we'll compare outer rather than inner type.
	      // This means both of them need to be registered to preserve state.
	      // If we unwrapped and compared the inner types for wrappers instead,
	      // then we would risk falsely saying two separate memo(Foo)
	      // calls are equivalent because they wrap the same Foo function.
	      var prevFamily = resolveFamily(prevType);

	      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
	        return true;
	      }
	    }

	    return false;
	  }
	}
	function markFailedErrorBoundaryForHotReloading(fiber) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return;
	    }

	    if (typeof WeakSet !== 'function') {
	      return;
	    }

	    if (failedBoundaries === null) {
	      failedBoundaries = new WeakSet();
	    }

	    failedBoundaries.add(fiber);
	  }
	}
	var scheduleRefresh = function (root, update) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return;
	    }

	    var staleFamilies = update.staleFamilies,
	        updatedFamilies = update.updatedFamilies;
	    flushPassiveEffects();
	    flushSync(function () {
	      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
	    });
	  }
	};
	var scheduleRoot = function (root, element) {
	  {
	    if (root.context !== emptyContextObject) {
	      // Super edge case: root has a legacy _renderSubtree context
	      // but we don't know the parentComponent so we can't pass it.
	      // Just ignore. We'll delete this with _renderSubtree code path later.
	      return;
	    }

	    flushPassiveEffects();
	    syncUpdates(function () {
	      updateContainer(element, root, null, null);
	    });
	  }
	};

	function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
	  {
	    var alternate = fiber.alternate,
	        child = fiber.child,
	        sibling = fiber.sibling,
	        tag = fiber.tag,
	        type = fiber.type;
	    var candidateType = null;

	    switch (tag) {
	      case FunctionComponent:
	      case SimpleMemoComponent:
	      case ClassComponent:
	        candidateType = type;
	        break;

	      case ForwardRef:
	        candidateType = type.render;
	        break;
	    }

	    if (resolveFamily === null) {
	      throw new Error('Expected resolveFamily to be set during hot reload.');
	    }

	    var needsRender = false;
	    var needsRemount = false;

	    if (candidateType !== null) {
	      var family = resolveFamily(candidateType);

	      if (family !== undefined) {
	        if (staleFamilies.has(family)) {
	          needsRemount = true;
	        } else if (updatedFamilies.has(family)) {
	          if (tag === ClassComponent) {
	            needsRemount = true;
	          } else {
	            needsRender = true;
	          }
	        }
	      }
	    }

	    if (failedBoundaries !== null) {
	      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
	        needsRemount = true;
	      }
	    }

	    if (needsRemount) {
	      fiber._debugNeedsRemount = true;
	    }

	    if (needsRemount || needsRender) {
	      scheduleWork(fiber, Sync);
	    }

	    if (child !== null && !needsRemount) {
	      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
	    }

	    if (sibling !== null) {
	      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
	    }
	  }
	}

	var findHostInstancesForRefresh = function (root, families) {
	  {
	    var hostInstances = new Set();
	    var types = new Set(families.map(function (family) {
	      return family.current;
	    }));
	    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
	    return hostInstances;
	  }
	};

	function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
	  {
	    var child = fiber.child,
	        sibling = fiber.sibling,
	        tag = fiber.tag,
	        type = fiber.type;
	    var candidateType = null;

	    switch (tag) {
	      case FunctionComponent:
	      case SimpleMemoComponent:
	      case ClassComponent:
	        candidateType = type;
	        break;

	      case ForwardRef:
	        candidateType = type.render;
	        break;
	    }

	    var didMatch = false;

	    if (candidateType !== null) {
	      if (types.has(candidateType)) {
	        didMatch = true;
	      }
	    }

	    if (didMatch) {
	      // We have a match. This only drills down to the closest host components.
	      // There's no need to search deeper because for the purpose of giving
	      // visual feedback, "flashing" outermost parent rectangles is sufficient.
	      findHostInstancesForFiberShallowly(fiber, hostInstances);
	    } else {
	      // If there's no match, maybe there will be one further down in the child tree.
	      if (child !== null) {
	        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
	      }
	    }

	    if (sibling !== null) {
	      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
	    }
	  }
	}

	function findHostInstancesForFiberShallowly(fiber, hostInstances) {
	  {
	    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

	    if (foundHostInstances) {
	      return;
	    } // If we didn't find any host children, fallback to closest host parent.


	    var node = fiber;

	    while (true) {
	      switch (node.tag) {
	        case HostComponent:
	          hostInstances.add(node.stateNode);
	          return;

	        case HostPortal:
	          hostInstances.add(node.stateNode.containerInfo);
	          return;

	        case HostRoot:
	          hostInstances.add(node.stateNode.containerInfo);
	          return;
	      }

	      if (node.return === null) {
	        throw new Error('Expected to reach root first.');
	      }

	      node = node.return;
	    }
	  }
	}

	function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
	  {
	    var node = fiber;
	    var foundHostInstances = false;

	    while (true) {
	      if (node.tag === HostComponent) {
	        // We got a match.
	        foundHostInstances = true;
	        hostInstances.add(node.stateNode); // There may still be more, so keep searching.
	      } else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }

	      if (node === fiber) {
	        return foundHostInstances;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === fiber) {
	          return foundHostInstances;
	        }

	        node = node.return;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  }

	  return false;
	}

	function resolveDefaultProps(Component, baseProps) {
	  if (Component && Component.defaultProps) {
	    // Resolve default props. Taken from ReactElement
	    var props = _assign({}, baseProps);

	    var defaultProps = Component.defaultProps;

	    for (var propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }

	    return props;
	  }

	  return baseProps;
	}
	function readLazyComponentType(lazyComponent) {
	  initializeLazyComponentType(lazyComponent);

	  if (lazyComponent._status !== Resolved) {
	    throw lazyComponent._result;
	  }

	  return lazyComponent._result;
	}

	var valueCursor = createCursor(null);
	var rendererSigil;

	{
	  // Use this to detect multiple renderers using the same context
	  rendererSigil = {};
	}

	var currentlyRenderingFiber = null;
	var lastContextDependency = null;
	var lastContextWithAllBitsObserved = null;
	var isDisallowedContextReadInDEV = false;
	function resetContextDependencies() {
	  // This is called right before React yields execution, to ensure `readContext`
	  // cannot be called outside the render phase.
	  currentlyRenderingFiber = null;
	  lastContextDependency = null;
	  lastContextWithAllBitsObserved = null;

	  {
	    isDisallowedContextReadInDEV = false;
	  }
	}
	function enterDisallowedContextReadInDEV() {
	  {
	    isDisallowedContextReadInDEV = true;
	  }
	}
	function exitDisallowedContextReadInDEV() {
	  {
	    isDisallowedContextReadInDEV = false;
	  }
	}
	function pushProvider(providerFiber, nextValue) {
	  var context = providerFiber.type._context;

	  {
	    push(valueCursor, context._currentValue, providerFiber);
	    context._currentValue = nextValue;

	    {
	      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
	        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
	      }

	      context._currentRenderer = rendererSigil;
	    }
	  }
	}
	function popProvider(providerFiber) {
	  var currentValue = valueCursor.current;
	  pop(valueCursor, providerFiber);
	  var context = providerFiber.type._context;

	  {
	    context._currentValue = currentValue;
	  }
	}
	function calculateChangedBits(context, newValue, oldValue) {
	  if (objectIs(oldValue, newValue)) {
	    // No change
	    return 0;
	  } else {
	    var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

	    {
	      if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
	        error('calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);
	      }
	    }

	    return changedBits | 0;
	  }
	}
	function scheduleWorkOnParentPath(parent, renderExpirationTime) {
	  // Update the child expiration time of all the ancestors, including
	  // the alternates.
	  var node = parent;

	  while (node !== null) {
	    var alternate = node.alternate;

	    if (node.childExpirationTime < renderExpirationTime) {
	      node.childExpirationTime = renderExpirationTime;

	      if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
	        alternate.childExpirationTime = renderExpirationTime;
	      }
	    } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
	      alternate.childExpirationTime = renderExpirationTime;
	    } else {
	      // Neither alternate was updated, which means the rest of the
	      // ancestor path already has sufficient priority.
	      break;
	    }

	    node = node.return;
	  }
	}
	function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
	  var fiber = workInProgress.child;

	  if (fiber !== null) {
	    // Set the return pointer of the child to the work-in-progress fiber.
	    fiber.return = workInProgress;
	  }

	  while (fiber !== null) {
	    var nextFiber = void 0; // Visit this fiber.

	    var list = fiber.dependencies;

	    if (list !== null) {
	      nextFiber = fiber.child;
	      var dependency = list.firstContext;

	      while (dependency !== null) {
	        // Check if the context matches.
	        if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
	          // Match! Schedule an update on this fiber.
	          if (fiber.tag === ClassComponent) {
	            // Schedule a force update on the work-in-progress.
	            var update = createUpdate(renderExpirationTime, null);
	            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
	            // update to the current fiber, too, which means it will persist even if
	            // this render is thrown away. Since it's a race condition, not sure it's
	            // worth fixing.

	            enqueueUpdate(fiber, update);
	          }

	          if (fiber.expirationTime < renderExpirationTime) {
	            fiber.expirationTime = renderExpirationTime;
	          }

	          var alternate = fiber.alternate;

	          if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
	            alternate.expirationTime = renderExpirationTime;
	          }

	          scheduleWorkOnParentPath(fiber.return, renderExpirationTime); // Mark the expiration time on the list, too.

	          if (list.expirationTime < renderExpirationTime) {
	            list.expirationTime = renderExpirationTime;
	          } // Since we already found a match, we can stop traversing the
	          // dependency list.


	          break;
	        }

	        dependency = dependency.next;
	      }
	    } else if (fiber.tag === ContextProvider) {
	      // Don't scan deeper if this is a matching provider
	      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
	    } else {
	      // Traverse down.
	      nextFiber = fiber.child;
	    }

	    if (nextFiber !== null) {
	      // Set the return pointer of the child to the work-in-progress fiber.
	      nextFiber.return = fiber;
	    } else {
	      // No child. Traverse to next sibling.
	      nextFiber = fiber;

	      while (nextFiber !== null) {
	        if (nextFiber === workInProgress) {
	          // We're back to the root of this subtree. Exit.
	          nextFiber = null;
	          break;
	        }

	        var sibling = nextFiber.sibling;

	        if (sibling !== null) {
	          // Set the return pointer of the sibling to the work-in-progress fiber.
	          sibling.return = nextFiber.return;
	          nextFiber = sibling;
	          break;
	        } // No more siblings. Traverse up.


	        nextFiber = nextFiber.return;
	      }
	    }

	    fiber = nextFiber;
	  }
	}
	function prepareToReadContext(workInProgress, renderExpirationTime) {
	  currentlyRenderingFiber = workInProgress;
	  lastContextDependency = null;
	  lastContextWithAllBitsObserved = null;
	  var dependencies = workInProgress.dependencies;

	  if (dependencies !== null) {
	    var firstContext = dependencies.firstContext;

	    if (firstContext !== null) {
	      if (dependencies.expirationTime >= renderExpirationTime) {
	        // Context list has a pending update. Mark that this fiber performed work.
	        markWorkInProgressReceivedUpdate();
	      } // Reset the work-in-progress list


	      dependencies.firstContext = null;
	    }
	  }
	}
	function readContext(context, observedBits) {
	  {
	    // This warning would fire if you read context inside a Hook like useMemo.
	    // Unlike the class check below, it's not enforced in production for perf.
	    if (isDisallowedContextReadInDEV) {
	      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
	    }
	  }

	  if (lastContextWithAllBitsObserved === context) ; else if (observedBits === false || observedBits === 0) ; else {
	    var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.

	    if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
	      // Observe all updates.
	      lastContextWithAllBitsObserved = context;
	      resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
	    } else {
	      resolvedObservedBits = observedBits;
	    }

	    var contextItem = {
	      context: context,
	      observedBits: resolvedObservedBits,
	      next: null
	    };

	    if (lastContextDependency === null) {
	      if (!(currentlyRenderingFiber !== null)) {
	        {
	          throw Error( "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()." );
	        }
	      } // This is the first dependency for this component. Create a new list.


	      lastContextDependency = contextItem;
	      currentlyRenderingFiber.dependencies = {
	        expirationTime: NoWork,
	        firstContext: contextItem,
	        responders: null
	      };
	    } else {
	      // Append a new context item.
	      lastContextDependency = lastContextDependency.next = contextItem;
	    }
	  }

	  return  context._currentValue ;
	}

	var UpdateState = 0;
	var ReplaceState = 1;
	var ForceUpdate = 2;
	var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
	// It should only be read right after calling `processUpdateQueue`, via
	// `checkHasForceUpdateAfterProcessing`.

	var hasForceUpdate = false;
	var didWarnUpdateInsideUpdate;
	var currentlyProcessingQueue;

	{
	  didWarnUpdateInsideUpdate = false;
	  currentlyProcessingQueue = null;
	}

	function initializeUpdateQueue(fiber) {
	  var queue = {
	    baseState: fiber.memoizedState,
	    baseQueue: null,
	    shared: {
	      pending: null
	    },
	    effects: null
	  };
	  fiber.updateQueue = queue;
	}
	function cloneUpdateQueue(current, workInProgress) {
	  // Clone the update queue from current. Unless it's already a clone.
	  var queue = workInProgress.updateQueue;
	  var currentQueue = current.updateQueue;

	  if (queue === currentQueue) {
	    var clone = {
	      baseState: currentQueue.baseState,
	      baseQueue: currentQueue.baseQueue,
	      shared: currentQueue.shared,
	      effects: currentQueue.effects
	    };
	    workInProgress.updateQueue = clone;
	  }
	}
	function createUpdate(expirationTime, suspenseConfig) {
	  var update = {
	    expirationTime: expirationTime,
	    suspenseConfig: suspenseConfig,
	    tag: UpdateState,
	    payload: null,
	    callback: null,
	    next: null
	  };
	  update.next = update;

	  {
	    update.priority = getCurrentPriorityLevel();
	  }

	  return update;
	}
	function enqueueUpdate(fiber, update) {
	  var updateQueue = fiber.updateQueue;

	  if (updateQueue === null) {
	    // Only occurs if the fiber has been unmounted.
	    return;
	  }

	  var sharedQueue = updateQueue.shared;
	  var pending = sharedQueue.pending;

	  if (pending === null) {
	    // This is the first update. Create a circular list.
	    update.next = update;
	  } else {
	    update.next = pending.next;
	    pending.next = update;
	  }

	  sharedQueue.pending = update;

	  {
	    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
	      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');

	      didWarnUpdateInsideUpdate = true;
	    }
	  }
	}
	function enqueueCapturedUpdate(workInProgress, update) {
	  var current = workInProgress.alternate;

	  if (current !== null) {
	    // Ensure the work-in-progress queue is a clone
	    cloneUpdateQueue(current, workInProgress);
	  } // Captured updates go only on the work-in-progress queue.


	  var queue = workInProgress.updateQueue; // Append the update to the end of the list.

	  var last = queue.baseQueue;

	  if (last === null) {
	    queue.baseQueue = update.next = update;
	    update.next = update;
	  } else {
	    update.next = last.next;
	    last.next = update;
	  }
	}

	function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
	  switch (update.tag) {
	    case ReplaceState:
	      {
	        var payload = update.payload;

	        if (typeof payload === 'function') {
	          // Updater function
	          {
	            enterDisallowedContextReadInDEV();

	            if ( workInProgress.mode & StrictMode) {
	              payload.call(instance, prevState, nextProps);
	            }
	          }

	          var nextState = payload.call(instance, prevState, nextProps);

	          {
	            exitDisallowedContextReadInDEV();
	          }

	          return nextState;
	        } // State object


	        return payload;
	      }

	    case CaptureUpdate:
	      {
	        workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
	      }
	    // Intentional fallthrough

	    case UpdateState:
	      {
	        var _payload = update.payload;
	        var partialState;

	        if (typeof _payload === 'function') {
	          // Updater function
	          {
	            enterDisallowedContextReadInDEV();

	            if ( workInProgress.mode & StrictMode) {
	              _payload.call(instance, prevState, nextProps);
	            }
	          }

	          partialState = _payload.call(instance, prevState, nextProps);

	          {
	            exitDisallowedContextReadInDEV();
	          }
	        } else {
	          // Partial state object
	          partialState = _payload;
	        }

	        if (partialState === null || partialState === undefined) {
	          // Null and undefined are treated as no-ops.
	          return prevState;
	        } // Merge the partial state and the previous state.


	        return _assign({}, prevState, partialState);
	      }

	    case ForceUpdate:
	      {
	        hasForceUpdate = true;
	        return prevState;
	      }
	  }

	  return prevState;
	}

	function processUpdateQueue(workInProgress, props, instance, renderExpirationTime) {
	  // This is always non-null on a ClassComponent or HostRoot
	  var queue = workInProgress.updateQueue;
	  hasForceUpdate = false;

	  {
	    currentlyProcessingQueue = queue.shared;
	  } // The last rebase update that is NOT part of the base state.


	  var baseQueue = queue.baseQueue; // The last pending update that hasn't been processed yet.

	  var pendingQueue = queue.shared.pending;

	  if (pendingQueue !== null) {
	    // We have new updates that haven't been processed yet.
	    // We'll add them to the base queue.
	    if (baseQueue !== null) {
	      // Merge the pending queue and the base queue.
	      var baseFirst = baseQueue.next;
	      var pendingFirst = pendingQueue.next;
	      baseQueue.next = pendingFirst;
	      pendingQueue.next = baseFirst;
	    }

	    baseQueue = pendingQueue;
	    queue.shared.pending = null; // TODO: Pass `current` as argument

	    var current = workInProgress.alternate;

	    if (current !== null) {
	      var currentQueue = current.updateQueue;

	      if (currentQueue !== null) {
	        currentQueue.baseQueue = pendingQueue;
	      }
	    }
	  } // These values may change as we process the queue.


	  if (baseQueue !== null) {
	    var first = baseQueue.next; // Iterate through the list of updates to compute the result.

	    var newState = queue.baseState;
	    var newExpirationTime = NoWork;
	    var newBaseState = null;
	    var newBaseQueueFirst = null;
	    var newBaseQueueLast = null;

	    if (first !== null) {
	      var update = first;

	      do {
	        var updateExpirationTime = update.expirationTime;

	        if (updateExpirationTime < renderExpirationTime) {
	          // Priority is insufficient. Skip this update. If this is the first
	          // skipped update, the previous update/state is the new base
	          // update/state.
	          var clone = {
	            expirationTime: update.expirationTime,
	            suspenseConfig: update.suspenseConfig,
	            tag: update.tag,
	            payload: update.payload,
	            callback: update.callback,
	            next: null
	          };

	          if (newBaseQueueLast === null) {
	            newBaseQueueFirst = newBaseQueueLast = clone;
	            newBaseState = newState;
	          } else {
	            newBaseQueueLast = newBaseQueueLast.next = clone;
	          } // Update the remaining priority in the queue.


	          if (updateExpirationTime > newExpirationTime) {
	            newExpirationTime = updateExpirationTime;
	          }
	        } else {
	          // This update does have sufficient priority.
	          if (newBaseQueueLast !== null) {
	            var _clone = {
	              expirationTime: Sync,
	              // This update is going to be committed so we never want uncommit it.
	              suspenseConfig: update.suspenseConfig,
	              tag: update.tag,
	              payload: update.payload,
	              callback: update.callback,
	              next: null
	            };
	            newBaseQueueLast = newBaseQueueLast.next = _clone;
	          } // Mark the event time of this update as relevant to this render pass.
	          // TODO: This should ideally use the true event time of this update rather than
	          // its priority which is a derived and not reverseable value.
	          // TODO: We should skip this update if it was already committed but currently
	          // we have no way of detecting the difference between a committed and suspended
	          // update here.


	          markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig); // Process this update.

	          newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
	          var callback = update.callback;

	          if (callback !== null) {
	            workInProgress.effectTag |= Callback;
	            var effects = queue.effects;

	            if (effects === null) {
	              queue.effects = [update];
	            } else {
	              effects.push(update);
	            }
	          }
	        }

	        update = update.next;

	        if (update === null || update === first) {
	          pendingQueue = queue.shared.pending;

	          if (pendingQueue === null) {
	            break;
	          } else {
	            // An update was scheduled from inside a reducer. Add the new
	            // pending updates to the end of the list and keep processing.
	            update = baseQueue.next = pendingQueue.next;
	            pendingQueue.next = first;
	            queue.baseQueue = baseQueue = pendingQueue;
	            queue.shared.pending = null;
	          }
	        }
	      } while (true);
	    }

	    if (newBaseQueueLast === null) {
	      newBaseState = newState;
	    } else {
	      newBaseQueueLast.next = newBaseQueueFirst;
	    }

	    queue.baseState = newBaseState;
	    queue.baseQueue = newBaseQueueLast; // Set the remaining expiration time to be whatever is remaining in the queue.
	    // This should be fine because the only two other things that contribute to
	    // expiration time are props and context. We're already in the middle of the
	    // begin phase by the time we start processing the queue, so we've already
	    // dealt with the props. Context in components that specify
	    // shouldComponentUpdate is tricky; but we'll have to account for
	    // that regardless.

	    markUnprocessedUpdateTime(newExpirationTime);
	    workInProgress.expirationTime = newExpirationTime;
	    workInProgress.memoizedState = newState;
	  }

	  {
	    currentlyProcessingQueue = null;
	  }
	}

	function callCallback(callback, context) {
	  if (!(typeof callback === 'function')) {
	    {
	      throw Error( "Invalid argument passed as callback. Expected a function. Instead received: " + callback );
	    }
	  }

	  callback.call(context);
	}

	function resetHasForceUpdateBeforeProcessing() {
	  hasForceUpdate = false;
	}
	function checkHasForceUpdateAfterProcessing() {
	  return hasForceUpdate;
	}
	function commitUpdateQueue(finishedWork, finishedQueue, instance) {
	  // Commit the effects
	  var effects = finishedQueue.effects;
	  finishedQueue.effects = null;

	  if (effects !== null) {
	    for (var i = 0; i < effects.length; i++) {
	      var effect = effects[i];
	      var callback = effect.callback;

	      if (callback !== null) {
	        effect.callback = null;
	        callCallback(callback, instance);
	      }
	    }
	  }
	}

	var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
	function requestCurrentSuspenseConfig() {
	  return ReactCurrentBatchConfig.suspense;
	}

	var fakeInternalInstance = {};
	var isArray = Array.isArray; // React.Component uses a shared frozen object by default.
	// We'll use it to determine whether we need to initialize legacy refs.

	var emptyRefsObject = new React.Component().refs;
	var didWarnAboutStateAssignmentForComponent;
	var didWarnAboutUninitializedState;
	var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
	var didWarnAboutLegacyLifecyclesAndDerivedState;
	var didWarnAboutUndefinedDerivedState;
	var warnOnUndefinedDerivedState;
	var warnOnInvalidCallback;
	var didWarnAboutDirectlyAssigningPropsToState;
	var didWarnAboutContextTypeAndContextTypes;
	var didWarnAboutInvalidateContextType;

	{
	  didWarnAboutStateAssignmentForComponent = new Set();
	  didWarnAboutUninitializedState = new Set();
	  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
	  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
	  didWarnAboutDirectlyAssigningPropsToState = new Set();
	  didWarnAboutUndefinedDerivedState = new Set();
	  didWarnAboutContextTypeAndContextTypes = new Set();
	  didWarnAboutInvalidateContextType = new Set();
	  var didWarnOnInvalidCallback = new Set();

	  warnOnInvalidCallback = function (callback, callerName) {
	    if (callback === null || typeof callback === 'function') {
	      return;
	    }

	    var key = callerName + "_" + callback;

	    if (!didWarnOnInvalidCallback.has(key)) {
	      didWarnOnInvalidCallback.add(key);

	      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
	    }
	  };

	  warnOnUndefinedDerivedState = function (type, partialState) {
	    if (partialState === undefined) {
	      var componentName = getComponentName(type) || 'Component';

	      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
	        didWarnAboutUndefinedDerivedState.add(componentName);

	        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
	      }
	    }
	  }; // This is so gross but it's at least non-critical and can be removed if
	  // it causes problems. This is meant to give a nicer error message for
	  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
	  // ...)) which otherwise throws a "_processChildContext is not a function"
	  // exception.


	  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
	    enumerable: false,
	    value: function () {
	      {
	        {
	          throw Error( "_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal)." );
	        }
	      }
	    }
	  });
	  Object.freeze(fakeInternalInstance);
	}

	function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
	  var prevState = workInProgress.memoizedState;

	  {
	    if ( workInProgress.mode & StrictMode) {
	      // Invoke the function an extra time to help detect side-effects.
	      getDerivedStateFromProps(nextProps, prevState);
	    }
	  }

	  var partialState = getDerivedStateFromProps(nextProps, prevState);

	  {
	    warnOnUndefinedDerivedState(ctor, partialState);
	  } // Merge the partial state and the previous state.


	  var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
	  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
	  // base state.

	  if (workInProgress.expirationTime === NoWork) {
	    // Queue is always non-null for classes
	    var updateQueue = workInProgress.updateQueue;
	    updateQueue.baseState = memoizedState;
	  }
	}
	var classComponentUpdater = {
	  isMounted: isMounted,
	  enqueueSetState: function (inst, payload, callback) {
	    var fiber = get(inst);
	    var currentTime = requestCurrentTimeForUpdate();
	    var suspenseConfig = requestCurrentSuspenseConfig();
	    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
	    var update = createUpdate(expirationTime, suspenseConfig);
	    update.payload = payload;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback(callback, 'setState');
	      }

	      update.callback = callback;
	    }

	    enqueueUpdate(fiber, update);
	    scheduleWork(fiber, expirationTime);
	  },
	  enqueueReplaceState: function (inst, payload, callback) {
	    var fiber = get(inst);
	    var currentTime = requestCurrentTimeForUpdate();
	    var suspenseConfig = requestCurrentSuspenseConfig();
	    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
	    var update = createUpdate(expirationTime, suspenseConfig);
	    update.tag = ReplaceState;
	    update.payload = payload;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback(callback, 'replaceState');
	      }

	      update.callback = callback;
	    }

	    enqueueUpdate(fiber, update);
	    scheduleWork(fiber, expirationTime);
	  },
	  enqueueForceUpdate: function (inst, callback) {
	    var fiber = get(inst);
	    var currentTime = requestCurrentTimeForUpdate();
	    var suspenseConfig = requestCurrentSuspenseConfig();
	    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
	    var update = createUpdate(expirationTime, suspenseConfig);
	    update.tag = ForceUpdate;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback(callback, 'forceUpdate');
	      }

	      update.callback = callback;
	    }

	    enqueueUpdate(fiber, update);
	    scheduleWork(fiber, expirationTime);
	  }
	};

	function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
	  var instance = workInProgress.stateNode;

	  if (typeof instance.shouldComponentUpdate === 'function') {
	    {
	      if ( workInProgress.mode & StrictMode) {
	        // Invoke the function an extra time to help detect side-effects.
	        instance.shouldComponentUpdate(newProps, newState, nextContext);
	      }
	    }

	    startPhaseTimer(workInProgress, 'shouldComponentUpdate');
	    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
	    stopPhaseTimer();

	    {
	      if (shouldUpdate === undefined) {
	        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component');
	      }
	    }

	    return shouldUpdate;
	  }

	  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
	    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
	  }

	  return true;
	}

	function checkClassInstance(workInProgress, ctor, newProps) {
	  var instance = workInProgress.stateNode;

	  {
	    var name = getComponentName(ctor) || 'Component';
	    var renderPresent = instance.render;

	    if (!renderPresent) {
	      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
	        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
	      } else {
	        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
	      }
	    }

	    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
	      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
	    }

	    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
	      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
	    }

	    if (instance.propTypes) {
	      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
	    }

	    if (instance.contextType) {
	      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
	    }

	    {
	      if (instance.contextTypes) {
	        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
	      }

	      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
	        didWarnAboutContextTypeAndContextTypes.add(ctor);

	        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
	      }
	    }

	    if (typeof instance.componentShouldUpdate === 'function') {
	      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
	    }

	    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
	      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
	    }

	    if (typeof instance.componentDidUnmount === 'function') {
	      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
	    }

	    if (typeof instance.componentDidReceiveProps === 'function') {
	      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
	    }

	    if (typeof instance.componentWillRecieveProps === 'function') {
	      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
	    }

	    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
	      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
	    }

	    var hasMutatedProps = instance.props !== newProps;

	    if (instance.props !== undefined && hasMutatedProps) {
	      error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
	    }

	    if (instance.defaultProps) {
	      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
	      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);

	      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
	    }

	    if (typeof instance.getDerivedStateFromProps === 'function') {
	      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
	    }

	    if (typeof instance.getDerivedStateFromError === 'function') {
	      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
	    }

	    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
	      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
	    }

	    var _state = instance.state;

	    if (_state && (typeof _state !== 'object' || isArray(_state))) {
	      error('%s.state: must be set to an object or null', name);
	    }

	    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
	      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
	    }
	  }
	}

	function adoptClassInstance(workInProgress, instance) {
	  instance.updater = classComponentUpdater;
	  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

	  set(instance, workInProgress);

	  {
	    instance._reactInternalInstance = fakeInternalInstance;
	  }
	}

	function constructClassInstance(workInProgress, ctor, props) {
	  var isLegacyContextConsumer = false;
	  var unmaskedContext = emptyContextObject;
	  var context = emptyContextObject;
	  var contextType = ctor.contextType;

	  {
	    if ('contextType' in ctor) {
	      var isValid = // Allow null for conditional declaration
	      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

	      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
	        didWarnAboutInvalidateContextType.add(ctor);
	        var addendum = '';

	        if (contextType === undefined) {
	          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
	        } else if (typeof contextType !== 'object') {
	          addendum = ' However, it is set to a ' + typeof contextType + '.';
	        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
	          addendum = ' Did you accidentally pass the Context.Provider instead?';
	        } else if (contextType._context !== undefined) {
	          // <Context.Consumer>
	          addendum = ' Did you accidentally pass the Context.Consumer instead?';
	        } else {
	          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
	        }

	        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
	      }
	    }
	  }

	  if (typeof contextType === 'object' && contextType !== null) {
	    context = readContext(contextType);
	  } else {
	    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    var contextTypes = ctor.contextTypes;
	    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
	    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
	  } // Instantiate twice to help detect side-effects.


	  {
	    if ( workInProgress.mode & StrictMode) {
	      new ctor(props, context); // eslint-disable-line no-new
	    }
	  }

	  var instance = new ctor(props, context);
	  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
	  adoptClassInstance(workInProgress, instance);

	  {
	    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
	      var componentName = getComponentName(ctor) || 'Component';

	      if (!didWarnAboutUninitializedState.has(componentName)) {
	        didWarnAboutUninitializedState.add(componentName);

	        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
	      }
	    } // If new component APIs are defined, "unsafe" lifecycles won't be called.
	    // Warn about these lifecycles if they are present.
	    // Don't warn about react-lifecycles-compat polyfilled methods though.


	    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
	      var foundWillMountName = null;
	      var foundWillReceivePropsName = null;
	      var foundWillUpdateName = null;

	      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
	        foundWillMountName = 'componentWillMount';
	      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
	        foundWillMountName = 'UNSAFE_componentWillMount';
	      }

	      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
	        foundWillReceivePropsName = 'componentWillReceiveProps';
	      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
	      }

	      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
	        foundWillUpdateName = 'componentWillUpdate';
	      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
	        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
	      }

	      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
	        var _componentName = getComponentName(ctor) || 'Component';

	        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

	        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
	          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);

	          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
	        }
	      }
	    }
	  } // Cache unmasked context so we can avoid recreating masked context unless necessary.
	  // ReactFiberContext usually updates this cache but can't for newly-created instances.


	  if (isLegacyContextConsumer) {
	    cacheContext(workInProgress, unmaskedContext, context);
	  }

	  return instance;
	}

	function callComponentWillMount(workInProgress, instance) {
	  startPhaseTimer(workInProgress, 'componentWillMount');
	  var oldState = instance.state;

	  if (typeof instance.componentWillMount === 'function') {
	    instance.componentWillMount();
	  }

	  if (typeof instance.UNSAFE_componentWillMount === 'function') {
	    instance.UNSAFE_componentWillMount();
	  }

	  stopPhaseTimer();

	  if (oldState !== instance.state) {
	    {
	      error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
	    }

	    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
	  }
	}

	function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
	  var oldState = instance.state;
	  startPhaseTimer(workInProgress, 'componentWillReceiveProps');

	  if (typeof instance.componentWillReceiveProps === 'function') {
	    instance.componentWillReceiveProps(newProps, nextContext);
	  }

	  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
	  }

	  stopPhaseTimer();

	  if (instance.state !== oldState) {
	    {
	      var componentName = getComponentName(workInProgress.type) || 'Component';

	      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
	        didWarnAboutStateAssignmentForComponent.add(componentName);

	        error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
	      }
	    }

	    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
	  }
	} // Invokes the mount life-cycles on a previously never rendered instance.


	function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
	  {
	    checkClassInstance(workInProgress, ctor, newProps);
	  }

	  var instance = workInProgress.stateNode;
	  instance.props = newProps;
	  instance.state = workInProgress.memoizedState;
	  instance.refs = emptyRefsObject;
	  initializeUpdateQueue(workInProgress);
	  var contextType = ctor.contextType;

	  if (typeof contextType === 'object' && contextType !== null) {
	    instance.context = readContext(contextType);
	  } else {
	    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    instance.context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  {
	    if (instance.state === newProps) {
	      var componentName = getComponentName(ctor) || 'Component';

	      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
	        didWarnAboutDirectlyAssigningPropsToState.add(componentName);

	        error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
	      }
	    }

	    if (workInProgress.mode & StrictMode) {
	      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
	    }

	    {
	      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
	    }
	  }

	  processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
	  instance.state = workInProgress.memoizedState;
	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    instance.state = workInProgress.memoizedState;
	  } // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.


	  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
	    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
	    // process them now.

	    processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
	    instance.state = workInProgress.memoizedState;
	  }

	  if (typeof instance.componentDidMount === 'function') {
	    workInProgress.effectTag |= Update;
	  }
	}

	function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
	  var instance = workInProgress.stateNode;
	  var oldProps = workInProgress.memoizedProps;
	  instance.props = oldProps;
	  var oldContext = instance.context;
	  var contextType = ctor.contextType;
	  var nextContext = emptyContextObject;

	  if (typeof contextType === 'object' && contextType !== null) {
	    nextContext = readContext(contextType);
	  } else {
	    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
	  }

	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
	  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
	  // ever the previously attempted to render - not the "current". However,
	  // during componentDidUpdate we pass the "current" props.
	  // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.

	  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
	    if (oldProps !== newProps || oldContext !== nextContext) {
	      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
	    }
	  }

	  resetHasForceUpdateBeforeProcessing();
	  var oldState = workInProgress.memoizedState;
	  var newState = instance.state = oldState;
	  processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
	  newState = workInProgress.memoizedState;

	  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidMount === 'function') {
	      workInProgress.effectTag |= Update;
	    }

	    return false;
	  }

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    newState = workInProgress.memoizedState;
	  }

	  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

	  if (shouldUpdate) {
	    // In order to support react-lifecycles-compat polyfilled components,
	    // Unsafe lifecycles should not be invoked for components using the new APIs.
	    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
	      startPhaseTimer(workInProgress, 'componentWillMount');

	      if (typeof instance.componentWillMount === 'function') {
	        instance.componentWillMount();
	      }

	      if (typeof instance.UNSAFE_componentWillMount === 'function') {
	        instance.UNSAFE_componentWillMount();
	      }

	      stopPhaseTimer();
	    }

	    if (typeof instance.componentDidMount === 'function') {
	      workInProgress.effectTag |= Update;
	    }
	  } else {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidMount === 'function') {
	      workInProgress.effectTag |= Update;
	    } // If shouldComponentUpdate returned false, we should still update the
	    // memoized state to indicate that this work can be reused.


	    workInProgress.memoizedProps = newProps;
	    workInProgress.memoizedState = newState;
	  } // Update the existing instance's state, props, and context pointers even
	  // if shouldComponentUpdate returns false.


	  instance.props = newProps;
	  instance.state = newState;
	  instance.context = nextContext;
	  return shouldUpdate;
	} // Invokes the update life-cycles and returns false if it shouldn't rerender.


	function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
	  var instance = workInProgress.stateNode;
	  cloneUpdateQueue(current, workInProgress);
	  var oldProps = workInProgress.memoizedProps;
	  instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);
	  var oldContext = instance.context;
	  var contextType = ctor.contextType;
	  var nextContext = emptyContextObject;

	  if (typeof contextType === 'object' && contextType !== null) {
	    nextContext = readContext(contextType);
	  } else {
	    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
	  }

	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
	  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
	  // ever the previously attempted to render - not the "current". However,
	  // during componentDidUpdate we pass the "current" props.
	  // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.

	  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
	    if (oldProps !== newProps || oldContext !== nextContext) {
	      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
	    }
	  }

	  resetHasForceUpdateBeforeProcessing();
	  var oldState = workInProgress.memoizedState;
	  var newState = instance.state = oldState;
	  processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
	  newState = workInProgress.memoizedState;

	  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidUpdate === 'function') {
	      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.effectTag |= Update;
	      }
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.effectTag |= Snapshot;
	      }
	    }

	    return false;
	  }

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    newState = workInProgress.memoizedState;
	  }

	  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

	  if (shouldUpdate) {
	    // In order to support react-lifecycles-compat polyfilled components,
	    // Unsafe lifecycles should not be invoked for components using the new APIs.
	    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
	      startPhaseTimer(workInProgress, 'componentWillUpdate');

	      if (typeof instance.componentWillUpdate === 'function') {
	        instance.componentWillUpdate(newProps, newState, nextContext);
	      }

	      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
	        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
	      }

	      stopPhaseTimer();
	    }

	    if (typeof instance.componentDidUpdate === 'function') {
	      workInProgress.effectTag |= Update;
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      workInProgress.effectTag |= Snapshot;
	    }
	  } else {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidUpdate === 'function') {
	      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.effectTag |= Update;
	      }
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.effectTag |= Snapshot;
	      }
	    } // If shouldComponentUpdate returned false, we should still update the
	    // memoized props/state to indicate that this work can be reused.


	    workInProgress.memoizedProps = newProps;
	    workInProgress.memoizedState = newState;
	  } // Update the existing instance's state, props, and context pointers even
	  // if shouldComponentUpdate returns false.


	  instance.props = newProps;
	  instance.state = newState;
	  instance.context = nextContext;
	  return shouldUpdate;
	}

	var didWarnAboutMaps;
	var didWarnAboutGenerators;
	var didWarnAboutStringRefs;
	var ownerHasKeyUseWarning;
	var ownerHasFunctionTypeWarning;

	var warnForMissingKey = function (child) {};

	{
	  didWarnAboutMaps = false;
	  didWarnAboutGenerators = false;
	  didWarnAboutStringRefs = {};
	  /**
	   * Warn if there's no key explicitly set on dynamic arrays of children or
	   * object keys are not valid. This allows us to keep track of children between
	   * updates.
	   */

	  ownerHasKeyUseWarning = {};
	  ownerHasFunctionTypeWarning = {};

	  warnForMissingKey = function (child) {
	    if (child === null || typeof child !== 'object') {
	      return;
	    }

	    if (!child._store || child._store.validated || child.key != null) {
	      return;
	    }

	    if (!(typeof child._store === 'object')) {
	      {
	        throw Error( "React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }

	    child._store.validated = true;
	    var currentComponentErrorInfo = 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + getCurrentFiberStackInDev();

	    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
	      return;
	    }

	    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

	    error('Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.');
	  };
	}

	var isArray$1 = Array.isArray;

	function coerceRef(returnFiber, current, element) {
	  var mixedRef = element.ref;

	  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
	    {
	      // TODO: Clean this up once we turn on the string ref warning for
	      // everyone, because the strict mode case will no longer be relevant
	      if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
	      // because these cannot be automatically converted to an arrow function
	      // using a codemod. Therefore, we don't have to warn about string refs again.
	      !(element._owner && element._self && element._owner.stateNode !== element._self)) {
	        var componentName = getComponentName(returnFiber.type) || 'Component';

	        if (!didWarnAboutStringRefs[componentName]) {
	          {
	            error('A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref%s', mixedRef, getStackByFiberInDevAndProd(returnFiber));
	          }

	          didWarnAboutStringRefs[componentName] = true;
	        }
	      }
	    }

	    if (element._owner) {
	      var owner = element._owner;
	      var inst;

	      if (owner) {
	        var ownerFiber = owner;

	        if (!(ownerFiber.tag === ClassComponent)) {
	          {
	            throw Error( "Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref" );
	          }
	        }

	        inst = ownerFiber.stateNode;
	      }

	      if (!inst) {
	        {
	          throw Error( "Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue." );
	        }
	      }

	      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

	      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
	        return current.ref;
	      }

	      var ref = function (value) {
	        var refs = inst.refs;

	        if (refs === emptyRefsObject) {
	          // This is a lazy pooled frozen object, so we need to initialize.
	          refs = inst.refs = {};
	        }

	        if (value === null) {
	          delete refs[stringRef];
	        } else {
	          refs[stringRef] = value;
	        }
	      };

	      ref._stringRef = stringRef;
	      return ref;
	    } else {
	      if (!(typeof mixedRef === 'string')) {
	        {
	          throw Error( "Expected ref to be a function, a string, an object returned by React.createRef(), or null." );
	        }
	      }

	      if (!element._owner) {
	        {
	          throw Error( "Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information." );
	        }
	      }
	    }
	  }

	  return mixedRef;
	}

	function throwOnInvalidObjectType(returnFiber, newChild) {
	  if (returnFiber.type !== 'textarea') {
	    var addendum = '';

	    {
	      addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentFiberStackInDev();
	    }

	    {
	      {
	        throw Error( "Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + ")." + addendum );
	      }
	    }
	  }
	}

	function warnOnFunctionType() {
	  {
	    var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + getCurrentFiberStackInDev();

	    if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
	      return;
	    }

	    ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;

	    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
	  }
	} // This wrapper function exists because I expect to clone the code in each path
	// to be able to optimize each path individually by branching early. This needs
	// a compiler or we can do it manually. Helpers that don't need this branching
	// live outside of this function.


	function ChildReconciler(shouldTrackSideEffects) {
	  function deleteChild(returnFiber, childToDelete) {
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return;
	    } // Deletions are added in reversed order so we add it to the front.
	    // At this point, the return fiber's effect list is empty except for
	    // deletions, so we can just append the deletion to the list. The remaining
	    // effects aren't added until the complete phase. Once we implement
	    // resuming, this may not be true.


	    var last = returnFiber.lastEffect;

	    if (last !== null) {
	      last.nextEffect = childToDelete;
	      returnFiber.lastEffect = childToDelete;
	    } else {
	      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
	    }

	    childToDelete.nextEffect = null;
	    childToDelete.effectTag = Deletion;
	  }

	  function deleteRemainingChildren(returnFiber, currentFirstChild) {
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return null;
	    } // TODO: For the shouldClone case, this could be micro-optimized a bit by
	    // assuming that after the first child we've already added everything.


	    var childToDelete = currentFirstChild;

	    while (childToDelete !== null) {
	      deleteChild(returnFiber, childToDelete);
	      childToDelete = childToDelete.sibling;
	    }

	    return null;
	  }

	  function mapRemainingChildren(returnFiber, currentFirstChild) {
	    // Add the remaining children to a temporary map so that we can find them by
	    // keys quickly. Implicit (null) keys get added to this set with their index
	    // instead.
	    var existingChildren = new Map();
	    var existingChild = currentFirstChild;

	    while (existingChild !== null) {
	      if (existingChild.key !== null) {
	        existingChildren.set(existingChild.key, existingChild);
	      } else {
	        existingChildren.set(existingChild.index, existingChild);
	      }

	      existingChild = existingChild.sibling;
	    }

	    return existingChildren;
	  }

	  function useFiber(fiber, pendingProps) {
	    // We currently set sibling to null and index to 0 here because it is easy
	    // to forget to do before returning it. E.g. for the single child case.
	    var clone = createWorkInProgress(fiber, pendingProps);
	    clone.index = 0;
	    clone.sibling = null;
	    return clone;
	  }

	  function placeChild(newFiber, lastPlacedIndex, newIndex) {
	    newFiber.index = newIndex;

	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return lastPlacedIndex;
	    }

	    var current = newFiber.alternate;

	    if (current !== null) {
	      var oldIndex = current.index;

	      if (oldIndex < lastPlacedIndex) {
	        // This is a move.
	        newFiber.effectTag = Placement;
	        return lastPlacedIndex;
	      } else {
	        // This item can stay in place.
	        return oldIndex;
	      }
	    } else {
	      // This is an insertion.
	      newFiber.effectTag = Placement;
	      return lastPlacedIndex;
	    }
	  }

	  function placeSingleChild(newFiber) {
	    // This is simpler for the single child case. We only need to do a
	    // placement for inserting new children.
	    if (shouldTrackSideEffects && newFiber.alternate === null) {
	      newFiber.effectTag = Placement;
	    }

	    return newFiber;
	  }

	  function updateTextNode(returnFiber, current, textContent, expirationTime) {
	    if (current === null || current.tag !== HostText) {
	      // Insert
	      var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current, textContent);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function updateElement(returnFiber, current, element, expirationTime) {
	    if (current !== null) {
	      if (current.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
	       isCompatibleFamilyForHotReloading(current, element) )) {
	        // Move based on index
	        var existing = useFiber(current, element.props);
	        existing.ref = coerceRef(returnFiber, current, element);
	        existing.return = returnFiber;

	        {
	          existing._debugSource = element._source;
	          existing._debugOwner = element._owner;
	        }

	        return existing;
	      }
	    } // Insert


	    var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
	    created.ref = coerceRef(returnFiber, current, element);
	    created.return = returnFiber;
	    return created;
	  }

	  function updatePortal(returnFiber, current, portal, expirationTime) {
	    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
	      // Insert
	      var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current, portal.children || []);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function updateFragment(returnFiber, current, fragment, expirationTime, key) {
	    if (current === null || current.tag !== Fragment) {
	      // Insert
	      var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current, fragment);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function createChild(returnFiber, newChild, expirationTime) {
	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      // Text nodes don't have keys. If the previous node is implicitly keyed
	      // we can continue to replace it without aborting even if it is not a text
	      // node.
	      var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
	      created.return = returnFiber;
	      return created;
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);

	            _created.ref = coerceRef(returnFiber, null, newChild);
	            _created.return = returnFiber;
	            return _created;
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);

	            _created2.return = returnFiber;
	            return _created2;
	          }
	      }

	      if (isArray$1(newChild) || getIteratorFn(newChild)) {
	        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);

	        _created3.return = returnFiber;
	        return _created3;
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }

	    return null;
	  }

	  function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
	    // Update the fiber if the keys match, otherwise return null.
	    var key = oldFiber !== null ? oldFiber.key : null;

	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      // Text nodes don't have keys. If the previous node is implicitly keyed
	      // we can continue to replace it without aborting even if it is not a text
	      // node.
	      if (key !== null) {
	        return null;
	      }

	      return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            if (newChild.key === key) {
	              if (newChild.type === REACT_FRAGMENT_TYPE) {
	                return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
	              }

	              return updateElement(returnFiber, oldFiber, newChild, expirationTime);
	            } else {
	              return null;
	            }
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            if (newChild.key === key) {
	              return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
	            } else {
	              return null;
	            }
	          }
	      }

	      if (isArray$1(newChild) || getIteratorFn(newChild)) {
	        if (key !== null) {
	          return null;
	        }

	        return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }

	    return null;
	  }

	  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      // Text nodes don't have keys, so we neither have to check the old nor
	      // new node for the key. If both are text nodes, they match.
	      var matchedFiber = existingChildren.get(newIdx) || null;
	      return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

	            if (newChild.type === REACT_FRAGMENT_TYPE) {
	              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
	            }

	            return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

	            return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
	          }
	      }

	      if (isArray$1(newChild) || getIteratorFn(newChild)) {
	        var _matchedFiber3 = existingChildren.get(newIdx) || null;

	        return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }

	    return null;
	  }
	  /**
	   * Warns if there is a duplicate or missing key
	   */


	  function warnOnInvalidKey(child, knownKeys) {
	    {
	      if (typeof child !== 'object' || child === null) {
	        return knownKeys;
	      }

	      switch (child.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	        case REACT_PORTAL_TYPE:
	          warnForMissingKey(child);
	          var key = child.key;

	          if (typeof key !== 'string') {
	            break;
	          }

	          if (knownKeys === null) {
	            knownKeys = new Set();
	            knownKeys.add(key);
	            break;
	          }

	          if (!knownKeys.has(key)) {
	            knownKeys.add(key);
	            break;
	          }

	          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);

	          break;
	      }
	    }

	    return knownKeys;
	  }

	  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
	    // This algorithm can't optimize by searching from both ends since we
	    // don't have backpointers on fibers. I'm trying to see how far we can get
	    // with that model. If it ends up not being worth the tradeoffs, we can
	    // add it later.
	    // Even with a two ended optimization, we'd want to optimize for the case
	    // where there are few changes and brute force the comparison instead of
	    // going for the Map. It'd like to explore hitting that path first in
	    // forward-only mode and only go for the Map once we notice that we need
	    // lots of look ahead. This doesn't handle reversal as well as two ended
	    // search but that's unusual. Besides, for the two ended optimization to
	    // work on Iterables, we'd need to copy the whole set.
	    // In this first iteration, we'll just live with hitting the bad case
	    // (adding everything to a Map) in for every insert/move.
	    // If you change this code, also update reconcileChildrenIterator() which
	    // uses the same algorithm.
	    {
	      // First, validate keys.
	      var knownKeys = null;

	      for (var i = 0; i < newChildren.length; i++) {
	        var child = newChildren[i];
	        knownKeys = warnOnInvalidKey(child, knownKeys);
	      }
	    }

	    var resultingFirstChild = null;
	    var previousNewFiber = null;
	    var oldFiber = currentFirstChild;
	    var lastPlacedIndex = 0;
	    var newIdx = 0;
	    var nextOldFiber = null;

	    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
	      if (oldFiber.index > newIdx) {
	        nextOldFiber = oldFiber;
	        oldFiber = null;
	      } else {
	        nextOldFiber = oldFiber.sibling;
	      }

	      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

	      if (newFiber === null) {
	        // TODO: This breaks on empty slots like null children. That's
	        // unfortunate because it triggers the slow path all the time. We need
	        // a better way to communicate whether this was a miss or null,
	        // boolean, undefined, etc.
	        if (oldFiber === null) {
	          oldFiber = nextOldFiber;
	        }

	        break;
	      }

	      if (shouldTrackSideEffects) {
	        if (oldFiber && newFiber.alternate === null) {
	          // We matched the slot, but we didn't reuse the existing fiber, so we
	          // need to delete the existing child.
	          deleteChild(returnFiber, oldFiber);
	        }
	      }

	      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

	      if (previousNewFiber === null) {
	        // TODO: Move out of the loop. This only happens for the first run.
	        resultingFirstChild = newFiber;
	      } else {
	        // TODO: Defer siblings if we're not at the right index for this slot.
	        // I.e. if we had null values before, then we want to defer this
	        // for each null value. However, we also don't want to call updateSlot
	        // with the previous one.
	        previousNewFiber.sibling = newFiber;
	      }

	      previousNewFiber = newFiber;
	      oldFiber = nextOldFiber;
	    }

	    if (newIdx === newChildren.length) {
	      // We've reached the end of the new children. We can delete the rest.
	      deleteRemainingChildren(returnFiber, oldFiber);
	      return resultingFirstChild;
	    }

	    if (oldFiber === null) {
	      // If we don't have any more existing children we can choose a fast path
	      // since the rest will all be insertions.
	      for (; newIdx < newChildren.length; newIdx++) {
	        var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);

	        if (_newFiber === null) {
	          continue;
	        }

	        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          // TODO: Move out of the loop. This only happens for the first run.
	          resultingFirstChild = _newFiber;
	        } else {
	          previousNewFiber.sibling = _newFiber;
	        }

	        previousNewFiber = _newFiber;
	      }

	      return resultingFirstChild;
	    } // Add all children to a key map for quick lookups.


	    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

	    for (; newIdx < newChildren.length; newIdx++) {
	      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);

	      if (_newFiber2 !== null) {
	        if (shouldTrackSideEffects) {
	          if (_newFiber2.alternate !== null) {
	            // The new fiber is a work in progress, but if there exists a
	            // current, that means that we reused the fiber. We need to delete
	            // it from the child list so that we don't add it to the deletion
	            // list.
	            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
	          }
	        }

	        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          resultingFirstChild = _newFiber2;
	        } else {
	          previousNewFiber.sibling = _newFiber2;
	        }

	        previousNewFiber = _newFiber2;
	      }
	    }

	    if (shouldTrackSideEffects) {
	      // Any existing children that weren't consumed above were deleted. We need
	      // to add them to the deletion list.
	      existingChildren.forEach(function (child) {
	        return deleteChild(returnFiber, child);
	      });
	    }

	    return resultingFirstChild;
	  }

	  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
	    // This is the same implementation as reconcileChildrenArray(),
	    // but using the iterator instead.
	    var iteratorFn = getIteratorFn(newChildrenIterable);

	    if (!(typeof iteratorFn === 'function')) {
	      {
	        throw Error( "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }

	    {
	      // We don't support rendering Generators because it's a mutation.
	      // See https://github.com/facebook/react/issues/12995
	      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
	      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
	        if (!didWarnAboutGenerators) {
	          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
	        }

	        didWarnAboutGenerators = true;
	      } // Warn about using Maps as children


	      if (newChildrenIterable.entries === iteratorFn) {
	        if (!didWarnAboutMaps) {
	          error('Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.');
	        }

	        didWarnAboutMaps = true;
	      } // First, validate keys.
	      // We'll get a different iterator later for the main pass.


	      var _newChildren = iteratorFn.call(newChildrenIterable);

	      if (_newChildren) {
	        var knownKeys = null;

	        var _step = _newChildren.next();

	        for (; !_step.done; _step = _newChildren.next()) {
	          var child = _step.value;
	          knownKeys = warnOnInvalidKey(child, knownKeys);
	        }
	      }
	    }

	    var newChildren = iteratorFn.call(newChildrenIterable);

	    if (!(newChildren != null)) {
	      {
	        throw Error( "An iterable object provided no iterator." );
	      }
	    }

	    var resultingFirstChild = null;
	    var previousNewFiber = null;
	    var oldFiber = currentFirstChild;
	    var lastPlacedIndex = 0;
	    var newIdx = 0;
	    var nextOldFiber = null;
	    var step = newChildren.next();

	    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
	      if (oldFiber.index > newIdx) {
	        nextOldFiber = oldFiber;
	        oldFiber = null;
	      } else {
	        nextOldFiber = oldFiber.sibling;
	      }

	      var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

	      if (newFiber === null) {
	        // TODO: This breaks on empty slots like null children. That's
	        // unfortunate because it triggers the slow path all the time. We need
	        // a better way to communicate whether this was a miss or null,
	        // boolean, undefined, etc.
	        if (oldFiber === null) {
	          oldFiber = nextOldFiber;
	        }

	        break;
	      }

	      if (shouldTrackSideEffects) {
	        if (oldFiber && newFiber.alternate === null) {
	          // We matched the slot, but we didn't reuse the existing fiber, so we
	          // need to delete the existing child.
	          deleteChild(returnFiber, oldFiber);
	        }
	      }

	      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

	      if (previousNewFiber === null) {
	        // TODO: Move out of the loop. This only happens for the first run.
	        resultingFirstChild = newFiber;
	      } else {
	        // TODO: Defer siblings if we're not at the right index for this slot.
	        // I.e. if we had null values before, then we want to defer this
	        // for each null value. However, we also don't want to call updateSlot
	        // with the previous one.
	        previousNewFiber.sibling = newFiber;
	      }

	      previousNewFiber = newFiber;
	      oldFiber = nextOldFiber;
	    }

	    if (step.done) {
	      // We've reached the end of the new children. We can delete the rest.
	      deleteRemainingChildren(returnFiber, oldFiber);
	      return resultingFirstChild;
	    }

	    if (oldFiber === null) {
	      // If we don't have any more existing children we can choose a fast path
	      // since the rest will all be insertions.
	      for (; !step.done; newIdx++, step = newChildren.next()) {
	        var _newFiber3 = createChild(returnFiber, step.value, expirationTime);

	        if (_newFiber3 === null) {
	          continue;
	        }

	        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          // TODO: Move out of the loop. This only happens for the first run.
	          resultingFirstChild = _newFiber3;
	        } else {
	          previousNewFiber.sibling = _newFiber3;
	        }

	        previousNewFiber = _newFiber3;
	      }

	      return resultingFirstChild;
	    } // Add all children to a key map for quick lookups.


	    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

	    for (; !step.done; newIdx++, step = newChildren.next()) {
	      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);

	      if (_newFiber4 !== null) {
	        if (shouldTrackSideEffects) {
	          if (_newFiber4.alternate !== null) {
	            // The new fiber is a work in progress, but if there exists a
	            // current, that means that we reused the fiber. We need to delete
	            // it from the child list so that we don't add it to the deletion
	            // list.
	            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
	          }
	        }

	        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          resultingFirstChild = _newFiber4;
	        } else {
	          previousNewFiber.sibling = _newFiber4;
	        }

	        previousNewFiber = _newFiber4;
	      }
	    }

	    if (shouldTrackSideEffects) {
	      // Any existing children that weren't consumed above were deleted. We need
	      // to add them to the deletion list.
	      existingChildren.forEach(function (child) {
	        return deleteChild(returnFiber, child);
	      });
	    }

	    return resultingFirstChild;
	  }

	  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
	    // There's no need to check for keys on text nodes since we don't have a
	    // way to define them.
	    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
	      // We already have an existing node so let's just update it and delete
	      // the rest.
	      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
	      var existing = useFiber(currentFirstChild, textContent);
	      existing.return = returnFiber;
	      return existing;
	    } // The existing first child is not a text node so we need to create one
	    // and delete the existing ones.


	    deleteRemainingChildren(returnFiber, currentFirstChild);
	    var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
	    created.return = returnFiber;
	    return created;
	  }

	  function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
	    var key = element.key;
	    var child = currentFirstChild;

	    while (child !== null) {
	      // TODO: If key === null and child.key === null, then this only applies to
	      // the first item in the list.
	      if (child.key === key) {
	        switch (child.tag) {
	          case Fragment:
	            {
	              if (element.type === REACT_FRAGMENT_TYPE) {
	                deleteRemainingChildren(returnFiber, child.sibling);
	                var existing = useFiber(child, element.props.children);
	                existing.return = returnFiber;

	                {
	                  existing._debugSource = element._source;
	                  existing._debugOwner = element._owner;
	                }

	                return existing;
	              }

	              break;
	            }

	          case Block:

	          // We intentionally fallthrough here if enableBlocksAPI is not on.
	          // eslint-disable-next-lined no-fallthrough

	          default:
	            {
	              if (child.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
	               isCompatibleFamilyForHotReloading(child, element) )) {
	                deleteRemainingChildren(returnFiber, child.sibling);

	                var _existing3 = useFiber(child, element.props);

	                _existing3.ref = coerceRef(returnFiber, child, element);
	                _existing3.return = returnFiber;

	                {
	                  _existing3._debugSource = element._source;
	                  _existing3._debugOwner = element._owner;
	                }

	                return _existing3;
	              }

	              break;
	            }
	        } // Didn't match.


	        deleteRemainingChildren(returnFiber, child);
	        break;
	      } else {
	        deleteChild(returnFiber, child);
	      }

	      child = child.sibling;
	    }

	    if (element.type === REACT_FRAGMENT_TYPE) {
	      var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
	      created.return = returnFiber;
	      return created;
	    } else {
	      var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);

	      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
	      _created4.return = returnFiber;
	      return _created4;
	    }
	  }

	  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
	    var key = portal.key;
	    var child = currentFirstChild;

	    while (child !== null) {
	      // TODO: If key === null and child.key === null, then this only applies to
	      // the first item in the list.
	      if (child.key === key) {
	        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
	          deleteRemainingChildren(returnFiber, child.sibling);
	          var existing = useFiber(child, portal.children || []);
	          existing.return = returnFiber;
	          return existing;
	        } else {
	          deleteRemainingChildren(returnFiber, child);
	          break;
	        }
	      } else {
	        deleteChild(returnFiber, child);
	      }

	      child = child.sibling;
	    }

	    var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
	    created.return = returnFiber;
	    return created;
	  } // This API will tag the children with the side-effect of the reconciliation
	  // itself. They will be added to the side-effect list as we pass through the
	  // children and the parent.


	  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
	    // This function is not recursive.
	    // If the top level item is an array, we treat it as a set of children,
	    // not as a fragment. Nested arrays on the other hand will be treated as
	    // fragment nodes. Recursion happens at the normal flow.
	    // Handle top level unkeyed fragments as if they were arrays.
	    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
	    // We treat the ambiguous cases above the same.
	    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

	    if (isUnkeyedTopLevelFragment) {
	      newChild = newChild.props.children;
	    } // Handle object types


	    var isObject = typeof newChild === 'object' && newChild !== null;

	    if (isObject) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

	        case REACT_PORTAL_TYPE:
	          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
	      }
	    }

	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
	    }

	    if (isArray$1(newChild)) {
	      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
	    }

	    if (getIteratorFn(newChild)) {
	      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
	    }

	    if (isObject) {
	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }

	    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
	      // If the new child is undefined, and the return fiber is a composite
	      // component, throw an error. If Fiber return types are disabled,
	      // we already threw above.
	      switch (returnFiber.tag) {
	        case ClassComponent:
	          {
	            {
	              var instance = returnFiber.stateNode;

	              if (instance.render._isMockFunction) {
	                // We allow auto-mocks to proceed as if they're returning null.
	                break;
	              }
	            }
	          }
	        // Intentionally fall through to the next case, which handles both
	        // functions and classes
	        // eslint-disable-next-lined no-fallthrough

	        case FunctionComponent:
	          {
	            var Component = returnFiber.type;

	            {
	              {
	                throw Error( (Component.displayName || Component.name || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null." );
	              }
	            }
	          }
	      }
	    } // Remaining cases are all treated as empty.


	    return deleteRemainingChildren(returnFiber, currentFirstChild);
	  }

	  return reconcileChildFibers;
	}

	var reconcileChildFibers = ChildReconciler(true);
	var mountChildFibers = ChildReconciler(false);
	function cloneChildFibers(current, workInProgress) {
	  if (!(current === null || workInProgress.child === current.child)) {
	    {
	      throw Error( "Resuming work not yet implemented." );
	    }
	  }

	  if (workInProgress.child === null) {
	    return;
	  }

	  var currentChild = workInProgress.child;
	  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
	  workInProgress.child = newChild;
	  newChild.return = workInProgress;

	  while (currentChild.sibling !== null) {
	    currentChild = currentChild.sibling;
	    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
	    newChild.return = workInProgress;
	  }

	  newChild.sibling = null;
	} // Reset a workInProgress child set to prepare it for a second pass.

	function resetChildFibers(workInProgress, renderExpirationTime) {
	  var child = workInProgress.child;

	  while (child !== null) {
	    resetWorkInProgress(child, renderExpirationTime);
	    child = child.sibling;
	  }
	}

	var NO_CONTEXT = {};
	var contextStackCursor$1 = createCursor(NO_CONTEXT);
	var contextFiberStackCursor = createCursor(NO_CONTEXT);
	var rootInstanceStackCursor = createCursor(NO_CONTEXT);

	function requiredContext(c) {
	  if (!(c !== NO_CONTEXT)) {
	    {
	      throw Error( "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }

	  return c;
	}

	function getRootHostContainer() {
	  var rootInstance = requiredContext(rootInstanceStackCursor.current);
	  return rootInstance;
	}

	function pushHostContainer(fiber, nextRootInstance) {
	  // Push current root instance onto the stack;
	  // This allows us to reset root when portals are popped.
	  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
	  // This enables us to pop only Fibers that provide unique contexts.

	  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
	  // However, we can't just call getRootHostContext() and push it because
	  // we'd have a different number of entries on the stack depending on
	  // whether getRootHostContext() throws somewhere in renderer code or not.
	  // So we push an empty value first. This lets us safely unwind on errors.

	  push(contextStackCursor$1, NO_CONTEXT, fiber);
	  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

	  pop(contextStackCursor$1, fiber);
	  push(contextStackCursor$1, nextRootContext, fiber);
	}

	function popHostContainer(fiber) {
	  pop(contextStackCursor$1, fiber);
	  pop(contextFiberStackCursor, fiber);
	  pop(rootInstanceStackCursor, fiber);
	}

	function getHostContext() {
	  var context = requiredContext(contextStackCursor$1.current);
	  return context;
	}

	function pushHostContext(fiber) {
	  var rootInstance = requiredContext(rootInstanceStackCursor.current);
	  var context = requiredContext(contextStackCursor$1.current);
	  var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.

	  if (context === nextContext) {
	    return;
	  } // Track the context and the Fiber that provided it.
	  // This enables us to pop only Fibers that provide unique contexts.


	  push(contextFiberStackCursor, fiber, fiber);
	  push(contextStackCursor$1, nextContext, fiber);
	}

	function popHostContext(fiber) {
	  // Do not pop unless this Fiber provided the current context.
	  // pushHostContext() only pushes Fibers that provide unique contexts.
	  if (contextFiberStackCursor.current !== fiber) {
	    return;
	  }

	  pop(contextStackCursor$1, fiber);
	  pop(contextFiberStackCursor, fiber);
	}

	var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
	// inherited deeply down the subtree. The upper bits only affect
	// this immediate suspense boundary and gets reset each new
	// boundary or suspense list.

	var SubtreeSuspenseContextMask = 1; // Subtree Flags:
	// InvisibleParentSuspenseContext indicates that one of our parent Suspense
	// boundaries is not currently showing visible main content.
	// Either because it is already showing a fallback or is not mounted at all.
	// We can use this to determine if it is desirable to trigger a fallback at
	// the parent. If not, then we might need to trigger undesirable boundaries
	// and/or suspend the commit to avoid hiding the parent content.

	var InvisibleParentSuspenseContext = 1; // Shallow Flags:
	// ForceSuspenseFallback can be used by SuspenseList to force newly added
	// items into their fallback state during one of the render passes.

	var ForceSuspenseFallback = 2;
	var suspenseStackCursor = createCursor(DefaultSuspenseContext);
	function hasSuspenseContext(parentContext, flag) {
	  return (parentContext & flag) !== 0;
	}
	function setDefaultShallowSuspenseContext(parentContext) {
	  return parentContext & SubtreeSuspenseContextMask;
	}
	function setShallowSuspenseContext(parentContext, shallowContext) {
	  return parentContext & SubtreeSuspenseContextMask | shallowContext;
	}
	function addSubtreeSuspenseContext(parentContext, subtreeContext) {
	  return parentContext | subtreeContext;
	}
	function pushSuspenseContext(fiber, newContext) {
	  push(suspenseStackCursor, newContext, fiber);
	}
	function popSuspenseContext(fiber) {
	  pop(suspenseStackCursor, fiber);
	}

	function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
	  // If it was the primary children that just suspended, capture and render the
	  // fallback. Otherwise, don't capture and bubble to the next boundary.
	  var nextState = workInProgress.memoizedState;

	  if (nextState !== null) {
	    if (nextState.dehydrated !== null) {
	      // A dehydrated boundary always captures.
	      return true;
	    }

	    return false;
	  }

	  var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.

	  if (props.fallback === undefined) {
	    return false;
	  } // Regular boundaries always capture.


	  if (props.unstable_avoidThisFallback !== true) {
	    return true;
	  } // If it's a boundary we should avoid, then we prefer to bubble up to the
	  // parent boundary if it is currently invisible.


	  if (hasInvisibleParent) {
	    return false;
	  } // If the parent is not able to handle it, we must handle it.


	  return true;
	}
	function findFirstSuspended(row) {
	  var node = row;

	  while (node !== null) {
	    if (node.tag === SuspenseComponent) {
	      var state = node.memoizedState;

	      if (state !== null) {
	        var dehydrated = state.dehydrated;

	        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
	          return node;
	        }
	      }
	    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
	    // keep track of whether it suspended or not.
	    node.memoizedProps.revealOrder !== undefined) {
	      var didSuspend = (node.effectTag & DidCapture) !== NoEffect;

	      if (didSuspend) {
	        return node;
	      }
	    } else if (node.child !== null) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === row) {
	      return null;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === row) {
	        return null;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }

	  return null;
	}

	function createDeprecatedResponderListener(responder, props) {
	  var eventResponderListener = {
	    responder: responder,
	    props: props
	  };

	  {
	    Object.freeze(eventResponderListener);
	  }

	  return eventResponderListener;
	}

	var HasEffect =
	/* */
	1; // Represents the phase in which the effect (not the clean-up) fires.

	var Layout =
	/*    */
	2;
	var Passive$1 =
	/*   */
	4;

	var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher,
	    ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
	var didWarnAboutMismatchedHooksForComponent;

	{
	  didWarnAboutMismatchedHooksForComponent = new Set();
	}

	// These are set right before calling the component.
	var renderExpirationTime = NoWork; // The work-in-progress fiber. I've named it differently to distinguish it from
	// the work-in-progress hook.

	var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
	// current hook list is the list that belongs to the current fiber. The
	// work-in-progress hook list is a new list that will be added to the
	// work-in-progress fiber.

	var currentHook = null;
	var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
	// does not get reset if we do another render pass; only when we're completely
	// finished evaluating this component. This is an optimization so we know
	// whether we need to clear render phase updates after a throw.

	var didScheduleRenderPhaseUpdate = false;
	var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

	var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
	// The list stores the order of hooks used during the initial render (mount).
	// Subsequent renders (updates) reference this list.

	var hookTypesDev = null;
	var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
	// the dependencies for Hooks that need them (e.g. useEffect or useMemo).
	// When true, such Hooks will always be "remounted". Only used during hot reload.

	var ignorePreviousDependencies = false;

	function mountHookTypesDev() {
	  {
	    var hookName = currentHookNameInDev;

	    if (hookTypesDev === null) {
	      hookTypesDev = [hookName];
	    } else {
	      hookTypesDev.push(hookName);
	    }
	  }
	}

	function updateHookTypesDev() {
	  {
	    var hookName = currentHookNameInDev;

	    if (hookTypesDev !== null) {
	      hookTypesUpdateIndexDev++;

	      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
	        warnOnHookMismatchInDev(hookName);
	      }
	    }
	  }
	}

	function checkDepsAreArrayDev(deps) {
	  {
	    if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
	      // Verify deps, but only on mount to avoid extra checks.
	      // It's unlikely their type would change as usually you define them inline.
	      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
	    }
	  }
	}

	function warnOnHookMismatchInDev(currentHookName) {
	  {
	    var componentName = getComponentName(currentlyRenderingFiber$1.type);

	    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
	      didWarnAboutMismatchedHooksForComponent.add(componentName);

	      if (hookTypesDev !== null) {
	        var table = '';
	        var secondColumnStart = 30;

	        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
	          var oldHookName = hookTypesDev[i];
	          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
	          var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
	          // lol @ IE not supporting String#repeat

	          while (row.length < secondColumnStart) {
	            row += ' ';
	          }

	          row += newHookName + '\n';
	          table += row;
	        }

	        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
	      }
	    }
	  }
	}

	function throwInvalidHookError() {
	  {
	    {
	      throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem." );
	    }
	  }
	}

	function areHookInputsEqual(nextDeps, prevDeps) {
	  {
	    if (ignorePreviousDependencies) {
	      // Only true when this component is being hot reloaded.
	      return false;
	    }
	  }

	  if (prevDeps === null) {
	    {
	      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
	    }

	    return false;
	  }

	  {
	    // Don't bother comparing lengths in prod because these arrays should be
	    // passed inline.
	    if (nextDeps.length !== prevDeps.length) {
	      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
	    }
	  }

	  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
	    if (objectIs(nextDeps[i], prevDeps[i])) {
	      continue;
	    }

	    return false;
	  }

	  return true;
	}

	function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderExpirationTime) {
	  renderExpirationTime = nextRenderExpirationTime;
	  currentlyRenderingFiber$1 = workInProgress;

	  {
	    hookTypesDev = current !== null ? current._debugHookTypes : null;
	    hookTypesUpdateIndexDev = -1; // Used for hot reloading:

	    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
	  }

	  workInProgress.memoizedState = null;
	  workInProgress.updateQueue = null;
	  workInProgress.expirationTime = NoWork; // The following should have already been reset
	  // currentHook = null;
	  // workInProgressHook = null;
	  // didScheduleRenderPhaseUpdate = false;
	  // TODO Warn if no hooks are used at all during mount, then some are used during update.
	  // Currently we will identify the update render as a mount because memoizedState === null.
	  // This is tricky because it's valid for certain types of components (e.g. React.lazy)
	  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
	  // Non-stateful hooks (e.g. context) don't get added to memoizedState,
	  // so memoizedState would be null during updates and mounts.

	  {
	    if (current !== null && current.memoizedState !== null) {
	      ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;
	    } else if (hookTypesDev !== null) {
	      // This dispatcher handles an edge case where a component is updating,
	      // but no stateful hooks have been used.
	      // We want to match the production code behavior (which will use HooksDispatcherOnMount),
	      // but with the extra DEV validation to ensure hooks ordering hasn't changed.
	      // This dispatcher does that.
	      ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;
	    } else {
	      ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;
	    }
	  }

	  var children = Component(props, secondArg); // Check if there was a render phase update

	  if (workInProgress.expirationTime === renderExpirationTime) {
	    // Keep rendering in a loop for as long as render phase updates continue to
	    // be scheduled. Use a counter to prevent infinite loops.
	    var numberOfReRenders = 0;

	    do {
	      workInProgress.expirationTime = NoWork;

	      if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
	        {
	          throw Error( "Too many re-renders. React limits the number of renders to prevent an infinite loop." );
	        }
	      }

	      numberOfReRenders += 1;

	      {
	        // Even when hot reloading, allow dependencies to stabilize
	        // after first render to prevent infinite render phase updates.
	        ignorePreviousDependencies = false;
	      } // Start over from the beginning of the list


	      currentHook = null;
	      workInProgressHook = null;
	      workInProgress.updateQueue = null;

	      {
	        // Also validate hook order for cascading updates.
	        hookTypesUpdateIndexDev = -1;
	      }

	      ReactCurrentDispatcher.current =  HooksDispatcherOnRerenderInDEV ;
	      children = Component(props, secondArg);
	    } while (workInProgress.expirationTime === renderExpirationTime);
	  } // We can assume the previous dispatcher is always this one, since we set it
	  // at the beginning of the render phase and there's no re-entrancy.


	  ReactCurrentDispatcher.current = ContextOnlyDispatcher;

	  {
	    workInProgress._debugHookTypes = hookTypesDev;
	  } // This check uses currentHook so that it works the same in DEV and prod bundles.
	  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.


	  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
	  renderExpirationTime = NoWork;
	  currentlyRenderingFiber$1 = null;
	  currentHook = null;
	  workInProgressHook = null;

	  {
	    currentHookNameInDev = null;
	    hookTypesDev = null;
	    hookTypesUpdateIndexDev = -1;
	  }

	  didScheduleRenderPhaseUpdate = false;

	  if (!!didRenderTooFewHooks) {
	    {
	      throw Error( "Rendered fewer hooks than expected. This may be caused by an accidental early return statement." );
	    }
	  }

	  return children;
	}
	function bailoutHooks(current, workInProgress, expirationTime) {
	  workInProgress.updateQueue = current.updateQueue;
	  workInProgress.effectTag &= ~(Passive | Update);

	  if (current.expirationTime <= expirationTime) {
	    current.expirationTime = NoWork;
	  }
	}
	function resetHooksAfterThrow() {
	  // We can assume the previous dispatcher is always this one, since we set it
	  // at the beginning of the render phase and there's no re-entrancy.
	  ReactCurrentDispatcher.current = ContextOnlyDispatcher;

	  if (didScheduleRenderPhaseUpdate) {
	    // There were render phase updates. These are only valid for this render
	    // phase, which we are now aborting. Remove the updates from the queues so
	    // they do not persist to the next render. Do not remove updates from hooks
	    // that weren't processed.
	    //
	    // Only reset the updates from the queue if it has a clone. If it does
	    // not have a clone, that means it wasn't processed, and the updates were
	    // scheduled before we entered the render phase.
	    var hook = currentlyRenderingFiber$1.memoizedState;

	    while (hook !== null) {
	      var queue = hook.queue;

	      if (queue !== null) {
	        queue.pending = null;
	      }

	      hook = hook.next;
	    }
	  }

	  renderExpirationTime = NoWork;
	  currentlyRenderingFiber$1 = null;
	  currentHook = null;
	  workInProgressHook = null;

	  {
	    hookTypesDev = null;
	    hookTypesUpdateIndexDev = -1;
	    currentHookNameInDev = null;
	  }

	  didScheduleRenderPhaseUpdate = false;
	}

	function mountWorkInProgressHook() {
	  var hook = {
	    memoizedState: null,
	    baseState: null,
	    baseQueue: null,
	    queue: null,
	    next: null
	  };

	  if (workInProgressHook === null) {
	    // This is the first hook in the list
	    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
	  } else {
	    // Append to the end of the list
	    workInProgressHook = workInProgressHook.next = hook;
	  }

	  return workInProgressHook;
	}

	function updateWorkInProgressHook() {
	  // This function is used both for updates and for re-renders triggered by a
	  // render phase update. It assumes there is either a current hook we can
	  // clone, or a work-in-progress hook from a previous render pass that we can
	  // use as a base. When we reach the end of the base list, we must switch to
	  // the dispatcher used for mounts.
	  var nextCurrentHook;

	  if (currentHook === null) {
	    var current = currentlyRenderingFiber$1.alternate;

	    if (current !== null) {
	      nextCurrentHook = current.memoizedState;
	    } else {
	      nextCurrentHook = null;
	    }
	  } else {
	    nextCurrentHook = currentHook.next;
	  }

	  var nextWorkInProgressHook;

	  if (workInProgressHook === null) {
	    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
	  } else {
	    nextWorkInProgressHook = workInProgressHook.next;
	  }

	  if (nextWorkInProgressHook !== null) {
	    // There's already a work-in-progress. Reuse it.
	    workInProgressHook = nextWorkInProgressHook;
	    nextWorkInProgressHook = workInProgressHook.next;
	    currentHook = nextCurrentHook;
	  } else {
	    // Clone from the current hook.
	    if (!(nextCurrentHook !== null)) {
	      {
	        throw Error( "Rendered more hooks than during the previous render." );
	      }
	    }

	    currentHook = nextCurrentHook;
	    var newHook = {
	      memoizedState: currentHook.memoizedState,
	      baseState: currentHook.baseState,
	      baseQueue: currentHook.baseQueue,
	      queue: currentHook.queue,
	      next: null
	    };

	    if (workInProgressHook === null) {
	      // This is the first hook in the list.
	      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
	    } else {
	      // Append to the end of the list.
	      workInProgressHook = workInProgressHook.next = newHook;
	    }
	  }

	  return workInProgressHook;
	}

	function createFunctionComponentUpdateQueue() {
	  return {
	    lastEffect: null
	  };
	}

	function basicStateReducer(state, action) {
	  // $FlowFixMe: Flow doesn't like mixed types
	  return typeof action === 'function' ? action(state) : action;
	}

	function mountReducer(reducer, initialArg, init) {
	  var hook = mountWorkInProgressHook();
	  var initialState;

	  if (init !== undefined) {
	    initialState = init(initialArg);
	  } else {
	    initialState = initialArg;
	  }

	  hook.memoizedState = hook.baseState = initialState;
	  var queue = hook.queue = {
	    pending: null,
	    dispatch: null,
	    lastRenderedReducer: reducer,
	    lastRenderedState: initialState
	  };
	  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
	  return [hook.memoizedState, dispatch];
	}

	function updateReducer(reducer, initialArg, init) {
	  var hook = updateWorkInProgressHook();
	  var queue = hook.queue;

	  if (!(queue !== null)) {
	    {
	      throw Error( "Should have a queue. This is likely a bug in React. Please file an issue." );
	    }
	  }

	  queue.lastRenderedReducer = reducer;
	  var current = currentHook; // The last rebase update that is NOT part of the base state.

	  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.

	  var pendingQueue = queue.pending;

	  if (pendingQueue !== null) {
	    // We have new updates that haven't been processed yet.
	    // We'll add them to the base queue.
	    if (baseQueue !== null) {
	      // Merge the pending queue and the base queue.
	      var baseFirst = baseQueue.next;
	      var pendingFirst = pendingQueue.next;
	      baseQueue.next = pendingFirst;
	      pendingQueue.next = baseFirst;
	    }

	    current.baseQueue = baseQueue = pendingQueue;
	    queue.pending = null;
	  }

	  if (baseQueue !== null) {
	    // We have a queue to process.
	    var first = baseQueue.next;
	    var newState = current.baseState;
	    var newBaseState = null;
	    var newBaseQueueFirst = null;
	    var newBaseQueueLast = null;
	    var update = first;

	    do {
	      var updateExpirationTime = update.expirationTime;

	      if (updateExpirationTime < renderExpirationTime) {
	        // Priority is insufficient. Skip this update. If this is the first
	        // skipped update, the previous update/state is the new base
	        // update/state.
	        var clone = {
	          expirationTime: update.expirationTime,
	          suspenseConfig: update.suspenseConfig,
	          action: update.action,
	          eagerReducer: update.eagerReducer,
	          eagerState: update.eagerState,
	          next: null
	        };

	        if (newBaseQueueLast === null) {
	          newBaseQueueFirst = newBaseQueueLast = clone;
	          newBaseState = newState;
	        } else {
	          newBaseQueueLast = newBaseQueueLast.next = clone;
	        } // Update the remaining priority in the queue.


	        if (updateExpirationTime > currentlyRenderingFiber$1.expirationTime) {
	          currentlyRenderingFiber$1.expirationTime = updateExpirationTime;
	          markUnprocessedUpdateTime(updateExpirationTime);
	        }
	      } else {
	        // This update does have sufficient priority.
	        if (newBaseQueueLast !== null) {
	          var _clone = {
	            expirationTime: Sync,
	            // This update is going to be committed so we never want uncommit it.
	            suspenseConfig: update.suspenseConfig,
	            action: update.action,
	            eagerReducer: update.eagerReducer,
	            eagerState: update.eagerState,
	            next: null
	          };
	          newBaseQueueLast = newBaseQueueLast.next = _clone;
	        } // Mark the event time of this update as relevant to this render pass.
	        // TODO: This should ideally use the true event time of this update rather than
	        // its priority which is a derived and not reverseable value.
	        // TODO: We should skip this update if it was already committed but currently
	        // we have no way of detecting the difference between a committed and suspended
	        // update here.


	        markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig); // Process this update.

	        if (update.eagerReducer === reducer) {
	          // If this update was processed eagerly, and its reducer matches the
	          // current reducer, we can use the eagerly computed state.
	          newState = update.eagerState;
	        } else {
	          var action = update.action;
	          newState = reducer(newState, action);
	        }
	      }

	      update = update.next;
	    } while (update !== null && update !== first);

	    if (newBaseQueueLast === null) {
	      newBaseState = newState;
	    } else {
	      newBaseQueueLast.next = newBaseQueueFirst;
	    } // Mark that the fiber performed work, but only if the new state is
	    // different from the current state.


	    if (!objectIs(newState, hook.memoizedState)) {
	      markWorkInProgressReceivedUpdate();
	    }

	    hook.memoizedState = newState;
	    hook.baseState = newBaseState;
	    hook.baseQueue = newBaseQueueLast;
	    queue.lastRenderedState = newState;
	  }

	  var dispatch = queue.dispatch;
	  return [hook.memoizedState, dispatch];
	}

	function rerenderReducer(reducer, initialArg, init) {
	  var hook = updateWorkInProgressHook();
	  var queue = hook.queue;

	  if (!(queue !== null)) {
	    {
	      throw Error( "Should have a queue. This is likely a bug in React. Please file an issue." );
	    }
	  }

	  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
	  // work-in-progress hook.

	  var dispatch = queue.dispatch;
	  var lastRenderPhaseUpdate = queue.pending;
	  var newState = hook.memoizedState;

	  if (lastRenderPhaseUpdate !== null) {
	    // The queue doesn't persist past this render pass.
	    queue.pending = null;
	    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
	    var update = firstRenderPhaseUpdate;

	    do {
	      // Process this render phase update. We don't have to check the
	      // priority because it will always be the same as the current
	      // render's.
	      var action = update.action;
	      newState = reducer(newState, action);
	      update = update.next;
	    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
	    // different from the current state.


	    if (!objectIs(newState, hook.memoizedState)) {
	      markWorkInProgressReceivedUpdate();
	    }

	    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
	    // the base state unless the queue is empty.
	    // TODO: Not sure if this is the desired semantics, but it's what we
	    // do for gDSFP. I can't remember why.

	    if (hook.baseQueue === null) {
	      hook.baseState = newState;
	    }

	    queue.lastRenderedState = newState;
	  }

	  return [newState, dispatch];
	}

	function mountState(initialState) {
	  var hook = mountWorkInProgressHook();

	  if (typeof initialState === 'function') {
	    // $FlowFixMe: Flow doesn't like mixed types
	    initialState = initialState();
	  }

	  hook.memoizedState = hook.baseState = initialState;
	  var queue = hook.queue = {
	    pending: null,
	    dispatch: null,
	    lastRenderedReducer: basicStateReducer,
	    lastRenderedState: initialState
	  };
	  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
	  return [hook.memoizedState, dispatch];
	}

	function updateState(initialState) {
	  return updateReducer(basicStateReducer);
	}

	function rerenderState(initialState) {
	  return rerenderReducer(basicStateReducer);
	}

	function pushEffect(tag, create, destroy, deps) {
	  var effect = {
	    tag: tag,
	    create: create,
	    destroy: destroy,
	    deps: deps,
	    // Circular
	    next: null
	  };
	  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

	  if (componentUpdateQueue === null) {
	    componentUpdateQueue = createFunctionComponentUpdateQueue();
	    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
	    componentUpdateQueue.lastEffect = effect.next = effect;
	  } else {
	    var lastEffect = componentUpdateQueue.lastEffect;

	    if (lastEffect === null) {
	      componentUpdateQueue.lastEffect = effect.next = effect;
	    } else {
	      var firstEffect = lastEffect.next;
	      lastEffect.next = effect;
	      effect.next = firstEffect;
	      componentUpdateQueue.lastEffect = effect;
	    }
	  }

	  return effect;
	}

	function mountRef(initialValue) {
	  var hook = mountWorkInProgressHook();
	  var ref = {
	    current: initialValue
	  };

	  {
	    Object.seal(ref);
	  }

	  hook.memoizedState = ref;
	  return ref;
	}

	function updateRef(initialValue) {
	  var hook = updateWorkInProgressHook();
	  return hook.memoizedState;
	}

	function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
	  hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, undefined, nextDeps);
	}

	function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var destroy = undefined;

	  if (currentHook !== null) {
	    var prevEffect = currentHook.memoizedState;
	    destroy = prevEffect.destroy;

	    if (nextDeps !== null) {
	      var prevDeps = prevEffect.deps;

	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        pushEffect(hookEffectTag, create, destroy, nextDeps);
	        return;
	      }
	    }
	  }

	  currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
	  hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, destroy, nextDeps);
	}

	function mountEffect(create, deps) {
	  {
	    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
	    if ('undefined' !== typeof jest) {
	      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
	    }
	  }

	  return mountEffectImpl(Update | Passive, Passive$1, create, deps);
	}

	function updateEffect(create, deps) {
	  {
	    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
	    if ('undefined' !== typeof jest) {
	      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
	    }
	  }

	  return updateEffectImpl(Update | Passive, Passive$1, create, deps);
	}

	function mountLayoutEffect(create, deps) {
	  return mountEffectImpl(Update, Layout, create, deps);
	}

	function updateLayoutEffect(create, deps) {
	  return updateEffectImpl(Update, Layout, create, deps);
	}

	function imperativeHandleEffect(create, ref) {
	  if (typeof ref === 'function') {
	    var refCallback = ref;

	    var _inst = create();

	    refCallback(_inst);
	    return function () {
	      refCallback(null);
	    };
	  } else if (ref !== null && ref !== undefined) {
	    var refObject = ref;

	    {
	      if (!refObject.hasOwnProperty('current')) {
	        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
	      }
	    }

	    var _inst2 = create();

	    refObject.current = _inst2;
	    return function () {
	      refObject.current = null;
	    };
	  }
	}

	function mountImperativeHandle(ref, create, deps) {
	  {
	    if (typeof create !== 'function') {
	      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
	    }
	  } // TODO: If deps are provided, should we skip comparing the ref itself?


	  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
	  return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
	}

	function updateImperativeHandle(ref, create, deps) {
	  {
	    if (typeof create !== 'function') {
	      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
	    }
	  } // TODO: If deps are provided, should we skip comparing the ref itself?


	  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
	  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
	}

	function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
	  // The react-debug-hooks package injects its own implementation
	  // so that e.g. DevTools can display custom hook values.
	}

	var updateDebugValue = mountDebugValue;

	function mountCallback(callback, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  hook.memoizedState = [callback, nextDeps];
	  return callback;
	}

	function updateCallback(callback, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var prevState = hook.memoizedState;

	  if (prevState !== null) {
	    if (nextDeps !== null) {
	      var prevDeps = prevState[1];

	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        return prevState[0];
	      }
	    }
	  }

	  hook.memoizedState = [callback, nextDeps];
	  return callback;
	}

	function mountMemo(nextCreate, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var nextValue = nextCreate();
	  hook.memoizedState = [nextValue, nextDeps];
	  return nextValue;
	}

	function updateMemo(nextCreate, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var prevState = hook.memoizedState;

	  if (prevState !== null) {
	    // Assume these are defined. If they're not, areHookInputsEqual will warn.
	    if (nextDeps !== null) {
	      var prevDeps = prevState[1];

	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        return prevState[0];
	      }
	    }
	  }

	  var nextValue = nextCreate();
	  hook.memoizedState = [nextValue, nextDeps];
	  return nextValue;
	}

	function mountDeferredValue(value, config) {
	  var _mountState = mountState(value),
	      prevValue = _mountState[0],
	      setValue = _mountState[1];

	  mountEffect(function () {
	    var previousConfig = ReactCurrentBatchConfig$1.suspense;
	    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

	    try {
	      setValue(value);
	    } finally {
	      ReactCurrentBatchConfig$1.suspense = previousConfig;
	    }
	  }, [value, config]);
	  return prevValue;
	}

	function updateDeferredValue(value, config) {
	  var _updateState = updateState(),
	      prevValue = _updateState[0],
	      setValue = _updateState[1];

	  updateEffect(function () {
	    var previousConfig = ReactCurrentBatchConfig$1.suspense;
	    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

	    try {
	      setValue(value);
	    } finally {
	      ReactCurrentBatchConfig$1.suspense = previousConfig;
	    }
	  }, [value, config]);
	  return prevValue;
	}

	function rerenderDeferredValue(value, config) {
	  var _rerenderState = rerenderState(),
	      prevValue = _rerenderState[0],
	      setValue = _rerenderState[1];

	  updateEffect(function () {
	    var previousConfig = ReactCurrentBatchConfig$1.suspense;
	    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

	    try {
	      setValue(value);
	    } finally {
	      ReactCurrentBatchConfig$1.suspense = previousConfig;
	    }
	  }, [value, config]);
	  return prevValue;
	}

	function startTransition(setPending, config, callback) {
	  var priorityLevel = getCurrentPriorityLevel();
	  runWithPriority$1(priorityLevel < UserBlockingPriority$1 ? UserBlockingPriority$1 : priorityLevel, function () {
	    setPending(true);
	  });
	  runWithPriority$1(priorityLevel > NormalPriority ? NormalPriority : priorityLevel, function () {
	    var previousConfig = ReactCurrentBatchConfig$1.suspense;
	    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

	    try {
	      setPending(false);
	      callback();
	    } finally {
	      ReactCurrentBatchConfig$1.suspense = previousConfig;
	    }
	  });
	}

	function mountTransition(config) {
	  var _mountState2 = mountState(false),
	      isPending = _mountState2[0],
	      setPending = _mountState2[1];

	  var start = mountCallback(startTransition.bind(null, setPending, config), [setPending, config]);
	  return [start, isPending];
	}

	function updateTransition(config) {
	  var _updateState2 = updateState(),
	      isPending = _updateState2[0],
	      setPending = _updateState2[1];

	  var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]);
	  return [start, isPending];
	}

	function rerenderTransition(config) {
	  var _rerenderState2 = rerenderState(),
	      isPending = _rerenderState2[0],
	      setPending = _rerenderState2[1];

	  var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]);
	  return [start, isPending];
	}

	function dispatchAction(fiber, queue, action) {
	  {
	    if (typeof arguments[3] === 'function') {
	      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
	    }
	  }

	  var currentTime = requestCurrentTimeForUpdate();
	  var suspenseConfig = requestCurrentSuspenseConfig();
	  var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
	  var update = {
	    expirationTime: expirationTime,
	    suspenseConfig: suspenseConfig,
	    action: action,
	    eagerReducer: null,
	    eagerState: null,
	    next: null
	  };

	  {
	    update.priority = getCurrentPriorityLevel();
	  } // Append the update to the end of the list.


	  var pending = queue.pending;

	  if (pending === null) {
	    // This is the first update. Create a circular list.
	    update.next = update;
	  } else {
	    update.next = pending.next;
	    pending.next = update;
	  }

	  queue.pending = update;
	  var alternate = fiber.alternate;

	  if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
	    // This is a render phase update. Stash it in a lazily-created map of
	    // queue -> linked list of updates. After this render pass, we'll restart
	    // and apply the stashed updates on top of the work-in-progress hook.
	    didScheduleRenderPhaseUpdate = true;
	    update.expirationTime = renderExpirationTime;
	    currentlyRenderingFiber$1.expirationTime = renderExpirationTime;
	  } else {
	    if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
	      // The queue is currently empty, which means we can eagerly compute the
	      // next state before entering the render phase. If the new state is the
	      // same as the current state, we may be able to bail out entirely.
	      var lastRenderedReducer = queue.lastRenderedReducer;

	      if (lastRenderedReducer !== null) {
	        var prevDispatcher;

	        {
	          prevDispatcher = ReactCurrentDispatcher.current;
	          ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
	        }

	        try {
	          var currentState = queue.lastRenderedState;
	          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
	          // it, on the update object. If the reducer hasn't changed by the
	          // time we enter the render phase, then the eager state can be used
	          // without calling the reducer again.

	          update.eagerReducer = lastRenderedReducer;
	          update.eagerState = eagerState;

	          if (objectIs(eagerState, currentState)) {
	            // Fast path. We can bail out without scheduling React to re-render.
	            // It's still possible that we'll need to rebase this update later,
	            // if the component re-renders for a different reason and by that
	            // time the reducer has changed.
	            return;
	          }
	        } catch (error) {// Suppress the error. It will throw again in the render phase.
	        } finally {
	          {
	            ReactCurrentDispatcher.current = prevDispatcher;
	          }
	        }
	      }
	    }

	    {
	      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
	      if ('undefined' !== typeof jest) {
	        warnIfNotScopedWithMatchingAct(fiber);
	        warnIfNotCurrentlyActingUpdatesInDev(fiber);
	      }
	    }

	    scheduleWork(fiber, expirationTime);
	  }
	}

	var ContextOnlyDispatcher = {
	  readContext: readContext,
	  useCallback: throwInvalidHookError,
	  useContext: throwInvalidHookError,
	  useEffect: throwInvalidHookError,
	  useImperativeHandle: throwInvalidHookError,
	  useLayoutEffect: throwInvalidHookError,
	  useMemo: throwInvalidHookError,
	  useReducer: throwInvalidHookError,
	  useRef: throwInvalidHookError,
	  useState: throwInvalidHookError,
	  useDebugValue: throwInvalidHookError,
	  useResponder: throwInvalidHookError,
	  useDeferredValue: throwInvalidHookError,
	  useTransition: throwInvalidHookError
	};
	var HooksDispatcherOnMountInDEV = null;
	var HooksDispatcherOnMountWithHookTypesInDEV = null;
	var HooksDispatcherOnUpdateInDEV = null;
	var HooksDispatcherOnRerenderInDEV = null;
	var InvalidNestedHooksDispatcherOnMountInDEV = null;
	var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
	var InvalidNestedHooksDispatcherOnRerenderInDEV = null;

	{
	  var warnInvalidContextAccess = function () {
	    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
	  };

	  var warnInvalidHookAccess = function () {
	    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://fb.me/rules-of-hooks');
	  };

	  HooksDispatcherOnMountInDEV = {
	    readContext: function (context, observedBits) {
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      mountHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      mountHookTypesDev();
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      mountHookTypesDev();
	      return mountDebugValue();
	    },
	    useResponder: function (responder, props) {
	      currentHookNameInDev = 'useResponder';
	      mountHookTypesDev();
	      return createDeprecatedResponderListener(responder, props);
	    },
	    useDeferredValue: function (value, config) {
	      currentHookNameInDev = 'useDeferredValue';
	      mountHookTypesDev();
	      return mountDeferredValue(value, config);
	    },
	    useTransition: function (config) {
	      currentHookNameInDev = 'useTransition';
	      mountHookTypesDev();
	      return mountTransition(config);
	    }
	  };
	  HooksDispatcherOnMountWithHookTypesInDEV = {
	    readContext: function (context, observedBits) {
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      updateHookTypesDev();
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      updateHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      updateHookTypesDev();
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      updateHookTypesDev();
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      updateHookTypesDev();
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      updateHookTypesDev();
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      updateHookTypesDev();
	      return mountDebugValue();
	    },
	    useResponder: function (responder, props) {
	      currentHookNameInDev = 'useResponder';
	      updateHookTypesDev();
	      return createDeprecatedResponderListener(responder, props);
	    },
	    useDeferredValue: function (value, config) {
	      currentHookNameInDev = 'useDeferredValue';
	      updateHookTypesDev();
	      return mountDeferredValue(value, config);
	    },
	    useTransition: function (config) {
	      currentHookNameInDev = 'useTransition';
	      updateHookTypesDev();
	      return mountTransition(config);
	    }
	  };
	  HooksDispatcherOnUpdateInDEV = {
	    readContext: function (context, observedBits) {
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      updateHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateState(initialState);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useResponder: function (responder, props) {
	      currentHookNameInDev = 'useResponder';
	      updateHookTypesDev();
	      return createDeprecatedResponderListener(responder, props);
	    },
	    useDeferredValue: function (value, config) {
	      currentHookNameInDev = 'useDeferredValue';
	      updateHookTypesDev();
	      return updateDeferredValue(value, config);
	    },
	    useTransition: function (config) {
	      currentHookNameInDev = 'useTransition';
	      updateHookTypesDev();
	      return updateTransition(config);
	    }
	  };
	  HooksDispatcherOnRerenderInDEV = {
	    readContext: function (context, observedBits) {
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      updateHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

	      try {
	        return rerenderReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

	      try {
	        return rerenderState(initialState);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useResponder: function (responder, props) {
	      currentHookNameInDev = 'useResponder';
	      updateHookTypesDev();
	      return createDeprecatedResponderListener(responder, props);
	    },
	    useDeferredValue: function (value, config) {
	      currentHookNameInDev = 'useDeferredValue';
	      updateHookTypesDev();
	      return rerenderDeferredValue(value, config);
	    },
	    useTransition: function (config) {
	      currentHookNameInDev = 'useTransition';
	      updateHookTypesDev();
	      return rerenderTransition(config);
	    }
	  };
	  InvalidNestedHooksDispatcherOnMountInDEV = {
	    readContext: function (context, observedBits) {
	      warnInvalidContextAccess();
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountDebugValue();
	    },
	    useResponder: function (responder, props) {
	      currentHookNameInDev = 'useResponder';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return createDeprecatedResponderListener(responder, props);
	    },
	    useDeferredValue: function (value, config) {
	      currentHookNameInDev = 'useDeferredValue';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountDeferredValue(value, config);
	    },
	    useTransition: function (config) {
	      currentHookNameInDev = 'useTransition';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountTransition(config);
	    }
	  };
	  InvalidNestedHooksDispatcherOnUpdateInDEV = {
	    readContext: function (context, observedBits) {
	      warnInvalidContextAccess();
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateState(initialState);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useResponder: function (responder, props) {
	      currentHookNameInDev = 'useResponder';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return createDeprecatedResponderListener(responder, props);
	    },
	    useDeferredValue: function (value, config) {
	      currentHookNameInDev = 'useDeferredValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateDeferredValue(value, config);
	    },
	    useTransition: function (config) {
	      currentHookNameInDev = 'useTransition';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateTransition(config);
	    }
	  };
	  InvalidNestedHooksDispatcherOnRerenderInDEV = {
	    readContext: function (context, observedBits) {
	      warnInvalidContextAccess();
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return rerenderReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return rerenderState(initialState);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useResponder: function (responder, props) {
	      currentHookNameInDev = 'useResponder';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return createDeprecatedResponderListener(responder, props);
	    },
	    useDeferredValue: function (value, config) {
	      currentHookNameInDev = 'useDeferredValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return rerenderDeferredValue(value, config);
	    },
	    useTransition: function (config) {
	      currentHookNameInDev = 'useTransition';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return rerenderTransition(config);
	    }
	  };
	}

	var now$1 = Scheduler.unstable_now;
	var commitTime = 0;
	var profilerStartTime = -1;

	function getCommitTime() {
	  return commitTime;
	}

	function recordCommitTime() {

	  commitTime = now$1();
	}

	function startProfilerTimer(fiber) {

	  profilerStartTime = now$1();

	  if (fiber.actualStartTime < 0) {
	    fiber.actualStartTime = now$1();
	  }
	}

	function stopProfilerTimerIfRunning(fiber) {

	  profilerStartTime = -1;
	}

	function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {

	  if (profilerStartTime >= 0) {
	    var elapsedTime = now$1() - profilerStartTime;
	    fiber.actualDuration += elapsedTime;

	    if (overrideBaseTime) {
	      fiber.selfBaseDuration = elapsedTime;
	    }

	    profilerStartTime = -1;
	  }
	}

	// This may have been an insertion or a hydration.

	var hydrationParentFiber = null;
	var nextHydratableInstance = null;
	var isHydrating = false;

	function enterHydrationState(fiber) {

	  var parentInstance = fiber.stateNode.containerInfo;
	  nextHydratableInstance = getFirstHydratableChild(parentInstance);
	  hydrationParentFiber = fiber;
	  isHydrating = true;
	  return true;
	}

	function deleteHydratableInstance(returnFiber, instance) {
	  {
	    switch (returnFiber.tag) {
	      case HostRoot:
	        didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
	        break;

	      case HostComponent:
	        didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
	        break;
	    }
	  }

	  var childToDelete = createFiberFromHostInstanceForDeletion();
	  childToDelete.stateNode = instance;
	  childToDelete.return = returnFiber;
	  childToDelete.effectTag = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
	  // these children are not part of the reconciliation list of children.
	  // Even if we abort and rereconcile the children, that will try to hydrate
	  // again and the nodes are still in the host tree so these will be
	  // recreated.

	  if (returnFiber.lastEffect !== null) {
	    returnFiber.lastEffect.nextEffect = childToDelete;
	    returnFiber.lastEffect = childToDelete;
	  } else {
	    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
	  }
	}

	function insertNonHydratedInstance(returnFiber, fiber) {
	  fiber.effectTag = fiber.effectTag & ~Hydrating | Placement;

	  {
	    switch (returnFiber.tag) {
	      case HostRoot:
	        {
	          var parentContainer = returnFiber.stateNode.containerInfo;

	          switch (fiber.tag) {
	            case HostComponent:
	              var type = fiber.type;
	              var props = fiber.pendingProps;
	              didNotFindHydratableContainerInstance(parentContainer, type);
	              break;

	            case HostText:
	              var text = fiber.pendingProps;
	              didNotFindHydratableContainerTextInstance(parentContainer, text);
	              break;
	          }

	          break;
	        }

	      case HostComponent:
	        {
	          var parentType = returnFiber.type;
	          var parentProps = returnFiber.memoizedProps;
	          var parentInstance = returnFiber.stateNode;

	          switch (fiber.tag) {
	            case HostComponent:
	              var _type = fiber.type;
	              var _props = fiber.pendingProps;
	              didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
	              break;

	            case HostText:
	              var _text = fiber.pendingProps;
	              didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
	              break;

	            case SuspenseComponent:
	              didNotFindHydratableSuspenseInstance(parentType, parentProps);
	              break;
	          }

	          break;
	        }

	      default:
	        return;
	    }
	  }
	}

	function tryHydrate(fiber, nextInstance) {
	  switch (fiber.tag) {
	    case HostComponent:
	      {
	        var type = fiber.type;
	        var props = fiber.pendingProps;
	        var instance = canHydrateInstance(nextInstance, type);

	        if (instance !== null) {
	          fiber.stateNode = instance;
	          return true;
	        }

	        return false;
	      }

	    case HostText:
	      {
	        var text = fiber.pendingProps;
	        var textInstance = canHydrateTextInstance(nextInstance, text);

	        if (textInstance !== null) {
	          fiber.stateNode = textInstance;
	          return true;
	        }

	        return false;
	      }

	    case SuspenseComponent:
	      {

	        return false;
	      }

	    default:
	      return false;
	  }
	}

	function tryToClaimNextHydratableInstance(fiber) {
	  if (!isHydrating) {
	    return;
	  }

	  var nextInstance = nextHydratableInstance;

	  if (!nextInstance) {
	    // Nothing to hydrate. Make it an insertion.
	    insertNonHydratedInstance(hydrationParentFiber, fiber);
	    isHydrating = false;
	    hydrationParentFiber = fiber;
	    return;
	  }

	  var firstAttemptedInstance = nextInstance;

	  if (!tryHydrate(fiber, nextInstance)) {
	    // If we can't hydrate this instance let's try the next one.
	    // We use this as a heuristic. It's based on intuition and not data so it
	    // might be flawed or unnecessary.
	    nextInstance = getNextHydratableSibling(firstAttemptedInstance);

	    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
	      // Nothing to hydrate. Make it an insertion.
	      insertNonHydratedInstance(hydrationParentFiber, fiber);
	      isHydrating = false;
	      hydrationParentFiber = fiber;
	      return;
	    } // We matched the next one, we'll now assume that the first one was
	    // superfluous and we'll delete it. Since we can't eagerly delete it
	    // we'll have to schedule a deletion. To do that, this node needs a dummy
	    // fiber associated with it.


	    deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
	  }

	  hydrationParentFiber = fiber;
	  nextHydratableInstance = getFirstHydratableChild(nextInstance);
	}

	function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {

	  var instance = fiber.stateNode;
	  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.

	  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
	  // is a new ref we mark this as an update.

	  if (updatePayload !== null) {
	    return true;
	  }

	  return false;
	}

	function prepareToHydrateHostTextInstance(fiber) {

	  var textInstance = fiber.stateNode;
	  var textContent = fiber.memoizedProps;
	  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);

	  {
	    if (shouldUpdate) {
	      // We assume that prepareToHydrateHostTextInstance is called in a context where the
	      // hydration parent is the parent host component of this host text.
	      var returnFiber = hydrationParentFiber;

	      if (returnFiber !== null) {
	        switch (returnFiber.tag) {
	          case HostRoot:
	            {
	              var parentContainer = returnFiber.stateNode.containerInfo;
	              didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
	              break;
	            }

	          case HostComponent:
	            {
	              var parentType = returnFiber.type;
	              var parentProps = returnFiber.memoizedProps;
	              var parentInstance = returnFiber.stateNode;
	              didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
	              break;
	            }
	        }
	      }
	    }
	  }

	  return shouldUpdate;
	}

	function skipPastDehydratedSuspenseInstance(fiber) {

	  var suspenseState = fiber.memoizedState;
	  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

	  if (!suspenseInstance) {
	    {
	      throw Error( "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }

	  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
	}

	function popToNextHostParent(fiber) {
	  var parent = fiber.return;

	  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
	    parent = parent.return;
	  }

	  hydrationParentFiber = parent;
	}

	function popHydrationState(fiber) {

	  if (fiber !== hydrationParentFiber) {
	    // We're deeper than the current hydration context, inside an inserted
	    // tree.
	    return false;
	  }

	  if (!isHydrating) {
	    // If we're not currently hydrating but we're in a hydration context, then
	    // we were an insertion and now need to pop up reenter hydration of our
	    // siblings.
	    popToNextHostParent(fiber);
	    isHydrating = true;
	    return false;
	  }

	  var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
	  // We only do this deeper than head and body since they tend to have random
	  // other nodes in them. We also ignore components with pure text content in
	  // side of them.
	  // TODO: Better heuristic.

	  if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
	    var nextInstance = nextHydratableInstance;

	    while (nextInstance) {
	      deleteHydratableInstance(fiber, nextInstance);
	      nextInstance = getNextHydratableSibling(nextInstance);
	    }
	  }

	  popToNextHostParent(fiber);

	  if (fiber.tag === SuspenseComponent) {
	    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
	  } else {
	    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
	  }

	  return true;
	}

	function resetHydrationState() {

	  hydrationParentFiber = null;
	  nextHydratableInstance = null;
	  isHydrating = false;
	}

	var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
	var didReceiveUpdate = false;
	var didWarnAboutBadClass;
	var didWarnAboutModulePatternComponent;
	var didWarnAboutContextTypeOnFunctionComponent;
	var didWarnAboutGetDerivedStateOnFunctionComponent;
	var didWarnAboutFunctionRefs;
	var didWarnAboutReassigningProps;
	var didWarnAboutRevealOrder;
	var didWarnAboutTailOptions;

	{
	  didWarnAboutBadClass = {};
	  didWarnAboutModulePatternComponent = {};
	  didWarnAboutContextTypeOnFunctionComponent = {};
	  didWarnAboutGetDerivedStateOnFunctionComponent = {};
	  didWarnAboutFunctionRefs = {};
	  didWarnAboutReassigningProps = false;
	  didWarnAboutRevealOrder = {};
	  didWarnAboutTailOptions = {};
	}

	function reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime) {
	  if (current === null) {
	    // If this is a fresh new component that hasn't been rendered yet, we
	    // won't update its child set by applying minimal side-effects. Instead,
	    // we will add them all to the child before it gets rendered. That means
	    // we can optimize this reconciliation pass by not tracking side-effects.
	    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	  } else {
	    // If the current child is the same as the work in progress, it means that
	    // we haven't yet started any work on these children. Therefore, we use
	    // the clone algorithm to create a copy of all the current children.
	    // If we had any progressed work already, that is invalid at this point so
	    // let's throw it out.
	    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
	  }
	}

	function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderExpirationTime) {
	  // This function is fork of reconcileChildren. It's used in cases where we
	  // want to reconcile without matching against the existing set. This has the
	  // effect of all current children being unmounted; even if the type and key
	  // are the same, the old child is unmounted and a new child is created.
	  //
	  // To do this, we're going to go through the reconcile algorithm twice. In
	  // the first pass, we schedule a deletion for all the current children by
	  // passing null.
	  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderExpirationTime); // In the second pass, we mount the new children. The trick here is that we
	  // pass null in place of where we usually pass the current child set. This has
	  // the effect of remounting all children regardless of whether their
	  // identities match.

	  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	}

	function updateForwardRef(current, workInProgress, Component, nextProps, renderExpirationTime) {
	  // TODO: current can be non-null here even if the component
	  // hasn't yet mounted. This happens after the first render suspends.
	  // We'll need to figure out if this is fine or can cause issues.
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;

	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentName(Component), getCurrentFiberStackInDev);
	      }
	    }
	  }

	  var render = Component.render;
	  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

	  var nextChildren;
	  prepareToReadContext(workInProgress, renderExpirationTime);

	  {
	    ReactCurrentOwner$1.current = workInProgress;
	    setIsRendering(true);
	    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderExpirationTime);

	    if ( workInProgress.mode & StrictMode) {
	      // Only double-render components with Hooks
	      if (workInProgress.memoizedState !== null) {
	        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderExpirationTime);
	      }
	    }

	    setIsRendering(false);
	  }

	  if (current !== null && !didReceiveUpdate) {
	    bailoutHooks(current, workInProgress, renderExpirationTime);
	    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
	  } // React DevTools reads this flag.


	  workInProgress.effectTag |= PerformedWork;
	  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateMemoComponent(current, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
	  if (current === null) {
	    var type = Component.type;

	    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
	    Component.defaultProps === undefined) {
	      var resolvedType = type;

	      {
	        resolvedType = resolveFunctionForHotReloading(type);
	      } // If this is a plain function component without default props,
	      // and with only the default shallow comparison, we upgrade it
	      // to a SimpleMemoComponent to allow fast path updates.


	      workInProgress.tag = SimpleMemoComponent;
	      workInProgress.type = resolvedType;

	      {
	        validateFunctionComponentInDev(workInProgress, type);
	      }

	      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateExpirationTime, renderExpirationTime);
	    }

	    {
	      var innerPropTypes = type.propTypes;

	      if (innerPropTypes) {
	        // Inner memo component props aren't currently validated in createElement.
	        // We could move it there, but we'd still need this for lazy code path.
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentName(type), getCurrentFiberStackInDev);
	      }
	    }

	    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
	    child.ref = workInProgress.ref;
	    child.return = workInProgress;
	    workInProgress.child = child;
	    return child;
	  }

	  {
	    var _type = Component.type;
	    var _innerPropTypes = _type.propTypes;

	    if (_innerPropTypes) {
	      // Inner memo component props aren't currently validated in createElement.
	      // We could move it there, but we'd still need this for lazy code path.
	      checkPropTypes(_innerPropTypes, nextProps, // Resolved props
	      'prop', getComponentName(_type), getCurrentFiberStackInDev);
	    }
	  }

	  var currentChild = current.child; // This is always exactly one child

	  if (updateExpirationTime < renderExpirationTime) {
	    // This will be the props with resolved defaultProps,
	    // unlike current.memoizedProps which will be the unresolved ones.
	    var prevProps = currentChild.memoizedProps; // Default to shallow comparison

	    var compare = Component.compare;
	    compare = compare !== null ? compare : shallowEqual;

	    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
	      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
	    }
	  } // React DevTools reads this flag.


	  workInProgress.effectTag |= PerformedWork;
	  var newChild = createWorkInProgress(currentChild, nextProps);
	  newChild.ref = workInProgress.ref;
	  newChild.return = workInProgress;
	  workInProgress.child = newChild;
	  return newChild;
	}

	function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
	  // TODO: current can be non-null here even if the component
	  // hasn't yet mounted. This happens when the inner render suspends.
	  // We'll need to figure out if this is fine or can cause issues.
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var outerMemoType = workInProgress.elementType;

	      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
	        // We warn when you define propTypes on lazy()
	        // so let's just skip over it to find memo() outer wrapper.
	        // Inner props for memo are validated later.
	        outerMemoType = refineResolvedLazyComponent(outerMemoType);
	      }

	      var outerPropTypes = outerMemoType && outerMemoType.propTypes;

	      if (outerPropTypes) {
	        checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
	        'prop', getComponentName(outerMemoType), getCurrentFiberStackInDev);
	      } // Inner propTypes will be validated in the function component path.

	    }
	  }

	  if (current !== null) {
	    var prevProps = current.memoizedProps;

	    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.
	     workInProgress.type === current.type )) {
	      didReceiveUpdate = false;

	      if (updateExpirationTime < renderExpirationTime) {
	        // The pending update priority was cleared at the beginning of
	        // beginWork. We're about to bail out, but there might be additional
	        // updates at a lower priority. Usually, the priority level of the
	        // remaining updates is accumlated during the evaluation of the
	        // component (i.e. when processing the update queue). But since since
	        // we're bailing out early *without* evaluating the component, we need
	        // to account for it here, too. Reset to the value of the current fiber.
	        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
	        // because a MemoComponent fiber does not have hooks or an update queue;
	        // rather, it wraps around an inner component, which may or may not
	        // contains hooks.
	        // TODO: Move the reset at in beginWork out of the common path so that
	        // this is no longer necessary.
	        workInProgress.expirationTime = current.expirationTime;
	        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
	      }
	    }
	  }

	  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderExpirationTime);
	}

	function updateFragment(current, workInProgress, renderExpirationTime) {
	  var nextChildren = workInProgress.pendingProps;
	  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateMode(current, workInProgress, renderExpirationTime) {
	  var nextChildren = workInProgress.pendingProps.children;
	  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateProfiler(current, workInProgress, renderExpirationTime) {
	  {
	    workInProgress.effectTag |= Update;
	  }

	  var nextProps = workInProgress.pendingProps;
	  var nextChildren = nextProps.children;
	  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function markRef(current, workInProgress) {
	  var ref = workInProgress.ref;

	  if (current === null && ref !== null || current !== null && current.ref !== ref) {
	    // Schedule a Ref effect
	    workInProgress.effectTag |= Ref;
	  }
	}

	function updateFunctionComponent(current, workInProgress, Component, nextProps, renderExpirationTime) {
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;

	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentName(Component), getCurrentFiberStackInDev);
	      }
	    }
	  }

	  var context;

	  {
	    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
	    context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  var nextChildren;
	  prepareToReadContext(workInProgress, renderExpirationTime);

	  {
	    ReactCurrentOwner$1.current = workInProgress;
	    setIsRendering(true);
	    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderExpirationTime);

	    if ( workInProgress.mode & StrictMode) {
	      // Only double-render components with Hooks
	      if (workInProgress.memoizedState !== null) {
	        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderExpirationTime);
	      }
	    }

	    setIsRendering(false);
	  }

	  if (current !== null && !didReceiveUpdate) {
	    bailoutHooks(current, workInProgress, renderExpirationTime);
	    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
	  } // React DevTools reads this flag.


	  workInProgress.effectTag |= PerformedWork;
	  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateClassComponent(current, workInProgress, Component, nextProps, renderExpirationTime) {
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;

	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentName(Component), getCurrentFiberStackInDev);
	      }
	    }
	  } // Push context providers early to prevent context stack mismatches.
	  // During mounting we don't know the child context yet as the instance doesn't exist.
	  // We will invalidate the child context in finishClassComponent() right after rendering.


	  var hasContext;

	  if (isContextProvider(Component)) {
	    hasContext = true;
	    pushContextProvider(workInProgress);
	  } else {
	    hasContext = false;
	  }

	  prepareToReadContext(workInProgress, renderExpirationTime);
	  var instance = workInProgress.stateNode;
	  var shouldUpdate;

	  if (instance === null) {
	    if (current !== null) {
	      // A class component without an instance only mounts if it suspended
	      // inside a non-concurrent tree, in an inconsistent state. We want to
	      // treat it like a new mount, even though an empty version of it already
	      // committed. Disconnect the alternate pointers.
	      current.alternate = null;
	      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

	      workInProgress.effectTag |= Placement;
	    } // In the initial pass we might need to construct the instance.


	    constructClassInstance(workInProgress, Component, nextProps);
	    mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
	    shouldUpdate = true;
	  } else if (current === null) {
	    // In a resume, we'll already have an instance we can reuse.
	    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
	  } else {
	    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderExpirationTime);
	  }

	  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);

	  {
	    var inst = workInProgress.stateNode;

	    if (inst.props !== nextProps) {
	      if (!didWarnAboutReassigningProps) {
	        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component');
	      }

	      didWarnAboutReassigningProps = true;
	    }
	  }

	  return nextUnitOfWork;
	}

	function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
	  // Refs should update even if shouldComponentUpdate returns false
	  markRef(current, workInProgress);
	  var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;

	  if (!shouldUpdate && !didCaptureError) {
	    // Context providers should defer to sCU for rendering
	    if (hasContext) {
	      invalidateContextProvider(workInProgress, Component, false);
	    }

	    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
	  }

	  var instance = workInProgress.stateNode; // Rerender

	  ReactCurrentOwner$1.current = workInProgress;
	  var nextChildren;

	  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
	    // If we captured an error, but getDerivedStateFromError is not defined,
	    // unmount all the children. componentDidCatch will schedule an update to
	    // re-render a fallback. This is temporary until we migrate everyone to
	    // the new API.
	    // TODO: Warn in a future release.
	    nextChildren = null;

	    {
	      stopProfilerTimerIfRunning();
	    }
	  } else {
	    {
	      setIsRendering(true);
	      nextChildren = instance.render();

	      if ( workInProgress.mode & StrictMode) {
	        instance.render();
	      }

	      setIsRendering(false);
	    }
	  } // React DevTools reads this flag.


	  workInProgress.effectTag |= PerformedWork;

	  if (current !== null && didCaptureError) {
	    // If we're recovering from an error, reconcile without reusing any of
	    // the existing children. Conceptually, the normal children and the children
	    // that are shown on error are two different sets, so we shouldn't reuse
	    // normal children even if their identities match.
	    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderExpirationTime);
	  } else {
	    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
	  } // Memoize state using the values we just used to render.
	  // TODO: Restructure so we never read values from the instance.


	  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

	  if (hasContext) {
	    invalidateContextProvider(workInProgress, Component, true);
	  }

	  return workInProgress.child;
	}

	function pushHostRootContext(workInProgress) {
	  var root = workInProgress.stateNode;

	  if (root.pendingContext) {
	    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
	  } else if (root.context) {
	    // Should always be set
	    pushTopLevelContextObject(workInProgress, root.context, false);
	  }

	  pushHostContainer(workInProgress, root.containerInfo);
	}

	function updateHostRoot(current, workInProgress, renderExpirationTime) {
	  pushHostRootContext(workInProgress);
	  var updateQueue = workInProgress.updateQueue;

	  if (!(current !== null && updateQueue !== null)) {
	    {
	      throw Error( "If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }

	  var nextProps = workInProgress.pendingProps;
	  var prevState = workInProgress.memoizedState;
	  var prevChildren = prevState !== null ? prevState.element : null;
	  cloneUpdateQueue(current, workInProgress);
	  processUpdateQueue(workInProgress, nextProps, null, renderExpirationTime);
	  var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
	  // being called "element".

	  var nextChildren = nextState.element;

	  if (nextChildren === prevChildren) {
	    // If the state is the same as before, that's a bailout because we had
	    // no work that expires at this time.
	    resetHydrationState();
	    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
	  }

	  var root = workInProgress.stateNode;

	  if (root.hydrate && enterHydrationState(workInProgress)) {
	    // If we don't have any current children this might be the first pass.
	    // We always try to hydrate. If this isn't a hydration pass there won't
	    // be any children to hydrate which is effectively the same thing as
	    // not hydrating.
	    var child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	    workInProgress.child = child;
	    var node = child;

	    while (node) {
	      // Mark each child as hydrating. This is a fast path to know whether this
	      // tree is part of a hydrating tree. This is used to determine if a child
	      // node has fully mounted yet, and for scheduling event replaying.
	      // Conceptually this is similar to Placement in that a new subtree is
	      // inserted into the React tree here. It just happens to not need DOM
	      // mutations because it already exists.
	      node.effectTag = node.effectTag & ~Placement | Hydrating;
	      node = node.sibling;
	    }
	  } else {
	    // Otherwise reset hydration state in case we aborted and resumed another
	    // root.
	    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
	    resetHydrationState();
	  }

	  return workInProgress.child;
	}

	function updateHostComponent(current, workInProgress, renderExpirationTime) {
	  pushHostContext(workInProgress);

	  if (current === null) {
	    tryToClaimNextHydratableInstance(workInProgress);
	  }

	  var type = workInProgress.type;
	  var nextProps = workInProgress.pendingProps;
	  var prevProps = current !== null ? current.memoizedProps : null;
	  var nextChildren = nextProps.children;
	  var isDirectTextChild = shouldSetTextContent(type, nextProps);

	  if (isDirectTextChild) {
	    // We special case a direct text child of a host node. This is a common
	    // case. We won't handle it as a reified child. We will instead handle
	    // this in the host environment that also has access to this prop. That
	    // avoids allocating another HostText fiber and traversing it.
	    nextChildren = null;
	  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
	    // If we're switching from a direct text child to a normal child, or to
	    // empty, we need to schedule the text content to be reset.
	    workInProgress.effectTag |= ContentReset;
	  }

	  markRef(current, workInProgress); // Check the host config to see if the children are offscreen/hidden.

	  if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(type, nextProps)) {
	    {
	      markSpawnedWork(Never);
	    } // Schedule this fiber to re-render at offscreen priority. Then bailout.


	    workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
	    return null;
	  }

	  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateHostText(current, workInProgress) {
	  if (current === null) {
	    tryToClaimNextHydratableInstance(workInProgress);
	  } // Nothing to do here. This is terminal. We'll do the completion step
	  // immediately after.


	  return null;
	}

	function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime) {
	  if (_current !== null) {
	    // A lazy component only mounts if it suspended inside a non-
	    // concurrent tree, in an inconsistent state. We want to treat it like
	    // a new mount, even though an empty version of it already committed.
	    // Disconnect the alternate pointers.
	    _current.alternate = null;
	    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

	    workInProgress.effectTag |= Placement;
	  }

	  var props = workInProgress.pendingProps; // We can't start a User Timing measurement with correct label yet.
	  // Cancel and resume right after we know the tag.

	  cancelWorkTimer(workInProgress);
	  var Component = readLazyComponentType(elementType); // Store the unwrapped component in the type.

	  workInProgress.type = Component;
	  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
	  startWorkTimer(workInProgress);
	  var resolvedProps = resolveDefaultProps(Component, props);
	  var child;

	  switch (resolvedTag) {
	    case FunctionComponent:
	      {
	        {
	          validateFunctionComponentInDev(workInProgress, Component);
	          workInProgress.type = Component = resolveFunctionForHotReloading(Component);
	        }

	        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
	        return child;
	      }

	    case ClassComponent:
	      {
	        {
	          workInProgress.type = Component = resolveClassForHotReloading(Component);
	        }

	        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
	        return child;
	      }

	    case ForwardRef:
	      {
	        {
	          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
	        }

	        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime);
	        return child;
	      }

	    case MemoComponent:
	      {
	        {
	          if (workInProgress.type !== workInProgress.elementType) {
	            var outerPropTypes = Component.propTypes;

	            if (outerPropTypes) {
	              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
	              'prop', getComponentName(Component), getCurrentFiberStackInDev);
	            }
	          }
	        }

	        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
	        updateExpirationTime, renderExpirationTime);
	        return child;
	      }
	  }

	  var hint = '';

	  {
	    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
	      hint = ' Did you wrap a component in React.lazy() more than once?';
	    }
	  } // This message intentionally doesn't mention ForwardRef or MemoComponent
	  // because the fact that it's a separate type of work is an
	  // implementation detail.


	  {
	    {
	      throw Error( "Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint );
	    }
	  }
	}

	function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime) {
	  if (_current !== null) {
	    // An incomplete component only mounts if it suspended inside a non-
	    // concurrent tree, in an inconsistent state. We want to treat it like
	    // a new mount, even though an empty version of it already committed.
	    // Disconnect the alternate pointers.
	    _current.alternate = null;
	    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

	    workInProgress.effectTag |= Placement;
	  } // Promote the fiber to a class and try rendering again.


	  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
	  // Push context providers early to prevent context stack mismatches.
	  // During mounting we don't know the child context yet as the instance doesn't exist.
	  // We will invalidate the child context in finishClassComponent() right after rendering.

	  var hasContext;

	  if (isContextProvider(Component)) {
	    hasContext = true;
	    pushContextProvider(workInProgress);
	  } else {
	    hasContext = false;
	  }

	  prepareToReadContext(workInProgress, renderExpirationTime);
	  constructClassInstance(workInProgress, Component, nextProps);
	  mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
	  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
	}

	function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime) {
	  if (_current !== null) {
	    // An indeterminate component only mounts if it suspended inside a non-
	    // concurrent tree, in an inconsistent state. We want to treat it like
	    // a new mount, even though an empty version of it already committed.
	    // Disconnect the alternate pointers.
	    _current.alternate = null;
	    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

	    workInProgress.effectTag |= Placement;
	  }

	  var props = workInProgress.pendingProps;
	  var context;

	  {
	    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
	    context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  prepareToReadContext(workInProgress, renderExpirationTime);
	  var value;

	  {
	    if (Component.prototype && typeof Component.prototype.render === 'function') {
	      var componentName = getComponentName(Component) || 'Unknown';

	      if (!didWarnAboutBadClass[componentName]) {
	        error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);

	        didWarnAboutBadClass[componentName] = true;
	      }
	    }

	    if (workInProgress.mode & StrictMode) {
	      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
	    }

	    setIsRendering(true);
	    ReactCurrentOwner$1.current = workInProgress;
	    value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
	    setIsRendering(false);
	  } // React DevTools reads this flag.


	  workInProgress.effectTag |= PerformedWork;

	  if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
	    {
	      var _componentName = getComponentName(Component) || 'Unknown';

	      if (!didWarnAboutModulePatternComponent[_componentName]) {
	        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);

	        didWarnAboutModulePatternComponent[_componentName] = true;
	      }
	    } // Proceed under the assumption that this is a class instance


	    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

	    workInProgress.memoizedState = null;
	    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
	    // During mounting we don't know the child context yet as the instance doesn't exist.
	    // We will invalidate the child context in finishClassComponent() right after rendering.

	    var hasContext = false;

	    if (isContextProvider(Component)) {
	      hasContext = true;
	      pushContextProvider(workInProgress);
	    } else {
	      hasContext = false;
	    }

	    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
	    initializeUpdateQueue(workInProgress);
	    var getDerivedStateFromProps = Component.getDerivedStateFromProps;

	    if (typeof getDerivedStateFromProps === 'function') {
	      applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
	    }

	    adoptClassInstance(workInProgress, value);
	    mountClassInstance(workInProgress, Component, props, renderExpirationTime);
	    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
	  } else {
	    // Proceed under the assumption that this is a function component
	    workInProgress.tag = FunctionComponent;

	    {

	      if ( workInProgress.mode & StrictMode) {
	        // Only double-render components with Hooks
	        if (workInProgress.memoizedState !== null) {
	          value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
	        }
	      }
	    }

	    reconcileChildren(null, workInProgress, value, renderExpirationTime);

	    {
	      validateFunctionComponentInDev(workInProgress, Component);
	    }

	    return workInProgress.child;
	  }
	}

	function validateFunctionComponentInDev(workInProgress, Component) {
	  {
	    if (Component) {
	      if (Component.childContextTypes) {
	        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
	      }
	    }

	    if (workInProgress.ref !== null) {
	      var info = '';
	      var ownerName = getCurrentFiberOwnerNameInDevOrNull();

	      if (ownerName) {
	        info += '\n\nCheck the render method of `' + ownerName + '`.';
	      }

	      var warningKey = ownerName || workInProgress._debugID || '';
	      var debugSource = workInProgress._debugSource;

	      if (debugSource) {
	        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
	      }

	      if (!didWarnAboutFunctionRefs[warningKey]) {
	        didWarnAboutFunctionRefs[warningKey] = true;

	        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
	      }
	    }

	    if (typeof Component.getDerivedStateFromProps === 'function') {
	      var _componentName2 = getComponentName(Component) || 'Unknown';

	      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
	        error('%s: Function components do not support getDerivedStateFromProps.', _componentName2);

	        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
	      }
	    }

	    if (typeof Component.contextType === 'object' && Component.contextType !== null) {
	      var _componentName3 = getComponentName(Component) || 'Unknown';

	      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
	        error('%s: Function components do not support contextType.', _componentName3);

	        didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
	      }
	    }
	  }
	}

	var SUSPENDED_MARKER = {
	  dehydrated: null,
	  retryTime: NoWork
	};

	function shouldRemainOnFallback(suspenseContext, current, workInProgress) {
	  // If the context is telling us that we should show a fallback, and we're not
	  // already showing content, then we should show the fallback instead.
	  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback) && (current === null || current.memoizedState !== null);
	}

	function updateSuspenseComponent(current, workInProgress, renderExpirationTime) {
	  var mode = workInProgress.mode;
	  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

	  {
	    if (shouldSuspend(workInProgress)) {
	      workInProgress.effectTag |= DidCapture;
	    }
	  }

	  var suspenseContext = suspenseStackCursor.current;
	  var nextDidTimeout = false;
	  var didSuspend = (workInProgress.effectTag & DidCapture) !== NoEffect;

	  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
	    // Something in this boundary's subtree already suspended. Switch to
	    // rendering the fallback children.
	    nextDidTimeout = true;
	    workInProgress.effectTag &= ~DidCapture;
	  } else {
	    // Attempting the main content
	    if (current === null || current.memoizedState !== null) {
	      // This is a new mount or this boundary is already showing a fallback state.
	      // Mark this subtree context as having at least one invisible parent that could
	      // handle the fallback state.
	      // Boundaries without fallbacks or should be avoided are not considered since
	      // they cannot handle preferred fallback states.
	      if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
	        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
	      }
	    }
	  }

	  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
	  pushSuspenseContext(workInProgress, suspenseContext); // This next part is a bit confusing. If the children timeout, we switch to
	  // showing the fallback children in place of the "primary" children.
	  // However, we don't want to delete the primary children because then their
	  // state will be lost (both the React state and the host state, e.g.
	  // uncontrolled form inputs). Instead we keep them mounted and hide them.
	  // Both the fallback children AND the primary children are rendered at the
	  // same time. Once the primary children are un-suspended, we can delete
	  // the fallback children — don't need to preserve their state.
	  //
	  // The two sets of children are siblings in the host environment, but
	  // semantically, for purposes of reconciliation, they are two separate sets.
	  // So we store them using two fragment fibers.
	  //
	  // However, we want to avoid allocating extra fibers for every placeholder.
	  // They're only necessary when the children time out, because that's the
	  // only time when both sets are mounted.
	  //
	  // So, the extra fragment fibers are only used if the children time out.
	  // Otherwise, we render the primary children directly. This requires some
	  // custom reconciliation logic to preserve the state of the primary
	  // children. It's essentially a very basic form of re-parenting.

	  if (current === null) {
	    // If we're currently hydrating, try to hydrate this boundary.
	    // But only if this has a fallback.
	    if (nextProps.fallback !== undefined) {
	      tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
	    } // This is the initial mount. This branch is pretty simple because there's
	    // no previous state that needs to be preserved.


	    if (nextDidTimeout) {
	      // Mount separate fragments for primary and fallback children.
	      var nextFallbackChildren = nextProps.fallback;
	      var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
	      primaryChildFragment.return = workInProgress;

	      if ((workInProgress.mode & BlockingMode) === NoMode) {
	        // Outside of blocking mode, we commit the effects from the
	        // partially completed, timed-out tree, too.
	        var progressedState = workInProgress.memoizedState;
	        var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
	        primaryChildFragment.child = progressedPrimaryChild;
	        var progressedChild = progressedPrimaryChild;

	        while (progressedChild !== null) {
	          progressedChild.return = primaryChildFragment;
	          progressedChild = progressedChild.sibling;
	        }
	      }

	      var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime, null);
	      fallbackChildFragment.return = workInProgress;
	      primaryChildFragment.sibling = fallbackChildFragment; // Skip the primary children, and continue working on the
	      // fallback children.

	      workInProgress.memoizedState = SUSPENDED_MARKER;
	      workInProgress.child = primaryChildFragment;
	      return fallbackChildFragment;
	    } else {
	      // Mount the primary children without an intermediate fragment fiber.
	      var nextPrimaryChildren = nextProps.children;
	      workInProgress.memoizedState = null;
	      return workInProgress.child = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime);
	    }
	  } else {
	    // This is an update. This branch is more complicated because we need to
	    // ensure the state of the primary children is preserved.
	    var prevState = current.memoizedState;

	    if (prevState !== null) {
	      // wrapped in a fragment fiber.


	      var currentPrimaryChildFragment = current.child;
	      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;

	      if (nextDidTimeout) {
	        // Still timed out. Reuse the current primary children by cloning
	        // its fragment. We're going to skip over these entirely.
	        var _nextFallbackChildren2 = nextProps.fallback;

	        var _primaryChildFragment2 = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps);

	        _primaryChildFragment2.return = workInProgress;

	        if ((workInProgress.mode & BlockingMode) === NoMode) {
	          // Outside of blocking mode, we commit the effects from the
	          // partially completed, timed-out tree, too.
	          var _progressedState = workInProgress.memoizedState;

	          var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;

	          if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
	            _primaryChildFragment2.child = _progressedPrimaryChild;
	            var _progressedChild2 = _progressedPrimaryChild;

	            while (_progressedChild2 !== null) {
	              _progressedChild2.return = _primaryChildFragment2;
	              _progressedChild2 = _progressedChild2.sibling;
	            }
	          }
	        } // Because primaryChildFragment is a new fiber that we're inserting as the
	        // parent of a new tree, we need to set its treeBaseDuration.


	        if ( workInProgress.mode & ProfileMode) {
	          // treeBaseDuration is the sum of all the child tree base durations.
	          var _treeBaseDuration = 0;
	          var _hiddenChild = _primaryChildFragment2.child;

	          while (_hiddenChild !== null) {
	            _treeBaseDuration += _hiddenChild.treeBaseDuration;
	            _hiddenChild = _hiddenChild.sibling;
	          }

	          _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
	        } // Clone the fallback child fragment, too. These we'll continue
	        // working on.


	        var _fallbackChildFragment2 = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren2);

	        _fallbackChildFragment2.return = workInProgress;
	        _primaryChildFragment2.sibling = _fallbackChildFragment2;
	        _primaryChildFragment2.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
	        // fallback children.

	        workInProgress.memoizedState = SUSPENDED_MARKER;
	        workInProgress.child = _primaryChildFragment2;
	        return _fallbackChildFragment2;
	      } else {
	        // No longer suspended. Switch back to showing the primary children,
	        // and remove the intermediate fragment fiber.
	        var _nextPrimaryChildren = nextProps.children;
	        var currentPrimaryChild = currentPrimaryChildFragment.child;
	        var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime); // If this render doesn't suspend, we need to delete the fallback
	        // children. Wait until the complete phase, after we've confirmed the
	        // fallback is no longer needed.
	        // TODO: Would it be better to store the fallback fragment on
	        // the stateNode?
	        // Continue rendering the children, like we normally do.

	        workInProgress.memoizedState = null;
	        return workInProgress.child = primaryChild;
	      }
	    } else {
	      // The current tree has not already timed out. That means the primary
	      // children are not wrapped in a fragment fiber.
	      var _currentPrimaryChild = current.child;

	      if (nextDidTimeout) {
	        // Timed out. Wrap the children in a fragment fiber to keep them
	        // separate from the fallback children.
	        var _nextFallbackChildren3 = nextProps.fallback;

	        var _primaryChildFragment3 = createFiberFromFragment( // It shouldn't matter what the pending props are because we aren't
	        // going to render this fragment.
	        null, mode, NoWork, null);

	        _primaryChildFragment3.return = workInProgress;
	        _primaryChildFragment3.child = _currentPrimaryChild;

	        if (_currentPrimaryChild !== null) {
	          _currentPrimaryChild.return = _primaryChildFragment3;
	        } // Even though we're creating a new fiber, there are no new children,
	        // because we're reusing an already mounted tree. So we don't need to
	        // schedule a placement.
	        // primaryChildFragment.effectTag |= Placement;


	        if ((workInProgress.mode & BlockingMode) === NoMode) {
	          // Outside of blocking mode, we commit the effects from the
	          // partially completed, timed-out tree, too.
	          var _progressedState2 = workInProgress.memoizedState;

	          var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;

	          _primaryChildFragment3.child = _progressedPrimaryChild2;
	          var _progressedChild3 = _progressedPrimaryChild2;

	          while (_progressedChild3 !== null) {
	            _progressedChild3.return = _primaryChildFragment3;
	            _progressedChild3 = _progressedChild3.sibling;
	          }
	        } // Because primaryChildFragment is a new fiber that we're inserting as the
	        // parent of a new tree, we need to set its treeBaseDuration.


	        if ( workInProgress.mode & ProfileMode) {
	          // treeBaseDuration is the sum of all the child tree base durations.
	          var _treeBaseDuration2 = 0;
	          var _hiddenChild2 = _primaryChildFragment3.child;

	          while (_hiddenChild2 !== null) {
	            _treeBaseDuration2 += _hiddenChild2.treeBaseDuration;
	            _hiddenChild2 = _hiddenChild2.sibling;
	          }

	          _primaryChildFragment3.treeBaseDuration = _treeBaseDuration2;
	        } // Create a fragment from the fallback children, too.


	        var _fallbackChildFragment3 = createFiberFromFragment(_nextFallbackChildren3, mode, renderExpirationTime, null);

	        _fallbackChildFragment3.return = workInProgress;
	        _primaryChildFragment3.sibling = _fallbackChildFragment3;
	        _fallbackChildFragment3.effectTag |= Placement;
	        _primaryChildFragment3.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
	        // fallback children.

	        workInProgress.memoizedState = SUSPENDED_MARKER;
	        workInProgress.child = _primaryChildFragment3;
	        return _fallbackChildFragment3;
	      } else {
	        // Still haven't timed out. Continue rendering the children, like we
	        // normally do.
	        workInProgress.memoizedState = null;
	        var _nextPrimaryChildren2 = nextProps.children;
	        return workInProgress.child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime);
	      }
	    }
	  }
	}

	function scheduleWorkOnFiber(fiber, renderExpirationTime) {
	  if (fiber.expirationTime < renderExpirationTime) {
	    fiber.expirationTime = renderExpirationTime;
	  }

	  var alternate = fiber.alternate;

	  if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
	    alternate.expirationTime = renderExpirationTime;
	  }

	  scheduleWorkOnParentPath(fiber.return, renderExpirationTime);
	}

	function propagateSuspenseContextChange(workInProgress, firstChild, renderExpirationTime) {
	  // Mark any Suspense boundaries with fallbacks as having work to do.
	  // If they were previously forced into fallbacks, they may now be able
	  // to unblock.
	  var node = firstChild;

	  while (node !== null) {
	    if (node.tag === SuspenseComponent) {
	      var state = node.memoizedState;

	      if (state !== null) {
	        scheduleWorkOnFiber(node, renderExpirationTime);
	      }
	    } else if (node.tag === SuspenseListComponent) {
	      // If the tail is hidden there might not be an Suspense boundaries
	      // to schedule work on. In this case we have to schedule it on the
	      // list itself.
	      // We don't have to traverse to the children of the list since
	      // the list will propagate the change when it rerenders.
	      scheduleWorkOnFiber(node, renderExpirationTime);
	    } else if (node.child !== null) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === workInProgress) {
	      return;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === workInProgress) {
	        return;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function findLastContentRow(firstChild) {
	  // This is going to find the last row among these children that is already
	  // showing content on the screen, as opposed to being in fallback state or
	  // new. If a row has multiple Suspense boundaries, any of them being in the
	  // fallback state, counts as the whole row being in a fallback state.
	  // Note that the "rows" will be workInProgress, but any nested children
	  // will still be current since we haven't rendered them yet. The mounted
	  // order may not be the same as the new order. We use the new order.
	  var row = firstChild;
	  var lastContentRow = null;

	  while (row !== null) {
	    var currentRow = row.alternate; // New rows can't be content rows.

	    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
	      lastContentRow = row;
	    }

	    row = row.sibling;
	  }

	  return lastContentRow;
	}

	function validateRevealOrder(revealOrder) {
	  {
	    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
	      didWarnAboutRevealOrder[revealOrder] = true;

	      if (typeof revealOrder === 'string') {
	        switch (revealOrder.toLowerCase()) {
	          case 'together':
	          case 'forwards':
	          case 'backwards':
	            {
	              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());

	              break;
	            }

	          case 'forward':
	          case 'backward':
	            {
	              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());

	              break;
	            }

	          default:
	            error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);

	            break;
	        }
	      } else {
	        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
	      }
	    }
	  }
	}

	function validateTailOptions(tailMode, revealOrder) {
	  {
	    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
	      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
	        didWarnAboutTailOptions[tailMode] = true;

	        error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
	      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
	        didWarnAboutTailOptions[tailMode] = true;

	        error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
	      }
	    }
	  }
	}

	function validateSuspenseListNestedChild(childSlot, index) {
	  {
	    var isArray = Array.isArray(childSlot);
	    var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';

	    if (isArray || isIterable) {
	      var type = isArray ? 'array' : 'iterable';

	      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);

	      return false;
	    }
	  }

	  return true;
	}

	function validateSuspenseListChildren(children, revealOrder) {
	  {
	    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
	      if (Array.isArray(children)) {
	        for (var i = 0; i < children.length; i++) {
	          if (!validateSuspenseListNestedChild(children[i], i)) {
	            return;
	          }
	        }
	      } else {
	        var iteratorFn = getIteratorFn(children);

	        if (typeof iteratorFn === 'function') {
	          var childrenIterator = iteratorFn.call(children);

	          if (childrenIterator) {
	            var step = childrenIterator.next();
	            var _i = 0;

	            for (; !step.done; step = childrenIterator.next()) {
	              if (!validateSuspenseListNestedChild(step.value, _i)) {
	                return;
	              }

	              _i++;
	            }
	          }
	        } else {
	          error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
	        }
	      }
	    }
	  }
	}

	function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
	  var renderState = workInProgress.memoizedState;

	  if (renderState === null) {
	    workInProgress.memoizedState = {
	      isBackwards: isBackwards,
	      rendering: null,
	      renderingStartTime: 0,
	      last: lastContentRow,
	      tail: tail,
	      tailExpiration: 0,
	      tailMode: tailMode,
	      lastEffect: lastEffectBeforeRendering
	    };
	  } else {
	    // We can reuse the existing object from previous renders.
	    renderState.isBackwards = isBackwards;
	    renderState.rendering = null;
	    renderState.renderingStartTime = 0;
	    renderState.last = lastContentRow;
	    renderState.tail = tail;
	    renderState.tailExpiration = 0;
	    renderState.tailMode = tailMode;
	    renderState.lastEffect = lastEffectBeforeRendering;
	  }
	} // This can end up rendering this component multiple passes.
	// The first pass splits the children fibers into two sets. A head and tail.
	// We first render the head. If anything is in fallback state, we do another
	// pass through beginWork to rerender all children (including the tail) with
	// the force suspend context. If the first render didn't have anything in
	// in fallback state. Then we render each row in the tail one-by-one.
	// That happens in the completeWork phase without going back to beginWork.


	function updateSuspenseListComponent(current, workInProgress, renderExpirationTime) {
	  var nextProps = workInProgress.pendingProps;
	  var revealOrder = nextProps.revealOrder;
	  var tailMode = nextProps.tail;
	  var newChildren = nextProps.children;
	  validateRevealOrder(revealOrder);
	  validateTailOptions(tailMode, revealOrder);
	  validateSuspenseListChildren(newChildren, revealOrder);
	  reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
	  var suspenseContext = suspenseStackCursor.current;
	  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

	  if (shouldForceFallback) {
	    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
	    workInProgress.effectTag |= DidCapture;
	  } else {
	    var didSuspendBefore = current !== null && (current.effectTag & DidCapture) !== NoEffect;

	    if (didSuspendBefore) {
	      // If we previously forced a fallback, we need to schedule work
	      // on any nested boundaries to let them know to try to render
	      // again. This is the same as context updating.
	      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderExpirationTime);
	    }

	    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
	  }

	  pushSuspenseContext(workInProgress, suspenseContext);

	  if ((workInProgress.mode & BlockingMode) === NoMode) {
	    // Outside of blocking mode, SuspenseList doesn't work so we just
	    // use make it a noop by treating it as the default revealOrder.
	    workInProgress.memoizedState = null;
	  } else {
	    switch (revealOrder) {
	      case 'forwards':
	        {
	          var lastContentRow = findLastContentRow(workInProgress.child);
	          var tail;

	          if (lastContentRow === null) {
	            // The whole list is part of the tail.
	            // TODO: We could fast path by just rendering the tail now.
	            tail = workInProgress.child;
	            workInProgress.child = null;
	          } else {
	            // Disconnect the tail rows after the content row.
	            // We're going to render them separately later.
	            tail = lastContentRow.sibling;
	            lastContentRow.sibling = null;
	          }

	          initSuspenseListRenderState(workInProgress, false, // isBackwards
	          tail, lastContentRow, tailMode, workInProgress.lastEffect);
	          break;
	        }

	      case 'backwards':
	        {
	          // We're going to find the first row that has existing content.
	          // At the same time we're going to reverse the list of everything
	          // we pass in the meantime. That's going to be our tail in reverse
	          // order.
	          var _tail = null;
	          var row = workInProgress.child;
	          workInProgress.child = null;

	          while (row !== null) {
	            var currentRow = row.alternate; // New rows can't be content rows.

	            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
	              // This is the beginning of the main content.
	              workInProgress.child = row;
	              break;
	            }

	            var nextRow = row.sibling;
	            row.sibling = _tail;
	            _tail = row;
	            row = nextRow;
	          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.


	          initSuspenseListRenderState(workInProgress, true, // isBackwards
	          _tail, null, // last
	          tailMode, workInProgress.lastEffect);
	          break;
	        }

	      case 'together':
	        {
	          initSuspenseListRenderState(workInProgress, false, // isBackwards
	          null, // tail
	          null, // last
	          undefined, workInProgress.lastEffect);
	          break;
	        }

	      default:
	        {
	          // The default reveal order is the same as not having
	          // a boundary.
	          workInProgress.memoizedState = null;
	        }
	    }
	  }

	  return workInProgress.child;
	}

	function updatePortalComponent(current, workInProgress, renderExpirationTime) {
	  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
	  var nextChildren = workInProgress.pendingProps;

	  if (current === null) {
	    // Portals are special because we don't append the children during mount
	    // but at commit. Therefore we need to track insertions which the normal
	    // flow doesn't do during mount. This doesn't happen at the root because
	    // the root always starts with a "current" with a null child.
	    // TODO: Consider unifying this with how the root works.
	    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	  } else {
	    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
	  }

	  return workInProgress.child;
	}

	function updateContextProvider(current, workInProgress, renderExpirationTime) {
	  var providerType = workInProgress.type;
	  var context = providerType._context;
	  var newProps = workInProgress.pendingProps;
	  var oldProps = workInProgress.memoizedProps;
	  var newValue = newProps.value;

	  {
	    var providerPropTypes = workInProgress.type.propTypes;

	    if (providerPropTypes) {
	      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
	    }
	  }

	  pushProvider(workInProgress, newValue);

	  if (oldProps !== null) {
	    var oldValue = oldProps.value;
	    var changedBits = calculateChangedBits(context, newValue, oldValue);

	    if (changedBits === 0) {
	      // No change. Bailout early if children are the same.
	      if (oldProps.children === newProps.children && !hasContextChanged()) {
	        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
	      }
	    } else {
	      // The context value changed. Search for matching consumers and schedule
	      // them to update.
	      propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
	    }
	  }

	  var newChildren = newProps.children;
	  reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	var hasWarnedAboutUsingContextAsConsumer = false;

	function updateContextConsumer(current, workInProgress, renderExpirationTime) {
	  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
	  // DEV mode, we create a separate object for Context.Consumer that acts
	  // like a proxy to Context. This proxy object adds unnecessary code in PROD
	  // so we use the old behaviour (Context.Consumer references Context) to
	  // reduce size and overhead. The separate object references context via
	  // a property called "_context", which also gives us the ability to check
	  // in DEV mode if this property exists or not and warn if it does not.

	  {
	    if (context._context === undefined) {
	      // This may be because it's a Context (rather than a Consumer).
	      // Or it may be because it's older React where they're the same thing.
	      // We only want to warn if we're sure it's a new React.
	      if (context !== context.Consumer) {
	        if (!hasWarnedAboutUsingContextAsConsumer) {
	          hasWarnedAboutUsingContextAsConsumer = true;

	          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
	        }
	      }
	    } else {
	      context = context._context;
	    }
	  }

	  var newProps = workInProgress.pendingProps;
	  var render = newProps.children;

	  {
	    if (typeof render !== 'function') {
	      error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
	    }
	  }

	  prepareToReadContext(workInProgress, renderExpirationTime);
	  var newValue = readContext(context, newProps.unstable_observedBits);
	  var newChildren;

	  {
	    ReactCurrentOwner$1.current = workInProgress;
	    setIsRendering(true);
	    newChildren = render(newValue);
	    setIsRendering(false);
	  } // React DevTools reads this flag.


	  workInProgress.effectTag |= PerformedWork;
	  reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function markWorkInProgressReceivedUpdate() {
	  didReceiveUpdate = true;
	}

	function bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime) {
	  cancelWorkTimer(workInProgress);

	  if (current !== null) {
	    // Reuse previous dependencies
	    workInProgress.dependencies = current.dependencies;
	  }

	  {
	    // Don't update "base" render times for bailouts.
	    stopProfilerTimerIfRunning();
	  }

	  var updateExpirationTime = workInProgress.expirationTime;

	  if (updateExpirationTime !== NoWork) {
	    markUnprocessedUpdateTime(updateExpirationTime);
	  } // Check if the children have any pending work.


	  var childExpirationTime = workInProgress.childExpirationTime;

	  if (childExpirationTime < renderExpirationTime) {
	    // The children don't have any work either. We can skip them.
	    // TODO: Once we add back resuming, we should check if the children are
	    // a work-in-progress set. If so, we need to transfer their effects.
	    return null;
	  } else {
	    // This fiber doesn't have work, but its subtree does. Clone the child
	    // fibers and continue.
	    cloneChildFibers(current, workInProgress);
	    return workInProgress.child;
	  }
	}

	function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
	  {
	    var returnFiber = oldWorkInProgress.return;

	    if (returnFiber === null) {
	      throw new Error('Cannot swap the root fiber.');
	    } // Disconnect from the old current.
	    // It will get deleted.


	    current.alternate = null;
	    oldWorkInProgress.alternate = null; // Connect to the new tree.

	    newWorkInProgress.index = oldWorkInProgress.index;
	    newWorkInProgress.sibling = oldWorkInProgress.sibling;
	    newWorkInProgress.return = oldWorkInProgress.return;
	    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

	    if (oldWorkInProgress === returnFiber.child) {
	      returnFiber.child = newWorkInProgress;
	    } else {
	      var prevSibling = returnFiber.child;

	      if (prevSibling === null) {
	        throw new Error('Expected parent to have a child.');
	      }

	      while (prevSibling.sibling !== oldWorkInProgress) {
	        prevSibling = prevSibling.sibling;

	        if (prevSibling === null) {
	          throw new Error('Expected to find the previous sibling.');
	        }
	      }

	      prevSibling.sibling = newWorkInProgress;
	    } // Delete the old fiber and place the new one.
	    // Since the old fiber is disconnected, we have to schedule it manually.


	    var last = returnFiber.lastEffect;

	    if (last !== null) {
	      last.nextEffect = current;
	      returnFiber.lastEffect = current;
	    } else {
	      returnFiber.firstEffect = returnFiber.lastEffect = current;
	    }

	    current.nextEffect = null;
	    current.effectTag = Deletion;
	    newWorkInProgress.effectTag |= Placement; // Restart work from the new fiber.

	    return newWorkInProgress;
	  }
	}

	function beginWork(current, workInProgress, renderExpirationTime) {
	  var updateExpirationTime = workInProgress.expirationTime;

	  {
	    if (workInProgress._debugNeedsRemount && current !== null) {
	      // This will restart the begin phase with a new fiber.
	      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.expirationTime));
	    }
	  }

	  if (current !== null) {
	    var oldProps = current.memoizedProps;
	    var newProps = workInProgress.pendingProps;

	    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:
	     workInProgress.type !== current.type )) {
	      // If props or context changed, mark the fiber as having performed work.
	      // This may be unset if the props are determined to be equal later (memo).
	      didReceiveUpdate = true;
	    } else if (updateExpirationTime < renderExpirationTime) {
	      didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
	      // the begin phase. There's still some bookkeeping we that needs to be done
	      // in this optimized path, mostly pushing stuff onto the stack.

	      switch (workInProgress.tag) {
	        case HostRoot:
	          pushHostRootContext(workInProgress);
	          resetHydrationState();
	          break;

	        case HostComponent:
	          pushHostContext(workInProgress);

	          if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(workInProgress.type, newProps)) {
	            {
	              markSpawnedWork(Never);
	            } // Schedule this fiber to re-render at offscreen priority. Then bailout.


	            workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
	            return null;
	          }

	          break;

	        case ClassComponent:
	          {
	            var Component = workInProgress.type;

	            if (isContextProvider(Component)) {
	              pushContextProvider(workInProgress);
	            }

	            break;
	          }

	        case HostPortal:
	          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
	          break;

	        case ContextProvider:
	          {
	            var newValue = workInProgress.memoizedProps.value;
	            pushProvider(workInProgress, newValue);
	            break;
	          }

	        case Profiler:
	          {
	            // Profiler should only call onRender when one of its descendants actually rendered.
	            var hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;

	            if (hasChildWork) {
	              workInProgress.effectTag |= Update;
	            }
	          }

	          break;

	        case SuspenseComponent:
	          {
	            var state = workInProgress.memoizedState;

	            if (state !== null) {
	              // whether to retry the primary children, or to skip over it and
	              // go straight to the fallback. Check the priority of the primary
	              // child fragment.


	              var primaryChildFragment = workInProgress.child;
	              var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;

	              if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime) {
	                // The primary children have pending work. Use the normal path
	                // to attempt to render the primary children again.
	                return updateSuspenseComponent(current, workInProgress, renderExpirationTime);
	              } else {
	                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
	                // priority. Bailout.

	                var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);

	                if (child !== null) {
	                  // The fallback children have pending work. Skip over the
	                  // primary children and work on the fallback.
	                  return child.sibling;
	                } else {
	                  return null;
	                }
	              }
	            } else {
	              pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
	            }

	            break;
	          }

	        case SuspenseListComponent:
	          {
	            var didSuspendBefore = (current.effectTag & DidCapture) !== NoEffect;

	            var _hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;

	            if (didSuspendBefore) {
	              if (_hasChildWork) {
	                // If something was in fallback state last time, and we have all the
	                // same children then we're still in progressive loading state.
	                // Something might get unblocked by state updates or retries in the
	                // tree which will affect the tail. So we need to use the normal
	                // path to compute the correct tail.
	                return updateSuspenseListComponent(current, workInProgress, renderExpirationTime);
	              } // If none of the children had any work, that means that none of
	              // them got retried so they'll still be blocked in the same way
	              // as before. We can fast bail out.


	              workInProgress.effectTag |= DidCapture;
	            } // If nothing suspended before and we're rendering the same children,
	            // then the tail doesn't matter. Anything new that suspends will work
	            // in the "together" mode, so we can continue from the state we had.


	            var renderState = workInProgress.memoizedState;

	            if (renderState !== null) {
	              // Reset to the "together" mode in case we've started a different
	              // update in the past but didn't complete it.
	              renderState.rendering = null;
	              renderState.tail = null;
	            }

	            pushSuspenseContext(workInProgress, suspenseStackCursor.current);

	            if (_hasChildWork) {
	              break;
	            } else {
	              // If none of the children had any work, that means that none of
	              // them got retried so they'll still be blocked in the same way
	              // as before. We can fast bail out.
	              return null;
	            }
	          }
	      }

	      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
	    } else {
	      // An update was scheduled on this fiber, but there are no new props
	      // nor legacy context. Set this to false. If an update queue or context
	      // consumer produces a changed value, it will set this to true. Otherwise,
	      // the component will assume the children have not changed and bail out.
	      didReceiveUpdate = false;
	    }
	  } else {
	    didReceiveUpdate = false;
	  } // Before entering the begin phase, clear pending update priority.
	  // TODO: This assumes that we're about to evaluate the component and process
	  // the update queue. However, there's an exception: SimpleMemoComponent
	  // sometimes bails out later in the begin phase. This indicates that we should
	  // move this assignment out of the common path and into each branch.


	  workInProgress.expirationTime = NoWork;

	  switch (workInProgress.tag) {
	    case IndeterminateComponent:
	      {
	        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderExpirationTime);
	      }

	    case LazyComponent:
	      {
	        var elementType = workInProgress.elementType;
	        return mountLazyComponent(current, workInProgress, elementType, updateExpirationTime, renderExpirationTime);
	      }

	    case FunctionComponent:
	      {
	        var _Component = workInProgress.type;
	        var unresolvedProps = workInProgress.pendingProps;
	        var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
	        return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderExpirationTime);
	      }

	    case ClassComponent:
	      {
	        var _Component2 = workInProgress.type;
	        var _unresolvedProps = workInProgress.pendingProps;

	        var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

	        return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderExpirationTime);
	      }

	    case HostRoot:
	      return updateHostRoot(current, workInProgress, renderExpirationTime);

	    case HostComponent:
	      return updateHostComponent(current, workInProgress, renderExpirationTime);

	    case HostText:
	      return updateHostText(current, workInProgress);

	    case SuspenseComponent:
	      return updateSuspenseComponent(current, workInProgress, renderExpirationTime);

	    case HostPortal:
	      return updatePortalComponent(current, workInProgress, renderExpirationTime);

	    case ForwardRef:
	      {
	        var type = workInProgress.type;
	        var _unresolvedProps2 = workInProgress.pendingProps;

	        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

	        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderExpirationTime);
	      }

	    case Fragment:
	      return updateFragment(current, workInProgress, renderExpirationTime);

	    case Mode:
	      return updateMode(current, workInProgress, renderExpirationTime);

	    case Profiler:
	      return updateProfiler(current, workInProgress, renderExpirationTime);

	    case ContextProvider:
	      return updateContextProvider(current, workInProgress, renderExpirationTime);

	    case ContextConsumer:
	      return updateContextConsumer(current, workInProgress, renderExpirationTime);

	    case MemoComponent:
	      {
	        var _type2 = workInProgress.type;
	        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

	        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

	        {
	          if (workInProgress.type !== workInProgress.elementType) {
	            var outerPropTypes = _type2.propTypes;

	            if (outerPropTypes) {
	              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
	              'prop', getComponentName(_type2), getCurrentFiberStackInDev);
	            }
	          }
	        }

	        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
	        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime);
	      }

	    case SimpleMemoComponent:
	      {
	        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);
	      }

	    case IncompleteClassComponent:
	      {
	        var _Component3 = workInProgress.type;
	        var _unresolvedProps4 = workInProgress.pendingProps;

	        var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

	        return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderExpirationTime);
	      }

	    case SuspenseListComponent:
	      {
	        return updateSuspenseListComponent(current, workInProgress, renderExpirationTime);
	      }
	  }

	  {
	    {
	      throw Error( "Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }
	}

	function markUpdate(workInProgress) {
	  // Tag the fiber with an update effect. This turns a Placement into
	  // a PlacementAndUpdate.
	  workInProgress.effectTag |= Update;
	}

	function markRef$1(workInProgress) {
	  workInProgress.effectTag |= Ref;
	}

	var appendAllChildren;
	var updateHostContainer;
	var updateHostComponent$1;
	var updateHostText$1;

	{
	  // Mutation mode
	  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
	    // We only have the top Fiber that was created but we need recurse down its
	    // children to find all the terminal nodes.
	    var node = workInProgress.child;

	    while (node !== null) {
	      if (node.tag === HostComponent || node.tag === HostText) {
	        appendInitialChild(parent, node.stateNode);
	      } else if (node.tag === HostPortal) ; else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }

	      if (node === workInProgress) {
	        return;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === workInProgress) {
	          return;
	        }

	        node = node.return;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  };

	  updateHostContainer = function (workInProgress) {// Noop
	  };

	  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
	    // If we have an alternate, that means this is an update and we need to
	    // schedule a side-effect to do the updates.
	    var oldProps = current.memoizedProps;

	    if (oldProps === newProps) {
	      // In mutation mode, this is sufficient for a bailout because
	      // we won't touch this node even if children changed.
	      return;
	    } // If we get updated because one of our children updated, we don't
	    // have newProps so we'll have to reuse them.
	    // TODO: Split the update API as separate for the props vs. children.
	    // Even better would be if children weren't special cased at all tho.


	    var instance = workInProgress.stateNode;
	    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
	    // component is hitting the resume path. Figure out why. Possibly
	    // related to `hidden`.

	    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

	    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
	    // is a new ref we mark this as an update. All the work is done in commitWork.

	    if (updatePayload) {
	      markUpdate(workInProgress);
	    }
	  };

	  updateHostText$1 = function (current, workInProgress, oldText, newText) {
	    // If the text differs, mark it as an update. All the work in done in commitWork.
	    if (oldText !== newText) {
	      markUpdate(workInProgress);
	    }
	  };
	}

	function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
	  switch (renderState.tailMode) {
	    case 'hidden':
	      {
	        // Any insertions at the end of the tail list after this point
	        // should be invisible. If there are already mounted boundaries
	        // anything before them are not considered for collapsing.
	        // Therefore we need to go through the whole tail to find if
	        // there are any.
	        var tailNode = renderState.tail;
	        var lastTailNode = null;

	        while (tailNode !== null) {
	          if (tailNode.alternate !== null) {
	            lastTailNode = tailNode;
	          }

	          tailNode = tailNode.sibling;
	        } // Next we're simply going to delete all insertions after the
	        // last rendered item.


	        if (lastTailNode === null) {
	          // All remaining items in the tail are insertions.
	          renderState.tail = null;
	        } else {
	          // Detach the insertion after the last node that was already
	          // inserted.
	          lastTailNode.sibling = null;
	        }

	        break;
	      }

	    case 'collapsed':
	      {
	        // Any insertions at the end of the tail list after this point
	        // should be invisible. If there are already mounted boundaries
	        // anything before them are not considered for collapsing.
	        // Therefore we need to go through the whole tail to find if
	        // there are any.
	        var _tailNode = renderState.tail;
	        var _lastTailNode = null;

	        while (_tailNode !== null) {
	          if (_tailNode.alternate !== null) {
	            _lastTailNode = _tailNode;
	          }

	          _tailNode = _tailNode.sibling;
	        } // Next we're simply going to delete all insertions after the
	        // last rendered item.


	        if (_lastTailNode === null) {
	          // All remaining items in the tail are insertions.
	          if (!hasRenderedATailFallback && renderState.tail !== null) {
	            // We suspended during the head. We want to show at least one
	            // row at the tail. So we'll keep on and cut off the rest.
	            renderState.tail.sibling = null;
	          } else {
	            renderState.tail = null;
	          }
	        } else {
	          // Detach the insertion after the last node that was already
	          // inserted.
	          _lastTailNode.sibling = null;
	        }

	        break;
	      }
	  }
	}

	function completeWork(current, workInProgress, renderExpirationTime) {
	  var newProps = workInProgress.pendingProps;

	  switch (workInProgress.tag) {
	    case IndeterminateComponent:
	    case LazyComponent:
	    case SimpleMemoComponent:
	    case FunctionComponent:
	    case ForwardRef:
	    case Fragment:
	    case Mode:
	    case Profiler:
	    case ContextConsumer:
	    case MemoComponent:
	      return null;

	    case ClassComponent:
	      {
	        var Component = workInProgress.type;

	        if (isContextProvider(Component)) {
	          popContext(workInProgress);
	        }

	        return null;
	      }

	    case HostRoot:
	      {
	        popHostContainer(workInProgress);
	        popTopLevelContextObject(workInProgress);
	        var fiberRoot = workInProgress.stateNode;

	        if (fiberRoot.pendingContext) {
	          fiberRoot.context = fiberRoot.pendingContext;
	          fiberRoot.pendingContext = null;
	        }

	        if (current === null || current.child === null) {
	          // If we hydrated, pop so that we can delete any remaining children
	          // that weren't hydrated.
	          var wasHydrated = popHydrationState(workInProgress);

	          if (wasHydrated) {
	            // If we hydrated, then we'll need to schedule an update for
	            // the commit side-effects on the root.
	            markUpdate(workInProgress);
	          }
	        }

	        updateHostContainer(workInProgress);
	        return null;
	      }

	    case HostComponent:
	      {
	        popHostContext(workInProgress);
	        var rootContainerInstance = getRootHostContainer();
	        var type = workInProgress.type;

	        if (current !== null && workInProgress.stateNode != null) {
	          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

	          if (current.ref !== workInProgress.ref) {
	            markRef$1(workInProgress);
	          }
	        } else {
	          if (!newProps) {
	            if (!(workInProgress.stateNode !== null)) {
	              {
	                throw Error( "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue." );
	              }
	            } // This can happen when we abort work.


	            return null;
	          }

	          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
	          // "stack" as the parent. Then append children as we go in beginWork
	          // or completeWork depending on whether we want to add them top->down or
	          // bottom->up. Top->down is faster in IE11.

	          var _wasHydrated = popHydrationState(workInProgress);

	          if (_wasHydrated) {
	            // TODO: Move this and createInstance step into the beginPhase
	            // to consolidate.
	            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
	              // If changes to the hydrated node need to be applied at the
	              // commit-phase we mark this as such.
	              markUpdate(workInProgress);
	            }
	          } else {
	            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
	            appendAllChildren(instance, workInProgress, false, false); // This needs to be set before we mount Flare event listeners

	            workInProgress.stateNode = instance;
	            // (eg DOM renderer supports auto-focus for certain elements).
	            // Make sure such renderers get scheduled for later work.


	            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
	              markUpdate(workInProgress);
	            }
	          }

	          if (workInProgress.ref !== null) {
	            // If there is a ref on a host node we need to schedule a callback
	            markRef$1(workInProgress);
	          }
	        }

	        return null;
	      }

	    case HostText:
	      {
	        var newText = newProps;

	        if (current && workInProgress.stateNode != null) {
	          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
	          // to schedule a side-effect to do the updates.

	          updateHostText$1(current, workInProgress, oldText, newText);
	        } else {
	          if (typeof newText !== 'string') {
	            if (!(workInProgress.stateNode !== null)) {
	              {
	                throw Error( "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue." );
	              }
	            } // This can happen when we abort work.

	          }

	          var _rootContainerInstance = getRootHostContainer();

	          var _currentHostContext = getHostContext();

	          var _wasHydrated2 = popHydrationState(workInProgress);

	          if (_wasHydrated2) {
	            if (prepareToHydrateHostTextInstance(workInProgress)) {
	              markUpdate(workInProgress);
	            }
	          } else {
	            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
	          }
	        }

	        return null;
	      }

	    case SuspenseComponent:
	      {
	        popSuspenseContext(workInProgress);
	        var nextState = workInProgress.memoizedState;

	        if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
	          // Something suspended. Re-render with the fallback children.
	          workInProgress.expirationTime = renderExpirationTime; // Do not reset the effect list.

	          return workInProgress;
	        }

	        var nextDidTimeout = nextState !== null;
	        var prevDidTimeout = false;

	        if (current === null) {
	          if (workInProgress.memoizedProps.fallback !== undefined) {
	            popHydrationState(workInProgress);
	          }
	        } else {
	          var prevState = current.memoizedState;
	          prevDidTimeout = prevState !== null;

	          if (!nextDidTimeout && prevState !== null) {
	            // We just switched from the fallback to the normal children.
	            // Delete the fallback.
	            // TODO: Would it be better to store the fallback fragment on
	            // the stateNode during the begin phase?
	            var currentFallbackChild = current.child.sibling;

	            if (currentFallbackChild !== null) {
	              // Deletions go at the beginning of the return fiber's effect list
	              var first = workInProgress.firstEffect;

	              if (first !== null) {
	                workInProgress.firstEffect = currentFallbackChild;
	                currentFallbackChild.nextEffect = first;
	              } else {
	                workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
	                currentFallbackChild.nextEffect = null;
	              }

	              currentFallbackChild.effectTag = Deletion;
	            }
	          }
	        }

	        if (nextDidTimeout && !prevDidTimeout) {
	          // If this subtreee is running in blocking mode we can suspend,
	          // otherwise we won't suspend.
	          // TODO: This will still suspend a synchronous tree if anything
	          // in the concurrent tree already suspended during this render.
	          // This is a known bug.
	          if ((workInProgress.mode & BlockingMode) !== NoMode) {
	            // TODO: Move this back to throwException because this is too late
	            // if this is a large tree which is common for initial loads. We
	            // don't know if we should restart a render or not until we get
	            // this marker, and this is too late.
	            // If this render already had a ping or lower pri updates,
	            // and this is the first time we know we're going to suspend we
	            // should be able to immediately restart from within throwException.
	            var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;

	            if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
	              // If this was in an invisible tree or a new render, then showing
	              // this boundary is ok.
	              renderDidSuspend();
	            } else {
	              // Otherwise, we're going to have to hide content so we should
	              // suspend for longer if possible.
	              renderDidSuspendDelayIfPossible();
	            }
	          }
	        }

	        {
	          // TODO: Only schedule updates if these values are non equal, i.e. it changed.
	          if (nextDidTimeout || prevDidTimeout) {
	            // If this boundary just timed out, schedule an effect to attach a
	            // retry listener to the promise. This flag is also used to hide the
	            // primary children. In mutation mode, we also need the flag to
	            // *unhide* children that were previously hidden, so check if this
	            // is currently timed out, too.
	            workInProgress.effectTag |= Update;
	          }
	        }

	        return null;
	      }

	    case HostPortal:
	      popHostContainer(workInProgress);
	      updateHostContainer(workInProgress);
	      return null;

	    case ContextProvider:
	      // Pop provider fiber
	      popProvider(workInProgress);
	      return null;

	    case IncompleteClassComponent:
	      {
	        // Same as class component case. I put it down here so that the tags are
	        // sequential to ensure this switch is compiled to a jump table.
	        var _Component = workInProgress.type;

	        if (isContextProvider(_Component)) {
	          popContext(workInProgress);
	        }

	        return null;
	      }

	    case SuspenseListComponent:
	      {
	        popSuspenseContext(workInProgress);
	        var renderState = workInProgress.memoizedState;

	        if (renderState === null) {
	          // We're running in the default, "independent" mode.
	          // We don't do anything in this mode.
	          return null;
	        }

	        var didSuspendAlready = (workInProgress.effectTag & DidCapture) !== NoEffect;
	        var renderedTail = renderState.rendering;

	        if (renderedTail === null) {
	          // We just rendered the head.
	          if (!didSuspendAlready) {
	            // This is the first pass. We need to figure out if anything is still
	            // suspended in the rendered set.
	            // If new content unsuspended, but there's still some content that
	            // didn't. Then we need to do a second pass that forces everything
	            // to keep showing their fallbacks.
	            // We might be suspended if something in this render pass suspended, or
	            // something in the previous committed pass suspended. Otherwise,
	            // there's no chance so we can skip the expensive call to
	            // findFirstSuspended.
	            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.effectTag & DidCapture) === NoEffect);

	            if (!cannotBeSuspended) {
	              var row = workInProgress.child;

	              while (row !== null) {
	                var suspended = findFirstSuspended(row);

	                if (suspended !== null) {
	                  didSuspendAlready = true;
	                  workInProgress.effectTag |= DidCapture;
	                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
	                  // part of the second pass. In that case nothing will subscribe to
	                  // its thennables. Instead, we'll transfer its thennables to the
	                  // SuspenseList so that it can retry if they resolve.
	                  // There might be multiple of these in the list but since we're
	                  // going to wait for all of them anyway, it doesn't really matter
	                  // which ones gets to ping. In theory we could get clever and keep
	                  // track of how many dependencies remain but it gets tricky because
	                  // in the meantime, we can add/remove/change items and dependencies.
	                  // We might bail out of the loop before finding any but that
	                  // doesn't matter since that means that the other boundaries that
	                  // we did find already has their listeners attached.

	                  var newThennables = suspended.updateQueue;

	                  if (newThennables !== null) {
	                    workInProgress.updateQueue = newThennables;
	                    workInProgress.effectTag |= Update;
	                  } // Rerender the whole list, but this time, we'll force fallbacks
	                  // to stay in place.
	                  // Reset the effect list before doing the second pass since that's now invalid.


	                  if (renderState.lastEffect === null) {
	                    workInProgress.firstEffect = null;
	                  }

	                  workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.

	                  resetChildFibers(workInProgress, renderExpirationTime); // Set up the Suspense Context to force suspense and immediately
	                  // rerender the children.

	                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
	                  return workInProgress.child;
	                }

	                row = row.sibling;
	              }
	            }
	          } else {
	            cutOffTailIfNeeded(renderState, false);
	          } // Next we're going to render the tail.

	        } else {
	          // Append the rendered row to the child list.
	          if (!didSuspendAlready) {
	            var _suspended = findFirstSuspended(renderedTail);

	            if (_suspended !== null) {
	              workInProgress.effectTag |= DidCapture;
	              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
	              // get lost if this row ends up dropped during a second pass.

	              var _newThennables = _suspended.updateQueue;

	              if (_newThennables !== null) {
	                workInProgress.updateQueue = _newThennables;
	                workInProgress.effectTag |= Update;
	              }

	              cutOffTailIfNeeded(renderState, true); // This might have been modified.

	              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate) {
	                // We need to delete the row we just rendered.
	                // Reset the effect list to what it was before we rendered this
	                // child. The nested children have already appended themselves.
	                var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.

	                if (lastEffect !== null) {
	                  lastEffect.nextEffect = null;
	                } // We're done.


	                return null;
	              }
	            } else if ( // The time it took to render last row is greater than time until
	            // the expiration.
	            now() * 2 - renderState.renderingStartTime > renderState.tailExpiration && renderExpirationTime > Never) {
	              // We have now passed our CPU deadline and we'll just give up further
	              // attempts to render the main content and only render fallbacks.
	              // The assumption is that this is usually faster.
	              workInProgress.effectTag |= DidCapture;
	              didSuspendAlready = true;
	              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
	              // to get it started back up to attempt the next item. If we can show
	              // them, then they really have the same priority as this render.
	              // So we'll pick it back up the very next render pass once we've had
	              // an opportunity to yield for paint.

	              var nextPriority = renderExpirationTime - 1;
	              workInProgress.expirationTime = workInProgress.childExpirationTime = nextPriority;

	              {
	                markSpawnedWork(nextPriority);
	              }
	            }
	          }

	          if (renderState.isBackwards) {
	            // The effect list of the backwards tail will have been added
	            // to the end. This breaks the guarantee that life-cycles fire in
	            // sibling order but that isn't a strong guarantee promised by React.
	            // Especially since these might also just pop in during future commits.
	            // Append to the beginning of the list.
	            renderedTail.sibling = workInProgress.child;
	            workInProgress.child = renderedTail;
	          } else {
	            var previousSibling = renderState.last;

	            if (previousSibling !== null) {
	              previousSibling.sibling = renderedTail;
	            } else {
	              workInProgress.child = renderedTail;
	            }

	            renderState.last = renderedTail;
	          }
	        }

	        if (renderState.tail !== null) {
	          // We still have tail rows to render.
	          if (renderState.tailExpiration === 0) {
	            // Heuristic for how long we're willing to spend rendering rows
	            // until we just give up and show what we have so far.
	            var TAIL_EXPIRATION_TIMEOUT_MS = 500;
	            renderState.tailExpiration = now() + TAIL_EXPIRATION_TIMEOUT_MS; // TODO: This is meant to mimic the train model or JND but this
	            // is a per component value. It should really be since the start
	            // of the total render or last commit. Consider using something like
	            // globalMostRecentFallbackTime. That doesn't account for being
	            // suspended for part of the time or when it's a new render.
	            // It should probably use a global start time value instead.
	          } // Pop a row.


	          var next = renderState.tail;
	          renderState.rendering = next;
	          renderState.tail = next.sibling;
	          renderState.lastEffect = workInProgress.lastEffect;
	          renderState.renderingStartTime = now();
	          next.sibling = null; // Restore the context.
	          // TODO: We can probably just avoid popping it instead and only
	          // setting it the first time we go from not suspended to suspended.

	          var suspenseContext = suspenseStackCursor.current;

	          if (didSuspendAlready) {
	            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
	          } else {
	            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
	          }

	          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.

	          return next;
	        }

	        return null;
	      }
	  }

	  {
	    {
	      throw Error( "Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }
	}

	function unwindWork(workInProgress, renderExpirationTime) {
	  switch (workInProgress.tag) {
	    case ClassComponent:
	      {
	        var Component = workInProgress.type;

	        if (isContextProvider(Component)) {
	          popContext(workInProgress);
	        }

	        var effectTag = workInProgress.effectTag;

	        if (effectTag & ShouldCapture) {
	          workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
	          return workInProgress;
	        }

	        return null;
	      }

	    case HostRoot:
	      {
	        popHostContainer(workInProgress);
	        popTopLevelContextObject(workInProgress);
	        var _effectTag = workInProgress.effectTag;

	        if (!((_effectTag & DidCapture) === NoEffect)) {
	          {
	            throw Error( "The root failed to unmount after an error. This is likely a bug in React. Please file an issue." );
	          }
	        }

	        workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
	        return workInProgress;
	      }

	    case HostComponent:
	      {
	        // TODO: popHydrationState
	        popHostContext(workInProgress);
	        return null;
	      }

	    case SuspenseComponent:
	      {
	        popSuspenseContext(workInProgress);

	        var _effectTag2 = workInProgress.effectTag;

	        if (_effectTag2 & ShouldCapture) {
	          workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

	          return workInProgress;
	        }

	        return null;
	      }

	    case SuspenseListComponent:
	      {
	        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
	        // caught by a nested boundary. If not, it should bubble through.

	        return null;
	      }

	    case HostPortal:
	      popHostContainer(workInProgress);
	      return null;

	    case ContextProvider:
	      popProvider(workInProgress);
	      return null;

	    default:
	      return null;
	  }
	}

	function unwindInterruptedWork(interruptedWork) {
	  switch (interruptedWork.tag) {
	    case ClassComponent:
	      {
	        var childContextTypes = interruptedWork.type.childContextTypes;

	        if (childContextTypes !== null && childContextTypes !== undefined) {
	          popContext(interruptedWork);
	        }

	        break;
	      }

	    case HostRoot:
	      {
	        popHostContainer(interruptedWork);
	        popTopLevelContextObject(interruptedWork);
	        break;
	      }

	    case HostComponent:
	      {
	        popHostContext(interruptedWork);
	        break;
	      }

	    case HostPortal:
	      popHostContainer(interruptedWork);
	      break;

	    case SuspenseComponent:
	      popSuspenseContext(interruptedWork);
	      break;

	    case SuspenseListComponent:
	      popSuspenseContext(interruptedWork);
	      break;

	    case ContextProvider:
	      popProvider(interruptedWork);
	      break;
	  }
	}

	function createCapturedValue(value, source) {
	  // If the value is an error, call this function immediately after it is thrown
	  // so the stack is accurate.
	  return {
	    value: value,
	    source: source,
	    stack: getStackByFiberInDevAndProd(source)
	  };
	}

	function logCapturedError(capturedError) {

	  var error = capturedError.error;

	  {
	    var componentName = capturedError.componentName,
	        componentStack = capturedError.componentStack,
	        errorBoundaryName = capturedError.errorBoundaryName,
	        errorBoundaryFound = capturedError.errorBoundaryFound,
	        willRetry = capturedError.willRetry; // Browsers support silencing uncaught errors by calling
	    // `preventDefault()` in window `error` handler.
	    // We record this information as an expando on the error.

	    if (error != null && error._suppressLogging) {
	      if (errorBoundaryFound && willRetry) {
	        // The error is recoverable and was silenced.
	        // Ignore it and don't print the stack addendum.
	        // This is handy for testing error boundaries without noise.
	        return;
	      } // The error is fatal. Since the silencing might have
	      // been accidental, we'll surface it anyway.
	      // However, the browser would have silenced the original error
	      // so we'll print it first, and then print the stack addendum.


	      console['error'](error); // Don't transform to our wrapper
	      // For a more detailed description of this block, see:
	      // https://github.com/facebook/react/pull/13384
	    }

	    var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
	    var errorBoundaryMessage; // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.

	    if (errorBoundaryFound && errorBoundaryName) {
	      if (willRetry) {
	        errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
	      } else {
	        errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\n" + "Recreating the tree from scratch failed so React will unmount the tree.";
	      }
	    } else {
	      errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
	    }

	    var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
	    // We don't include the original error message and JS stack because the browser
	    // has already printed it. Even if the application swallows the error, it is still
	    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

	    console['error'](combinedMessage); // Don't transform to our wrapper
	  }
	}

	var didWarnAboutUndefinedSnapshotBeforeUpdate = null;

	{
	  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
	}

	var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
	function logError(boundary, errorInfo) {
	  var source = errorInfo.source;
	  var stack = errorInfo.stack;

	  if (stack === null && source !== null) {
	    stack = getStackByFiberInDevAndProd(source);
	  }

	  var capturedError = {
	    componentName: source !== null ? getComponentName(source.type) : null,
	    componentStack: stack !== null ? stack : '',
	    error: errorInfo.value,
	    errorBoundary: null,
	    errorBoundaryName: null,
	    errorBoundaryFound: false,
	    willRetry: false
	  };

	  if (boundary !== null && boundary.tag === ClassComponent) {
	    capturedError.errorBoundary = boundary.stateNode;
	    capturedError.errorBoundaryName = getComponentName(boundary.type);
	    capturedError.errorBoundaryFound = true;
	    capturedError.willRetry = true;
	  }

	  try {
	    logCapturedError(capturedError);
	  } catch (e) {
	    // This method must not throw, or React internal state will get messed up.
	    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
	    // we want to report this error outside of the normal stack as a last resort.
	    // https://github.com/facebook/react/issues/13188
	    setTimeout(function () {
	      throw e;
	    });
	  }
	}

	var callComponentWillUnmountWithTimer = function (current, instance) {
	  startPhaseTimer(current, 'componentWillUnmount');
	  instance.props = current.memoizedProps;
	  instance.state = current.memoizedState;
	  instance.componentWillUnmount();
	  stopPhaseTimer();
	}; // Capture errors so they don't interrupt unmounting.


	function safelyCallComponentWillUnmount(current, instance) {
	  {
	    invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);

	    if (hasCaughtError()) {
	      var unmountError = clearCaughtError();
	      captureCommitPhaseError(current, unmountError);
	    }
	  }
	}

	function safelyDetachRef(current) {
	  var ref = current.ref;

	  if (ref !== null) {
	    if (typeof ref === 'function') {
	      {
	        invokeGuardedCallback(null, ref, null, null);

	        if (hasCaughtError()) {
	          var refError = clearCaughtError();
	          captureCommitPhaseError(current, refError);
	        }
	      }
	    } else {
	      ref.current = null;
	    }
	  }
	}

	function safelyCallDestroy(current, destroy) {
	  {
	    invokeGuardedCallback(null, destroy, null);

	    if (hasCaughtError()) {
	      var error = clearCaughtError();
	      captureCommitPhaseError(current, error);
	    }
	  }
	}

	function commitBeforeMutationLifeCycles(current, finishedWork) {
	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	    case Block:
	      {
	        return;
	      }

	    case ClassComponent:
	      {
	        if (finishedWork.effectTag & Snapshot) {
	          if (current !== null) {
	            var prevProps = current.memoizedProps;
	            var prevState = current.memoizedState;
	            startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
	            var instance = finishedWork.stateNode; // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.

	            {
	              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                if (instance.props !== finishedWork.memoizedProps) {
	                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	                }

	                if (instance.state !== finishedWork.memoizedState) {
	                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	                }
	              }
	            }

	            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);

	            {
	              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

	              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
	                didWarnSet.add(finishedWork.type);

	                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
	              }
	            }

	            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
	            stopPhaseTimer();
	          }
	        }

	        return;
	      }

	    case HostRoot:
	    case HostComponent:
	    case HostText:
	    case HostPortal:
	    case IncompleteClassComponent:
	      // Nothing to do for these component types
	      return;
	  }

	  {
	    {
	      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }
	}

	function commitHookEffectListUnmount(tag, finishedWork) {
	  var updateQueue = finishedWork.updateQueue;
	  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

	  if (lastEffect !== null) {
	    var firstEffect = lastEffect.next;
	    var effect = firstEffect;

	    do {
	      if ((effect.tag & tag) === tag) {
	        // Unmount
	        var destroy = effect.destroy;
	        effect.destroy = undefined;

	        if (destroy !== undefined) {
	          destroy();
	        }
	      }

	      effect = effect.next;
	    } while (effect !== firstEffect);
	  }
	}

	function commitHookEffectListMount(tag, finishedWork) {
	  var updateQueue = finishedWork.updateQueue;
	  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

	  if (lastEffect !== null) {
	    var firstEffect = lastEffect.next;
	    var effect = firstEffect;

	    do {
	      if ((effect.tag & tag) === tag) {
	        // Mount
	        var create = effect.create;
	        effect.destroy = create();

	        {
	          var destroy = effect.destroy;

	          if (destroy !== undefined && typeof destroy !== 'function') {
	            var addendum = void 0;

	            if (destroy === null) {
	              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
	            } else if (typeof destroy.then === 'function') {
	              addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching';
	            } else {
	              addendum = ' You returned: ' + destroy;
	            }

	            error('An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s%s', addendum, getStackByFiberInDevAndProd(finishedWork));
	          }
	        }
	      }

	      effect = effect.next;
	    } while (effect !== firstEffect);
	  }
	}

	function commitPassiveHookEffects(finishedWork) {
	  if ((finishedWork.effectTag & Passive) !== NoEffect) {
	    switch (finishedWork.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case SimpleMemoComponent:
	      case Block:
	        {
	          // TODO (#17945) We should call all passive destroy functions (for all fibers)
	          // before calling any create functions. The current approach only serializes
	          // these for a single fiber.
	          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork);
	          commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
	          break;
	        }
	    }
	  }
	}

	function commitLifeCycles(finishedRoot, current, finishedWork, committedExpirationTime) {
	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	    case Block:
	      {
	        // At this point layout effects have already been destroyed (during mutation phase).
	        // This is done to prevent sibling component effects from interfering with each other,
	        // e.g. a destroy function in one component should never override a ref set
	        // by a create function in another component during the same commit.
	        commitHookEffectListMount(Layout | HasEffect, finishedWork);

	        return;
	      }

	    case ClassComponent:
	      {
	        var instance = finishedWork.stateNode;

	        if (finishedWork.effectTag & Update) {
	          if (current === null) {
	            startPhaseTimer(finishedWork, 'componentDidMount'); // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.

	            {
	              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                if (instance.props !== finishedWork.memoizedProps) {
	                  error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	                }

	                if (instance.state !== finishedWork.memoizedState) {
	                  error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	                }
	              }
	            }

	            instance.componentDidMount();
	            stopPhaseTimer();
	          } else {
	            var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
	            var prevState = current.memoizedState;
	            startPhaseTimer(finishedWork, 'componentDidUpdate'); // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.

	            {
	              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                if (instance.props !== finishedWork.memoizedProps) {
	                  error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	                }

	                if (instance.state !== finishedWork.memoizedState) {
	                  error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	                }
	              }
	            }

	            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
	            stopPhaseTimer();
	          }
	        }

	        var updateQueue = finishedWork.updateQueue;

	        if (updateQueue !== null) {
	          {
	            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	              if (instance.props !== finishedWork.memoizedProps) {
	                error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	              }

	              if (instance.state !== finishedWork.memoizedState) {
	                error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	              }
	            }
	          } // We could update instance props and state here,
	          // but instead we rely on them being set during last render.
	          // TODO: revisit this when we implement resuming.


	          commitUpdateQueue(finishedWork, updateQueue, instance);
	        }

	        return;
	      }

	    case HostRoot:
	      {
	        var _updateQueue = finishedWork.updateQueue;

	        if (_updateQueue !== null) {
	          var _instance = null;

	          if (finishedWork.child !== null) {
	            switch (finishedWork.child.tag) {
	              case HostComponent:
	                _instance = getPublicInstance(finishedWork.child.stateNode);
	                break;

	              case ClassComponent:
	                _instance = finishedWork.child.stateNode;
	                break;
	            }
	          }

	          commitUpdateQueue(finishedWork, _updateQueue, _instance);
	        }

	        return;
	      }

	    case HostComponent:
	      {
	        var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
	        // (eg DOM renderer may schedule auto-focus for inputs and form controls).
	        // These effects should only be committed when components are first mounted,
	        // aka when there is no current/alternate.

	        if (current === null && finishedWork.effectTag & Update) {
	          var type = finishedWork.type;
	          var props = finishedWork.memoizedProps;
	          commitMount(_instance2, type, props);
	        }

	        return;
	      }

	    case HostText:
	      {
	        // We have no life-cycles associated with text.
	        return;
	      }

	    case HostPortal:
	      {
	        // We have no life-cycles associated with portals.
	        return;
	      }

	    case Profiler:
	      {
	        {
	          var onRender = finishedWork.memoizedProps.onRender;

	          if (typeof onRender === 'function') {
	            {
	              onRender(finishedWork.memoizedProps.id, current === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
	            }
	          }
	        }

	        return;
	      }

	    case SuspenseComponent:
	      {
	        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
	        return;
	      }

	    case SuspenseListComponent:
	    case IncompleteClassComponent:
	    case FundamentalComponent:
	    case ScopeComponent:
	      return;
	  }

	  {
	    {
	      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }
	}

	function hideOrUnhideAllChildren(finishedWork, isHidden) {
	  {
	    // We only have the top Fiber that was inserted but we need to recurse down its
	    // children to find all the terminal nodes.
	    var node = finishedWork;

	    while (true) {
	      if (node.tag === HostComponent) {
	        var instance = node.stateNode;

	        if (isHidden) {
	          hideInstance(instance);
	        } else {
	          unhideInstance(node.stateNode, node.memoizedProps);
	        }
	      } else if (node.tag === HostText) {
	        var _instance3 = node.stateNode;

	        if (isHidden) {
	          hideTextInstance(_instance3);
	        } else {
	          unhideTextInstance(_instance3, node.memoizedProps);
	        }
	      } else if (node.tag === SuspenseComponent && node.memoizedState !== null && node.memoizedState.dehydrated === null) {
	        // Found a nested Suspense component that timed out. Skip over the
	        // primary child fragment, which should remain hidden.
	        var fallbackChildFragment = node.child.sibling;
	        fallbackChildFragment.return = node;
	        node = fallbackChildFragment;
	        continue;
	      } else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }

	      if (node === finishedWork) {
	        return;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === finishedWork) {
	          return;
	        }

	        node = node.return;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  }
	}

	function commitAttachRef(finishedWork) {
	  var ref = finishedWork.ref;

	  if (ref !== null) {
	    var instance = finishedWork.stateNode;
	    var instanceToUse;

	    switch (finishedWork.tag) {
	      case HostComponent:
	        instanceToUse = getPublicInstance(instance);
	        break;

	      default:
	        instanceToUse = instance;
	    } // Moved outside to ensure DCE works with this flag

	    if (typeof ref === 'function') {
	      ref(instanceToUse);
	    } else {
	      {
	        if (!ref.hasOwnProperty('current')) {
	          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
	        }
	      }

	      ref.current = instanceToUse;
	    }
	  }
	}

	function commitDetachRef(current) {
	  var currentRef = current.ref;

	  if (currentRef !== null) {
	    if (typeof currentRef === 'function') {
	      currentRef(null);
	    } else {
	      currentRef.current = null;
	    }
	  }
	} // User-originating errors (lifecycles and refs) should not interrupt
	// deletion, so don't let them throw. Host-originating errors should
	// interrupt deletion, so it's okay


	function commitUnmount(finishedRoot, current, renderPriorityLevel) {
	  onCommitUnmount(current);

	  switch (current.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case MemoComponent:
	    case SimpleMemoComponent:
	    case Block:
	      {
	        var updateQueue = current.updateQueue;

	        if (updateQueue !== null) {
	          var lastEffect = updateQueue.lastEffect;

	          if (lastEffect !== null) {
	            var firstEffect = lastEffect.next;

	            {
	              // When the owner fiber is deleted, the destroy function of a passive
	              // effect hook is called during the synchronous commit phase. This is
	              // a concession to implementation complexity. Calling it in the
	              // passive effect phase (like they usually are, when dependencies
	              // change during an update) would require either traversing the
	              // children of the deleted fiber again, or including unmount effects
	              // as part of the fiber effect list.
	              //
	              // Because this is during the sync commit phase, we need to change
	              // the priority.
	              //
	              // TODO: Reconsider this implementation trade off.
	              var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
	              runWithPriority$1(priorityLevel, function () {
	                var effect = firstEffect;

	                do {
	                  var _destroy = effect.destroy;

	                  if (_destroy !== undefined) {
	                    safelyCallDestroy(current, _destroy);
	                  }

	                  effect = effect.next;
	                } while (effect !== firstEffect);
	              });
	            }
	          }
	        }

	        return;
	      }

	    case ClassComponent:
	      {
	        safelyDetachRef(current);
	        var instance = current.stateNode;

	        if (typeof instance.componentWillUnmount === 'function') {
	          safelyCallComponentWillUnmount(current, instance);
	        }

	        return;
	      }

	    case HostComponent:
	      {

	        safelyDetachRef(current);
	        return;
	      }

	    case HostPortal:
	      {
	        // TODO: this is recursive.
	        // We are also not using this parent because
	        // the portal will get pushed immediately.
	        {
	          unmountHostComponents(finishedRoot, current, renderPriorityLevel);
	        }

	        return;
	      }

	    case FundamentalComponent:
	      {

	        return;
	      }

	    case DehydratedFragment:
	      {

	        return;
	      }

	    case ScopeComponent:
	      {

	        return;
	      }
	  }
	}

	function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
	  // While we're inside a removed host node we don't want to call
	  // removeChild on the inner nodes because they're removed by the top
	  // call anyway. We also want to call componentWillUnmount on all
	  // composites before this host node is removed from the tree. Therefore
	  // we do an inner loop while we're still inside the host node.
	  var node = root;

	  while (true) {
	    commitUnmount(finishedRoot, node, renderPriorityLevel); // Visit children because they may contain more composite or host nodes.
	    // Skip portals because commitUnmount() currently visits them recursively.

	    if (node.child !== null && ( // If we use mutation we drill down into portals using commitUnmount above.
	    // If we don't use mutation we drill down into portals here instead.
	     node.tag !== HostPortal)) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === root) {
	      return;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === root) {
	        return;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function detachFiber(current) {
	  var alternate = current.alternate; // Cut off the return pointers to disconnect it from the tree. Ideally, we
	  // should clear the child pointer of the parent alternate to let this
	  // get GC:ed but we don't know which for sure which parent is the current
	  // one so we'll settle for GC:ing the subtree of this child. This child
	  // itself will be GC:ed when the parent updates the next time.

	  current.return = null;
	  current.child = null;
	  current.memoizedState = null;
	  current.updateQueue = null;
	  current.dependencies = null;
	  current.alternate = null;
	  current.firstEffect = null;
	  current.lastEffect = null;
	  current.pendingProps = null;
	  current.memoizedProps = null;
	  current.stateNode = null;

	  if (alternate !== null) {
	    detachFiber(alternate);
	  }
	}

	function getHostParentFiber(fiber) {
	  var parent = fiber.return;

	  while (parent !== null) {
	    if (isHostParent(parent)) {
	      return parent;
	    }

	    parent = parent.return;
	  }

	  {
	    {
	      throw Error( "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }
	}

	function isHostParent(fiber) {
	  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
	}

	function getHostSibling(fiber) {
	  // We're going to search forward into the tree until we find a sibling host
	  // node. Unfortunately, if multiple insertions are done in a row we have to
	  // search past them. This leads to exponential search for the next sibling.
	  // TODO: Find a more efficient way to do this.
	  var node = fiber;

	  siblings: while (true) {
	    // If we didn't find anything, let's try the next sibling.
	    while (node.sibling === null) {
	      if (node.return === null || isHostParent(node.return)) {
	        // If we pop out of the root or hit the parent the fiber we are the
	        // last sibling.
	        return null;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;

	    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
	      // If it is not host node and, we might have a host node inside it.
	      // Try to search down until we find one.
	      if (node.effectTag & Placement) {
	        // If we don't have a child, try the siblings instead.
	        continue siblings;
	      } // If we don't have a child, try the siblings instead.
	      // We also skip portals because they are not part of this host tree.


	      if (node.child === null || node.tag === HostPortal) {
	        continue siblings;
	      } else {
	        node.child.return = node;
	        node = node.child;
	      }
	    } // Check if this host node is stable or about to be placed.


	    if (!(node.effectTag & Placement)) {
	      // Found it!
	      return node.stateNode;
	    }
	  }
	}

	function commitPlacement(finishedWork) {


	  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

	  var parent;
	  var isContainer;
	  var parentStateNode = parentFiber.stateNode;

	  switch (parentFiber.tag) {
	    case HostComponent:
	      parent = parentStateNode;
	      isContainer = false;
	      break;

	    case HostRoot:
	      parent = parentStateNode.containerInfo;
	      isContainer = true;
	      break;

	    case HostPortal:
	      parent = parentStateNode.containerInfo;
	      isContainer = true;
	      break;

	    case FundamentalComponent:

	    // eslint-disable-next-line-no-fallthrough

	    default:
	      {
	        {
	          throw Error( "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue." );
	        }
	      }

	  }

	  if (parentFiber.effectTag & ContentReset) {
	    // Reset the text content of the parent before doing any insertions
	    resetTextContent(parent); // Clear ContentReset from the effect tag

	    parentFiber.effectTag &= ~ContentReset;
	  }

	  var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
	  // children to find all the terminal nodes.

	  if (isContainer) {
	    insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
	  } else {
	    insertOrAppendPlacementNode(finishedWork, before, parent);
	  }
	}

	function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
	  var tag = node.tag;
	  var isHost = tag === HostComponent || tag === HostText;

	  if (isHost || enableFundamentalAPI ) {
	    var stateNode = isHost ? node.stateNode : node.stateNode.instance;

	    if (before) {
	      insertInContainerBefore(parent, stateNode, before);
	    } else {
	      appendChildToContainer(parent, stateNode);
	    }
	  } else if (tag === HostPortal) ; else {
	    var child = node.child;

	    if (child !== null) {
	      insertOrAppendPlacementNodeIntoContainer(child, before, parent);
	      var sibling = child.sibling;

	      while (sibling !== null) {
	        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
	        sibling = sibling.sibling;
	      }
	    }
	  }
	}

	function insertOrAppendPlacementNode(node, before, parent) {
	  var tag = node.tag;
	  var isHost = tag === HostComponent || tag === HostText;

	  if (isHost || enableFundamentalAPI ) {
	    var stateNode = isHost ? node.stateNode : node.stateNode.instance;

	    if (before) {
	      insertBefore(parent, stateNode, before);
	    } else {
	      appendChild(parent, stateNode);
	    }
	  } else if (tag === HostPortal) ; else {
	    var child = node.child;

	    if (child !== null) {
	      insertOrAppendPlacementNode(child, before, parent);
	      var sibling = child.sibling;

	      while (sibling !== null) {
	        insertOrAppendPlacementNode(sibling, before, parent);
	        sibling = sibling.sibling;
	      }
	    }
	  }
	}

	function unmountHostComponents(finishedRoot, current, renderPriorityLevel) {
	  // We only have the top Fiber that was deleted but we need to recurse down its
	  // children to find all the terminal nodes.
	  var node = current; // Each iteration, currentParent is populated with node's host parent if not
	  // currentParentIsValid.

	  var currentParentIsValid = false; // Note: these two variables *must* always be updated together.

	  var currentParent;
	  var currentParentIsContainer;

	  while (true) {
	    if (!currentParentIsValid) {
	      var parent = node.return;

	      findParent: while (true) {
	        if (!(parent !== null)) {
	          {
	            throw Error( "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue." );
	          }
	        }

	        var parentStateNode = parent.stateNode;

	        switch (parent.tag) {
	          case HostComponent:
	            currentParent = parentStateNode;
	            currentParentIsContainer = false;
	            break findParent;

	          case HostRoot:
	            currentParent = parentStateNode.containerInfo;
	            currentParentIsContainer = true;
	            break findParent;

	          case HostPortal:
	            currentParent = parentStateNode.containerInfo;
	            currentParentIsContainer = true;
	            break findParent;

	        }

	        parent = parent.return;
	      }

	      currentParentIsValid = true;
	    }

	    if (node.tag === HostComponent || node.tag === HostText) {
	      commitNestedUnmounts(finishedRoot, node, renderPriorityLevel); // After all the children have unmounted, it is now safe to remove the
	      // node from the tree.

	      if (currentParentIsContainer) {
	        removeChildFromContainer(currentParent, node.stateNode);
	      } else {
	        removeChild(currentParent, node.stateNode);
	      } // Don't visit children because we already visited them.

	    } else if (node.tag === HostPortal) {
	      if (node.child !== null) {
	        // When we go into a portal, it becomes the parent to remove from.
	        // We will reassign it back when we pop the portal on the way up.
	        currentParent = node.stateNode.containerInfo;
	        currentParentIsContainer = true; // Visit children because portals might contain host components.

	        node.child.return = node;
	        node = node.child;
	        continue;
	      }
	    } else {
	      commitUnmount(finishedRoot, node, renderPriorityLevel); // Visit children because we may find more host components below.

	      if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }
	    }

	    if (node === current) {
	      return;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === current) {
	        return;
	      }

	      node = node.return;

	      if (node.tag === HostPortal) {
	        // When we go out of the portal, we need to restore the parent.
	        // Since we don't keep a stack of them, we will search for it.
	        currentParentIsValid = false;
	      }
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function commitDeletion(finishedRoot, current, renderPriorityLevel) {
	  {
	    // Recursively delete all host nodes from the parent.
	    // Detach refs and call componentWillUnmount() on the whole subtree.
	    unmountHostComponents(finishedRoot, current, renderPriorityLevel);
	  }

	  detachFiber(current);
	}

	function commitWork(current, finishedWork) {

	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case MemoComponent:
	    case SimpleMemoComponent:
	    case Block:
	      {
	        // Layout effects are destroyed during the mutation phase so that all
	        // destroy functions for all fibers are called before any create functions.
	        // This prevents sibling component effects from interfering with each other,
	        // e.g. a destroy function in one component should never override a ref set
	        // by a create function in another component during the same commit.
	        commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
	        return;
	      }

	    case ClassComponent:
	      {
	        return;
	      }

	    case HostComponent:
	      {
	        var instance = finishedWork.stateNode;

	        if (instance != null) {
	          // Commit the work prepared earlier.
	          var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
	          // as the newProps. The updatePayload will contain the real change in
	          // this case.

	          var oldProps = current !== null ? current.memoizedProps : newProps;
	          var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

	          var updatePayload = finishedWork.updateQueue;
	          finishedWork.updateQueue = null;

	          if (updatePayload !== null) {
	            commitUpdate(instance, updatePayload, type, oldProps, newProps);
	          }
	        }

	        return;
	      }

	    case HostText:
	      {
	        if (!(finishedWork.stateNode !== null)) {
	          {
	            throw Error( "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue." );
	          }
	        }

	        var textInstance = finishedWork.stateNode;
	        var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
	        // as the newProps. The updatePayload will contain the real change in
	        // this case.

	        var oldText = current !== null ? current.memoizedProps : newText;
	        commitTextUpdate(textInstance, oldText, newText);
	        return;
	      }

	    case HostRoot:
	      {
	        {
	          var _root = finishedWork.stateNode;

	          if (_root.hydrate) {
	            // We've just hydrated. No need to hydrate again.
	            _root.hydrate = false;
	            commitHydratedContainer(_root.containerInfo);
	          }
	        }

	        return;
	      }

	    case Profiler:
	      {
	        return;
	      }

	    case SuspenseComponent:
	      {
	        commitSuspenseComponent(finishedWork);
	        attachSuspenseRetryListeners(finishedWork);
	        return;
	      }

	    case SuspenseListComponent:
	      {
	        attachSuspenseRetryListeners(finishedWork);
	        return;
	      }

	    case IncompleteClassComponent:
	      {
	        return;
	      }
	  }

	  {
	    {
	      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }
	}

	function commitSuspenseComponent(finishedWork) {
	  var newState = finishedWork.memoizedState;
	  var newDidTimeout;
	  var primaryChildParent = finishedWork;

	  if (newState === null) {
	    newDidTimeout = false;
	  } else {
	    newDidTimeout = true;
	    primaryChildParent = finishedWork.child;
	    markCommitTimeOfFallback();
	  }

	  if ( primaryChildParent !== null) {
	    hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
	  }
	}

	function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {

	  var newState = finishedWork.memoizedState;

	  if (newState === null) {
	    var current = finishedWork.alternate;

	    if (current !== null) {
	      var prevState = current.memoizedState;

	      if (prevState !== null) {
	        var suspenseInstance = prevState.dehydrated;

	        if (suspenseInstance !== null) {
	          commitHydratedSuspenseInstance(suspenseInstance);
	        }
	      }
	    }
	  }
	}

	function attachSuspenseRetryListeners(finishedWork) {
	  // If this boundary just timed out, then it will have a set of thenables.
	  // For each thenable, attach a listener so that when it resolves, React
	  // attempts to re-render the boundary in the primary (pre-timeout) state.
	  var thenables = finishedWork.updateQueue;

	  if (thenables !== null) {
	    finishedWork.updateQueue = null;
	    var retryCache = finishedWork.stateNode;

	    if (retryCache === null) {
	      retryCache = finishedWork.stateNode = new PossiblyWeakSet();
	    }

	    thenables.forEach(function (thenable) {
	      // Memoize using the boundary fiber to prevent redundant listeners.
	      var retry = resolveRetryThenable.bind(null, finishedWork, thenable);

	      if (!retryCache.has(thenable)) {
	        {
	          if (thenable.__reactDoNotTraceInteractions !== true) {
	            retry = tracing$1.unstable_wrap(retry);
	          }
	        }

	        retryCache.add(thenable);
	        thenable.then(retry, retry);
	      }
	    });
	  }
	}

	function commitResetTextContent(current) {

	  resetTextContent(current.stateNode);
	}

	var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;

	function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
	  var update = createUpdate(expirationTime, null); // Unmount the root by rendering null.

	  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
	  // being called "element".

	  update.payload = {
	    element: null
	  };
	  var error = errorInfo.value;

	  update.callback = function () {
	    onUncaughtError(error);
	    logError(fiber, errorInfo);
	  };

	  return update;
	}

	function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
	  var update = createUpdate(expirationTime, null);
	  update.tag = CaptureUpdate;
	  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

	  if (typeof getDerivedStateFromError === 'function') {
	    var error$1 = errorInfo.value;

	    update.payload = function () {
	      logError(fiber, errorInfo);
	      return getDerivedStateFromError(error$1);
	    };
	  }

	  var inst = fiber.stateNode;

	  if (inst !== null && typeof inst.componentDidCatch === 'function') {
	    update.callback = function callback() {
	      {
	        markFailedErrorBoundaryForHotReloading(fiber);
	      }

	      if (typeof getDerivedStateFromError !== 'function') {
	        // To preserve the preexisting retry behavior of error boundaries,
	        // we keep track of which ones already failed during this batch.
	        // This gets reset before we yield back to the browser.
	        // TODO: Warn in strict mode if getDerivedStateFromError is
	        // not defined.
	        markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined

	        logError(fiber, errorInfo);
	      }

	      var error$1 = errorInfo.value;
	      var stack = errorInfo.stack;
	      this.componentDidCatch(error$1, {
	        componentStack: stack !== null ? stack : ''
	      });

	      {
	        if (typeof getDerivedStateFromError !== 'function') {
	          // If componentDidCatch is the only error boundary method defined,
	          // then it needs to call setState to recover from errors.
	          // If no state update is scheduled then the boundary will swallow the error.
	          if (fiber.expirationTime !== Sync) {
	            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown');
	          }
	        }
	      }
	    };
	  } else {
	    update.callback = function () {
	      markFailedErrorBoundaryForHotReloading(fiber);
	    };
	  }

	  return update;
	}

	function attachPingListener(root, renderExpirationTime, thenable) {
	  // Attach a listener to the promise to "ping" the root and retry. But
	  // only if one does not already exist for the current render expiration
	  // time (which acts like a "thread ID" here).
	  var pingCache = root.pingCache;
	  var threadIDs;

	  if (pingCache === null) {
	    pingCache = root.pingCache = new PossiblyWeakMap$1();
	    threadIDs = new Set();
	    pingCache.set(thenable, threadIDs);
	  } else {
	    threadIDs = pingCache.get(thenable);

	    if (threadIDs === undefined) {
	      threadIDs = new Set();
	      pingCache.set(thenable, threadIDs);
	    }
	  }

	  if (!threadIDs.has(renderExpirationTime)) {
	    // Memoize using the thread ID to prevent redundant listeners.
	    threadIDs.add(renderExpirationTime);
	    var ping = pingSuspendedRoot.bind(null, root, thenable, renderExpirationTime);
	    thenable.then(ping, ping);
	  }
	}

	function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
	  // The source fiber did not complete.
	  sourceFiber.effectTag |= Incomplete; // Its effect list is no longer valid.

	  sourceFiber.firstEffect = sourceFiber.lastEffect = null;

	  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
	    // This is a thenable.
	    var thenable = value;

	    if ((sourceFiber.mode & BlockingMode) === NoMode) {
	      // Reset the memoizedState to what it was before we attempted
	      // to render it.
	      var currentSource = sourceFiber.alternate;

	      if (currentSource) {
	        sourceFiber.updateQueue = currentSource.updateQueue;
	        sourceFiber.memoizedState = currentSource.memoizedState;
	        sourceFiber.expirationTime = currentSource.expirationTime;
	      } else {
	        sourceFiber.updateQueue = null;
	        sourceFiber.memoizedState = null;
	      }
	    }

	    var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.

	    var _workInProgress = returnFiber;

	    do {
	      if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
	        // Found the nearest boundary.
	        // Stash the promise on the boundary fiber. If the boundary times out, we'll
	        // attach another listener to flip the boundary back to its normal state.
	        var thenables = _workInProgress.updateQueue;

	        if (thenables === null) {
	          var updateQueue = new Set();
	          updateQueue.add(thenable);
	          _workInProgress.updateQueue = updateQueue;
	        } else {
	          thenables.add(thenable);
	        } // If the boundary is outside of blocking mode, we should *not*
	        // suspend the commit. Pretend as if the suspended component rendered
	        // null and keep rendering. In the commit phase, we'll schedule a
	        // subsequent synchronous update to re-render the Suspense.
	        //
	        // Note: It doesn't matter whether the component that suspended was
	        // inside a blocking mode tree. If the Suspense is outside of it, we
	        // should *not* suspend the commit.


	        if ((_workInProgress.mode & BlockingMode) === NoMode) {
	          _workInProgress.effectTag |= DidCapture; // We're going to commit this fiber even though it didn't complete.
	          // But we shouldn't call any lifecycle methods or callbacks. Remove
	          // all lifecycle effect tags.

	          sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);

	          if (sourceFiber.tag === ClassComponent) {
	            var currentSourceFiber = sourceFiber.alternate;

	            if (currentSourceFiber === null) {
	              // This is a new mount. Change the tag so it's not mistaken for a
	              // completed class component. For example, we should not call
	              // componentWillUnmount if it is deleted.
	              sourceFiber.tag = IncompleteClassComponent;
	            } else {
	              // When we try rendering again, we should not reuse the current fiber,
	              // since it's known to be in an inconsistent state. Use a force update to
	              // prevent a bail out.
	              var update = createUpdate(Sync, null);
	              update.tag = ForceUpdate;
	              enqueueUpdate(sourceFiber, update);
	            }
	          } // The source fiber did not complete. Mark it with Sync priority to
	          // indicate that it still has pending work.


	          sourceFiber.expirationTime = Sync; // Exit without suspending.

	          return;
	        } // Confirmed that the boundary is in a concurrent mode tree. Continue
	        // with the normal suspend path.
	        //
	        // After this we'll use a set of heuristics to determine whether this
	        // render pass will run to completion or restart or "suspend" the commit.
	        // The actual logic for this is spread out in different places.
	        //
	        // This first principle is that if we're going to suspend when we complete
	        // a root, then we should also restart if we get an update or ping that
	        // might unsuspend it, and vice versa. The only reason to suspend is
	        // because you think you might want to restart before committing. However,
	        // it doesn't make sense to restart only while in the period we're suspended.
	        //
	        // Restarting too aggressively is also not good because it starves out any
	        // intermediate loading state. So we use heuristics to determine when.
	        // Suspense Heuristics
	        //
	        // If nothing threw a Promise or all the same fallbacks are already showing,
	        // then don't suspend/restart.
	        //
	        // If this is an initial render of a new tree of Suspense boundaries and
	        // those trigger a fallback, then don't suspend/restart. We want to ensure
	        // that we can show the initial loading state as quickly as possible.
	        //
	        // If we hit a "Delayed" case, such as when we'd switch from content back into
	        // a fallback, then we should always suspend/restart. SuspenseConfig applies to
	        // this case. If none is defined, JND is used instead.
	        //
	        // If we're already showing a fallback and it gets "retried", allowing us to show
	        // another level, but there's still an inner boundary that would show a fallback,
	        // then we suspend/restart for 500ms since the last time we showed a fallback
	        // anywhere in the tree. This effectively throttles progressive loading into a
	        // consistent train of commits. This also gives us an opportunity to restart to
	        // get to the completed state slightly earlier.
	        //
	        // If there's ambiguity due to batching it's resolved in preference of:
	        // 1) "delayed", 2) "initial render", 3) "retry".
	        //
	        // We want to ensure that a "busy" state doesn't get force committed. We want to
	        // ensure that new initial loading states can commit as soon as possible.


	        attachPingListener(root, renderExpirationTime, thenable);
	        _workInProgress.effectTag |= ShouldCapture;
	        _workInProgress.expirationTime = renderExpirationTime;
	        return;
	      } // This boundary already captured during this render. Continue to the next
	      // boundary.


	      _workInProgress = _workInProgress.return;
	    } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.
	    // TODO: Use invariant so the message is stripped in prod?


	    value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.' + getStackByFiberInDevAndProd(sourceFiber));
	  } // We didn't find a boundary that could handle this type of exception. Start
	  // over and traverse parent path again, this time treating the exception
	  // as an error.


	  renderDidError();
	  value = createCapturedValue(value, sourceFiber);
	  var workInProgress = returnFiber;

	  do {
	    switch (workInProgress.tag) {
	      case HostRoot:
	        {
	          var _errorInfo = value;
	          workInProgress.effectTag |= ShouldCapture;
	          workInProgress.expirationTime = renderExpirationTime;

	          var _update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);

	          enqueueCapturedUpdate(workInProgress, _update);
	          return;
	        }

	      case ClassComponent:
	        // Capture and retry
	        var errorInfo = value;
	        var ctor = workInProgress.type;
	        var instance = workInProgress.stateNode;

	        if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
	          workInProgress.effectTag |= ShouldCapture;
	          workInProgress.expirationTime = renderExpirationTime; // Schedule the error boundary to re-render using updated state

	          var _update2 = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);

	          enqueueCapturedUpdate(workInProgress, _update2);
	          return;
	        }

	        break;
	    }

	    workInProgress = workInProgress.return;
	  } while (workInProgress !== null);
	}

	var ceil = Math.ceil;
	var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
	    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
	    IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
	var NoContext =
	/*                    */
	0;
	var BatchedContext =
	/*               */
	1;
	var EventContext =
	/*                 */
	2;
	var DiscreteEventContext =
	/*         */
	4;
	var LegacyUnbatchedContext =
	/*       */
	8;
	var RenderContext =
	/*                */
	16;
	var CommitContext =
	/*                */
	32;
	var RootIncomplete = 0;
	var RootFatalErrored = 1;
	var RootErrored = 2;
	var RootSuspended = 3;
	var RootSuspendedWithDelay = 4;
	var RootCompleted = 5;
	// Describes where we are in the React execution stack
	var executionContext = NoContext; // The root we're working on

	var workInProgressRoot = null; // The fiber we're working on

	var workInProgress = null; // The expiration time we're rendering

	var renderExpirationTime$1 = NoWork; // Whether to root completed, errored, suspended, etc.

	var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown

	var workInProgressRootFatalError = null; // Most recent event time among processed updates during this render.
	// This is conceptually a time stamp but expressed in terms of an ExpirationTime
	// because we deal mostly with expiration times in the hot path, so this avoids
	// the conversion happening in the hot path.

	var workInProgressRootLatestProcessedExpirationTime = Sync;
	var workInProgressRootLatestSuspenseTimeout = Sync;
	var workInProgressRootCanSuspendUsingConfig = null; // The work left over by components that were visited during this render. Only
	// includes unprocessed updates, not work in bailed out children.

	var workInProgressRootNextUnprocessedUpdateTime = NoWork; // If we're pinged while rendering we don't always restart immediately.
	// This flag determines if it might be worthwhile to restart if an opportunity
	// happens latere.

	var workInProgressRootHasPendingPing = false; // The most recent time we committed a fallback. This lets us ensure a train
	// model where we don't commit new loading states in too quick succession.

	var globalMostRecentFallbackTime = 0;
	var FALLBACK_THROTTLE_MS = 500;
	var nextEffect = null;
	var hasUncaughtError = false;
	var firstUncaughtError = null;
	var legacyErrorBoundariesThatAlreadyFailed = null;
	var rootDoesHavePassiveEffects = false;
	var rootWithPendingPassiveEffects = null;
	var pendingPassiveEffectsRenderPriority = NoPriority;
	var pendingPassiveEffectsExpirationTime = NoWork;
	var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates

	var NESTED_UPDATE_LIMIT = 50;
	var nestedUpdateCount = 0;
	var rootWithNestedUpdates = null;
	var NESTED_PASSIVE_UPDATE_LIMIT = 50;
	var nestedPassiveUpdateCount = 0;
	var interruptedBy = null; // Marks the need to reschedule pending interactions at these expiration times
	// during the commit phase. This enables them to be traced across components
	// that spawn new work during render. E.g. hidden boundaries, suspended SSR
	// hydration or SuspenseList.

	var spawnedWorkDuringRender = null; // Expiration times are computed by adding to the current time (the start
	// time). However, if two updates are scheduled within the same event, we
	// should treat their start times as simultaneous, even if the actual clock
	// time has advanced between the first and second call.
	// In other words, because expiration times determine how updates are batched,
	// we want all updates of like priority that occur within the same event to
	// receive the same expiration time. Otherwise we get tearing.

	var currentEventTime = NoWork;
	function requestCurrentTimeForUpdate() {
	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    // We're inside React, so it's fine to read the actual time.
	    return msToExpirationTime(now());
	  } // We're not inside React, so we may be in the middle of a browser event.


	  if (currentEventTime !== NoWork) {
	    // Use the same start time for all updates until we enter React again.
	    return currentEventTime;
	  } // This is the first update since React yielded. Compute a new start time.


	  currentEventTime = msToExpirationTime(now());
	  return currentEventTime;
	}
	function getCurrentTime() {
	  return msToExpirationTime(now());
	}
	function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
	  var mode = fiber.mode;

	  if ((mode & BlockingMode) === NoMode) {
	    return Sync;
	  }

	  var priorityLevel = getCurrentPriorityLevel();

	  if ((mode & ConcurrentMode) === NoMode) {
	    return priorityLevel === ImmediatePriority ? Sync : Batched;
	  }

	  if ((executionContext & RenderContext) !== NoContext) {
	    // Use whatever time we're already rendering
	    // TODO: Should there be a way to opt out, like with `runWithPriority`?
	    return renderExpirationTime$1;
	  }

	  var expirationTime;

	  if (suspenseConfig !== null) {
	    // Compute an expiration time based on the Suspense timeout.
	    expirationTime = computeSuspenseExpiration(currentTime, suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
	  } else {
	    // Compute an expiration time based on the Scheduler priority.
	    switch (priorityLevel) {
	      case ImmediatePriority:
	        expirationTime = Sync;
	        break;

	      case UserBlockingPriority$1:
	        // TODO: Rename this to computeUserBlockingExpiration
	        expirationTime = computeInteractiveExpiration(currentTime);
	        break;

	      case NormalPriority:
	      case LowPriority:
	        // TODO: Handle LowPriority
	        // TODO: Rename this to... something better.
	        expirationTime = computeAsyncExpiration(currentTime);
	        break;

	      case IdlePriority:
	        expirationTime = Idle;
	        break;

	      default:
	        {
	          {
	            throw Error( "Expected a valid priority level" );
	          }
	        }

	    }
	  } // If we're in the middle of rendering a tree, do not update at the same
	  // expiration time that is already rendering.
	  // TODO: We shouldn't have to do this if the update is on a different root.
	  // Refactor computeExpirationForFiber + scheduleUpdate so we have access to
	  // the root when we check for this condition.


	  if (workInProgressRoot !== null && expirationTime === renderExpirationTime$1) {
	    // This is a trick to move this update into a separate batch
	    expirationTime -= 1;
	  }

	  return expirationTime;
	}
	function scheduleUpdateOnFiber(fiber, expirationTime) {
	  checkForNestedUpdates();
	  warnAboutRenderPhaseUpdatesInDEV(fiber);
	  var root = markUpdateTimeFromFiberToRoot(fiber, expirationTime);

	  if (root === null) {
	    warnAboutUpdateOnUnmountedFiberInDEV(fiber);
	    return;
	  }

	  checkForInterruption(fiber, expirationTime);
	  recordScheduleUpdate(); // TODO: computeExpirationForFiber also reads the priority. Pass the
	  // priority as an argument to that function and this one.

	  var priorityLevel = getCurrentPriorityLevel();

	  if (expirationTime === Sync) {
	    if ( // Check if we're inside unbatchedUpdates
	    (executionContext & LegacyUnbatchedContext) !== NoContext && // Check if we're not already rendering
	    (executionContext & (RenderContext | CommitContext)) === NoContext) {
	      // Register pending interactions on the root to avoid losing traced interaction data.
	      schedulePendingInteractions(root, expirationTime); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
	      // root inside of batchedUpdates should be synchronous, but layout updates
	      // should be deferred until the end of the batch.

	      performSyncWorkOnRoot(root);
	    } else {
	      ensureRootIsScheduled(root);
	      schedulePendingInteractions(root, expirationTime);

	      if (executionContext === NoContext) {
	        // Flush the synchronous work now, unless we're already working or inside
	        // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
	        // scheduleCallbackForFiber to preserve the ability to schedule a callback
	        // without immediately flushing it. We only do this for user-initiated
	        // updates, to preserve historical behavior of legacy mode.
	        flushSyncCallbackQueue();
	      }
	    }
	  } else {
	    ensureRootIsScheduled(root);
	    schedulePendingInteractions(root, expirationTime);
	  }

	  if ((executionContext & DiscreteEventContext) !== NoContext && ( // Only updates at user-blocking priority or greater are considered
	  // discrete, even inside a discrete event.
	  priorityLevel === UserBlockingPriority$1 || priorityLevel === ImmediatePriority)) {
	    // This is the result of a discrete event. Track the lowest priority
	    // discrete update per root so we can flush them early, if needed.
	    if (rootsWithPendingDiscreteUpdates === null) {
	      rootsWithPendingDiscreteUpdates = new Map([[root, expirationTime]]);
	    } else {
	      var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root);

	      if (lastDiscreteTime === undefined || lastDiscreteTime > expirationTime) {
	        rootsWithPendingDiscreteUpdates.set(root, expirationTime);
	      }
	    }
	  }
	}
	var scheduleWork = scheduleUpdateOnFiber; // This is split into a separate function so we can mark a fiber with pending
	// work without treating it as a typical update that originates from an event;
	// e.g. retrying a Suspense boundary isn't an update, but it does schedule work
	// on a fiber.

	function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
	  // Update the source fiber's expiration time
	  if (fiber.expirationTime < expirationTime) {
	    fiber.expirationTime = expirationTime;
	  }

	  var alternate = fiber.alternate;

	  if (alternate !== null && alternate.expirationTime < expirationTime) {
	    alternate.expirationTime = expirationTime;
	  } // Walk the parent path to the root and update the child expiration time.


	  var node = fiber.return;
	  var root = null;

	  if (node === null && fiber.tag === HostRoot) {
	    root = fiber.stateNode;
	  } else {
	    while (node !== null) {
	      alternate = node.alternate;

	      if (node.childExpirationTime < expirationTime) {
	        node.childExpirationTime = expirationTime;

	        if (alternate !== null && alternate.childExpirationTime < expirationTime) {
	          alternate.childExpirationTime = expirationTime;
	        }
	      } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
	        alternate.childExpirationTime = expirationTime;
	      }

	      if (node.return === null && node.tag === HostRoot) {
	        root = node.stateNode;
	        break;
	      }

	      node = node.return;
	    }
	  }

	  if (root !== null) {
	    if (workInProgressRoot === root) {
	      // Received an update to a tree that's in the middle of rendering. Mark
	      // that's unprocessed work on this root.
	      markUnprocessedUpdateTime(expirationTime);

	      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
	        // The root already suspended with a delay, which means this render
	        // definitely won't finish. Since we have a new update, let's mark it as
	        // suspended now, right before marking the incoming update. This has the
	        // effect of interrupting the current render and switching to the update.
	        // TODO: This happens to work when receiving an update during the render
	        // phase, because of the trick inside computeExpirationForFiber to
	        // subtract 1 from `renderExpirationTime` to move it into a
	        // separate bucket. But we should probably model it with an exception,
	        // using the same mechanism we use to force hydration of a subtree.
	        // TODO: This does not account for low pri updates that were already
	        // scheduled before the root started rendering. Need to track the next
	        // pending expiration time (perhaps by backtracking the return path) and
	        // then trigger a restart in the `renderDidSuspendDelayIfPossible` path.
	        markRootSuspendedAtTime(root, renderExpirationTime$1);
	      }
	    } // Mark that the root has a pending update.


	    markRootUpdatedAtTime(root, expirationTime);
	  }

	  return root;
	}

	function getNextRootExpirationTimeToWorkOn(root) {
	  // Determines the next expiration time that the root should render, taking
	  // into account levels that may be suspended, or levels that may have
	  // received a ping.
	  var lastExpiredTime = root.lastExpiredTime;

	  if (lastExpiredTime !== NoWork) {
	    return lastExpiredTime;
	  } // "Pending" refers to any update that hasn't committed yet, including if it
	  // suspended. The "suspended" range is therefore a subset.


	  var firstPendingTime = root.firstPendingTime;

	  if (!isRootSuspendedAtTime(root, firstPendingTime)) {
	    // The highest priority pending time is not suspended. Let's work on that.
	    return firstPendingTime;
	  } // If the first pending time is suspended, check if there's a lower priority
	  // pending level that we know about. Or check if we received a ping. Work
	  // on whichever is higher priority.


	  var lastPingedTime = root.lastPingedTime;
	  var nextKnownPendingLevel = root.nextKnownPendingLevel;
	  var nextLevel = lastPingedTime > nextKnownPendingLevel ? lastPingedTime : nextKnownPendingLevel;

	  if ( nextLevel <= Idle && firstPendingTime !== nextLevel) {
	    // Don't work on Idle/Never priority unless everything else is committed.
	    return NoWork;
	  }

	  return nextLevel;
	} // Use this function to schedule a task for a root. There's only one task per
	// root; if a task was already scheduled, we'll check to make sure the
	// expiration time of the existing task is the same as the expiration time of
	// the next level that the root has work on. This function is called on every
	// update, and right before exiting a task.


	function ensureRootIsScheduled(root) {
	  var lastExpiredTime = root.lastExpiredTime;

	  if (lastExpiredTime !== NoWork) {
	    // Special case: Expired work should flush synchronously.
	    root.callbackExpirationTime = Sync;
	    root.callbackPriority = ImmediatePriority;
	    root.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
	    return;
	  }

	  var expirationTime = getNextRootExpirationTimeToWorkOn(root);
	  var existingCallbackNode = root.callbackNode;

	  if (expirationTime === NoWork) {
	    // There's nothing to work on.
	    if (existingCallbackNode !== null) {
	      root.callbackNode = null;
	      root.callbackExpirationTime = NoWork;
	      root.callbackPriority = NoPriority;
	    }

	    return;
	  } // TODO: If this is an update, we already read the current time. Pass the
	  // time as an argument.


	  var currentTime = requestCurrentTimeForUpdate();
	  var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime); // If there's an existing render task, confirm it has the correct priority and
	  // expiration time. Otherwise, we'll cancel it and schedule a new one.

	  if (existingCallbackNode !== null) {
	    var existingCallbackPriority = root.callbackPriority;
	    var existingCallbackExpirationTime = root.callbackExpirationTime;

	    if ( // Callback must have the exact same expiration time.
	    existingCallbackExpirationTime === expirationTime && // Callback must have greater or equal priority.
	    existingCallbackPriority >= priorityLevel) {
	      // Existing callback is sufficient.
	      return;
	    } // Need to schedule a new task.
	    // TODO: Instead of scheduling a new task, we should be able to change the
	    // priority of the existing one.


	    cancelCallback(existingCallbackNode);
	  }

	  root.callbackExpirationTime = expirationTime;
	  root.callbackPriority = priorityLevel;
	  var callbackNode;

	  if (expirationTime === Sync) {
	    // Sync React callbacks are scheduled on a special internal queue
	    callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
	  } else {
	    callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root), // Compute a task timeout based on the expiration time. This also affects
	    // ordering because tasks are processed in timeout order.
	    {
	      timeout: expirationTimeToMs(expirationTime) - now()
	    });
	  }

	  root.callbackNode = callbackNode;
	} // This is the entry point for every concurrent task, i.e. anything that
	// goes through Scheduler.


	function performConcurrentWorkOnRoot(root, didTimeout) {
	  // Since we know we're in a React event, we can clear the current
	  // event time. The next update will compute a new event time.
	  currentEventTime = NoWork;

	  if (didTimeout) {
	    // The render task took too long to complete. Mark the current time as
	    // expired to synchronously render all expired work in a single batch.
	    var currentTime = requestCurrentTimeForUpdate();
	    markRootExpiredAtTime(root, currentTime); // This will schedule a synchronous callback.

	    ensureRootIsScheduled(root);
	    return null;
	  } // Determine the next expiration time to work on, using the fields stored
	  // on the root.


	  var expirationTime = getNextRootExpirationTimeToWorkOn(root);

	  if (expirationTime !== NoWork) {
	    var originalCallbackNode = root.callbackNode;

	    if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
	      {
	        throw Error( "Should not already be working." );
	      }
	    }

	    flushPassiveEffects(); // If the root or expiration time have changed, throw out the existing stack
	    // and prepare a fresh one. Otherwise we'll continue where we left off.

	    if (root !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
	      prepareFreshStack(root, expirationTime);
	      startWorkOnPendingInteractions(root, expirationTime);
	    } // If we have a work-in-progress fiber, it means there's still work to do
	    // in this root.


	    if (workInProgress !== null) {
	      var prevExecutionContext = executionContext;
	      executionContext |= RenderContext;
	      var prevDispatcher = pushDispatcher();
	      var prevInteractions = pushInteractions(root);
	      startWorkLoopTimer(workInProgress);

	      do {
	        try {
	          workLoopConcurrent();
	          break;
	        } catch (thrownValue) {
	          handleError(root, thrownValue);
	        }
	      } while (true);

	      resetContextDependencies();
	      executionContext = prevExecutionContext;
	      popDispatcher(prevDispatcher);

	      {
	        popInteractions(prevInteractions);
	      }

	      if (workInProgressRootExitStatus === RootFatalErrored) {
	        var fatalError = workInProgressRootFatalError;
	        stopInterruptedWorkLoopTimer();
	        prepareFreshStack(root, expirationTime);
	        markRootSuspendedAtTime(root, expirationTime);
	        ensureRootIsScheduled(root);
	        throw fatalError;
	      }

	      if (workInProgress !== null) {
	        // There's still work left over. Exit without committing.
	        stopInterruptedWorkLoopTimer();
	      } else {
	        // We now have a consistent tree. The next step is either to commit it,
	        // or, if something suspended, wait to commit it after a timeout.
	        stopFinishedWorkLoopTimer();
	        var finishedWork = root.finishedWork = root.current.alternate;
	        root.finishedExpirationTime = expirationTime;
	        finishConcurrentRender(root, finishedWork, workInProgressRootExitStatus, expirationTime);
	      }

	      ensureRootIsScheduled(root);

	      if (root.callbackNode === originalCallbackNode) {
	        // The task node scheduled for this root is the same one that's
	        // currently executed. Need to return a continuation.
	        return performConcurrentWorkOnRoot.bind(null, root);
	      }
	    }
	  }

	  return null;
	}

	function finishConcurrentRender(root, finishedWork, exitStatus, expirationTime) {
	  // Set this to null to indicate there's no in-progress render.
	  workInProgressRoot = null;

	  switch (exitStatus) {
	    case RootIncomplete:
	    case RootFatalErrored:
	      {
	        {
	          {
	            throw Error( "Root did not complete. This is a bug in React." );
	          }
	        }
	      }
	    // Flow knows about invariant, so it complains if I add a break
	    // statement, but eslint doesn't know about invariant, so it complains
	    // if I do. eslint-disable-next-line no-fallthrough

	    case RootErrored:
	      {
	        // If this was an async render, the error may have happened due to
	        // a mutation in a concurrent event. Try rendering one more time,
	        // synchronously, to see if the error goes away. If there are
	        // lower priority updates, let's include those, too, in case they
	        // fix the inconsistency. Render at Idle to include all updates.
	        // If it was Idle or Never or some not-yet-invented time, render
	        // at that time.
	        markRootExpiredAtTime(root, expirationTime > Idle ? Idle : expirationTime); // We assume that this second render pass will be synchronous
	        // and therefore not hit this path again.

	        break;
	      }

	    case RootSuspended:
	      {
	        markRootSuspendedAtTime(root, expirationTime);
	        var lastSuspendedTime = root.lastSuspendedTime;

	        if (expirationTime === lastSuspendedTime) {
	          root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
	        } // We have an acceptable loading state. We need to figure out if we
	        // should immediately commit it or wait a bit.
	        // If we have processed new updates during this render, we may now
	        // have a new loading state ready. We want to ensure that we commit
	        // that as soon as possible.


	        var hasNotProcessedNewUpdates = workInProgressRootLatestProcessedExpirationTime === Sync;

	        if (hasNotProcessedNewUpdates && // do not delay if we're inside an act() scope
	        !( IsThisRendererActing.current)) {
	          // If we have not processed any new updates during this pass, then
	          // this is either a retry of an existing fallback state or a
	          // hidden tree. Hidden trees shouldn't be batched with other work
	          // and after that's fixed it can only be a retry. We're going to
	          // throttle committing retries so that we don't show too many
	          // loading states too quickly.
	          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.

	          if (msUntilTimeout > 10) {
	            if (workInProgressRootHasPendingPing) {
	              var lastPingedTime = root.lastPingedTime;

	              if (lastPingedTime === NoWork || lastPingedTime >= expirationTime) {
	                // This render was pinged but we didn't get to restart
	                // earlier so try restarting now instead.
	                root.lastPingedTime = expirationTime;
	                prepareFreshStack(root, expirationTime);
	                break;
	              }
	            }

	            var nextTime = getNextRootExpirationTimeToWorkOn(root);

	            if (nextTime !== NoWork && nextTime !== expirationTime) {
	              // There's additional work on this root.
	              break;
	            }

	            if (lastSuspendedTime !== NoWork && lastSuspendedTime !== expirationTime) {
	              // We should prefer to render the fallback of at the last
	              // suspended level. Ping the last suspended level to try
	              // rendering it again.
	              root.lastPingedTime = lastSuspendedTime;
	              break;
	            } // The render is suspended, it hasn't timed out, and there's no
	            // lower priority work to do. Instead of committing the fallback
	            // immediately, wait for more data to arrive.


	            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
	            break;
	          }
	        } // The work expired. Commit immediately.


	        commitRoot(root);
	        break;
	      }

	    case RootSuspendedWithDelay:
	      {
	        markRootSuspendedAtTime(root, expirationTime);
	        var _lastSuspendedTime = root.lastSuspendedTime;

	        if (expirationTime === _lastSuspendedTime) {
	          root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
	        }

	        if ( // do not delay if we're inside an act() scope
	        !( IsThisRendererActing.current)) {
	          // We're suspended in a state that should be avoided. We'll try to
	          // avoid committing it for as long as the timeouts let us.
	          if (workInProgressRootHasPendingPing) {
	            var _lastPingedTime = root.lastPingedTime;

	            if (_lastPingedTime === NoWork || _lastPingedTime >= expirationTime) {
	              // This render was pinged but we didn't get to restart earlier
	              // so try restarting now instead.
	              root.lastPingedTime = expirationTime;
	              prepareFreshStack(root, expirationTime);
	              break;
	            }
	          }

	          var _nextTime = getNextRootExpirationTimeToWorkOn(root);

	          if (_nextTime !== NoWork && _nextTime !== expirationTime) {
	            // There's additional work on this root.
	            break;
	          }

	          if (_lastSuspendedTime !== NoWork && _lastSuspendedTime !== expirationTime) {
	            // We should prefer to render the fallback of at the last
	            // suspended level. Ping the last suspended level to try
	            // rendering it again.
	            root.lastPingedTime = _lastSuspendedTime;
	            break;
	          }

	          var _msUntilTimeout;

	          if (workInProgressRootLatestSuspenseTimeout !== Sync) {
	            // We have processed a suspense config whose expiration time we
	            // can use as the timeout.
	            _msUntilTimeout = expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now();
	          } else if (workInProgressRootLatestProcessedExpirationTime === Sync) {
	            // This should never normally happen because only new updates
	            // cause delayed states, so we should have processed something.
	            // However, this could also happen in an offscreen tree.
	            _msUntilTimeout = 0;
	          } else {
	            // If we don't have a suspense config, we're going to use a
	            // heuristic to determine how long we can suspend.
	            var eventTimeMs = inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);
	            var currentTimeMs = now();
	            var timeUntilExpirationMs = expirationTimeToMs(expirationTime) - currentTimeMs;
	            var timeElapsed = currentTimeMs - eventTimeMs;

	            if (timeElapsed < 0) {
	              // We get this wrong some time since we estimate the time.
	              timeElapsed = 0;
	            }

	            _msUntilTimeout = jnd(timeElapsed) - timeElapsed; // Clamp the timeout to the expiration time. TODO: Once the
	            // event time is exact instead of inferred from expiration time
	            // we don't need this.

	            if (timeUntilExpirationMs < _msUntilTimeout) {
	              _msUntilTimeout = timeUntilExpirationMs;
	            }
	          } // Don't bother with a very short suspense time.


	          if (_msUntilTimeout > 10) {
	            // The render is suspended, it hasn't timed out, and there's no
	            // lower priority work to do. Instead of committing the fallback
	            // immediately, wait for more data to arrive.
	            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
	            break;
	          }
	        } // The work expired. Commit immediately.


	        commitRoot(root);
	        break;
	      }

	    case RootCompleted:
	      {
	        // The work completed. Ready to commit.
	        if ( // do not delay if we're inside an act() scope
	        !( IsThisRendererActing.current) && workInProgressRootLatestProcessedExpirationTime !== Sync && workInProgressRootCanSuspendUsingConfig !== null) {
	          // If we have exceeded the minimum loading delay, which probably
	          // means we have shown a spinner already, we might have to suspend
	          // a bit longer to ensure that the spinner is shown for
	          // enough time.
	          var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(workInProgressRootLatestProcessedExpirationTime, expirationTime, workInProgressRootCanSuspendUsingConfig);

	          if (_msUntilTimeout2 > 10) {
	            markRootSuspendedAtTime(root, expirationTime);
	            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout2);
	            break;
	          }
	        }

	        commitRoot(root);
	        break;
	      }

	    default:
	      {
	        {
	          {
	            throw Error( "Unknown root exit status." );
	          }
	        }
	      }
	  }
	} // This is the entry point for synchronous tasks that don't go
	// through Scheduler


	function performSyncWorkOnRoot(root) {
	  // Check if there's expired work on this root. Otherwise, render at Sync.
	  var lastExpiredTime = root.lastExpiredTime;
	  var expirationTime = lastExpiredTime !== NoWork ? lastExpiredTime : Sync;

	  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
	    {
	      throw Error( "Should not already be working." );
	    }
	  }

	  flushPassiveEffects(); // If the root or expiration time have changed, throw out the existing stack
	  // and prepare a fresh one. Otherwise we'll continue where we left off.

	  if (root !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
	    prepareFreshStack(root, expirationTime);
	    startWorkOnPendingInteractions(root, expirationTime);
	  } // If we have a work-in-progress fiber, it means there's still work to do
	  // in this root.


	  if (workInProgress !== null) {
	    var prevExecutionContext = executionContext;
	    executionContext |= RenderContext;
	    var prevDispatcher = pushDispatcher();
	    var prevInteractions = pushInteractions(root);
	    startWorkLoopTimer(workInProgress);

	    do {
	      try {
	        workLoopSync();
	        break;
	      } catch (thrownValue) {
	        handleError(root, thrownValue);
	      }
	    } while (true);

	    resetContextDependencies();
	    executionContext = prevExecutionContext;
	    popDispatcher(prevDispatcher);

	    {
	      popInteractions(prevInteractions);
	    }

	    if (workInProgressRootExitStatus === RootFatalErrored) {
	      var fatalError = workInProgressRootFatalError;
	      stopInterruptedWorkLoopTimer();
	      prepareFreshStack(root, expirationTime);
	      markRootSuspendedAtTime(root, expirationTime);
	      ensureRootIsScheduled(root);
	      throw fatalError;
	    }

	    if (workInProgress !== null) {
	      // This is a sync render, so we should have finished the whole tree.
	      {
	        {
	          throw Error( "Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue." );
	        }
	      }
	    } else {
	      // We now have a consistent tree. Because this is a sync render, we
	      // will commit it even if something suspended.
	      stopFinishedWorkLoopTimer();
	      root.finishedWork = root.current.alternate;
	      root.finishedExpirationTime = expirationTime;
	      finishSyncRender(root);
	    } // Before exiting, make sure there's a callback scheduled for the next
	    // pending level.


	    ensureRootIsScheduled(root);
	  }

	  return null;
	}

	function finishSyncRender(root) {
	  // Set this to null to indicate there's no in-progress render.
	  workInProgressRoot = null;
	  commitRoot(root);
	}
	function flushDiscreteUpdates() {
	  // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
	  // However, `act` uses `batchedUpdates`, so there's no way to distinguish
	  // those two cases. Need to fix this before exposing flushDiscreteUpdates
	  // as a public API.
	  if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
	    {
	      if ((executionContext & RenderContext) !== NoContext) {
	        error('unstable_flushDiscreteUpdates: Cannot flush updates when React is ' + 'already rendering.');
	      }
	    } // We're already rendering, so we can't synchronously flush pending work.
	    // This is probably a nested event dispatch triggered by a lifecycle/effect,
	    // like `el.focus()`. Exit.


	    return;
	  }

	  flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
	  // they fire before the next serial event.

	  flushPassiveEffects();
	}
	function syncUpdates(fn, a, b, c) {
	  return runWithPriority$1(ImmediatePriority, fn.bind(null, a, b, c));
	}

	function flushPendingDiscreteUpdates() {
	  if (rootsWithPendingDiscreteUpdates !== null) {
	    // For each root with pending discrete updates, schedule a callback to
	    // immediately flush them.
	    var roots = rootsWithPendingDiscreteUpdates;
	    rootsWithPendingDiscreteUpdates = null;
	    roots.forEach(function (expirationTime, root) {
	      markRootExpiredAtTime(root, expirationTime);
	      ensureRootIsScheduled(root);
	    }); // Now flush the immediate queue.

	    flushSyncCallbackQueue();
	  }
	}

	function batchedUpdates$1(fn, a) {
	  var prevExecutionContext = executionContext;
	  executionContext |= BatchedContext;

	  try {
	    return fn(a);
	  } finally {
	    executionContext = prevExecutionContext;

	    if (executionContext === NoContext) {
	      // Flush the immediate callbacks that were scheduled during this batch
	      flushSyncCallbackQueue();
	    }
	  }
	}
	function batchedEventUpdates$1(fn, a) {
	  var prevExecutionContext = executionContext;
	  executionContext |= EventContext;

	  try {
	    return fn(a);
	  } finally {
	    executionContext = prevExecutionContext;

	    if (executionContext === NoContext) {
	      // Flush the immediate callbacks that were scheduled during this batch
	      flushSyncCallbackQueue();
	    }
	  }
	}
	function discreteUpdates$1(fn, a, b, c, d) {
	  var prevExecutionContext = executionContext;
	  executionContext |= DiscreteEventContext;

	  try {
	    // Should this
	    return runWithPriority$1(UserBlockingPriority$1, fn.bind(null, a, b, c, d));
	  } finally {
	    executionContext = prevExecutionContext;

	    if (executionContext === NoContext) {
	      // Flush the immediate callbacks that were scheduled during this batch
	      flushSyncCallbackQueue();
	    }
	  }
	}
	function unbatchedUpdates(fn, a) {
	  var prevExecutionContext = executionContext;
	  executionContext &= ~BatchedContext;
	  executionContext |= LegacyUnbatchedContext;

	  try {
	    return fn(a);
	  } finally {
	    executionContext = prevExecutionContext;

	    if (executionContext === NoContext) {
	      // Flush the immediate callbacks that were scheduled during this batch
	      flushSyncCallbackQueue();
	    }
	  }
	}
	function flushSync(fn, a) {
	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    {
	      {
	        throw Error( "flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering." );
	      }
	    }
	  }

	  var prevExecutionContext = executionContext;
	  executionContext |= BatchedContext;

	  try {
	    return runWithPriority$1(ImmediatePriority, fn.bind(null, a));
	  } finally {
	    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
	    // Note that this will happen even if batchedUpdates is higher up
	    // the stack.

	    flushSyncCallbackQueue();
	  }
	}

	function prepareFreshStack(root, expirationTime) {
	  root.finishedWork = null;
	  root.finishedExpirationTime = NoWork;
	  var timeoutHandle = root.timeoutHandle;

	  if (timeoutHandle !== noTimeout) {
	    // The root previous suspended and scheduled a timeout to commit a fallback
	    // state. Now that we have additional work, cancel the timeout.
	    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

	    cancelTimeout(timeoutHandle);
	  }

	  if (workInProgress !== null) {
	    var interruptedWork = workInProgress.return;

	    while (interruptedWork !== null) {
	      unwindInterruptedWork(interruptedWork);
	      interruptedWork = interruptedWork.return;
	    }
	  }

	  workInProgressRoot = root;
	  workInProgress = createWorkInProgress(root.current, null);
	  renderExpirationTime$1 = expirationTime;
	  workInProgressRootExitStatus = RootIncomplete;
	  workInProgressRootFatalError = null;
	  workInProgressRootLatestProcessedExpirationTime = Sync;
	  workInProgressRootLatestSuspenseTimeout = Sync;
	  workInProgressRootCanSuspendUsingConfig = null;
	  workInProgressRootNextUnprocessedUpdateTime = NoWork;
	  workInProgressRootHasPendingPing = false;

	  {
	    spawnedWorkDuringRender = null;
	  }

	  {
	    ReactStrictModeWarnings.discardPendingWarnings();
	  }
	}

	function handleError(root, thrownValue) {
	  do {
	    try {
	      // Reset module-level state that was set during the render phase.
	      resetContextDependencies();
	      resetHooksAfterThrow();
	      resetCurrentFiber();

	      if (workInProgress === null || workInProgress.return === null) {
	        // Expected to be working on a non-root fiber. This is a fatal error
	        // because there's no ancestor that can handle it; the root is
	        // supposed to capture all errors that weren't caught by an error
	        // boundary.
	        workInProgressRootExitStatus = RootFatalErrored;
	        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
	        // sibling, or the parent if there are no siblings. But since the root
	        // has no siblings nor a parent, we set it to null. Usually this is
	        // handled by `completeUnitOfWork` or `unwindWork`, but since we're
	        // interntionally not calling those, we need set it here.
	        // TODO: Consider calling `unwindWork` to pop the contexts.

	        workInProgress = null;
	        return null;
	      }

	      if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
	        // Record the time spent rendering before an error was thrown. This
	        // avoids inaccurate Profiler durations in the case of a
	        // suspended render.
	        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
	      }

	      throwException(root, workInProgress.return, workInProgress, thrownValue, renderExpirationTime$1);
	      workInProgress = completeUnitOfWork(workInProgress);
	    } catch (yetAnotherThrownValue) {
	      // Something in the return path also threw.
	      thrownValue = yetAnotherThrownValue;
	      continue;
	    } // Return to the normal work loop.


	    return;
	  } while (true);
	}

	function pushDispatcher(root) {
	  var prevDispatcher = ReactCurrentDispatcher$1.current;
	  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

	  if (prevDispatcher === null) {
	    // The React isomorphic package does not include a default dispatcher.
	    // Instead the first renderer will lazily attach one, in order to give
	    // nicer error messages.
	    return ContextOnlyDispatcher;
	  } else {
	    return prevDispatcher;
	  }
	}

	function popDispatcher(prevDispatcher) {
	  ReactCurrentDispatcher$1.current = prevDispatcher;
	}

	function pushInteractions(root) {
	  {
	    var prevInteractions = tracing$1.__interactionsRef.current;
	    tracing$1.__interactionsRef.current = root.memoizedInteractions;
	    return prevInteractions;
	  }
	}

	function popInteractions(prevInteractions) {
	  {
	    tracing$1.__interactionsRef.current = prevInteractions;
	  }
	}

	function markCommitTimeOfFallback() {
	  globalMostRecentFallbackTime = now();
	}
	function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
	  if (expirationTime < workInProgressRootLatestProcessedExpirationTime && expirationTime > Idle) {
	    workInProgressRootLatestProcessedExpirationTime = expirationTime;
	  }

	  if (suspenseConfig !== null) {
	    if (expirationTime < workInProgressRootLatestSuspenseTimeout && expirationTime > Idle) {
	      workInProgressRootLatestSuspenseTimeout = expirationTime; // Most of the time we only have one config and getting wrong is not bad.

	      workInProgressRootCanSuspendUsingConfig = suspenseConfig;
	    }
	  }
	}
	function markUnprocessedUpdateTime(expirationTime) {
	  if (expirationTime > workInProgressRootNextUnprocessedUpdateTime) {
	    workInProgressRootNextUnprocessedUpdateTime = expirationTime;
	  }
	}
	function renderDidSuspend() {
	  if (workInProgressRootExitStatus === RootIncomplete) {
	    workInProgressRootExitStatus = RootSuspended;
	  }
	}
	function renderDidSuspendDelayIfPossible() {
	  if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
	    workInProgressRootExitStatus = RootSuspendedWithDelay;
	  } // Check if there's a lower priority update somewhere else in the tree.


	  if (workInProgressRootNextUnprocessedUpdateTime !== NoWork && workInProgressRoot !== null) {
	    // Mark the current render as suspended, and then mark that there's a
	    // pending update.
	    // TODO: This should immediately interrupt the current render, instead
	    // of waiting until the next time we yield.
	    markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime$1);
	    markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime);
	  }
	}
	function renderDidError() {
	  if (workInProgressRootExitStatus !== RootCompleted) {
	    workInProgressRootExitStatus = RootErrored;
	  }
	} // Called during render to determine if anything has suspended.
	// Returns false if we're not sure.

	function renderHasNotSuspendedYet() {
	  // If something errored or completed, we can't really be sure,
	  // so those are false.
	  return workInProgressRootExitStatus === RootIncomplete;
	}

	function inferTimeFromExpirationTime(expirationTime) {
	  // We don't know exactly when the update was scheduled, but we can infer an
	  // approximate start time from the expiration time.
	  var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
	  return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
	}

	function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
	  // We don't know exactly when the update was scheduled, but we can infer an
	  // approximate start time from the expiration time by subtracting the timeout
	  // that was added to the event time.
	  var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
	  return earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
	} // The work loop is an extremely hot path. Tell Closure not to inline it.

	/** @noinline */


	function workLoopSync() {
	  // Already timed out, so perform work without checking if we need to yield.
	  while (workInProgress !== null) {
	    workInProgress = performUnitOfWork(workInProgress);
	  }
	}
	/** @noinline */


	function workLoopConcurrent() {
	  // Perform work until Scheduler asks us to yield
	  while (workInProgress !== null && !shouldYield()) {
	    workInProgress = performUnitOfWork(workInProgress);
	  }
	}

	function performUnitOfWork(unitOfWork) {
	  // The current, flushed, state of this fiber is the alternate. Ideally
	  // nothing should rely on this, but relying on it here means that we don't
	  // need an additional field on the work in progress.
	  var current = unitOfWork.alternate;
	  startWorkTimer(unitOfWork);
	  setCurrentFiber(unitOfWork);
	  var next;

	  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {
	    startProfilerTimer(unitOfWork);
	    next = beginWork$1(current, unitOfWork, renderExpirationTime$1);
	    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
	  } else {
	    next = beginWork$1(current, unitOfWork, renderExpirationTime$1);
	  }

	  resetCurrentFiber();
	  unitOfWork.memoizedProps = unitOfWork.pendingProps;

	  if (next === null) {
	    // If this doesn't spawn new work, complete the current work.
	    next = completeUnitOfWork(unitOfWork);
	  }

	  ReactCurrentOwner$2.current = null;
	  return next;
	}

	function completeUnitOfWork(unitOfWork) {
	  // Attempt to complete the current unit of work, then move to the next
	  // sibling. If there are no more siblings, return to the parent fiber.
	  workInProgress = unitOfWork;

	  do {
	    // The current, flushed, state of this fiber is the alternate. Ideally
	    // nothing should rely on this, but relying on it here means that we don't
	    // need an additional field on the work in progress.
	    var current = workInProgress.alternate;
	    var returnFiber = workInProgress.return; // Check if the work completed or if something threw.

	    if ((workInProgress.effectTag & Incomplete) === NoEffect) {
	      setCurrentFiber(workInProgress);
	      var next = void 0;

	      if ( (workInProgress.mode & ProfileMode) === NoMode) {
	        next = completeWork(current, workInProgress, renderExpirationTime$1);
	      } else {
	        startProfilerTimer(workInProgress);
	        next = completeWork(current, workInProgress, renderExpirationTime$1); // Update render duration assuming we didn't error.

	        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
	      }

	      stopWorkTimer(workInProgress);
	      resetCurrentFiber();
	      resetChildExpirationTime(workInProgress);

	      if (next !== null) {
	        // Completing this fiber spawned new work. Work on that next.
	        return next;
	      }

	      if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
	      (returnFiber.effectTag & Incomplete) === NoEffect) {
	        // Append all the effects of the subtree and this fiber onto the effect
	        // list of the parent. The completion order of the children affects the
	        // side-effect order.
	        if (returnFiber.firstEffect === null) {
	          returnFiber.firstEffect = workInProgress.firstEffect;
	        }

	        if (workInProgress.lastEffect !== null) {
	          if (returnFiber.lastEffect !== null) {
	            returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
	          }

	          returnFiber.lastEffect = workInProgress.lastEffect;
	        } // If this fiber had side-effects, we append it AFTER the children's
	        // side-effects. We can perform certain side-effects earlier if needed,
	        // by doing multiple passes over the effect list. We don't want to
	        // schedule our own side-effect on our own list because if end up
	        // reusing children we'll schedule this effect onto itself since we're
	        // at the end.


	        var effectTag = workInProgress.effectTag; // Skip both NoWork and PerformedWork tags when creating the effect
	        // list. PerformedWork effect is read by React DevTools but shouldn't be
	        // committed.

	        if (effectTag > PerformedWork) {
	          if (returnFiber.lastEffect !== null) {
	            returnFiber.lastEffect.nextEffect = workInProgress;
	          } else {
	            returnFiber.firstEffect = workInProgress;
	          }

	          returnFiber.lastEffect = workInProgress;
	        }
	      }
	    } else {
	      // This fiber did not complete because something threw. Pop values off
	      // the stack without entering the complete phase. If this is a boundary,
	      // capture values if possible.
	      var _next = unwindWork(workInProgress); // Because this fiber did not complete, don't reset its expiration time.


	      if ( (workInProgress.mode & ProfileMode) !== NoMode) {
	        // Record the render duration for the fiber that errored.
	        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false); // Include the time spent working on failed children before continuing.

	        var actualDuration = workInProgress.actualDuration;
	        var child = workInProgress.child;

	        while (child !== null) {
	          actualDuration += child.actualDuration;
	          child = child.sibling;
	        }

	        workInProgress.actualDuration = actualDuration;
	      }

	      if (_next !== null) {
	        // If completing this work spawned new work, do that next. We'll come
	        // back here again.
	        // Since we're restarting, remove anything that is not a host effect
	        // from the effect tag.
	        // TODO: The name stopFailedWorkTimer is misleading because Suspense
	        // also captures and restarts.
	        stopFailedWorkTimer(workInProgress);
	        _next.effectTag &= HostEffectMask;
	        return _next;
	      }

	      stopWorkTimer(workInProgress);

	      if (returnFiber !== null) {
	        // Mark the parent fiber as incomplete and clear its effect list.
	        returnFiber.firstEffect = returnFiber.lastEffect = null;
	        returnFiber.effectTag |= Incomplete;
	      }
	    }

	    var siblingFiber = workInProgress.sibling;

	    if (siblingFiber !== null) {
	      // If there is more work to do in this returnFiber, do that next.
	      return siblingFiber;
	    } // Otherwise, return to the parent


	    workInProgress = returnFiber;
	  } while (workInProgress !== null); // We've reached the root.


	  if (workInProgressRootExitStatus === RootIncomplete) {
	    workInProgressRootExitStatus = RootCompleted;
	  }

	  return null;
	}

	function getRemainingExpirationTime(fiber) {
	  var updateExpirationTime = fiber.expirationTime;
	  var childExpirationTime = fiber.childExpirationTime;
	  return updateExpirationTime > childExpirationTime ? updateExpirationTime : childExpirationTime;
	}

	function resetChildExpirationTime(completedWork) {
	  if (renderExpirationTime$1 !== Never && completedWork.childExpirationTime === Never) {
	    // The children of this component are hidden. Don't bubble their
	    // expiration times.
	    return;
	  }

	  var newChildExpirationTime = NoWork; // Bubble up the earliest expiration time.

	  if ( (completedWork.mode & ProfileMode) !== NoMode) {
	    // In profiling mode, resetChildExpirationTime is also used to reset
	    // profiler durations.
	    var actualDuration = completedWork.actualDuration;
	    var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
	    // only be updated if work is done on the fiber (i.e. it doesn't bailout).
	    // When work is done, it should bubble to the parent's actualDuration. If
	    // the fiber has not been cloned though, (meaning no work was done), then
	    // this value will reflect the amount of time spent working on a previous
	    // render. In that case it should not bubble. We determine whether it was
	    // cloned by comparing the child pointer.

	    var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
	    var child = completedWork.child;

	    while (child !== null) {
	      var childUpdateExpirationTime = child.expirationTime;
	      var childChildExpirationTime = child.childExpirationTime;

	      if (childUpdateExpirationTime > newChildExpirationTime) {
	        newChildExpirationTime = childUpdateExpirationTime;
	      }

	      if (childChildExpirationTime > newChildExpirationTime) {
	        newChildExpirationTime = childChildExpirationTime;
	      }

	      if (shouldBubbleActualDurations) {
	        actualDuration += child.actualDuration;
	      }

	      treeBaseDuration += child.treeBaseDuration;
	      child = child.sibling;
	    }

	    completedWork.actualDuration = actualDuration;
	    completedWork.treeBaseDuration = treeBaseDuration;
	  } else {
	    var _child = completedWork.child;

	    while (_child !== null) {
	      var _childUpdateExpirationTime = _child.expirationTime;
	      var _childChildExpirationTime = _child.childExpirationTime;

	      if (_childUpdateExpirationTime > newChildExpirationTime) {
	        newChildExpirationTime = _childUpdateExpirationTime;
	      }

	      if (_childChildExpirationTime > newChildExpirationTime) {
	        newChildExpirationTime = _childChildExpirationTime;
	      }

	      _child = _child.sibling;
	    }
	  }

	  completedWork.childExpirationTime = newChildExpirationTime;
	}

	function commitRoot(root) {
	  var renderPriorityLevel = getCurrentPriorityLevel();
	  runWithPriority$1(ImmediatePriority, commitRootImpl.bind(null, root, renderPriorityLevel));
	  return null;
	}

	function commitRootImpl(root, renderPriorityLevel) {
	  do {
	    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
	    // means `flushPassiveEffects` will sometimes result in additional
	    // passive effects. So we need to keep flushing in a loop until there are
	    // no more pending effects.
	    // TODO: Might be better if `flushPassiveEffects` did not automatically
	    // flush synchronous work at the end, to avoid factoring hazards like this.
	    flushPassiveEffects();
	  } while (rootWithPendingPassiveEffects !== null);

	  flushRenderPhaseStrictModeWarningsInDEV();

	  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
	    {
	      throw Error( "Should not already be working." );
	    }
	  }

	  var finishedWork = root.finishedWork;
	  var expirationTime = root.finishedExpirationTime;

	  if (finishedWork === null) {
	    return null;
	  }

	  root.finishedWork = null;
	  root.finishedExpirationTime = NoWork;

	  if (!(finishedWork !== root.current)) {
	    {
	      throw Error( "Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  } // commitRoot never returns a continuation; it always finishes synchronously.
	  // So we can clear these now to allow a new callback to be scheduled.


	  root.callbackNode = null;
	  root.callbackExpirationTime = NoWork;
	  root.callbackPriority = NoPriority;
	  root.nextKnownPendingLevel = NoWork;
	  startCommitTimer(); // Update the first and last pending times on this root. The new first
	  // pending time is whatever is left on the root fiber.

	  var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
	  markRootFinishedAtTime(root, expirationTime, remainingExpirationTimeBeforeCommit);

	  if (root === workInProgressRoot) {
	    // We can reset these now that they are finished.
	    workInProgressRoot = null;
	    workInProgress = null;
	    renderExpirationTime$1 = NoWork;
	  } // This indicates that the last root we worked on is not the same one that
	  // we're committing now. This most commonly happens when a suspended root
	  // times out.
	  // Get the list of effects.


	  var firstEffect;

	  if (finishedWork.effectTag > PerformedWork) {
	    // A fiber's effect list consists only of its children, not itself. So if
	    // the root has an effect, we need to add it to the end of the list. The
	    // resulting list is the set that would belong to the root's parent, if it
	    // had one; that is, all the effects in the tree including the root.
	    if (finishedWork.lastEffect !== null) {
	      finishedWork.lastEffect.nextEffect = finishedWork;
	      firstEffect = finishedWork.firstEffect;
	    } else {
	      firstEffect = finishedWork;
	    }
	  } else {
	    // There is no effect on the root.
	    firstEffect = finishedWork.firstEffect;
	  }

	  if (firstEffect !== null) {
	    var prevExecutionContext = executionContext;
	    executionContext |= CommitContext;
	    var prevInteractions = pushInteractions(root); // Reset this to null before calling lifecycles

	    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
	    // of the effect list for each phase: all mutation effects come before all
	    // layout effects, and so on.
	    // The first phase a "before mutation" phase. We use this phase to read the
	    // state of the host tree right before we mutate it. This is where
	    // getSnapshotBeforeUpdate is called.

	    startCommitSnapshotEffectsTimer();
	    prepareForCommit(root.containerInfo);
	    nextEffect = firstEffect;

	    do {
	      {
	        invokeGuardedCallback(null, commitBeforeMutationEffects, null);

	        if (hasCaughtError()) {
	          if (!(nextEffect !== null)) {
	            {
	              throw Error( "Should be working on an effect." );
	            }
	          }

	          var error = clearCaughtError();
	          captureCommitPhaseError(nextEffect, error);
	          nextEffect = nextEffect.nextEffect;
	        }
	      }
	    } while (nextEffect !== null);

	    stopCommitSnapshotEffectsTimer();

	    {
	      // Mark the current commit time to be shared by all Profilers in this
	      // batch. This enables them to be grouped later.
	      recordCommitTime();
	    } // The next phase is the mutation phase, where we mutate the host tree.


	    startCommitHostEffectsTimer();
	    nextEffect = firstEffect;

	    do {
	      {
	        invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);

	        if (hasCaughtError()) {
	          if (!(nextEffect !== null)) {
	            {
	              throw Error( "Should be working on an effect." );
	            }
	          }

	          var _error = clearCaughtError();

	          captureCommitPhaseError(nextEffect, _error);
	          nextEffect = nextEffect.nextEffect;
	        }
	      }
	    } while (nextEffect !== null);

	    stopCommitHostEffectsTimer();
	    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
	    // the mutation phase, so that the previous tree is still current during
	    // componentWillUnmount, but before the layout phase, so that the finished
	    // work is current during componentDidMount/Update.

	    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
	    // the host tree after it's been mutated. The idiomatic use case for this is
	    // layout, but class component lifecycles also fire here for legacy reasons.

	    startCommitLifeCyclesTimer();
	    nextEffect = firstEffect;

	    do {
	      {
	        invokeGuardedCallback(null, commitLayoutEffects, null, root, expirationTime);

	        if (hasCaughtError()) {
	          if (!(nextEffect !== null)) {
	            {
	              throw Error( "Should be working on an effect." );
	            }
	          }

	          var _error2 = clearCaughtError();

	          captureCommitPhaseError(nextEffect, _error2);
	          nextEffect = nextEffect.nextEffect;
	        }
	      }
	    } while (nextEffect !== null);

	    stopCommitLifeCyclesTimer();
	    nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
	    // opportunity to paint.

	    requestPaint();

	    {
	      popInteractions(prevInteractions);
	    }

	    executionContext = prevExecutionContext;
	  } else {
	    // No effects.
	    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
	    // no effects.
	    // TODO: Maybe there's a better way to report this.

	    startCommitSnapshotEffectsTimer();
	    stopCommitSnapshotEffectsTimer();

	    {
	      recordCommitTime();
	    }

	    startCommitHostEffectsTimer();
	    stopCommitHostEffectsTimer();
	    startCommitLifeCyclesTimer();
	    stopCommitLifeCyclesTimer();
	  }

	  stopCommitTimer();
	  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

	  if (rootDoesHavePassiveEffects) {
	    // This commit has passive effects. Stash a reference to them. But don't
	    // schedule a callback until after flushing layout work.
	    rootDoesHavePassiveEffects = false;
	    rootWithPendingPassiveEffects = root;
	    pendingPassiveEffectsExpirationTime = expirationTime;
	    pendingPassiveEffectsRenderPriority = renderPriorityLevel;
	  } else {
	    // We are done with the effect chain at this point so let's clear the
	    // nextEffect pointers to assist with GC. If we have passive effects, we'll
	    // clear this in flushPassiveEffects.
	    nextEffect = firstEffect;

	    while (nextEffect !== null) {
	      var nextNextEffect = nextEffect.nextEffect;
	      nextEffect.nextEffect = null;
	      nextEffect = nextNextEffect;
	    }
	  } // Check if there's remaining work on this root


	  var remainingExpirationTime = root.firstPendingTime;

	  if (remainingExpirationTime !== NoWork) {
	    {
	      if (spawnedWorkDuringRender !== null) {
	        var expirationTimes = spawnedWorkDuringRender;
	        spawnedWorkDuringRender = null;

	        for (var i = 0; i < expirationTimes.length; i++) {
	          scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
	        }
	      }

	      schedulePendingInteractions(root, remainingExpirationTime);
	    }
	  } else {
	    // If there's no remaining work, we can clear the set of already failed
	    // error boundaries.
	    legacyErrorBoundariesThatAlreadyFailed = null;
	  }

	  {
	    if (!rootDidHavePassiveEffects) {
	      // If there are no passive effects, then we can complete the pending interactions.
	      // Otherwise, we'll wait until after the passive effects are flushed.
	      // Wait to do this until after remaining work has been scheduled,
	      // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
	      finishPendingInteractions(root, expirationTime);
	    }
	  }

	  if (remainingExpirationTime === Sync) {
	    // Count the number of times the root synchronously re-renders without
	    // finishing. If there are too many, it indicates an infinite update loop.
	    if (root === rootWithNestedUpdates) {
	      nestedUpdateCount++;
	    } else {
	      nestedUpdateCount = 0;
	      rootWithNestedUpdates = root;
	    }
	  } else {
	    nestedUpdateCount = 0;
	  }

	  onCommitRoot(finishedWork.stateNode, expirationTime); // Always call this before exiting `commitRoot`, to ensure that any
	  // additional work on this root is scheduled.

	  ensureRootIsScheduled(root);

	  if (hasUncaughtError) {
	    hasUncaughtError = false;
	    var _error3 = firstUncaughtError;
	    firstUncaughtError = null;
	    throw _error3;
	  }

	  if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
	    // This is a legacy edge case. We just committed the initial mount of
	    // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
	    // synchronously, but layout updates should be deferred until the end
	    // of the batch.
	    return null;
	  } // If layout work was scheduled, flush it now.


	  flushSyncCallbackQueue();
	  return null;
	}

	function commitBeforeMutationEffects() {
	  while (nextEffect !== null) {
	    var effectTag = nextEffect.effectTag;

	    if ((effectTag & Snapshot) !== NoEffect) {
	      setCurrentFiber(nextEffect);
	      recordEffect();
	      var current = nextEffect.alternate;
	      commitBeforeMutationLifeCycles(current, nextEffect);
	      resetCurrentFiber();
	    }

	    if ((effectTag & Passive) !== NoEffect) {
	      // If there are passive effects, schedule a callback to flush at
	      // the earliest opportunity.
	      if (!rootDoesHavePassiveEffects) {
	        rootDoesHavePassiveEffects = true;
	        scheduleCallback(NormalPriority, function () {
	          flushPassiveEffects();
	          return null;
	        });
	      }
	    }

	    nextEffect = nextEffect.nextEffect;
	  }
	}

	function commitMutationEffects(root, renderPriorityLevel) {
	  // TODO: Should probably move the bulk of this function to commitWork.
	  while (nextEffect !== null) {
	    setCurrentFiber(nextEffect);
	    var effectTag = nextEffect.effectTag;

	    if (effectTag & ContentReset) {
	      commitResetTextContent(nextEffect);
	    }

	    if (effectTag & Ref) {
	      var current = nextEffect.alternate;

	      if (current !== null) {
	        commitDetachRef(current);
	      }
	    } // The following switch statement is only concerned about placement,
	    // updates, and deletions. To avoid needing to add a case for every possible
	    // bitmap value, we remove the secondary effects from the effect tag and
	    // switch on that value.


	    var primaryEffectTag = effectTag & (Placement | Update | Deletion | Hydrating);

	    switch (primaryEffectTag) {
	      case Placement:
	        {
	          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
	          // inserted, before any life-cycles like componentDidMount gets called.
	          // TODO: findDOMNode doesn't rely on this any more but isMounted does
	          // and isMounted is deprecated anyway so we should be able to kill this.

	          nextEffect.effectTag &= ~Placement;
	          break;
	        }

	      case PlacementAndUpdate:
	        {
	          // Placement
	          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
	          // inserted, before any life-cycles like componentDidMount gets called.

	          nextEffect.effectTag &= ~Placement; // Update

	          var _current = nextEffect.alternate;
	          commitWork(_current, nextEffect);
	          break;
	        }

	      case Hydrating:
	        {
	          nextEffect.effectTag &= ~Hydrating;
	          break;
	        }

	      case HydratingAndUpdate:
	        {
	          nextEffect.effectTag &= ~Hydrating; // Update

	          var _current2 = nextEffect.alternate;
	          commitWork(_current2, nextEffect);
	          break;
	        }

	      case Update:
	        {
	          var _current3 = nextEffect.alternate;
	          commitWork(_current3, nextEffect);
	          break;
	        }

	      case Deletion:
	        {
	          commitDeletion(root, nextEffect, renderPriorityLevel);
	          break;
	        }
	    } // TODO: Only record a mutation effect if primaryEffectTag is non-zero.


	    recordEffect();
	    resetCurrentFiber();
	    nextEffect = nextEffect.nextEffect;
	  }
	}

	function commitLayoutEffects(root, committedExpirationTime) {
	  // TODO: Should probably move the bulk of this function to commitWork.
	  while (nextEffect !== null) {
	    setCurrentFiber(nextEffect);
	    var effectTag = nextEffect.effectTag;

	    if (effectTag & (Update | Callback)) {
	      recordEffect();
	      var current = nextEffect.alternate;
	      commitLifeCycles(root, current, nextEffect);
	    }

	    if (effectTag & Ref) {
	      recordEffect();
	      commitAttachRef(nextEffect);
	    }

	    resetCurrentFiber();
	    nextEffect = nextEffect.nextEffect;
	  }
	}

	function flushPassiveEffects() {
	  if (pendingPassiveEffectsRenderPriority !== NoPriority) {
	    var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority ? NormalPriority : pendingPassiveEffectsRenderPriority;
	    pendingPassiveEffectsRenderPriority = NoPriority;
	    return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
	  }
	}

	function flushPassiveEffectsImpl() {
	  if (rootWithPendingPassiveEffects === null) {
	    return false;
	  }

	  var root = rootWithPendingPassiveEffects;
	  var expirationTime = pendingPassiveEffectsExpirationTime;
	  rootWithPendingPassiveEffects = null;
	  pendingPassiveEffectsExpirationTime = NoWork;

	  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
	    {
	      throw Error( "Cannot flush passive effects while already rendering." );
	    }
	  }

	  var prevExecutionContext = executionContext;
	  executionContext |= CommitContext;
	  var prevInteractions = pushInteractions(root);

	  {
	    // Note: This currently assumes there are no passive effects on the root fiber
	    // because the root is not part of its own effect list.
	    // This could change in the future.
	    var _effect2 = root.current.firstEffect;

	    while (_effect2 !== null) {
	      {
	        setCurrentFiber(_effect2);
	        invokeGuardedCallback(null, commitPassiveHookEffects, null, _effect2);

	        if (hasCaughtError()) {
	          if (!(_effect2 !== null)) {
	            {
	              throw Error( "Should be working on an effect." );
	            }
	          }

	          var _error5 = clearCaughtError();

	          captureCommitPhaseError(_effect2, _error5);
	        }

	        resetCurrentFiber();
	      }

	      var nextNextEffect = _effect2.nextEffect; // Remove nextEffect pointer to assist GC

	      _effect2.nextEffect = null;
	      _effect2 = nextNextEffect;
	    }
	  }

	  {
	    popInteractions(prevInteractions);
	    finishPendingInteractions(root, expirationTime);
	  }

	  executionContext = prevExecutionContext;
	  flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
	  // exceeds the limit, we'll fire a warning.

	  nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
	  return true;
	}

	function isAlreadyFailedLegacyErrorBoundary(instance) {
	  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
	}
	function markLegacyErrorBoundaryAsFailed(instance) {
	  if (legacyErrorBoundariesThatAlreadyFailed === null) {
	    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
	  } else {
	    legacyErrorBoundariesThatAlreadyFailed.add(instance);
	  }
	}

	function prepareToThrowUncaughtError(error) {
	  if (!hasUncaughtError) {
	    hasUncaughtError = true;
	    firstUncaughtError = error;
	  }
	}

	var onUncaughtError = prepareToThrowUncaughtError;

	function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
	  var errorInfo = createCapturedValue(error, sourceFiber);
	  var update = createRootErrorUpdate(rootFiber, errorInfo, Sync);
	  enqueueUpdate(rootFiber, update);
	  var root = markUpdateTimeFromFiberToRoot(rootFiber, Sync);

	  if (root !== null) {
	    ensureRootIsScheduled(root);
	    schedulePendingInteractions(root, Sync);
	  }
	}

	function captureCommitPhaseError(sourceFiber, error) {
	  if (sourceFiber.tag === HostRoot) {
	    // Error was thrown at the root. There is no parent, so the root
	    // itself should capture it.
	    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
	    return;
	  }

	  var fiber = sourceFiber.return;

	  while (fiber !== null) {
	    if (fiber.tag === HostRoot) {
	      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
	      return;
	    } else if (fiber.tag === ClassComponent) {
	      var ctor = fiber.type;
	      var instance = fiber.stateNode;

	      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
	        var errorInfo = createCapturedValue(error, sourceFiber);
	        var update = createClassErrorUpdate(fiber, errorInfo, // TODO: This is always sync
	        Sync);
	        enqueueUpdate(fiber, update);
	        var root = markUpdateTimeFromFiberToRoot(fiber, Sync);

	        if (root !== null) {
	          ensureRootIsScheduled(root);
	          schedulePendingInteractions(root, Sync);
	        }

	        return;
	      }
	    }

	    fiber = fiber.return;
	  }
	}
	function pingSuspendedRoot(root, thenable, suspendedTime) {
	  var pingCache = root.pingCache;

	  if (pingCache !== null) {
	    // The thenable resolved, so we no longer need to memoize, because it will
	    // never be thrown again.
	    pingCache.delete(thenable);
	  }

	  if (workInProgressRoot === root && renderExpirationTime$1 === suspendedTime) {
	    // Received a ping at the same priority level at which we're currently
	    // rendering. We might want to restart this render. This should mirror
	    // the logic of whether or not a root suspends once it completes.
	    // TODO: If we're rendering sync either due to Sync, Batched or expired,
	    // we should probably never restart.
	    // If we're suspended with delay, we'll always suspend so we can always
	    // restart. If we're suspended without any updates, it might be a retry.
	    // If it's early in the retry we can restart. We can't know for sure
	    // whether we'll eventually process an update during this render pass,
	    // but it's somewhat unlikely that we get to a ping before that, since
	    // getting to the root most update is usually very fast.
	    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && workInProgressRootLatestProcessedExpirationTime === Sync && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
	      // Restart from the root. Don't need to schedule a ping because
	      // we're already working on this tree.
	      prepareFreshStack(root, renderExpirationTime$1);
	    } else {
	      // Even though we can't restart right now, we might get an
	      // opportunity later. So we mark this render as having a ping.
	      workInProgressRootHasPendingPing = true;
	    }

	    return;
	  }

	  if (!isRootSuspendedAtTime(root, suspendedTime)) {
	    // The root is no longer suspended at this time.
	    return;
	  }

	  var lastPingedTime = root.lastPingedTime;

	  if (lastPingedTime !== NoWork && lastPingedTime < suspendedTime) {
	    // There's already a lower priority ping scheduled.
	    return;
	  } // Mark the time at which this ping was scheduled.


	  root.lastPingedTime = suspendedTime;

	  ensureRootIsScheduled(root);
	  schedulePendingInteractions(root, suspendedTime);
	}

	function retryTimedOutBoundary(boundaryFiber, retryTime) {
	  // The boundary fiber (a Suspense component or SuspenseList component)
	  // previously was rendered in its fallback state. One of the promises that
	  // suspended it has resolved, which means at least part of the tree was
	  // likely unblocked. Try rendering again, at a new expiration time.
	  if (retryTime === NoWork) {
	    var suspenseConfig = null; // Retries don't carry over the already committed update.

	    var currentTime = requestCurrentTimeForUpdate();
	    retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
	  } // TODO: Special case idle priority?


	  var root = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);

	  if (root !== null) {
	    ensureRootIsScheduled(root);
	    schedulePendingInteractions(root, retryTime);
	  }
	}
	function resolveRetryThenable(boundaryFiber, thenable) {
	  var retryTime = NoWork; // Default

	  var retryCache;

	  {
	    retryCache = boundaryFiber.stateNode;
	  }

	  if (retryCache !== null) {
	    // The thenable resolved, so we no longer need to memoize, because it will
	    // never be thrown again.
	    retryCache.delete(thenable);
	  }

	  retryTimedOutBoundary(boundaryFiber, retryTime);
	} // Computes the next Just Noticeable Difference (JND) boundary.
	// The theory is that a person can't tell the difference between small differences in time.
	// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
	// difference in the experience. However, waiting for longer might mean that we can avoid
	// showing an intermediate loading state. The longer we have already waited, the harder it
	// is to tell small differences in time. Therefore, the longer we've already waited,
	// the longer we can wait additionally. At some point we have to give up though.
	// We pick a train model where the next boundary commits at a consistent schedule.
	// These particular numbers are vague estimates. We expect to adjust them based on research.

	function jnd(timeElapsed) {
	  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
	}

	function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime, committedExpirationTime, suspenseConfig) {
	  var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;

	  if (busyMinDurationMs <= 0) {
	    return 0;
	  }

	  var busyDelayMs = suspenseConfig.busyDelayMs | 0; // Compute the time until this render pass would expire.

	  var currentTimeMs = now();
	  var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime, suspenseConfig);
	  var timeElapsed = currentTimeMs - eventTimeMs;

	  if (timeElapsed <= busyDelayMs) {
	    // If we haven't yet waited longer than the initial delay, we don't
	    // have to wait any additional time.
	    return 0;
	  }

	  var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed; // This is the value that is passed to `setTimeout`.

	  return msUntilTimeout;
	}

	function checkForNestedUpdates() {
	  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
	    nestedUpdateCount = 0;
	    rootWithNestedUpdates = null;

	    {
	      {
	        throw Error( "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops." );
	      }
	    }
	  }

	  {
	    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
	      nestedPassiveUpdateCount = 0;

	      error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
	    }
	  }
	}

	function flushRenderPhaseStrictModeWarningsInDEV() {
	  {
	    ReactStrictModeWarnings.flushLegacyContextWarning();

	    {
	      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
	    }
	  }
	}

	function stopFinishedWorkLoopTimer() {
	  var didCompleteRoot = true;
	  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
	  interruptedBy = null;
	}

	function stopInterruptedWorkLoopTimer() {
	  // TODO: Track which fiber caused the interruption.
	  var didCompleteRoot = false;
	  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
	  interruptedBy = null;
	}

	function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) {
	  if ( workInProgressRoot !== null && updateExpirationTime > renderExpirationTime$1) {
	    interruptedBy = fiberThatReceivedUpdate;
	  }
	}

	var didWarnStateUpdateForUnmountedComponent = null;

	function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
	  {
	    var tag = fiber.tag;

	    if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
	      // Only warn for user-defined components, not internal ones like Suspense.
	      return;
	    }
	    // the problematic code almost always lies inside that component.


	    var componentName = getComponentName(fiber.type) || 'ReactComponent';

	    if (didWarnStateUpdateForUnmountedComponent !== null) {
	      if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
	        return;
	      }

	      didWarnStateUpdateForUnmountedComponent.add(componentName);
	    } else {
	      didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
	    }

	    error("Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.%s', tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function', getStackByFiberInDevAndProd(fiber));
	  }
	}

	var beginWork$1;

	{
	  var dummyFiber = null;

	  beginWork$1 = function (current, unitOfWork, expirationTime) {
	    // If a component throws an error, we replay it again in a synchronously
	    // dispatched event, so that the debugger will treat it as an uncaught
	    // error See ReactErrorUtils for more information.
	    // Before entering the begin phase, copy the work-in-progress onto a dummy
	    // fiber. If beginWork throws, we'll use this to reset the state.
	    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

	    try {
	      return beginWork(current, unitOfWork, expirationTime);
	    } catch (originalError) {
	      if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
	        // Don't replay promises. Treat everything else like an error.
	        throw originalError;
	      } // Keep this code in sync with handleError; any changes here must have
	      // corresponding changes there.


	      resetContextDependencies();
	      resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
	      // same fiber again.
	      // Unwind the failed stack frame

	      unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.

	      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

	      if ( unitOfWork.mode & ProfileMode) {
	        // Reset the profiler timer.
	        startProfilerTimer(unitOfWork);
	      } // Run beginWork again.


	      invokeGuardedCallback(null, beginWork, null, current, unitOfWork, expirationTime);

	      if (hasCaughtError()) {
	        var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
	        // Rethrow this error instead of the original one.

	        throw replayError;
	      } else {
	        // This branch is reachable if the render phase is impure.
	        throw originalError;
	      }
	    }
	  };
	}

	var didWarnAboutUpdateInRender = false;
	var didWarnAboutUpdateInRenderForAnotherComponent;

	{
	  didWarnAboutUpdateInRenderForAnotherComponent = new Set();
	}

	function warnAboutRenderPhaseUpdatesInDEV(fiber) {
	  {
	    if (isRendering && (executionContext & RenderContext) !== NoContext) {
	      switch (fiber.tag) {
	        case FunctionComponent:
	        case ForwardRef:
	        case SimpleMemoComponent:
	          {
	            var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.

	            var dedupeKey = renderingComponentName;

	            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
	              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
	              var setStateComponentName = getComponentName(fiber.type) || 'Unknown';

	              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://fb.me/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
	            }

	            break;
	          }

	        case ClassComponent:
	          {
	            if (!didWarnAboutUpdateInRender) {
	              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');

	              didWarnAboutUpdateInRender = true;
	            }

	            break;
	          }
	      }
	    }
	  }
	} // a 'shared' variable that changes when act() opens/closes in tests.


	var IsThisRendererActing = {
	  current: false
	};
	function warnIfNotScopedWithMatchingAct(fiber) {
	  {
	    if ( IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
	      error("It looks like you're using the wrong act() around your test interactions.\n" + 'Be sure to use the matching version of act() corresponding to your renderer:\n\n' + '// for react-dom:\n' + "import {act} from 'react-dom/test-utils';\n" + '// ...\n' + 'act(() => ...);\n\n' + '// for react-test-renderer:\n' + "import TestRenderer from 'react-test-renderer';\n" + 'const {act} = TestRenderer;\n' + '// ...\n' + 'act(() => ...);' + '%s', getStackByFiberInDevAndProd(fiber));
	    }
	  }
	}
	function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
	  {
	    if ( (fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
	      error('An update to %s ran an effect, but was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
	    }
	  }
	}

	function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
	  {
	    if ( executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
	      error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
	    }
	  }
	}

	var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.

	var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
	// scheduler is the actual recommendation. The alternative could be a testing build,
	// a new lib, or whatever; we dunno just yet. This message is for early adopters
	// to get their tests right.

	function warnIfUnmockedScheduler(fiber) {
	  {
	    if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
	      if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
	        didWarnAboutUnmockedScheduler = true;

	        error('In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' + "jest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://fb.me/react-mock-scheduler');
	      }
	    }
	  }
	}

	function computeThreadID(root, expirationTime) {
	  // Interaction threads are unique per root and expiration time.
	  return expirationTime * 1000 + root.interactionThreadID;
	}

	function markSpawnedWork(expirationTime) {

	  if (spawnedWorkDuringRender === null) {
	    spawnedWorkDuringRender = [expirationTime];
	  } else {
	    spawnedWorkDuringRender.push(expirationTime);
	  }
	}

	function scheduleInteractions(root, expirationTime, interactions) {

	  if (interactions.size > 0) {
	    var pendingInteractionMap = root.pendingInteractionMap;
	    var pendingInteractions = pendingInteractionMap.get(expirationTime);

	    if (pendingInteractions != null) {
	      interactions.forEach(function (interaction) {
	        if (!pendingInteractions.has(interaction)) {
	          // Update the pending async work count for previously unscheduled interaction.
	          interaction.__count++;
	        }

	        pendingInteractions.add(interaction);
	      });
	    } else {
	      pendingInteractionMap.set(expirationTime, new Set(interactions)); // Update the pending async work count for the current interactions.

	      interactions.forEach(function (interaction) {
	        interaction.__count++;
	      });
	    }

	    var subscriber = tracing$1.__subscriberRef.current;

	    if (subscriber !== null) {
	      var threadID = computeThreadID(root, expirationTime);
	      subscriber.onWorkScheduled(interactions, threadID);
	    }
	  }
	}

	function schedulePendingInteractions(root, expirationTime) {

	  scheduleInteractions(root, expirationTime, tracing$1.__interactionsRef.current);
	}

	function startWorkOnPendingInteractions(root, expirationTime) {
	  // we can accurately attribute time spent working on it, And so that cascading
	  // work triggered during the render phase will be associated with it.


	  var interactions = new Set();
	  root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
	    if (scheduledExpirationTime >= expirationTime) {
	      scheduledInteractions.forEach(function (interaction) {
	        return interactions.add(interaction);
	      });
	    }
	  }); // Store the current set of interactions on the FiberRoot for a few reasons:
	  // We can re-use it in hot functions like performConcurrentWorkOnRoot()
	  // without having to recalculate it. We will also use it in commitWork() to
	  // pass to any Profiler onRender() hooks. This also provides DevTools with a
	  // way to access it when the onCommitRoot() hook is called.

	  root.memoizedInteractions = interactions;

	  if (interactions.size > 0) {
	    var subscriber = tracing$1.__subscriberRef.current;

	    if (subscriber !== null) {
	      var threadID = computeThreadID(root, expirationTime);

	      try {
	        subscriber.onWorkStarted(interactions, threadID);
	      } catch (error) {
	        // If the subscriber throws, rethrow it in a separate task
	        scheduleCallback(ImmediatePriority, function () {
	          throw error;
	        });
	      }
	    }
	  }
	}

	function finishPendingInteractions(root, committedExpirationTime) {

	  var earliestRemainingTimeAfterCommit = root.firstPendingTime;
	  var subscriber;

	  try {
	    subscriber = tracing$1.__subscriberRef.current;

	    if (subscriber !== null && root.memoizedInteractions.size > 0) {
	      var threadID = computeThreadID(root, committedExpirationTime);
	      subscriber.onWorkStopped(root.memoizedInteractions, threadID);
	    }
	  } catch (error) {
	    // If the subscriber throws, rethrow it in a separate task
	    scheduleCallback(ImmediatePriority, function () {
	      throw error;
	    });
	  } finally {
	    // Clear completed interactions from the pending Map.
	    // Unless the render was suspended or cascading work was scheduled,
	    // In which case– leave pending interactions until the subsequent render.
	    var pendingInteractionMap = root.pendingInteractionMap;
	    pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
	      // Only decrement the pending interaction count if we're done.
	      // If there's still work at the current priority,
	      // That indicates that we are waiting for suspense data.
	      if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
	        pendingInteractionMap.delete(scheduledExpirationTime);
	        scheduledInteractions.forEach(function (interaction) {
	          interaction.__count--;

	          if (subscriber !== null && interaction.__count === 0) {
	            try {
	              subscriber.onInteractionScheduledWorkCompleted(interaction);
	            } catch (error) {
	              // If the subscriber throws, rethrow it in a separate task
	              scheduleCallback(ImmediatePriority, function () {
	                throw error;
	              });
	            }
	          }
	        });
	      }
	    });
	  }
	}

	var onScheduleFiberRoot = null;
	var onCommitFiberRoot = null;
	var onCommitFiberUnmount = null;
	var hasLoggedError = false;
	var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
	function injectInternals(internals) {
	  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	    // No DevTools
	    return false;
	  }

	  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

	  if (hook.isDisabled) {
	    // This isn't a real property on the hook, but it can be set to opt out
	    // of DevTools integration and associated warnings and logs.
	    // https://github.com/facebook/react/issues/3877
	    return true;
	  }

	  if (!hook.supportsFiber) {
	    {
	      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
	    } // DevTools exists, even though it doesn't support Fiber.


	    return true;
	  }

	  try {
	    var rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

	    if (true) {
	      // Only used by Fast Refresh
	      if (typeof hook.onScheduleFiberRoot === 'function') {
	        onScheduleFiberRoot = function (root, children) {
	          try {
	            hook.onScheduleFiberRoot(rendererID, root, children);
	          } catch (err) {
	            if (true && !hasLoggedError) {
	              hasLoggedError = true;

	              error('React instrumentation encountered an error: %s', err);
	            }
	          }
	        };
	      }
	    }

	    onCommitFiberRoot = function (root, expirationTime) {
	      try {
	        var didError = (root.current.effectTag & DidCapture) === DidCapture;

	        if (enableProfilerTimer) {
	          var currentTime = getCurrentTime();
	          var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
	          hook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
	        } else {
	          hook.onCommitFiberRoot(rendererID, root, undefined, didError);
	        }
	      } catch (err) {
	        if (true) {
	          if (!hasLoggedError) {
	            hasLoggedError = true;

	            error('React instrumentation encountered an error: %s', err);
	          }
	        }
	      }
	    };

	    onCommitFiberUnmount = function (fiber) {
	      try {
	        hook.onCommitFiberUnmount(rendererID, fiber);
	      } catch (err) {
	        if (true) {
	          if (!hasLoggedError) {
	            hasLoggedError = true;

	            error('React instrumentation encountered an error: %s', err);
	          }
	        }
	      }
	    };
	  } catch (err) {
	    // Catch all errors because it is unsafe to throw during initialization.
	    {
	      error('React instrumentation encountered an error: %s.', err);
	    }
	  } // DevTools exists


	  return true;
	}
	function onScheduleRoot(root, children) {
	  if (typeof onScheduleFiberRoot === 'function') {
	    onScheduleFiberRoot(root, children);
	  }
	}
	function onCommitRoot(root, expirationTime) {
	  if (typeof onCommitFiberRoot === 'function') {
	    onCommitFiberRoot(root, expirationTime);
	  }
	}
	function onCommitUnmount(fiber) {
	  if (typeof onCommitFiberUnmount === 'function') {
	    onCommitFiberUnmount(fiber);
	  }
	}

	var hasBadMapPolyfill;

	{
	  hasBadMapPolyfill = false;

	  try {
	    var nonExtensibleObject = Object.preventExtensions({});
	    var testMap = new Map([[nonExtensibleObject, null]]);
	    var testSet = new Set([nonExtensibleObject]); // This is necessary for Rollup to not consider these unused.
	    // https://github.com/rollup/rollup/issues/1771
	    // TODO: we can remove these if Rollup fixes the bug.

	    testMap.set(0, 0);
	    testSet.add(0);
	  } catch (e) {
	    // TODO: Consider warning about bad polyfills
	    hasBadMapPolyfill = true;
	  }
	}

	var debugCounter = 1;

	function FiberNode(tag, pendingProps, key, mode) {
	  // Instance
	  this.tag = tag;
	  this.key = key;
	  this.elementType = null;
	  this.type = null;
	  this.stateNode = null; // Fiber

	  this.return = null;
	  this.child = null;
	  this.sibling = null;
	  this.index = 0;
	  this.ref = null;
	  this.pendingProps = pendingProps;
	  this.memoizedProps = null;
	  this.updateQueue = null;
	  this.memoizedState = null;
	  this.dependencies = null;
	  this.mode = mode; // Effects

	  this.effectTag = NoEffect;
	  this.nextEffect = null;
	  this.firstEffect = null;
	  this.lastEffect = null;
	  this.expirationTime = NoWork;
	  this.childExpirationTime = NoWork;
	  this.alternate = null;

	  {
	    // Note: The following is done to avoid a v8 performance cliff.
	    //
	    // Initializing the fields below to smis and later updating them with
	    // double values will cause Fibers to end up having separate shapes.
	    // This behavior/bug has something to do with Object.preventExtension().
	    // Fortunately this only impacts DEV builds.
	    // Unfortunately it makes React unusably slow for some applications.
	    // To work around this, initialize the fields below with doubles.
	    //
	    // Learn more about this here:
	    // https://github.com/facebook/react/issues/14365
	    // https://bugs.chromium.org/p/v8/issues/detail?id=8538
	    this.actualDuration = Number.NaN;
	    this.actualStartTime = Number.NaN;
	    this.selfBaseDuration = Number.NaN;
	    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
	    // This won't trigger the performance cliff mentioned above,
	    // and it simplifies other profiler code (including DevTools).

	    this.actualDuration = 0;
	    this.actualStartTime = -1;
	    this.selfBaseDuration = 0;
	    this.treeBaseDuration = 0;
	  } // This is normally DEV-only except www when it adds listeners.
	  // TODO: remove the User Timing integration in favor of Root Events.


	  {
	    this._debugID = debugCounter++;
	    this._debugIsCurrentlyTiming = false;
	  }

	  {
	    this._debugSource = null;
	    this._debugOwner = null;
	    this._debugNeedsRemount = false;
	    this._debugHookTypes = null;

	    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
	      Object.preventExtensions(this);
	    }
	  }
	} // This is a constructor function, rather than a POJO constructor, still
	// please ensure we do the following:
	// 1) Nobody should add any instance methods on this. Instance methods can be
	//    more difficult to predict when they get optimized and they are almost
	//    never inlined properly in static compilers.
	// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
	//    always know when it is a fiber.
	// 3) We might want to experiment with using numeric keys since they are easier
	//    to optimize in a non-JIT environment.
	// 4) We can easily go from a constructor to a createFiber object literal if that
	//    is faster.
	// 5) It should be easy to port this to a C struct and keep a C implementation
	//    compatible.


	var createFiber = function (tag, pendingProps, key, mode) {
	  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
	  return new FiberNode(tag, pendingProps, key, mode);
	};

	function shouldConstruct(Component) {
	  var prototype = Component.prototype;
	  return !!(prototype && prototype.isReactComponent);
	}

	function isSimpleFunctionComponent(type) {
	  return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;
	}
	function resolveLazyComponentTag(Component) {
	  if (typeof Component === 'function') {
	    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
	  } else if (Component !== undefined && Component !== null) {
	    var $$typeof = Component.$$typeof;

	    if ($$typeof === REACT_FORWARD_REF_TYPE) {
	      return ForwardRef;
	    }

	    if ($$typeof === REACT_MEMO_TYPE) {
	      return MemoComponent;
	    }
	  }

	  return IndeterminateComponent;
	} // This is used to create an alternate fiber to do work on.

	function createWorkInProgress(current, pendingProps) {
	  var workInProgress = current.alternate;

	  if (workInProgress === null) {
	    // We use a double buffering pooling technique because we know that we'll
	    // only ever need at most two versions of a tree. We pool the "other" unused
	    // node that we're free to reuse. This is lazily created to avoid allocating
	    // extra objects for things that are never updated. It also allow us to
	    // reclaim the extra memory if needed.
	    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
	    workInProgress.elementType = current.elementType;
	    workInProgress.type = current.type;
	    workInProgress.stateNode = current.stateNode;

	    {
	      // DEV-only fields
	      {
	        workInProgress._debugID = current._debugID;
	      }

	      workInProgress._debugSource = current._debugSource;
	      workInProgress._debugOwner = current._debugOwner;
	      workInProgress._debugHookTypes = current._debugHookTypes;
	    }

	    workInProgress.alternate = current;
	    current.alternate = workInProgress;
	  } else {
	    workInProgress.pendingProps = pendingProps; // We already have an alternate.
	    // Reset the effect tag.

	    workInProgress.effectTag = NoEffect; // The effect list is no longer valid.

	    workInProgress.nextEffect = null;
	    workInProgress.firstEffect = null;
	    workInProgress.lastEffect = null;

	    {
	      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
	      // This prevents time from endlessly accumulating in new commits.
	      // This has the downside of resetting values for different priority renders,
	      // But works for yielding (the common case) and should support resuming.
	      workInProgress.actualDuration = 0;
	      workInProgress.actualStartTime = -1;
	    }
	  }

	  workInProgress.childExpirationTime = current.childExpirationTime;
	  workInProgress.expirationTime = current.expirationTime;
	  workInProgress.child = current.child;
	  workInProgress.memoizedProps = current.memoizedProps;
	  workInProgress.memoizedState = current.memoizedState;
	  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
	  // it cannot be shared with the current fiber.

	  var currentDependencies = current.dependencies;
	  workInProgress.dependencies = currentDependencies === null ? null : {
	    expirationTime: currentDependencies.expirationTime,
	    firstContext: currentDependencies.firstContext,
	    responders: currentDependencies.responders
	  }; // These will be overridden during the parent's reconciliation

	  workInProgress.sibling = current.sibling;
	  workInProgress.index = current.index;
	  workInProgress.ref = current.ref;

	  {
	    workInProgress.selfBaseDuration = current.selfBaseDuration;
	    workInProgress.treeBaseDuration = current.treeBaseDuration;
	  }

	  {
	    workInProgress._debugNeedsRemount = current._debugNeedsRemount;

	    switch (workInProgress.tag) {
	      case IndeterminateComponent:
	      case FunctionComponent:
	      case SimpleMemoComponent:
	        workInProgress.type = resolveFunctionForHotReloading(current.type);
	        break;

	      case ClassComponent:
	        workInProgress.type = resolveClassForHotReloading(current.type);
	        break;

	      case ForwardRef:
	        workInProgress.type = resolveForwardRefForHotReloading(current.type);
	        break;
	    }
	  }

	  return workInProgress;
	} // Used to reuse a Fiber for a second pass.

	function resetWorkInProgress(workInProgress, renderExpirationTime) {
	  // This resets the Fiber to what createFiber or createWorkInProgress would
	  // have set the values to before during the first pass. Ideally this wouldn't
	  // be necessary but unfortunately many code paths reads from the workInProgress
	  // when they should be reading from current and writing to workInProgress.
	  // We assume pendingProps, index, key, ref, return are still untouched to
	  // avoid doing another reconciliation.
	  // Reset the effect tag but keep any Placement tags, since that's something
	  // that child fiber is setting, not the reconciliation.
	  workInProgress.effectTag &= Placement; // The effect list is no longer valid.

	  workInProgress.nextEffect = null;
	  workInProgress.firstEffect = null;
	  workInProgress.lastEffect = null;
	  var current = workInProgress.alternate;

	  if (current === null) {
	    // Reset to createFiber's initial values.
	    workInProgress.childExpirationTime = NoWork;
	    workInProgress.expirationTime = renderExpirationTime;
	    workInProgress.child = null;
	    workInProgress.memoizedProps = null;
	    workInProgress.memoizedState = null;
	    workInProgress.updateQueue = null;
	    workInProgress.dependencies = null;

	    {
	      // Note: We don't reset the actualTime counts. It's useful to accumulate
	      // actual time across multiple render passes.
	      workInProgress.selfBaseDuration = 0;
	      workInProgress.treeBaseDuration = 0;
	    }
	  } else {
	    // Reset to the cloned values that createWorkInProgress would've.
	    workInProgress.childExpirationTime = current.childExpirationTime;
	    workInProgress.expirationTime = current.expirationTime;
	    workInProgress.child = current.child;
	    workInProgress.memoizedProps = current.memoizedProps;
	    workInProgress.memoizedState = current.memoizedState;
	    workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
	    // it cannot be shared with the current fiber.

	    var currentDependencies = current.dependencies;
	    workInProgress.dependencies = currentDependencies === null ? null : {
	      expirationTime: currentDependencies.expirationTime,
	      firstContext: currentDependencies.firstContext,
	      responders: currentDependencies.responders
	    };

	    {
	      // Note: We don't reset the actualTime counts. It's useful to accumulate
	      // actual time across multiple render passes.
	      workInProgress.selfBaseDuration = current.selfBaseDuration;
	      workInProgress.treeBaseDuration = current.treeBaseDuration;
	    }
	  }

	  return workInProgress;
	}
	function createHostRootFiber(tag) {
	  var mode;

	  if (tag === ConcurrentRoot) {
	    mode = ConcurrentMode | BlockingMode | StrictMode;
	  } else if (tag === BlockingRoot) {
	    mode = BlockingMode | StrictMode;
	  } else {
	    mode = NoMode;
	  }

	  if ( isDevToolsPresent) {
	    // Always collect profile timings when DevTools are present.
	    // This enables DevTools to start capturing timing at any point–
	    // Without some nodes in the tree having empty base times.
	    mode |= ProfileMode;
	  }

	  return createFiber(HostRoot, null, null, mode);
	}
	function createFiberFromTypeAndProps(type, // React$ElementType
	key, pendingProps, owner, mode, expirationTime) {
	  var fiber;
	  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

	  var resolvedType = type;

	  if (typeof type === 'function') {
	    if (shouldConstruct(type)) {
	      fiberTag = ClassComponent;

	      {
	        resolvedType = resolveClassForHotReloading(resolvedType);
	      }
	    } else {
	      {
	        resolvedType = resolveFunctionForHotReloading(resolvedType);
	      }
	    }
	  } else if (typeof type === 'string') {
	    fiberTag = HostComponent;
	  } else {
	    getTag: switch (type) {
	      case REACT_FRAGMENT_TYPE:
	        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

	      case REACT_CONCURRENT_MODE_TYPE:
	        fiberTag = Mode;
	        mode |= ConcurrentMode | BlockingMode | StrictMode;
	        break;

	      case REACT_STRICT_MODE_TYPE:
	        fiberTag = Mode;
	        mode |= StrictMode;
	        break;

	      case REACT_PROFILER_TYPE:
	        return createFiberFromProfiler(pendingProps, mode, expirationTime, key);

	      case REACT_SUSPENSE_TYPE:
	        return createFiberFromSuspense(pendingProps, mode, expirationTime, key);

	      case REACT_SUSPENSE_LIST_TYPE:
	        return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key);

	      default:
	        {
	          if (typeof type === 'object' && type !== null) {
	            switch (type.$$typeof) {
	              case REACT_PROVIDER_TYPE:
	                fiberTag = ContextProvider;
	                break getTag;

	              case REACT_CONTEXT_TYPE:
	                // This is a consumer
	                fiberTag = ContextConsumer;
	                break getTag;

	              case REACT_FORWARD_REF_TYPE:
	                fiberTag = ForwardRef;

	                {
	                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
	                }

	                break getTag;

	              case REACT_MEMO_TYPE:
	                fiberTag = MemoComponent;
	                break getTag;

	              case REACT_LAZY_TYPE:
	                fiberTag = LazyComponent;
	                resolvedType = null;
	                break getTag;

	              case REACT_BLOCK_TYPE:
	                fiberTag = Block;
	                break getTag;

	            }
	          }

	          var info = '';

	          {
	            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
	            }

	            var ownerName = owner ? getComponentName(owner.type) : null;

	            if (ownerName) {
	              info += '\n\nCheck the render method of `' + ownerName + '`.';
	            }
	          }

	          {
	            {
	              throw Error( "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info );
	            }
	          }
	        }
	    }
	  }

	  fiber = createFiber(fiberTag, pendingProps, key, mode);
	  fiber.elementType = type;
	  fiber.type = resolvedType;
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}
	function createFiberFromElement(element, mode, expirationTime) {
	  var owner = null;

	  {
	    owner = element._owner;
	  }

	  var type = element.type;
	  var key = element.key;
	  var pendingProps = element.props;
	  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);

	  {
	    fiber._debugSource = element._source;
	    fiber._debugOwner = element._owner;
	  }

	  return fiber;
	}
	function createFiberFromFragment(elements, mode, expirationTime, key) {
	  var fiber = createFiber(Fragment, elements, key, mode);
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}

	function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
	  {
	    if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
	      error('Profiler must specify an "id" string and "onRender" function as props');
	    }
	  }

	  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.

	  fiber.elementType = REACT_PROFILER_TYPE;
	  fiber.type = REACT_PROFILER_TYPE;
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}

	function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
	  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
	  // This needs to be fixed in getComponentName so that it relies on the tag
	  // instead.

	  fiber.type = REACT_SUSPENSE_TYPE;
	  fiber.elementType = REACT_SUSPENSE_TYPE;
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}
	function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key) {
	  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);

	  {
	    // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
	    // This needs to be fixed in getComponentName so that it relies on the tag
	    // instead.
	    fiber.type = REACT_SUSPENSE_LIST_TYPE;
	  }

	  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}
	function createFiberFromText(content, mode, expirationTime) {
	  var fiber = createFiber(HostText, content, null, mode);
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}
	function createFiberFromHostInstanceForDeletion() {
	  var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.

	  fiber.elementType = 'DELETED';
	  fiber.type = 'DELETED';
	  return fiber;
	}
	function createFiberFromPortal(portal, mode, expirationTime) {
	  var pendingProps = portal.children !== null ? portal.children : [];
	  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
	  fiber.expirationTime = expirationTime;
	  fiber.stateNode = {
	    containerInfo: portal.containerInfo,
	    pendingChildren: null,
	    // Used by persistent updates
	    implementation: portal.implementation
	  };
	  return fiber;
	} // Used for stashing WIP properties to replay failed work in DEV.

	function assignFiberPropertiesInDEV(target, source) {
	  if (target === null) {
	    // This Fiber's initial properties will always be overwritten.
	    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
	    target = createFiber(IndeterminateComponent, null, null, NoMode);
	  } // This is intentionally written as a list of all properties.
	  // We tried to use Object.assign() instead but this is called in
	  // the hottest path, and Object.assign() was too slow:
	  // https://github.com/facebook/react/issues/12502
	  // This code is DEV-only so size is not a concern.


	  target.tag = source.tag;
	  target.key = source.key;
	  target.elementType = source.elementType;
	  target.type = source.type;
	  target.stateNode = source.stateNode;
	  target.return = source.return;
	  target.child = source.child;
	  target.sibling = source.sibling;
	  target.index = source.index;
	  target.ref = source.ref;
	  target.pendingProps = source.pendingProps;
	  target.memoizedProps = source.memoizedProps;
	  target.updateQueue = source.updateQueue;
	  target.memoizedState = source.memoizedState;
	  target.dependencies = source.dependencies;
	  target.mode = source.mode;
	  target.effectTag = source.effectTag;
	  target.nextEffect = source.nextEffect;
	  target.firstEffect = source.firstEffect;
	  target.lastEffect = source.lastEffect;
	  target.expirationTime = source.expirationTime;
	  target.childExpirationTime = source.childExpirationTime;
	  target.alternate = source.alternate;

	  {
	    target.actualDuration = source.actualDuration;
	    target.actualStartTime = source.actualStartTime;
	    target.selfBaseDuration = source.selfBaseDuration;
	    target.treeBaseDuration = source.treeBaseDuration;
	  }

	  {
	    target._debugID = source._debugID;
	  }

	  target._debugSource = source._debugSource;
	  target._debugOwner = source._debugOwner;
	  target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
	  target._debugNeedsRemount = source._debugNeedsRemount;
	  target._debugHookTypes = source._debugHookTypes;
	  return target;
	}

	function FiberRootNode(containerInfo, tag, hydrate) {
	  this.tag = tag;
	  this.current = null;
	  this.containerInfo = containerInfo;
	  this.pendingChildren = null;
	  this.pingCache = null;
	  this.finishedExpirationTime = NoWork;
	  this.finishedWork = null;
	  this.timeoutHandle = noTimeout;
	  this.context = null;
	  this.pendingContext = null;
	  this.hydrate = hydrate;
	  this.callbackNode = null;
	  this.callbackPriority = NoPriority;
	  this.firstPendingTime = NoWork;
	  this.firstSuspendedTime = NoWork;
	  this.lastSuspendedTime = NoWork;
	  this.nextKnownPendingLevel = NoWork;
	  this.lastPingedTime = NoWork;
	  this.lastExpiredTime = NoWork;

	  {
	    this.interactionThreadID = tracing$1.unstable_getThreadID();
	    this.memoizedInteractions = new Set();
	    this.pendingInteractionMap = new Map();
	  }
	}

	function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
	  var root = new FiberRootNode(containerInfo, tag, hydrate);
	  // stateNode is any.


	  var uninitializedFiber = createHostRootFiber(tag);
	  root.current = uninitializedFiber;
	  uninitializedFiber.stateNode = root;
	  initializeUpdateQueue(uninitializedFiber);
	  return root;
	}
	function isRootSuspendedAtTime(root, expirationTime) {
	  var firstSuspendedTime = root.firstSuspendedTime;
	  var lastSuspendedTime = root.lastSuspendedTime;
	  return firstSuspendedTime !== NoWork && firstSuspendedTime >= expirationTime && lastSuspendedTime <= expirationTime;
	}
	function markRootSuspendedAtTime(root, expirationTime) {
	  var firstSuspendedTime = root.firstSuspendedTime;
	  var lastSuspendedTime = root.lastSuspendedTime;

	  if (firstSuspendedTime < expirationTime) {
	    root.firstSuspendedTime = expirationTime;
	  }

	  if (lastSuspendedTime > expirationTime || firstSuspendedTime === NoWork) {
	    root.lastSuspendedTime = expirationTime;
	  }

	  if (expirationTime <= root.lastPingedTime) {
	    root.lastPingedTime = NoWork;
	  }

	  if (expirationTime <= root.lastExpiredTime) {
	    root.lastExpiredTime = NoWork;
	  }
	}
	function markRootUpdatedAtTime(root, expirationTime) {
	  // Update the range of pending times
	  var firstPendingTime = root.firstPendingTime;

	  if (expirationTime > firstPendingTime) {
	    root.firstPendingTime = expirationTime;
	  } // Update the range of suspended times. Treat everything lower priority or
	  // equal to this update as unsuspended.


	  var firstSuspendedTime = root.firstSuspendedTime;

	  if (firstSuspendedTime !== NoWork) {
	    if (expirationTime >= firstSuspendedTime) {
	      // The entire suspended range is now unsuspended.
	      root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
	    } else if (expirationTime >= root.lastSuspendedTime) {
	      root.lastSuspendedTime = expirationTime + 1;
	    } // This is a pending level. Check if it's higher priority than the next
	    // known pending level.


	    if (expirationTime > root.nextKnownPendingLevel) {
	      root.nextKnownPendingLevel = expirationTime;
	    }
	  }
	}
	function markRootFinishedAtTime(root, finishedExpirationTime, remainingExpirationTime) {
	  // Update the range of pending times
	  root.firstPendingTime = remainingExpirationTime; // Update the range of suspended times. Treat everything higher priority or
	  // equal to this update as unsuspended.

	  if (finishedExpirationTime <= root.lastSuspendedTime) {
	    // The entire suspended range is now unsuspended.
	    root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
	  } else if (finishedExpirationTime <= root.firstSuspendedTime) {
	    // Part of the suspended range is now unsuspended. Narrow the range to
	    // include everything between the unsuspended time (non-inclusive) and the
	    // last suspended time.
	    root.firstSuspendedTime = finishedExpirationTime - 1;
	  }

	  if (finishedExpirationTime <= root.lastPingedTime) {
	    // Clear the pinged time
	    root.lastPingedTime = NoWork;
	  }

	  if (finishedExpirationTime <= root.lastExpiredTime) {
	    // Clear the expired time
	    root.lastExpiredTime = NoWork;
	  }
	}
	function markRootExpiredAtTime(root, expirationTime) {
	  var lastExpiredTime = root.lastExpiredTime;

	  if (lastExpiredTime === NoWork || lastExpiredTime > expirationTime) {
	    root.lastExpiredTime = expirationTime;
	  }
	}

	var didWarnAboutNestedUpdates;
	var didWarnAboutFindNodeInStrictMode;

	{
	  didWarnAboutNestedUpdates = false;
	  didWarnAboutFindNodeInStrictMode = {};
	}

	function getContextForSubtree(parentComponent) {
	  if (!parentComponent) {
	    return emptyContextObject;
	  }

	  var fiber = get(parentComponent);
	  var parentContext = findCurrentUnmaskedContext(fiber);

	  if (fiber.tag === ClassComponent) {
	    var Component = fiber.type;

	    if (isContextProvider(Component)) {
	      return processChildContext(fiber, Component, parentContext);
	    }
	  }

	  return parentContext;
	}

	function findHostInstanceWithWarning(component, methodName) {
	  {
	    var fiber = get(component);

	    if (fiber === undefined) {
	      if (typeof component.render === 'function') {
	        {
	          {
	            throw Error( "Unable to find node on an unmounted component." );
	          }
	        }
	      } else {
	        {
	          {
	            throw Error( "Argument appears to not be a ReactComponent. Keys: " + Object.keys(component) );
	          }
	        }
	      }
	    }

	    var hostFiber = findCurrentHostFiber(fiber);

	    if (hostFiber === null) {
	      return null;
	    }

	    if (hostFiber.mode & StrictMode) {
	      var componentName = getComponentName(fiber.type) || 'Component';

	      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
	        didWarnAboutFindNodeInStrictMode[componentName] = true;

	        if (fiber.mode & StrictMode) {
	          error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
	        } else {
	          error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
	        }
	      }
	    }

	    return hostFiber.stateNode;
	  }
	}

	function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
	  return createFiberRoot(containerInfo, tag, hydrate);
	}
	function updateContainer(element, container, parentComponent, callback) {
	  {
	    onScheduleRoot(container, element);
	  }

	  var current$1 = container.current;
	  var currentTime = requestCurrentTimeForUpdate();

	  {
	    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
	    if ('undefined' !== typeof jest) {
	      warnIfUnmockedScheduler(current$1);
	      warnIfNotScopedWithMatchingAct(current$1);
	    }
	  }

	  var suspenseConfig = requestCurrentSuspenseConfig();
	  var expirationTime = computeExpirationForFiber(currentTime, current$1, suspenseConfig);
	  var context = getContextForSubtree(parentComponent);

	  if (container.context === null) {
	    container.context = context;
	  } else {
	    container.pendingContext = context;
	  }

	  {
	    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
	      didWarnAboutNestedUpdates = true;

	      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
	    }
	  }

	  var update = createUpdate(expirationTime, suspenseConfig); // Caution: React DevTools currently depends on this property
	  // being called "element".

	  update.payload = {
	    element: element
	  };
	  callback = callback === undefined ? null : callback;

	  if (callback !== null) {
	    {
	      if (typeof callback !== 'function') {
	        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
	      }
	    }

	    update.callback = callback;
	  }

	  enqueueUpdate(current$1, update);
	  scheduleWork(current$1, expirationTime);
	  return expirationTime;
	}
	function getPublicRootInstance(container) {
	  var containerFiber = container.current;

	  if (!containerFiber.child) {
	    return null;
	  }

	  switch (containerFiber.child.tag) {
	    case HostComponent:
	      return getPublicInstance(containerFiber.child.stateNode);

	    default:
	      return containerFiber.child.stateNode;
	  }
	}

	function markRetryTimeImpl(fiber, retryTime) {
	  var suspenseState = fiber.memoizedState;

	  if (suspenseState !== null && suspenseState.dehydrated !== null) {
	    if (suspenseState.retryTime < retryTime) {
	      suspenseState.retryTime = retryTime;
	    }
	  }
	} // Increases the priority of thennables when they resolve within this boundary.


	function markRetryTimeIfNotHydrated(fiber, retryTime) {
	  markRetryTimeImpl(fiber, retryTime);
	  var alternate = fiber.alternate;

	  if (alternate) {
	    markRetryTimeImpl(alternate, retryTime);
	  }
	}

	function attemptUserBlockingHydration$1(fiber) {
	  if (fiber.tag !== SuspenseComponent) {
	    // We ignore HostRoots here because we can't increase
	    // their priority and they should not suspend on I/O,
	    // since you have to wrap anything that might suspend in
	    // Suspense.
	    return;
	  }

	  var expTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
	  scheduleWork(fiber, expTime);
	  markRetryTimeIfNotHydrated(fiber, expTime);
	}
	function attemptContinuousHydration$1(fiber) {
	  if (fiber.tag !== SuspenseComponent) {
	    // We ignore HostRoots here because we can't increase
	    // their priority and they should not suspend on I/O,
	    // since you have to wrap anything that might suspend in
	    // Suspense.
	    return;
	  }

	  scheduleWork(fiber, ContinuousHydration);
	  markRetryTimeIfNotHydrated(fiber, ContinuousHydration);
	}
	function attemptHydrationAtCurrentPriority$1(fiber) {
	  if (fiber.tag !== SuspenseComponent) {
	    // We ignore HostRoots here because we can't increase
	    // their priority other than synchronously flush it.
	    return;
	  }

	  var currentTime = requestCurrentTimeForUpdate();
	  var expTime = computeExpirationForFiber(currentTime, fiber, null);
	  scheduleWork(fiber, expTime);
	  markRetryTimeIfNotHydrated(fiber, expTime);
	}
	function findHostInstanceWithNoPortals(fiber) {
	  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

	  if (hostFiber === null) {
	    return null;
	  }

	  if (hostFiber.tag === FundamentalComponent) {
	    return hostFiber.stateNode.instance;
	  }

	  return hostFiber.stateNode;
	}

	var shouldSuspendImpl = function (fiber) {
	  return false;
	};

	function shouldSuspend(fiber) {
	  return shouldSuspendImpl(fiber);
	}
	var overrideHookState = null;
	var overrideProps = null;
	var scheduleUpdate = null;
	var setSuspenseHandler = null;

	{
	  var copyWithSetImpl = function (obj, path, idx, value) {
	    if (idx >= path.length) {
	      return value;
	    }

	    var key = path[idx];
	    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj); // $FlowFixMe number or string is fine here

	    updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
	    return updated;
	  };

	  var copyWithSet = function (obj, path, value) {
	    return copyWithSetImpl(obj, path, 0, value);
	  }; // Support DevTools editable values for useState and useReducer.


	  overrideHookState = function (fiber, id, path, value) {
	    // For now, the "id" of stateful hooks is just the stateful hook index.
	    // This may change in the future with e.g. nested hooks.
	    var currentHook = fiber.memoizedState;

	    while (currentHook !== null && id > 0) {
	      currentHook = currentHook.next;
	      id--;
	    }

	    if (currentHook !== null) {
	      var newState = copyWithSet(currentHook.memoizedState, path, value);
	      currentHook.memoizedState = newState;
	      currentHook.baseState = newState; // We aren't actually adding an update to the queue,
	      // because there is no update we can add for useReducer hooks that won't trigger an error.
	      // (There's no appropriate action type for DevTools overrides.)
	      // As a result though, React will see the scheduled update as a noop and bailout.
	      // Shallow cloning props works as a workaround for now to bypass the bailout check.

	      fiber.memoizedProps = _assign({}, fiber.memoizedProps);
	      scheduleWork(fiber, Sync);
	    }
	  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


	  overrideProps = function (fiber, path, value) {
	    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

	    if (fiber.alternate) {
	      fiber.alternate.pendingProps = fiber.pendingProps;
	    }

	    scheduleWork(fiber, Sync);
	  };

	  scheduleUpdate = function (fiber) {
	    scheduleWork(fiber, Sync);
	  };

	  setSuspenseHandler = function (newShouldSuspendImpl) {
	    shouldSuspendImpl = newShouldSuspendImpl;
	  };
	}

	function injectIntoDevTools(devToolsConfig) {
	  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
	  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
	  return injectInternals(_assign({}, devToolsConfig, {
	    overrideHookState: overrideHookState,
	    overrideProps: overrideProps,
	    setSuspenseHandler: setSuspenseHandler,
	    scheduleUpdate: scheduleUpdate,
	    currentDispatcherRef: ReactCurrentDispatcher,
	    findHostInstanceByFiber: function (fiber) {
	      var hostFiber = findCurrentHostFiber(fiber);

	      if (hostFiber === null) {
	        return null;
	      }

	      return hostFiber.stateNode;
	    },
	    findFiberByHostInstance: function (instance) {
	      if (!findFiberByHostInstance) {
	        // Might not be implemented by the renderer.
	        return null;
	      }

	      return findFiberByHostInstance(instance);
	    },
	    // React Refresh
	    findHostInstancesForRefresh:  findHostInstancesForRefresh ,
	    scheduleRefresh:  scheduleRefresh ,
	    scheduleRoot:  scheduleRoot ,
	    setRefreshHandler:  setRefreshHandler ,
	    // Enables DevTools to append owner stacks to error messages in DEV mode.
	    getCurrentFiber:  function () {
	      return current;
	    } 
	  }));
	}
	var IsSomeRendererActing$1 = ReactSharedInternals.IsSomeRendererActing;

	function ReactDOMRoot(container, options) {
	  this._internalRoot = createRootImpl(container, ConcurrentRoot, options);
	}

	function ReactDOMBlockingRoot(container, tag, options) {
	  this._internalRoot = createRootImpl(container, tag, options);
	}

	ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function (children) {
	  var root = this._internalRoot;

	  {
	    if (typeof arguments[1] === 'function') {
	      error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
	    }

	    var container = root.containerInfo;

	    if (container.nodeType !== COMMENT_NODE) {
	      var hostInstance = findHostInstanceWithNoPortals(root.current);

	      if (hostInstance) {
	        if (hostInstance.parentNode !== container) {
	          error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + "root.unmount() to empty a root's container.");
	        }
	      }
	    }
	  }

	  updateContainer(children, root, null, null);
	};

	ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function () {
	  {
	    if (typeof arguments[0] === 'function') {
	      error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
	    }
	  }

	  var root = this._internalRoot;
	  var container = root.containerInfo;
	  updateContainer(null, root, null, function () {
	    unmarkContainerAsRoot(container);
	  });
	};

	function createRootImpl(container, tag, options) {
	  // Tag is either LegacyRoot or Concurrent Root
	  var hydrate = options != null && options.hydrate === true;
	  var hydrationCallbacks = options != null && options.hydrationOptions || null;
	  var root = createContainer(container, tag, hydrate);
	  markContainerAsRoot(root.current, container);

	  if (hydrate && tag !== LegacyRoot) {
	    var doc = container.nodeType === DOCUMENT_NODE ? container : container.ownerDocument;
	    eagerlyTrapReplayableEvents(container, doc);
	  }

	  return root;
	}
	function createLegacyRoot(container, options) {
	  return new ReactDOMBlockingRoot(container, LegacyRoot, options);
	}
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
	}

	var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
	var topLevelUpdateWarnings;
	var warnedAboutHydrateAPI = false;

	{
	  topLevelUpdateWarnings = function (container) {
	    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
	      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);

	      if (hostInstance) {
	        if (hostInstance.parentNode !== container) {
	          error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
	        }
	      }
	    }

	    var isRootRenderedBySomeReact = !!container._reactRootContainer;
	    var rootEl = getReactRootElementInContainer(container);
	    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));

	    if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
	      error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
	    }

	    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
	      error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
	    }
	  };
	}

	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOCUMENT_NODE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	function shouldHydrateDueToLegacyHeuristic(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
	}

	function legacyCreateRootFromDOMContainer(container, forceHydrate) {
	  var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.

	  if (!shouldHydrate) {
	    var warned = false;
	    var rootSibling;

	    while (rootSibling = container.lastChild) {
	      {
	        if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
	          warned = true;

	          error('render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
	        }
	      }

	      container.removeChild(rootSibling);
	    }
	  }

	  {
	    if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
	      warnedAboutHydrateAPI = true;

	      warn('render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
	    }
	  }

	  return createLegacyRoot(container, shouldHydrate ? {
	    hydrate: true
	  } : undefined);
	}

	function warnOnInvalidCallback$1(callback, callerName) {
	  {
	    if (callback !== null && typeof callback !== 'function') {
	      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
	    }
	  }
	}

	function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
	  {
	    topLevelUpdateWarnings(container);
	    warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
	  } // TODO: Without `any` type, Flow says "Property cannot be accessed on any
	  // member of intersection type." Whyyyyyy.


	  var root = container._reactRootContainer;
	  var fiberRoot;

	  if (!root) {
	    // Initial mount
	    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
	    fiberRoot = root._internalRoot;

	    if (typeof callback === 'function') {
	      var originalCallback = callback;

	      callback = function () {
	        var instance = getPublicRootInstance(fiberRoot);
	        originalCallback.call(instance);
	      };
	    } // Initial mount should not be batched.


	    unbatchedUpdates(function () {
	      updateContainer(children, fiberRoot, parentComponent, callback);
	    });
	  } else {
	    fiberRoot = root._internalRoot;

	    if (typeof callback === 'function') {
	      var _originalCallback = callback;

	      callback = function () {
	        var instance = getPublicRootInstance(fiberRoot);

	        _originalCallback.call(instance);
	      };
	    } // Update


	    updateContainer(children, fiberRoot, parentComponent, callback);
	  }

	  return getPublicRootInstance(fiberRoot);
	}

	function findDOMNode(componentOrElement) {
	  {
	    var owner = ReactCurrentOwner$3.current;

	    if (owner !== null && owner.stateNode !== null) {
	      var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;

	      if (!warnedAboutRefsInRender) {
	        error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component');
	      }

	      owner.stateNode._warnedAboutRefsInRender = true;
	    }
	  }

	  if (componentOrElement == null) {
	    return null;
	  }

	  if (componentOrElement.nodeType === ELEMENT_NODE) {
	    return componentOrElement;
	  }

	  {
	    return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
	  }
	}
	function hydrate(element, container, callback) {
	  if (!isValidContainer(container)) {
	    {
	      throw Error( "Target container is not a DOM element." );
	    }
	  }

	  {
	    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

	    if (isModernRoot) {
	      error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call createRoot(container, {hydrate: true}).render(element)?');
	    }
	  } // TODO: throw or warn if we couldn't hydrate?


	  return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
	}
	function render(element, container, callback) {
	  if (!isValidContainer(container)) {
	    {
	      throw Error( "Target container is not a DOM element." );
	    }
	  }

	  {
	    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

	    if (isModernRoot) {
	      error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');
	    }
	  }

	  return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
	}
	function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
	  if (!isValidContainer(containerNode)) {
	    {
	      throw Error( "Target container is not a DOM element." );
	    }
	  }

	  if (!(parentComponent != null && has(parentComponent))) {
	    {
	      throw Error( "parentComponent must be a valid React Component" );
	    }
	  }

	  return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
	}
	function unmountComponentAtNode(container) {
	  if (!isValidContainer(container)) {
	    {
	      throw Error( "unmountComponentAtNode(...): Target container is not a DOM element." );
	    }
	  }

	  {
	    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

	    if (isModernRoot) {
	      error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?');
	    }
	  }

	  if (container._reactRootContainer) {
	    {
	      var rootEl = getReactRootElementInContainer(container);
	      var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);

	      if (renderedByDifferentReact) {
	        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
	      }
	    } // Unmount should not be batched.


	    unbatchedUpdates(function () {
	      legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
	        // $FlowFixMe This should probably use `delete container._reactRootContainer`
	        container._reactRootContainer = null;
	        unmarkContainerAsRoot(container);
	      });
	    }); // If you call unmountComponentAtNode twice in quick succession, you'll
	    // get `true` twice. That's probably fine?

	    return true;
	  } else {
	    {
	      var _rootEl = getReactRootElementInContainer(container);

	      var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl)); // Check if the container itself is a React root node.

	      var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;

	      if (hasNonRootReactChild) {
	        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
	      }
	    }

	    return false;
	  }
	}

	function createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
	implementation) {
	  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
	  return {
	    // This tag allow us to uniquely identify this as a React Portal
	    $$typeof: REACT_PORTAL_TYPE,
	    key: key == null ? null : '' + key,
	    children: children,
	    containerInfo: containerInfo,
	    implementation: implementation
	  };
	}

	var ReactVersion = '16.13.1';

	setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
	setAttemptContinuousHydration(attemptContinuousHydration$1);
	setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
	var didWarnAboutUnstableCreatePortal = false;

	{
	  if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
	  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
	  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
	    error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
	  }
	}

	setRestoreImplementation(restoreControlledState$3);
	setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);

	function createPortal$1(children, container) {
	  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

	  if (!isValidContainer(container)) {
	    {
	      throw Error( "Target container is not a DOM element." );
	    }
	  } // TODO: pass ReactDOM portal implementation as third argument
	  // $FlowFixMe The Flow type is opaque but there's no way to actually create it.


	  return createPortal(children, container, null, key);
	}

	function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {

	  return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
	}

	function unstable_createPortal(children, container) {
	  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

	  {
	    if (!didWarnAboutUnstableCreatePortal) {
	      didWarnAboutUnstableCreatePortal = true;

	      warn('The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
	    }
	  }

	  return createPortal$1(children, container, key);
	}

	var Internals = {
	  // Keep in sync with ReactDOMUnstableNativeDependencies.js
	  // ReactTestUtils.js, and ReactTestUtilsAct.js. This is an array for better minification.
	  Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch, flushPassiveEffects, IsThisRendererActing]
	};
	var foundDevTools = injectIntoDevTools({
	  findFiberByHostInstance: getClosestInstanceFromNode,
	  bundleType:  1 ,
	  version: ReactVersion,
	  rendererPackageName: 'react-dom'
	});

	{
	  if (!foundDevTools && canUseDOM && window.top === window.self) {
	    // If we're in Chrome or Firefox, provide a download link if not installed.
	    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	      var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

	      if (/^(https?|file):$/.test(protocol)) {
	        // eslint-disable-next-line react-internal/no-production-logging
	        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
	      }
	    }
	  }
	}

	exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
	exports.createPortal = createPortal$1;
	exports.findDOMNode = findDOMNode;
	exports.flushSync = flushSync;
	exports.hydrate = hydrate;
	exports.render = render;
	exports.unmountComponentAtNode = unmountComponentAtNode;
	exports.unstable_batchedUpdates = batchedUpdates$1;
	exports.unstable_createPortal = unstable_createPortal;
	exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
	exports.version = ReactVersion;
	  })();
	}
	});
	var reactDom_development_1 = reactDom_development.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
	var reactDom_development_2 = reactDom_development.createPortal;
	var reactDom_development_3 = reactDom_development.findDOMNode;
	var reactDom_development_4 = reactDom_development.flushSync;
	var reactDom_development_5 = reactDom_development.hydrate;
	var reactDom_development_6 = reactDom_development.render;
	var reactDom_development_7 = reactDom_development.unmountComponentAtNode;
	var reactDom_development_8 = reactDom_development.unstable_batchedUpdates;
	var reactDom_development_9 = reactDom_development.unstable_createPortal;
	var reactDom_development_10 = reactDom_development.unstable_renderSubtreeIntoContainer;
	var reactDom_development_11 = reactDom_development.version;

	var reactDom = createCommonjsModule(function (module) {

	{
	  module.exports = reactDom_development;
	}
	});
	var reactDom_1 = reactDom.render;
	var reactDom_2 = reactDom.createPortal;

	function _inheritsLoose(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  subClass.__proto__ = superClass;
	}

	var reactIs_development = createCommonjsModule(function (module, exports) {



	{
	  (function() {

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	// (unstable) APIs that have been removed. Can we remove the symbols?

	var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	}

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;

	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_ASYNC_MODE_TYPE:
	          case REACT_CONCURRENT_MODE_TYPE:
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	            return type;

	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;

	              default:
	                return $$typeof;
	            }

	        }

	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	} // AsyncMode is deprecated along with isAsyncMode

	var AsyncMode = REACT_ASYNC_MODE_TYPE;
	var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	    }
	  }

	  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	}
	function isConcurrentMode(object) {
	  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}

	exports.AsyncMode = AsyncMode;
	exports.ConcurrentMode = ConcurrentMode;
	exports.ContextConsumer = ContextConsumer;
	exports.ContextProvider = ContextProvider;
	exports.Element = Element;
	exports.ForwardRef = ForwardRef;
	exports.Fragment = Fragment;
	exports.Lazy = Lazy;
	exports.Memo = Memo;
	exports.Portal = Portal;
	exports.Profiler = Profiler;
	exports.StrictMode = StrictMode;
	exports.Suspense = Suspense;
	exports.isAsyncMode = isAsyncMode;
	exports.isConcurrentMode = isConcurrentMode;
	exports.isContextConsumer = isContextConsumer;
	exports.isContextProvider = isContextProvider;
	exports.isElement = isElement;
	exports.isForwardRef = isForwardRef;
	exports.isFragment = isFragment;
	exports.isLazy = isLazy;
	exports.isMemo = isMemo;
	exports.isPortal = isPortal;
	exports.isProfiler = isProfiler;
	exports.isStrictMode = isStrictMode;
	exports.isSuspense = isSuspense;
	exports.isValidElementType = isValidElementType;
	exports.typeOf = typeOf;
	  })();
	}
	});
	var reactIs_development_1 = reactIs_development.AsyncMode;
	var reactIs_development_2 = reactIs_development.ConcurrentMode;
	var reactIs_development_3 = reactIs_development.ContextConsumer;
	var reactIs_development_4 = reactIs_development.ContextProvider;
	var reactIs_development_5 = reactIs_development.Element;
	var reactIs_development_6 = reactIs_development.ForwardRef;
	var reactIs_development_7 = reactIs_development.Fragment;
	var reactIs_development_8 = reactIs_development.Lazy;
	var reactIs_development_9 = reactIs_development.Memo;
	var reactIs_development_10 = reactIs_development.Portal;
	var reactIs_development_11 = reactIs_development.Profiler;
	var reactIs_development_12 = reactIs_development.StrictMode;
	var reactIs_development_13 = reactIs_development.Suspense;
	var reactIs_development_14 = reactIs_development.isAsyncMode;
	var reactIs_development_15 = reactIs_development.isConcurrentMode;
	var reactIs_development_16 = reactIs_development.isContextConsumer;
	var reactIs_development_17 = reactIs_development.isContextProvider;
	var reactIs_development_18 = reactIs_development.isElement;
	var reactIs_development_19 = reactIs_development.isForwardRef;
	var reactIs_development_20 = reactIs_development.isFragment;
	var reactIs_development_21 = reactIs_development.isLazy;
	var reactIs_development_22 = reactIs_development.isMemo;
	var reactIs_development_23 = reactIs_development.isPortal;
	var reactIs_development_24 = reactIs_development.isProfiler;
	var reactIs_development_25 = reactIs_development.isStrictMode;
	var reactIs_development_26 = reactIs_development.isSuspense;
	var reactIs_development_27 = reactIs_development.isValidElementType;
	var reactIs_development_28 = reactIs_development.typeOf;

	var reactIs = createCommonjsModule(function (module) {

	{
	  module.exports = reactIs_development;
	}
	});
	var reactIs_1 = reactIs.isValidElementType;
	var reactIs_2 = reactIs.isElement;
	var reactIs_3 = reactIs.typeOf;

	var has$1 = Function.call.bind(Object.prototype.hasOwnProperty);
	var printWarning$1 = function() {};

	{
	  printWarning$1 = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	function emptyFunctionThatReturnsNull() {
	  return null;
	}

	var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),

	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    elementType: createElementTypeTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker,
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret_1) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          var err = new Error(
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	          err.name = 'Invariant Violation';
	          throw err;
	        } else if ( typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            printWarning$1(
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);

	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);

	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!reactIs.isValidElementType(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      {
	        if (arguments.length > 1) {
	          printWarning$1(
	            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
	            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
	          );
	        } else {
	          printWarning$1('Invalid argument supplied to oneOf, expected an array.');
	        }
	      }
	      return emptyFunctionThatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
	        var type = getPreciseType(value);
	        if (type === 'symbol') {
	          return String(value);
	        }
	        return value;
	      });
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (has$1(propValue, key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	       printWarning$1('Invalid argument supplied to oneOfType, expected an instance of array.') ;
	      return emptyFunctionThatReturnsNull;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        printWarning$1(
	          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
	          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
	        );
	        return emptyFunctionThatReturnsNull;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
	          return null;
	        }
	      }

	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from
	      // props.
	      var allKeys = objectAssign({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          return new PropTypeError(
	            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
	            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
	            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
	          );
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;
	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // falsy value can't be a Symbol
	    if (!propValue) {
	      return false;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes_1;
	  ReactPropTypes.resetWarningCache = checkPropTypes_1.resetWarningCache;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};

	var propTypes = createCommonjsModule(function (module) {
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	{
	  var ReactIs = reactIs;

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  module.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
	}
	});
	var propTypes_1 = propTypes.object;
	var propTypes_2 = propTypes.func;
	var propTypes_3 = propTypes.oneOfType;
	var propTypes_4 = propTypes.node;
	var propTypes_5 = propTypes.bool;
	var propTypes_6 = propTypes.any;
	var propTypes_7 = propTypes.arrayOf;
	var propTypes_8 = propTypes.string;

	function _extends() {
	  _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends.apply(this, arguments);
	}

	function isAbsolute(pathname) {
	  return pathname.charAt(0) === '/';
	}

	// About 1.5x faster than the two-arg version of Array#splice()
	function spliceOne(list, index) {
	  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
	    list[i] = list[k];
	  }

	  list.pop();
	}

	// This implementation is based heavily on node's url.parse
	function resolvePathname(to, from) {
	  if (from === undefined) from = '';

	  var toParts = (to && to.split('/')) || [];
	  var fromParts = (from && from.split('/')) || [];

	  var isToAbs = to && isAbsolute(to);
	  var isFromAbs = from && isAbsolute(from);
	  var mustEndAbs = isToAbs || isFromAbs;

	  if (to && isAbsolute(to)) {
	    // to is absolute
	    fromParts = toParts;
	  } else if (toParts.length) {
	    // to is relative, drop the filename
	    fromParts.pop();
	    fromParts = fromParts.concat(toParts);
	  }

	  if (!fromParts.length) return '/';

	  var hasTrailingSlash;
	  if (fromParts.length) {
	    var last = fromParts[fromParts.length - 1];
	    hasTrailingSlash = last === '.' || last === '..' || last === '';
	  } else {
	    hasTrailingSlash = false;
	  }

	  var up = 0;
	  for (var i = fromParts.length; i >= 0; i--) {
	    var part = fromParts[i];

	    if (part === '.') {
	      spliceOne(fromParts, i);
	    } else if (part === '..') {
	      spliceOne(fromParts, i);
	      up++;
	    } else if (up) {
	      spliceOne(fromParts, i);
	      up--;
	    }
	  }

	  if (!mustEndAbs) for (; up--; up) fromParts.unshift('..');

	  if (
	    mustEndAbs &&
	    fromParts[0] !== '' &&
	    (!fromParts[0] || !isAbsolute(fromParts[0]))
	  )
	    fromParts.unshift('');

	  var result = fromParts.join('/');

	  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';

	  return result;
	}

	function valueOf(obj) {
	  return obj.valueOf ? obj.valueOf() : Object.prototype.valueOf.call(obj);
	}

	function valueEqual(a, b) {
	  // Test for strict equality first.
	  if (a === b) return true;

	  // Otherwise, if either of them == null they are not equal.
	  if (a == null || b == null) return false;

	  if (Array.isArray(a)) {
	    return (
	      Array.isArray(b) &&
	      a.length === b.length &&
	      a.every(function(item, index) {
	        return valueEqual(item, b[index]);
	      })
	    );
	  }

	  if (typeof a === 'object' || typeof b === 'object') {
	    var aValue = valueOf(a);
	    var bValue = valueOf(b);

	    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);

	    return Object.keys(Object.assign({}, a, b)).every(function(key) {
	      return valueEqual(a[key], b[key]);
	    });
	  }

	  return false;
	}

	function warning(condition, message) {
	  {
	    if (condition) {
	      return;
	    }

	    var text = "Warning: " + message;

	    if (typeof console !== 'undefined') {
	      console.warn(text);
	    }

	    try {
	      throw Error(text);
	    } catch (x) {}
	  }
	}

	var prefix = 'Invariant failed';
	function invariant(condition, message) {
	    if (condition) {
	        return;
	    }
	    throw new Error(prefix + ": " + (message || ''));
	}

	function addLeadingSlash(path) {
	  return path.charAt(0) === '/' ? path : '/' + path;
	}
	function stripLeadingSlash(path) {
	  return path.charAt(0) === '/' ? path.substr(1) : path;
	}
	function hasBasename(path, prefix) {
	  return path.toLowerCase().indexOf(prefix.toLowerCase()) === 0 && '/?#'.indexOf(path.charAt(prefix.length)) !== -1;
	}
	function stripBasename(path, prefix) {
	  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
	}
	function stripTrailingSlash(path) {
	  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
	}
	function parsePath(path) {
	  var pathname = path || '/';
	  var search = '';
	  var hash = '';
	  var hashIndex = pathname.indexOf('#');

	  if (hashIndex !== -1) {
	    hash = pathname.substr(hashIndex);
	    pathname = pathname.substr(0, hashIndex);
	  }

	  var searchIndex = pathname.indexOf('?');

	  if (searchIndex !== -1) {
	    search = pathname.substr(searchIndex);
	    pathname = pathname.substr(0, searchIndex);
	  }

	  return {
	    pathname: pathname,
	    search: search === '?' ? '' : search,
	    hash: hash === '#' ? '' : hash
	  };
	}
	function createPath(location) {
	  var pathname = location.pathname,
	      search = location.search,
	      hash = location.hash;
	  var path = pathname || '/';
	  if (search && search !== '?') path += search.charAt(0) === '?' ? search : "?" + search;
	  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : "#" + hash;
	  return path;
	}

	function createLocation(path, state, key, currentLocation) {
	  var location;

	  if (typeof path === 'string') {
	    // Two-arg form: push(path, state)
	    location = parsePath(path);
	    location.state = state;
	  } else {
	    // One-arg form: push(location)
	    location = _extends({}, path);
	    if (location.pathname === undefined) location.pathname = '';

	    if (location.search) {
	      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
	    } else {
	      location.search = '';
	    }

	    if (location.hash) {
	      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
	    } else {
	      location.hash = '';
	    }

	    if (state !== undefined && location.state === undefined) location.state = state;
	  }

	  try {
	    location.pathname = decodeURI(location.pathname);
	  } catch (e) {
	    if (e instanceof URIError) {
	      throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
	    } else {
	      throw e;
	    }
	  }

	  if (key) location.key = key;

	  if (currentLocation) {
	    // Resolve incomplete/relative pathname relative to current location.
	    if (!location.pathname) {
	      location.pathname = currentLocation.pathname;
	    } else if (location.pathname.charAt(0) !== '/') {
	      location.pathname = resolvePathname(location.pathname, currentLocation.pathname);
	    }
	  } else {
	    // When there is no prior location and pathname is empty, set it to /
	    if (!location.pathname) {
	      location.pathname = '/';
	    }
	  }

	  return location;
	}
	function locationsAreEqual(a, b) {
	  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && valueEqual(a.state, b.state);
	}

	function createTransitionManager() {
	  var prompt = null;

	  function setPrompt(nextPrompt) {
	     warning(prompt == null, 'A history supports only one prompt at a time') ;
	    prompt = nextPrompt;
	    return function () {
	      if (prompt === nextPrompt) prompt = null;
	    };
	  }

	  function confirmTransitionTo(location, action, getUserConfirmation, callback) {
	    // TODO: If another transition starts while we're still confirming
	    // the previous one, we may end up in a weird state. Figure out the
	    // best way to handle this.
	    if (prompt != null) {
	      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;

	      if (typeof result === 'string') {
	        if (typeof getUserConfirmation === 'function') {
	          getUserConfirmation(result, callback);
	        } else {
	           warning(false, 'A history needs a getUserConfirmation function in order to use a prompt message') ;
	          callback(true);
	        }
	      } else {
	        // Return false from a transition hook to cancel the transition.
	        callback(result !== false);
	      }
	    } else {
	      callback(true);
	    }
	  }

	  var listeners = [];

	  function appendListener(fn) {
	    var isActive = true;

	    function listener() {
	      if (isActive) fn.apply(void 0, arguments);
	    }

	    listeners.push(listener);
	    return function () {
	      isActive = false;
	      listeners = listeners.filter(function (item) {
	        return item !== listener;
	      });
	    };
	  }

	  function notifyListeners() {
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    listeners.forEach(function (listener) {
	      return listener.apply(void 0, args);
	    });
	  }

	  return {
	    setPrompt: setPrompt,
	    confirmTransitionTo: confirmTransitionTo,
	    appendListener: appendListener,
	    notifyListeners: notifyListeners
	  };
	}

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	function getConfirmation(message, callback) {
	  callback(window.confirm(message)); // eslint-disable-line no-alert
	}
	/**
	 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
	 *
	 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
	 */

	function supportsHistory() {
	  var ua = window.navigator.userAgent;
	  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;
	  return window.history && 'pushState' in window.history;
	}
	/**
	 * Returns true if browser fires popstate on hash change.
	 * IE10 and IE11 do not.
	 */

	function supportsPopStateOnHashChange() {
	  return window.navigator.userAgent.indexOf('Trident') === -1;
	}
	/**
	 * Returns false if using go(n) with hash history causes a full page reload.
	 */

	function supportsGoWithoutReloadUsingHash() {
	  return window.navigator.userAgent.indexOf('Firefox') === -1;
	}
	/**
	 * Returns true if a given popstate event is an extraneous WebKit event.
	 * Accounts for the fact that Chrome on iOS fires real popstate events
	 * containing undefined state when pressing the back button.
	 */

	function isExtraneousPopstateEvent(event) {
	  return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
	}

	var PopStateEvent = 'popstate';
	var HashChangeEvent = 'hashchange';

	function getHistoryState() {
	  try {
	    return window.history.state || {};
	  } catch (e) {
	    // IE 11 sometimes throws when accessing window.history.state
	    // See https://github.com/ReactTraining/history/pull/289
	    return {};
	  }
	}
	/**
	 * Creates a history object that uses the HTML5 history API including
	 * pushState, replaceState, and the popstate event.
	 */


	function createBrowserHistory(props) {
	  if (props === void 0) {
	    props = {};
	  }

	  !canUseDOM ?  invariant(false, 'Browser history needs a DOM')  : void 0;
	  var globalHistory = window.history;
	  var canUseHistory = supportsHistory();
	  var needsHashChangeListener = !supportsPopStateOnHashChange();
	  var _props = props,
	      _props$forceRefresh = _props.forceRefresh,
	      forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh,
	      _props$getUserConfirm = _props.getUserConfirmation,
	      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,
	      _props$keyLength = _props.keyLength,
	      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
	  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';

	  function getDOMLocation(historyState) {
	    var _ref = historyState || {},
	        key = _ref.key,
	        state = _ref.state;

	    var _window$location = window.location,
	        pathname = _window$location.pathname,
	        search = _window$location.search,
	        hash = _window$location.hash;
	    var path = pathname + search + hash;
	     warning(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".') ;
	    if (basename) path = stripBasename(path, basename);
	    return createLocation(path, state, key);
	  }

	  function createKey() {
	    return Math.random().toString(36).substr(2, keyLength);
	  }

	  var transitionManager = createTransitionManager();

	  function setState(nextState) {
	    _extends(history, nextState);

	    history.length = globalHistory.length;
	    transitionManager.notifyListeners(history.location, history.action);
	  }

	  function handlePopState(event) {
	    // Ignore extraneous popstate events in WebKit.
	    if (isExtraneousPopstateEvent(event)) return;
	    handlePop(getDOMLocation(event.state));
	  }

	  function handleHashChange() {
	    handlePop(getDOMLocation(getHistoryState()));
	  }

	  var forceNextPop = false;

	  function handlePop(location) {
	    if (forceNextPop) {
	      forceNextPop = false;
	      setState();
	    } else {
	      var action = 'POP';
	      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	        if (ok) {
	          setState({
	            action: action,
	            location: location
	          });
	        } else {
	          revertPop(location);
	        }
	      });
	    }
	  }

	  function revertPop(fromLocation) {
	    var toLocation = history.location; // TODO: We could probably make this more reliable by
	    // keeping a list of keys we've seen in sessionStorage.
	    // Instead, we just default to 0 for keys we don't know.

	    var toIndex = allKeys.indexOf(toLocation.key);
	    if (toIndex === -1) toIndex = 0;
	    var fromIndex = allKeys.indexOf(fromLocation.key);
	    if (fromIndex === -1) fromIndex = 0;
	    var delta = toIndex - fromIndex;

	    if (delta) {
	      forceNextPop = true;
	      go(delta);
	    }
	  }

	  var initialLocation = getDOMLocation(getHistoryState());
	  var allKeys = [initialLocation.key]; // Public interface

	  function createHref(location) {
	    return basename + createPath(location);
	  }

	  function push(path, state) {
	     warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') ;
	    var action = 'PUSH';
	    var location = createLocation(path, state, createKey(), history.location);
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;
	      var href = createHref(location);
	      var key = location.key,
	          state = location.state;

	      if (canUseHistory) {
	        globalHistory.pushState({
	          key: key,
	          state: state
	        }, null, href);

	        if (forceRefresh) {
	          window.location.href = href;
	        } else {
	          var prevIndex = allKeys.indexOf(history.location.key);
	          var nextKeys = allKeys.slice(0, prevIndex + 1);
	          nextKeys.push(location.key);
	          allKeys = nextKeys;
	          setState({
	            action: action,
	            location: location
	          });
	        }
	      } else {
	         warning(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history') ;
	        window.location.href = href;
	      }
	    });
	  }

	  function replace(path, state) {
	     warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') ;
	    var action = 'REPLACE';
	    var location = createLocation(path, state, createKey(), history.location);
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;
	      var href = createHref(location);
	      var key = location.key,
	          state = location.state;

	      if (canUseHistory) {
	        globalHistory.replaceState({
	          key: key,
	          state: state
	        }, null, href);

	        if (forceRefresh) {
	          window.location.replace(href);
	        } else {
	          var prevIndex = allKeys.indexOf(history.location.key);
	          if (prevIndex !== -1) allKeys[prevIndex] = location.key;
	          setState({
	            action: action,
	            location: location
	          });
	        }
	      } else {
	         warning(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history') ;
	        window.location.replace(href);
	      }
	    });
	  }

	  function go(n) {
	    globalHistory.go(n);
	  }

	  function goBack() {
	    go(-1);
	  }

	  function goForward() {
	    go(1);
	  }

	  var listenerCount = 0;

	  function checkDOMListeners(delta) {
	    listenerCount += delta;

	    if (listenerCount === 1 && delta === 1) {
	      window.addEventListener(PopStateEvent, handlePopState);
	      if (needsHashChangeListener) window.addEventListener(HashChangeEvent, handleHashChange);
	    } else if (listenerCount === 0) {
	      window.removeEventListener(PopStateEvent, handlePopState);
	      if (needsHashChangeListener) window.removeEventListener(HashChangeEvent, handleHashChange);
	    }
	  }

	  var isBlocked = false;

	  function block(prompt) {
	    if (prompt === void 0) {
	      prompt = false;
	    }

	    var unblock = transitionManager.setPrompt(prompt);

	    if (!isBlocked) {
	      checkDOMListeners(1);
	      isBlocked = true;
	    }

	    return function () {
	      if (isBlocked) {
	        isBlocked = false;
	        checkDOMListeners(-1);
	      }

	      return unblock();
	    };
	  }

	  function listen(listener) {
	    var unlisten = transitionManager.appendListener(listener);
	    checkDOMListeners(1);
	    return function () {
	      checkDOMListeners(-1);
	      unlisten();
	    };
	  }

	  var history = {
	    length: globalHistory.length,
	    action: 'POP',
	    location: initialLocation,
	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    block: block,
	    listen: listen
	  };
	  return history;
	}

	var HashChangeEvent$1 = 'hashchange';
	var HashPathCoders = {
	  hashbang: {
	    encodePath: function encodePath(path) {
	      return path.charAt(0) === '!' ? path : '!/' + stripLeadingSlash(path);
	    },
	    decodePath: function decodePath(path) {
	      return path.charAt(0) === '!' ? path.substr(1) : path;
	    }
	  },
	  noslash: {
	    encodePath: stripLeadingSlash,
	    decodePath: addLeadingSlash
	  },
	  slash: {
	    encodePath: addLeadingSlash,
	    decodePath: addLeadingSlash
	  }
	};

	function stripHash(url) {
	  var hashIndex = url.indexOf('#');
	  return hashIndex === -1 ? url : url.slice(0, hashIndex);
	}

	function getHashPath() {
	  // We can't use window.location.hash here because it's not
	  // consistent across browsers - Firefox will pre-decode it!
	  var href = window.location.href;
	  var hashIndex = href.indexOf('#');
	  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
	}

	function pushHashPath(path) {
	  window.location.hash = path;
	}

	function replaceHashPath(path) {
	  window.location.replace(stripHash(window.location.href) + '#' + path);
	}

	function createHashHistory(props) {
	  if (props === void 0) {
	    props = {};
	  }

	  !canUseDOM ?  invariant(false, 'Hash history needs a DOM')  : void 0;
	  var globalHistory = window.history;
	  var canGoWithoutReload = supportsGoWithoutReloadUsingHash();
	  var _props = props,
	      _props$getUserConfirm = _props.getUserConfirmation,
	      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,
	      _props$hashType = _props.hashType,
	      hashType = _props$hashType === void 0 ? 'slash' : _props$hashType;
	  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';
	  var _HashPathCoders$hashT = HashPathCoders[hashType],
	      encodePath = _HashPathCoders$hashT.encodePath,
	      decodePath = _HashPathCoders$hashT.decodePath;

	  function getDOMLocation() {
	    var path = decodePath(getHashPath());
	     warning(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".') ;
	    if (basename) path = stripBasename(path, basename);
	    return createLocation(path);
	  }

	  var transitionManager = createTransitionManager();

	  function setState(nextState) {
	    _extends(history, nextState);

	    history.length = globalHistory.length;
	    transitionManager.notifyListeners(history.location, history.action);
	  }

	  var forceNextPop = false;
	  var ignorePath = null;

	  function locationsAreEqual$$1(a, b) {
	    return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;
	  }

	  function handleHashChange() {
	    var path = getHashPath();
	    var encodedPath = encodePath(path);

	    if (path !== encodedPath) {
	      // Ensure we always have a properly-encoded hash.
	      replaceHashPath(encodedPath);
	    } else {
	      var location = getDOMLocation();
	      var prevLocation = history.location;
	      if (!forceNextPop && locationsAreEqual$$1(prevLocation, location)) return; // A hashchange doesn't always == location change.

	      if (ignorePath === createPath(location)) return; // Ignore this change; we already setState in push/replace.

	      ignorePath = null;
	      handlePop(location);
	    }
	  }

	  function handlePop(location) {
	    if (forceNextPop) {
	      forceNextPop = false;
	      setState();
	    } else {
	      var action = 'POP';
	      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	        if (ok) {
	          setState({
	            action: action,
	            location: location
	          });
	        } else {
	          revertPop(location);
	        }
	      });
	    }
	  }

	  function revertPop(fromLocation) {
	    var toLocation = history.location; // TODO: We could probably make this more reliable by
	    // keeping a list of paths we've seen in sessionStorage.
	    // Instead, we just default to 0 for paths we don't know.

	    var toIndex = allPaths.lastIndexOf(createPath(toLocation));
	    if (toIndex === -1) toIndex = 0;
	    var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));
	    if (fromIndex === -1) fromIndex = 0;
	    var delta = toIndex - fromIndex;

	    if (delta) {
	      forceNextPop = true;
	      go(delta);
	    }
	  } // Ensure the hash is encoded properly before doing anything else.


	  var path = getHashPath();
	  var encodedPath = encodePath(path);
	  if (path !== encodedPath) replaceHashPath(encodedPath);
	  var initialLocation = getDOMLocation();
	  var allPaths = [createPath(initialLocation)]; // Public interface

	  function createHref(location) {
	    var baseTag = document.querySelector('base');
	    var href = '';

	    if (baseTag && baseTag.getAttribute('href')) {
	      href = stripHash(window.location.href);
	    }

	    return href + '#' + encodePath(basename + createPath(location));
	  }

	  function push(path, state) {
	     warning(state === undefined, 'Hash history cannot push state; it is ignored') ;
	    var action = 'PUSH';
	    var location = createLocation(path, undefined, undefined, history.location);
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;
	      var path = createPath(location);
	      var encodedPath = encodePath(basename + path);
	      var hashChanged = getHashPath() !== encodedPath;

	      if (hashChanged) {
	        // We cannot tell if a hashchange was caused by a PUSH, so we'd
	        // rather setState here and ignore the hashchange. The caveat here
	        // is that other hash histories in the page will consider it a POP.
	        ignorePath = path;
	        pushHashPath(encodedPath);
	        var prevIndex = allPaths.lastIndexOf(createPath(history.location));
	        var nextPaths = allPaths.slice(0, prevIndex + 1);
	        nextPaths.push(path);
	        allPaths = nextPaths;
	        setState({
	          action: action,
	          location: location
	        });
	      } else {
	         warning(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack') ;
	        setState();
	      }
	    });
	  }

	  function replace(path, state) {
	     warning(state === undefined, 'Hash history cannot replace state; it is ignored') ;
	    var action = 'REPLACE';
	    var location = createLocation(path, undefined, undefined, history.location);
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;
	      var path = createPath(location);
	      var encodedPath = encodePath(basename + path);
	      var hashChanged = getHashPath() !== encodedPath;

	      if (hashChanged) {
	        // We cannot tell if a hashchange was caused by a REPLACE, so we'd
	        // rather setState here and ignore the hashchange. The caveat here
	        // is that other hash histories in the page will consider it a POP.
	        ignorePath = path;
	        replaceHashPath(encodedPath);
	      }

	      var prevIndex = allPaths.indexOf(createPath(history.location));
	      if (prevIndex !== -1) allPaths[prevIndex] = path;
	      setState({
	        action: action,
	        location: location
	      });
	    });
	  }

	  function go(n) {
	     warning(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser') ;
	    globalHistory.go(n);
	  }

	  function goBack() {
	    go(-1);
	  }

	  function goForward() {
	    go(1);
	  }

	  var listenerCount = 0;

	  function checkDOMListeners(delta) {
	    listenerCount += delta;

	    if (listenerCount === 1 && delta === 1) {
	      window.addEventListener(HashChangeEvent$1, handleHashChange);
	    } else if (listenerCount === 0) {
	      window.removeEventListener(HashChangeEvent$1, handleHashChange);
	    }
	  }

	  var isBlocked = false;

	  function block(prompt) {
	    if (prompt === void 0) {
	      prompt = false;
	    }

	    var unblock = transitionManager.setPrompt(prompt);

	    if (!isBlocked) {
	      checkDOMListeners(1);
	      isBlocked = true;
	    }

	    return function () {
	      if (isBlocked) {
	        isBlocked = false;
	        checkDOMListeners(-1);
	      }

	      return unblock();
	    };
	  }

	  function listen(listener) {
	    var unlisten = transitionManager.appendListener(listener);
	    checkDOMListeners(1);
	    return function () {
	      checkDOMListeners(-1);
	      unlisten();
	    };
	  }

	  var history = {
	    length: globalHistory.length,
	    action: 'POP',
	    location: initialLocation,
	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    block: block,
	    listen: listen
	  };
	  return history;
	}

	function clamp(n, lowerBound, upperBound) {
	  return Math.min(Math.max(n, lowerBound), upperBound);
	}
	/**
	 * Creates a history object that stores locations in memory.
	 */


	function createMemoryHistory(props) {
	  if (props === void 0) {
	    props = {};
	  }

	  var _props = props,
	      getUserConfirmation = _props.getUserConfirmation,
	      _props$initialEntries = _props.initialEntries,
	      initialEntries = _props$initialEntries === void 0 ? ['/'] : _props$initialEntries,
	      _props$initialIndex = _props.initialIndex,
	      initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex,
	      _props$keyLength = _props.keyLength,
	      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
	  var transitionManager = createTransitionManager();

	  function setState(nextState) {
	    _extends(history, nextState);

	    history.length = history.entries.length;
	    transitionManager.notifyListeners(history.location, history.action);
	  }

	  function createKey() {
	    return Math.random().toString(36).substr(2, keyLength);
	  }

	  var index = clamp(initialIndex, 0, initialEntries.length - 1);
	  var entries = initialEntries.map(function (entry) {
	    return typeof entry === 'string' ? createLocation(entry, undefined, createKey()) : createLocation(entry, undefined, entry.key || createKey());
	  }); // Public interface

	  var createHref = createPath;

	  function push(path, state) {
	     warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') ;
	    var action = 'PUSH';
	    var location = createLocation(path, state, createKey(), history.location);
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;
	      var prevIndex = history.index;
	      var nextIndex = prevIndex + 1;
	      var nextEntries = history.entries.slice(0);

	      if (nextEntries.length > nextIndex) {
	        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
	      } else {
	        nextEntries.push(location);
	      }

	      setState({
	        action: action,
	        location: location,
	        index: nextIndex,
	        entries: nextEntries
	      });
	    });
	  }

	  function replace(path, state) {
	     warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') ;
	    var action = 'REPLACE';
	    var location = createLocation(path, state, createKey(), history.location);
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;
	      history.entries[history.index] = location;
	      setState({
	        action: action,
	        location: location
	      });
	    });
	  }

	  function go(n) {
	    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);
	    var action = 'POP';
	    var location = history.entries[nextIndex];
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (ok) {
	        setState({
	          action: action,
	          location: location,
	          index: nextIndex
	        });
	      } else {
	        // Mimic the behavior of DOM histories by
	        // causing a render after a cancelled POP.
	        setState();
	      }
	    });
	  }

	  function goBack() {
	    go(-1);
	  }

	  function goForward() {
	    go(1);
	  }

	  function canGo(n) {
	    var nextIndex = history.index + n;
	    return nextIndex >= 0 && nextIndex < history.entries.length;
	  }

	  function block(prompt) {
	    if (prompt === void 0) {
	      prompt = false;
	    }

	    return transitionManager.setPrompt(prompt);
	  }

	  function listen(listener) {
	    return transitionManager.appendListener(listener);
	  }

	  var history = {
	    length: entries.length,
	    action: 'POP',
	    location: entries[index],
	    index: index,
	    entries: entries,
	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    canGo: canGo,
	    block: block,
	    listen: listen
	  };
	  return history;
	}

	var global$1 = (typeof global !== "undefined" ? global :
	            typeof self !== "undefined" ? self :
	            typeof window !== "undefined" ? window : {});

	var MAX_SIGNED_31_BIT_INT = 1073741823;
	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global$1 !== 'undefined' ? global$1 : {};

	function getUniqueId() {
	  var key = '__global_unique_id__';
	  return commonjsGlobal[key] = (commonjsGlobal[key] || 0) + 1;
	}

	function objectIs(x, y) {
	  if (x === y) {
	    return x !== 0 || 1 / x === 1 / y;
	  } else {
	    return x !== x && y !== y;
	  }
	}

	function createEventEmitter(value) {
	  var handlers = [];
	  return {
	    on: function on(handler) {
	      handlers.push(handler);
	    },
	    off: function off(handler) {
	      handlers = handlers.filter(function (h) {
	        return h !== handler;
	      });
	    },
	    get: function get() {
	      return value;
	    },
	    set: function set(newValue, changedBits) {
	      value = newValue;
	      handlers.forEach(function (handler) {
	        return handler(value, changedBits);
	      });
	    }
	  };
	}

	function onlyChild(children) {
	  return Array.isArray(children) ? children[0] : children;
	}

	function createReactContext(defaultValue, calculateChangedBits) {
	  var _Provider$childContex, _Consumer$contextType;

	  var contextProp = '__create-react-context-' + getUniqueId() + '__';

	  var Provider = /*#__PURE__*/function (_Component) {
	    _inheritsLoose(Provider, _Component);

	    function Provider() {
	      var _this;

	      _this = _Component.apply(this, arguments) || this;
	      _this.emitter = createEventEmitter(_this.props.value);
	      return _this;
	    }

	    var _proto = Provider.prototype;

	    _proto.getChildContext = function getChildContext() {
	      var _ref;

	      return _ref = {}, _ref[contextProp] = this.emitter, _ref;
	    };

	    _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	      if (this.props.value !== nextProps.value) {
	        var oldValue = this.props.value;
	        var newValue = nextProps.value;
	        var changedBits;

	        if (objectIs(oldValue, newValue)) {
	          changedBits = 0;
	        } else {
	          changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

	          {
	            warning((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: ' + changedBits);
	          }

	          changedBits |= 0;

	          if (changedBits !== 0) {
	            this.emitter.set(nextProps.value, changedBits);
	          }
	        }
	      }
	    };

	    _proto.render = function render() {
	      return this.props.children;
	    };

	    return Provider;
	  }(react_2);

	  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = propTypes.object.isRequired, _Provider$childContex);

	  var Consumer = /*#__PURE__*/function (_Component2) {
	    _inheritsLoose(Consumer, _Component2);

	    function Consumer() {
	      var _this2;

	      _this2 = _Component2.apply(this, arguments) || this;
	      _this2.state = {
	        value: _this2.getValue()
	      };

	      _this2.onUpdate = function (newValue, changedBits) {
	        var observedBits = _this2.observedBits | 0;

	        if ((observedBits & changedBits) !== 0) {
	          _this2.setState({
	            value: _this2.getValue()
	          });
	        }
	      };

	      return _this2;
	    }

	    var _proto2 = Consumer.prototype;

	    _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	      var observedBits = nextProps.observedBits;
	      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
	    };

	    _proto2.componentDidMount = function componentDidMount() {
	      if (this.context[contextProp]) {
	        this.context[contextProp].on(this.onUpdate);
	      }

	      var observedBits = this.props.observedBits;
	      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
	    };

	    _proto2.componentWillUnmount = function componentWillUnmount() {
	      if (this.context[contextProp]) {
	        this.context[contextProp].off(this.onUpdate);
	      }
	    };

	    _proto2.getValue = function getValue() {
	      if (this.context[contextProp]) {
	        return this.context[contextProp].get();
	      } else {
	        return defaultValue;
	      }
	    };

	    _proto2.render = function render() {
	      return onlyChild(this.props.children)(this.state.value);
	    };

	    return Consumer;
	  }(react_2);

	  Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = propTypes.object, _Consumer$contextType);
	  return {
	    Provider: Provider,
	    Consumer: Consumer
	  };
	}

	var index = react.createContext || createReactContext;

	var isarray = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};

	/**
	 * Expose `pathToRegexp`.
	 */
	var pathToRegexp_1 = pathToRegexp;
	var parse_1 = parse;
	var compile_1 = compile;
	var tokensToFunction_1 = tokensToFunction;
	var tokensToRegExp_1 = tokensToRegExp;

	/**
	 * The main path matching regexp utility.
	 *
	 * @type {RegExp}
	 */
	var PATH_REGEXP = new RegExp([
	  // Match escaped characters that would otherwise appear in future matches.
	  // This allows the user to escape special characters that won't transform.
	  '(\\\\.)',
	  // Match Express-style parameters and un-named parameters with a prefix
	  // and optional suffixes. Matches appear as:
	  //
	  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
	  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
	  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
	  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
	].join('|'), 'g');

	/**
	 * Parse a string for the raw tokens.
	 *
	 * @param  {string}  str
	 * @param  {Object=} options
	 * @return {!Array}
	 */
	function parse (str, options) {
	  var tokens = [];
	  var key = 0;
	  var index = 0;
	  var path = '';
	  var defaultDelimiter = options && options.delimiter || '/';
	  var res;

	  while ((res = PATH_REGEXP.exec(str)) != null) {
	    var m = res[0];
	    var escaped = res[1];
	    var offset = res.index;
	    path += str.slice(index, offset);
	    index = offset + m.length;

	    // Ignore already escaped sequences.
	    if (escaped) {
	      path += escaped[1];
	      continue
	    }

	    var next = str[index];
	    var prefix = res[2];
	    var name = res[3];
	    var capture = res[4];
	    var group = res[5];
	    var modifier = res[6];
	    var asterisk = res[7];

	    // Push the current path onto the tokens.
	    if (path) {
	      tokens.push(path);
	      path = '';
	    }

	    var partial = prefix != null && next != null && next !== prefix;
	    var repeat = modifier === '+' || modifier === '*';
	    var optional = modifier === '?' || modifier === '*';
	    var delimiter = res[2] || defaultDelimiter;
	    var pattern = capture || group;

	    tokens.push({
	      name: name || key++,
	      prefix: prefix || '',
	      delimiter: delimiter,
	      optional: optional,
	      repeat: repeat,
	      partial: partial,
	      asterisk: !!asterisk,
	      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')
	    });
	  }

	  // Match any characters still remaining.
	  if (index < str.length) {
	    path += str.substr(index);
	  }

	  // If the path exists, push it onto the end.
	  if (path) {
	    tokens.push(path);
	  }

	  return tokens
	}

	/**
	 * Compile a string to a template function for the path.
	 *
	 * @param  {string}             str
	 * @param  {Object=}            options
	 * @return {!function(Object=, Object=)}
	 */
	function compile (str, options) {
	  return tokensToFunction(parse(str, options), options)
	}

	/**
	 * Prettier encoding of URI path segments.
	 *
	 * @param  {string}
	 * @return {string}
	 */
	function encodeURIComponentPretty (str) {
	  return encodeURI(str).replace(/[\/?#]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
	  })
	}

	/**
	 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
	 *
	 * @param  {string}
	 * @return {string}
	 */
	function encodeAsterisk (str) {
	  return encodeURI(str).replace(/[?#]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
	  })
	}

	/**
	 * Expose a method for transforming tokens into the path function.
	 */
	function tokensToFunction (tokens, options) {
	  // Compile all the tokens into regexps.
	  var matches = new Array(tokens.length);

	  // Compile all the patterns before compilation.
	  for (var i = 0; i < tokens.length; i++) {
	    if (typeof tokens[i] === 'object') {
	      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options));
	    }
	  }

	  return function (obj, opts) {
	    var path = '';
	    var data = obj || {};
	    var options = opts || {};
	    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

	    for (var i = 0; i < tokens.length; i++) {
	      var token = tokens[i];

	      if (typeof token === 'string') {
	        path += token;

	        continue
	      }

	      var value = data[token.name];
	      var segment;

	      if (value == null) {
	        if (token.optional) {
	          // Prepend partial segment prefixes.
	          if (token.partial) {
	            path += token.prefix;
	          }

	          continue
	        } else {
	          throw new TypeError('Expected "' + token.name + '" to be defined')
	        }
	      }

	      if (isarray(value)) {
	        if (!token.repeat) {
	          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
	        }

	        if (value.length === 0) {
	          if (token.optional) {
	            continue
	          } else {
	            throw new TypeError('Expected "' + token.name + '" to not be empty')
	          }
	        }

	        for (var j = 0; j < value.length; j++) {
	          segment = encode(value[j]);

	          if (!matches[i].test(segment)) {
	            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
	          }

	          path += (j === 0 ? token.prefix : token.delimiter) + segment;
	        }

	        continue
	      }

	      segment = token.asterisk ? encodeAsterisk(value) : encode(value);

	      if (!matches[i].test(segment)) {
	        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
	      }

	      path += token.prefix + segment;
	    }

	    return path
	  }
	}

	/**
	 * Escape a regular expression string.
	 *
	 * @param  {string} str
	 * @return {string}
	 */
	function escapeString (str) {
	  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1')
	}

	/**
	 * Escape the capturing group by escaping special characters and meaning.
	 *
	 * @param  {string} group
	 * @return {string}
	 */
	function escapeGroup (group) {
	  return group.replace(/([=!:$\/()])/g, '\\$1')
	}

	/**
	 * Attach the keys as a property of the regexp.
	 *
	 * @param  {!RegExp} re
	 * @param  {Array}   keys
	 * @return {!RegExp}
	 */
	function attachKeys (re, keys) {
	  re.keys = keys;
	  return re
	}

	/**
	 * Get the flags for a regexp from the options.
	 *
	 * @param  {Object} options
	 * @return {string}
	 */
	function flags (options) {
	  return options && options.sensitive ? '' : 'i'
	}

	/**
	 * Pull out keys from a regexp.
	 *
	 * @param  {!RegExp} path
	 * @param  {!Array}  keys
	 * @return {!RegExp}
	 */
	function regexpToRegexp (path, keys) {
	  // Use a negative lookahead to match only capturing groups.
	  var groups = path.source.match(/\((?!\?)/g);

	  if (groups) {
	    for (var i = 0; i < groups.length; i++) {
	      keys.push({
	        name: i,
	        prefix: null,
	        delimiter: null,
	        optional: false,
	        repeat: false,
	        partial: false,
	        asterisk: false,
	        pattern: null
	      });
	    }
	  }

	  return attachKeys(path, keys)
	}

	/**
	 * Transform an array into a regexp.
	 *
	 * @param  {!Array}  path
	 * @param  {Array}   keys
	 * @param  {!Object} options
	 * @return {!RegExp}
	 */
	function arrayToRegexp (path, keys, options) {
	  var parts = [];

	  for (var i = 0; i < path.length; i++) {
	    parts.push(pathToRegexp(path[i], keys, options).source);
	  }

	  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));

	  return attachKeys(regexp, keys)
	}

	/**
	 * Create a path regexp from string input.
	 *
	 * @param  {string}  path
	 * @param  {!Array}  keys
	 * @param  {!Object} options
	 * @return {!RegExp}
	 */
	function stringToRegexp (path, keys, options) {
	  return tokensToRegExp(parse(path, options), keys, options)
	}

	/**
	 * Expose a function for taking tokens and returning a RegExp.
	 *
	 * @param  {!Array}          tokens
	 * @param  {(Array|Object)=} keys
	 * @param  {Object=}         options
	 * @return {!RegExp}
	 */
	function tokensToRegExp (tokens, keys, options) {
	  if (!isarray(keys)) {
	    options = /** @type {!Object} */ (keys || options);
	    keys = [];
	  }

	  options = options || {};

	  var strict = options.strict;
	  var end = options.end !== false;
	  var route = '';

	  // Iterate over the tokens and create our regexp string.
	  for (var i = 0; i < tokens.length; i++) {
	    var token = tokens[i];

	    if (typeof token === 'string') {
	      route += escapeString(token);
	    } else {
	      var prefix = escapeString(token.prefix);
	      var capture = '(?:' + token.pattern + ')';

	      keys.push(token);

	      if (token.repeat) {
	        capture += '(?:' + prefix + capture + ')*';
	      }

	      if (token.optional) {
	        if (!token.partial) {
	          capture = '(?:' + prefix + '(' + capture + '))?';
	        } else {
	          capture = prefix + '(' + capture + ')?';
	        }
	      } else {
	        capture = prefix + '(' + capture + ')';
	      }

	      route += capture;
	    }
	  }

	  var delimiter = escapeString(options.delimiter || '/');
	  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;

	  // In non-strict mode we allow a slash at the end of match. If the path to
	  // match already ends with a slash, we remove it for consistency. The slash
	  // is valid at the end of a path match, not in the middle. This is important
	  // in non-ending mode, where "/test/" shouldn't match "/test//route".
	  if (!strict) {
	    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
	  }

	  if (end) {
	    route += '$';
	  } else {
	    // In non-ending mode, we need the capturing groups to match as much as
	    // possible by using a positive lookahead to the end or next path segment.
	    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
	  }

	  return attachKeys(new RegExp('^' + route, flags(options)), keys)
	}

	/**
	 * Normalize the given path string, returning a regular expression.
	 *
	 * An empty array can be passed in for the keys, which will hold the
	 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
	 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
	 *
	 * @param  {(string|RegExp|Array)} path
	 * @param  {(Array|Object)=}       keys
	 * @param  {Object=}               options
	 * @return {!RegExp}
	 */
	function pathToRegexp (path, keys, options) {
	  if (!isarray(keys)) {
	    options = /** @type {!Object} */ (keys || options);
	    keys = [];
	  }

	  options = options || {};

	  if (path instanceof RegExp) {
	    return regexpToRegexp(path, /** @type {!Array} */ (keys))
	  }

	  if (isarray(path)) {
	    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)
	  }

	  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)
	}
	pathToRegexp_1.parse = parse_1;
	pathToRegexp_1.compile = compile_1;
	pathToRegexp_1.tokensToFunction = tokensToFunction_1;
	pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;

	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	var FORWARD_REF_STATICS = {
	  '$$typeof': true,
	  render: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true
	};
	var MEMO_STATICS = {
	  '$$typeof': true,
	  compare: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true,
	  type: true
	};
	var TYPE_STATICS = {};
	TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
	TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

	// TODO: Replace with React.createContext once we can assume React 16+

	var createNamedContext = function createNamedContext(name) {
	  var context = index();
	  context.displayName = name;
	  return context;
	};

	var historyContext =
	/*#__PURE__*/
	createNamedContext("Router-History");

	// TODO: Replace with React.createContext once we can assume React 16+

	var createNamedContext$1 = function createNamedContext(name) {
	  var context = index();
	  context.displayName = name;
	  return context;
	};

	var context =
	/*#__PURE__*/
	createNamedContext$1("Router");

	/**
	 * The public API for putting history on context.
	 */

	var Router =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose(Router, _React$Component);

	  Router.computeRootMatch = function computeRootMatch(pathname) {
	    return {
	      path: "/",
	      url: "/",
	      params: {},
	      isExact: pathname === "/"
	    };
	  };

	  function Router(props) {
	    var _this;

	    _this = _React$Component.call(this, props) || this;
	    _this.state = {
	      location: props.history.location
	    }; // This is a bit of a hack. We have to start listening for location
	    // changes here in the constructor in case there are any <Redirect>s
	    // on the initial render. If there are, they will replace/push when
	    // they mount and since cDM fires in children before parents, we may
	    // get a new location before the <Router> is mounted.

	    _this._isMounted = false;
	    _this._pendingLocation = null;

	    if (!props.staticContext) {
	      _this.unlisten = props.history.listen(function (location) {
	        if (_this._isMounted) {
	          _this.setState({
	            location: location
	          });
	        } else {
	          _this._pendingLocation = location;
	        }
	      });
	    }

	    return _this;
	  }

	  var _proto = Router.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    this._isMounted = true;

	    if (this._pendingLocation) {
	      this.setState({
	        location: this._pendingLocation
	      });
	    }
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    if (this.unlisten) this.unlisten();
	  };

	  _proto.render = function render() {
	    return react.createElement(context.Provider, {
	      value: {
	        history: this.props.history,
	        location: this.state.location,
	        match: Router.computeRootMatch(this.state.location.pathname),
	        staticContext: this.props.staticContext
	      }
	    }, react.createElement(historyContext.Provider, {
	      children: this.props.children || null,
	      value: this.props.history
	    }));
	  };

	  return Router;
	}(react.Component);

	{
	  Router.propTypes = {
	    children: propTypes.node,
	    history: propTypes.object.isRequired,
	    staticContext: propTypes.object
	  };

	  Router.prototype.componentDidUpdate = function (prevProps) {
	     warning(prevProps.history === this.props.history, "You cannot change <Router history>") ;
	  };
	}

	/**
	 * The public API for a <Router> that stores location in memory.
	 */

	var MemoryRouter =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose(MemoryRouter, _React$Component);

	  function MemoryRouter() {
	    var _this;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
	    _this.history = createMemoryHistory(_this.props);
	    return _this;
	  }

	  var _proto = MemoryRouter.prototype;

	  _proto.render = function render() {
	    return react.createElement(Router, {
	      history: this.history,
	      children: this.props.children
	    });
	  };

	  return MemoryRouter;
	}(react.Component);

	{
	  MemoryRouter.propTypes = {
	    initialEntries: propTypes.array,
	    initialIndex: propTypes.number,
	    getUserConfirmation: propTypes.func,
	    keyLength: propTypes.number,
	    children: propTypes.node
	  };

	  MemoryRouter.prototype.componentDidMount = function () {
	     warning(!this.props.history, "<MemoryRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { MemoryRouter as Router }`.") ;
	  };
	}

	var Lifecycle =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose(Lifecycle, _React$Component);

	  function Lifecycle() {
	    return _React$Component.apply(this, arguments) || this;
	  }

	  var _proto = Lifecycle.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    if (this.props.onMount) this.props.onMount.call(this, this);
	  };

	  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
	    if (this.props.onUpdate) this.props.onUpdate.call(this, this, prevProps);
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    if (this.props.onUnmount) this.props.onUnmount.call(this, this);
	  };

	  _proto.render = function render() {
	    return null;
	  };

	  return Lifecycle;
	}(react.Component);

	/**
	 * The public API for prompting the user before navigating away from a screen.
	 */

	function Prompt(_ref) {
	  var message = _ref.message,
	      _ref$when = _ref.when,
	      when = _ref$when === void 0 ? true : _ref$when;
	  return react.createElement(context.Consumer, null, function (context) {
	    !context ?  invariant(false, "You should not use <Prompt> outside a <Router>")  : void 0;
	    if (!when || context.staticContext) return null;
	    var method = context.history.block;
	    return react.createElement(Lifecycle, {
	      onMount: function onMount(self) {
	        self.release = method(message);
	      },
	      onUpdate: function onUpdate(self, prevProps) {
	        if (prevProps.message !== message) {
	          self.release();
	          self.release = method(message);
	        }
	      },
	      onUnmount: function onUnmount(self) {
	        self.release();
	      },
	      message: message
	    });
	  });
	}

	{
	  var messageType = propTypes.oneOfType([propTypes.func, propTypes.string]);
	  Prompt.propTypes = {
	    when: propTypes.bool,
	    message: messageType.isRequired
	  };
	}

	var cache = {};
	var cacheLimit = 10000;
	var cacheCount = 0;

	function compilePath(path) {
	  if (cache[path]) return cache[path];
	  var generator = pathToRegexp_1.compile(path);

	  if (cacheCount < cacheLimit) {
	    cache[path] = generator;
	    cacheCount++;
	  }

	  return generator;
	}
	/**
	 * Public API for generating a URL pathname from a path and parameters.
	 */


	function generatePath(path, params) {
	  if (path === void 0) {
	    path = "/";
	  }

	  if (params === void 0) {
	    params = {};
	  }

	  return path === "/" ? path : compilePath(path)(params, {
	    pretty: true
	  });
	}

	/**
	 * The public API for navigating programmatically with a component.
	 */

	function Redirect(_ref) {
	  var computedMatch = _ref.computedMatch,
	      to = _ref.to,
	      _ref$push = _ref.push,
	      push = _ref$push === void 0 ? false : _ref$push;
	  return react.createElement(context.Consumer, null, function (context) {
	    !context ?  invariant(false, "You should not use <Redirect> outside a <Router>")  : void 0;
	    var history = context.history,
	        staticContext = context.staticContext;
	    var method = push ? history.push : history.replace;
	    var location = createLocation(computedMatch ? typeof to === "string" ? generatePath(to, computedMatch.params) : _extends({}, to, {
	      pathname: generatePath(to.pathname, computedMatch.params)
	    }) : to); // When rendering in a static context,
	    // set the new location immediately.

	    if (staticContext) {
	      method(location);
	      return null;
	    }

	    return react.createElement(Lifecycle, {
	      onMount: function onMount() {
	        method(location);
	      },
	      onUpdate: function onUpdate(self, prevProps) {
	        var prevLocation = createLocation(prevProps.to);

	        if (!locationsAreEqual(prevLocation, _extends({}, location, {
	          key: prevLocation.key
	        }))) {
	          method(location);
	        }
	      },
	      to: to
	    });
	  });
	}

	{
	  Redirect.propTypes = {
	    push: propTypes.bool,
	    from: propTypes.string,
	    to: propTypes.oneOfType([propTypes.string, propTypes.object]).isRequired
	  };
	}

	var cache$1 = {};
	var cacheLimit$1 = 10000;
	var cacheCount$1 = 0;

	function compilePath$1(path, options) {
	  var cacheKey = "" + options.end + options.strict + options.sensitive;
	  var pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {});
	  if (pathCache[path]) return pathCache[path];
	  var keys = [];
	  var regexp = pathToRegexp_1(path, keys, options);
	  var result = {
	    regexp: regexp,
	    keys: keys
	  };

	  if (cacheCount$1 < cacheLimit$1) {
	    pathCache[path] = result;
	    cacheCount$1++;
	  }

	  return result;
	}
	/**
	 * Public API for matching a URL pathname to a path.
	 */


	function matchPath(pathname, options) {
	  if (options === void 0) {
	    options = {};
	  }

	  if (typeof options === "string" || Array.isArray(options)) {
	    options = {
	      path: options
	    };
	  }

	  var _options = options,
	      path = _options.path,
	      _options$exact = _options.exact,
	      exact = _options$exact === void 0 ? false : _options$exact,
	      _options$strict = _options.strict,
	      strict = _options$strict === void 0 ? false : _options$strict,
	      _options$sensitive = _options.sensitive,
	      sensitive = _options$sensitive === void 0 ? false : _options$sensitive;
	  var paths = [].concat(path);
	  return paths.reduce(function (matched, path) {
	    if (!path && path !== "") return null;
	    if (matched) return matched;

	    var _compilePath = compilePath$1(path, {
	      end: exact,
	      strict: strict,
	      sensitive: sensitive
	    }),
	        regexp = _compilePath.regexp,
	        keys = _compilePath.keys;

	    var match = regexp.exec(pathname);
	    if (!match) return null;
	    var url = match[0],
	        values = match.slice(1);
	    var isExact = pathname === url;
	    if (exact && !isExact) return null;
	    return {
	      path: path,
	      // the path used to match
	      url: path === "/" && url === "" ? "/" : url,
	      // the matched portion of the URL
	      isExact: isExact,
	      // whether or not we matched exactly
	      params: keys.reduce(function (memo, key, index) {
	        memo[key.name] = values[index];
	        return memo;
	      }, {})
	    };
	  }, null);
	}

	function isEmptyChildren(children) {
	  return react.Children.count(children) === 0;
	}

	function evalChildrenDev(children, props, path) {
	  var value = children(props);
	   warning(value !== undefined, "You returned `undefined` from the `children` function of " + ("<Route" + (path ? " path=\"" + path + "\"" : "") + ">, but you ") + "should have returned a React element or `null`") ;
	  return value || null;
	}
	/**
	 * The public API for matching a single path and rendering.
	 */


	var Route =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose(Route, _React$Component);

	  function Route() {
	    return _React$Component.apply(this, arguments) || this;
	  }

	  var _proto = Route.prototype;

	  _proto.render = function render() {
	    var _this = this;

	    return react.createElement(context.Consumer, null, function (context$1) {
	      !context$1 ?  invariant(false, "You should not use <Route> outside a <Router>")  : void 0;
	      var location = _this.props.location || context$1.location;
	      var match = _this.props.computedMatch ? _this.props.computedMatch // <Switch> already computed the match for us
	      : _this.props.path ? matchPath(location.pathname, _this.props) : context$1.match;

	      var props = _extends({}, context$1, {
	        location: location,
	        match: match
	      });

	      var _this$props = _this.props,
	          children = _this$props.children,
	          component = _this$props.component,
	          render = _this$props.render; // Preact uses an empty array as children by
	      // default, so use null if that's the case.

	      if (Array.isArray(children) && children.length === 0) {
	        children = null;
	      }

	      return react.createElement(context.Provider, {
	        value: props
	      }, props.match ? children ? typeof children === "function" ?  evalChildrenDev(children, props, _this.props.path)  : children : component ? react.createElement(component, props) : render ? render(props) : null : typeof children === "function" ?  evalChildrenDev(children, props, _this.props.path)  : null);
	    });
	  };

	  return Route;
	}(react.Component);

	{
	  Route.propTypes = {
	    children: propTypes.oneOfType([propTypes.func, propTypes.node]),
	    component: function component(props, propName) {
	      if (props[propName] && !reactIs_1(props[propName])) {
	        return new Error("Invalid prop 'component' supplied to 'Route': the prop is not a valid React component");
	      }
	    },
	    exact: propTypes.bool,
	    location: propTypes.object,
	    path: propTypes.oneOfType([propTypes.string, propTypes.arrayOf(propTypes.string)]),
	    render: propTypes.func,
	    sensitive: propTypes.bool,
	    strict: propTypes.bool
	  };

	  Route.prototype.componentDidMount = function () {
	     warning(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.component), "You should not use <Route component> and <Route children> in the same route; <Route component> will be ignored") ;
	     warning(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.render), "You should not use <Route render> and <Route children> in the same route; <Route render> will be ignored") ;
	     warning(!(this.props.component && this.props.render), "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored") ;
	  };

	  Route.prototype.componentDidUpdate = function (prevProps) {
	     warning(!(this.props.location && !prevProps.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.') ;
	     warning(!(!this.props.location && prevProps.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.') ;
	  };
	}

	function addLeadingSlash$1(path) {
	  return path.charAt(0) === "/" ? path : "/" + path;
	}

	function addBasename(basename, location) {
	  if (!basename) return location;
	  return _extends({}, location, {
	    pathname: addLeadingSlash$1(basename) + location.pathname
	  });
	}

	function stripBasename$1(basename, location) {
	  if (!basename) return location;
	  var base = addLeadingSlash$1(basename);
	  if (location.pathname.indexOf(base) !== 0) return location;
	  return _extends({}, location, {
	    pathname: location.pathname.substr(base.length)
	  });
	}

	function createURL(location) {
	  return typeof location === "string" ? location : createPath(location);
	}

	function staticHandler(methodName) {
	  return function () {
	      invariant(false, "You cannot %s with <StaticRouter>")  ;
	  };
	}

	function noop() {}
	/**
	 * The public top-level API for a "static" <Router>, so-called because it
	 * can't actually change the current location. Instead, it just records
	 * location changes in a context object. Useful mainly in testing and
	 * server-rendering scenarios.
	 */


	var StaticRouter =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose(StaticRouter, _React$Component);

	  function StaticRouter() {
	    var _this;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

	    _this.handlePush = function (location) {
	      return _this.navigateTo(location, "PUSH");
	    };

	    _this.handleReplace = function (location) {
	      return _this.navigateTo(location, "REPLACE");
	    };

	    _this.handleListen = function () {
	      return noop;
	    };

	    _this.handleBlock = function () {
	      return noop;
	    };

	    return _this;
	  }

	  var _proto = StaticRouter.prototype;

	  _proto.navigateTo = function navigateTo(location, action) {
	    var _this$props = this.props,
	        _this$props$basename = _this$props.basename,
	        basename = _this$props$basename === void 0 ? "" : _this$props$basename,
	        _this$props$context = _this$props.context,
	        context = _this$props$context === void 0 ? {} : _this$props$context;
	    context.action = action;
	    context.location = addBasename(basename, createLocation(location));
	    context.url = createURL(context.location);
	  };

	  _proto.render = function render() {
	    var _this$props2 = this.props,
	        _this$props2$basename = _this$props2.basename,
	        basename = _this$props2$basename === void 0 ? "" : _this$props2$basename,
	        _this$props2$context = _this$props2.context,
	        context = _this$props2$context === void 0 ? {} : _this$props2$context,
	        _this$props2$location = _this$props2.location,
	        location = _this$props2$location === void 0 ? "/" : _this$props2$location,
	        rest = _objectWithoutPropertiesLoose(_this$props2, ["basename", "context", "location"]);

	    var history = {
	      createHref: function createHref(path) {
	        return addLeadingSlash$1(basename + createURL(path));
	      },
	      action: "POP",
	      location: stripBasename$1(basename, createLocation(location)),
	      push: this.handlePush,
	      replace: this.handleReplace,
	      go: staticHandler(),
	      goBack: staticHandler(),
	      goForward: staticHandler(),
	      listen: this.handleListen,
	      block: this.handleBlock
	    };
	    return react.createElement(Router, _extends({}, rest, {
	      history: history,
	      staticContext: context
	    }));
	  };

	  return StaticRouter;
	}(react.Component);

	{
	  StaticRouter.propTypes = {
	    basename: propTypes.string,
	    context: propTypes.object,
	    location: propTypes.oneOfType([propTypes.string, propTypes.object])
	  };

	  StaticRouter.prototype.componentDidMount = function () {
	     warning(!this.props.history, "<StaticRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { StaticRouter as Router }`.") ;
	  };
	}

	/**
	 * The public API for rendering the first <Route> that matches.
	 */

	var Switch =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose(Switch, _React$Component);

	  function Switch() {
	    return _React$Component.apply(this, arguments) || this;
	  }

	  var _proto = Switch.prototype;

	  _proto.render = function render() {
	    var _this = this;

	    return react.createElement(context.Consumer, null, function (context) {
	      !context ?  invariant(false, "You should not use <Switch> outside a <Router>")  : void 0;
	      var location = _this.props.location || context.location;
	      var element, match; // We use React.Children.forEach instead of React.Children.toArray().find()
	      // here because toArray adds keys to all child elements and we do not want
	      // to trigger an unmount/remount for two <Route>s that render the same
	      // component at different URLs.

	      react.Children.forEach(_this.props.children, function (child) {
	        if (match == null && react.isValidElement(child)) {
	          element = child;
	          var path = child.props.path || child.props.from;
	          match = path ? matchPath(location.pathname, _extends({}, child.props, {
	            path: path
	          })) : context.match;
	        }
	      });
	      return match ? react.cloneElement(element, {
	        location: location,
	        computedMatch: match
	      }) : null;
	    });
	  };

	  return Switch;
	}(react.Component);

	{
	  Switch.propTypes = {
	    children: propTypes.node,
	    location: propTypes.object
	  };

	  Switch.prototype.componentDidUpdate = function (prevProps) {
	     warning(!(this.props.location && !prevProps.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.') ;
	     warning(!(!this.props.location && prevProps.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.') ;
	  };
	}

	var useContext = react.useContext;
	function useLocation() {
	  {
	    !(typeof useContext === "function") ?  invariant(false, "You must use React >= 16.8 in order to use useLocation()")  : void 0;
	  }

	  return useContext(context).location;
	}
	function useRouteMatch(path) {
	  {
	    !(typeof useContext === "function") ?  invariant(false, "You must use React >= 16.8 in order to use useRouteMatch()")  : void 0;
	  }

	  var location = useLocation();
	  var match = useContext(context).match;
	  return path ? matchPath(location.pathname, path) : match;
	}

	{
	  if (typeof window !== "undefined") {
	    var global$2 = window;
	    var key = "__react_router_build__";
	    var buildNames = {
	      cjs: "CommonJS",
	      esm: "ES modules",
	      umd: "UMD"
	    };

	    if (global$2[key] && global$2[key] !== "esm") {
	      var initialBuildName = buildNames[global$2[key]];
	      var secondaryBuildName = buildNames["esm"]; // TODO: Add link to article that explains in detail how to avoid
	      // loading 2 different builds.

	      throw new Error("You are loading the " + secondaryBuildName + " build of React Router " + ("on a page that is already running the " + initialBuildName + " ") + "build, so things won't work right.");
	    }

	    global$2[key] = "esm";
	  }
	}

	/**
	 * The public API for a <Router> that uses HTML5 history.
	 */

	var BrowserRouter =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose(BrowserRouter, _React$Component);

	  function BrowserRouter() {
	    var _this;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
	    _this.history = createBrowserHistory(_this.props);
	    return _this;
	  }

	  var _proto = BrowserRouter.prototype;

	  _proto.render = function render() {
	    return react.createElement(Router, {
	      history: this.history,
	      children: this.props.children
	    });
	  };

	  return BrowserRouter;
	}(react.Component);

	{
	  BrowserRouter.propTypes = {
	    basename: propTypes.string,
	    children: propTypes.node,
	    forceRefresh: propTypes.bool,
	    getUserConfirmation: propTypes.func,
	    keyLength: propTypes.number
	  };

	  BrowserRouter.prototype.componentDidMount = function () {
	     warning(!this.props.history, "<BrowserRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { BrowserRouter as Router }`.") ;
	  };
	}

	/**
	 * The public API for a <Router> that uses window.location.hash.
	 */

	var HashRouter =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose(HashRouter, _React$Component);

	  function HashRouter() {
	    var _this;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
	    _this.history = createHashHistory(_this.props);
	    return _this;
	  }

	  var _proto = HashRouter.prototype;

	  _proto.render = function render() {
	    return react.createElement(Router, {
	      history: this.history,
	      children: this.props.children
	    });
	  };

	  return HashRouter;
	}(react.Component);

	{
	  HashRouter.propTypes = {
	    basename: propTypes.string,
	    children: propTypes.node,
	    getUserConfirmation: propTypes.func,
	    hashType: propTypes.oneOf(["hashbang", "noslash", "slash"])
	  };

	  HashRouter.prototype.componentDidMount = function () {
	     warning(!this.props.history, "<HashRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { HashRouter as Router }`.") ;
	  };
	}

	var resolveToLocation = function resolveToLocation(to, currentLocation) {
	  return typeof to === "function" ? to(currentLocation) : to;
	};
	var normalizeToLocation = function normalizeToLocation(to, currentLocation) {
	  return typeof to === "string" ? createLocation(to, null, null, currentLocation) : to;
	};

	var forwardRefShim = function forwardRefShim(C) {
	  return C;
	};

	var forwardRef = react.forwardRef;

	if (typeof forwardRef === "undefined") {
	  forwardRef = forwardRefShim;
	}

	function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	}

	var LinkAnchor = forwardRef(function (_ref, forwardedRef) {
	  var innerRef = _ref.innerRef,
	      navigate = _ref.navigate,
	      _onClick = _ref.onClick,
	      rest = _objectWithoutPropertiesLoose(_ref, ["innerRef", "navigate", "onClick"]);

	  var target = rest.target;

	  var props = _extends({}, rest, {
	    onClick: function onClick(event) {
	      try {
	        if (_onClick) _onClick(event);
	      } catch (ex) {
	        event.preventDefault();
	        throw ex;
	      }

	      if (!event.defaultPrevented && // onClick prevented default
	      event.button === 0 && ( // ignore everything but left clicks
	      !target || target === "_self") && // let browser handle "target=_blank" etc.
	      !isModifiedEvent(event) // ignore clicks with modifier keys
	      ) {
	          event.preventDefault();
	          navigate();
	        }
	    }
	  }); // React 15 compat


	  if (forwardRefShim !== forwardRef) {
	    props.ref = forwardedRef || innerRef;
	  } else {
	    props.ref = innerRef;
	  }
	  /* eslint-disable-next-line jsx-a11y/anchor-has-content */


	  return react.createElement("a", props);
	});

	{
	  LinkAnchor.displayName = "LinkAnchor";
	}
	/**
	 * The public API for rendering a history-aware <a>.
	 */


	var Link = forwardRef(function (_ref2, forwardedRef) {
	  var _ref2$component = _ref2.component,
	      component = _ref2$component === void 0 ? LinkAnchor : _ref2$component,
	      replace = _ref2.replace,
	      to = _ref2.to,
	      innerRef = _ref2.innerRef,
	      rest = _objectWithoutPropertiesLoose(_ref2, ["component", "replace", "to", "innerRef"]);

	  return react.createElement(context.Consumer, null, function (context) {
	    !context ?  invariant(false, "You should not use <Link> outside a <Router>")  : void 0;
	    var history = context.history;
	    var location = normalizeToLocation(resolveToLocation(to, context.location), context.location);
	    var href = location ? history.createHref(location) : "";

	    var props = _extends({}, rest, {
	      href: href,
	      navigate: function navigate() {
	        var location = resolveToLocation(to, context.location);
	        var method = replace ? history.replace : history.push;
	        method(location);
	      }
	    }); // React 15 compat


	    if (forwardRefShim !== forwardRef) {
	      props.ref = forwardedRef || innerRef;
	    } else {
	      props.innerRef = innerRef;
	    }

	    return react.createElement(component, props);
	  });
	});

	{
	  var toType = propTypes.oneOfType([propTypes.string, propTypes.object, propTypes.func]);
	  var refType = propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.shape({
	    current: propTypes.any
	  })]);
	  Link.displayName = "Link";
	  Link.propTypes = {
	    innerRef: refType,
	    onClick: propTypes.func,
	    replace: propTypes.bool,
	    target: propTypes.string,
	    to: toType.isRequired
	  };
	}

	var forwardRefShim$1 = function forwardRefShim(C) {
	  return C;
	};

	var forwardRef$1 = react.forwardRef;

	if (typeof forwardRef$1 === "undefined") {
	  forwardRef$1 = forwardRefShim$1;
	}

	function joinClassnames() {
	  for (var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++) {
	    classnames[_key] = arguments[_key];
	  }

	  return classnames.filter(function (i) {
	    return i;
	  }).join(" ");
	}
	/**
	 * A <Link> wrapper that knows if it's "active" or not.
	 */


	var NavLink = forwardRef$1(function (_ref, forwardedRef) {
	  var _ref$ariaCurrent = _ref["aria-current"],
	      ariaCurrent = _ref$ariaCurrent === void 0 ? "page" : _ref$ariaCurrent,
	      _ref$activeClassName = _ref.activeClassName,
	      activeClassName = _ref$activeClassName === void 0 ? "active" : _ref$activeClassName,
	      activeStyle = _ref.activeStyle,
	      classNameProp = _ref.className,
	      exact = _ref.exact,
	      isActiveProp = _ref.isActive,
	      locationProp = _ref.location,
	      sensitive = _ref.sensitive,
	      strict = _ref.strict,
	      styleProp = _ref.style,
	      to = _ref.to,
	      innerRef = _ref.innerRef,
	      rest = _objectWithoutPropertiesLoose(_ref, ["aria-current", "activeClassName", "activeStyle", "className", "exact", "isActive", "location", "sensitive", "strict", "style", "to", "innerRef"]);

	  return react.createElement(context.Consumer, null, function (context) {
	    !context ?  invariant(false, "You should not use <NavLink> outside a <Router>")  : void 0;
	    var currentLocation = locationProp || context.location;
	    var toLocation = normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);
	    var path = toLocation.pathname; // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202

	    var escapedPath = path && path.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
	    var match = escapedPath ? matchPath(currentLocation.pathname, {
	      path: escapedPath,
	      exact: exact,
	      sensitive: sensitive,
	      strict: strict
	    }) : null;
	    var isActive = !!(isActiveProp ? isActiveProp(match, currentLocation) : match);
	    var className = isActive ? joinClassnames(classNameProp, activeClassName) : classNameProp;
	    var style = isActive ? _extends({}, styleProp, {}, activeStyle) : styleProp;

	    var props = _extends({
	      "aria-current": isActive && ariaCurrent || null,
	      className: className,
	      style: style,
	      to: toLocation
	    }, rest); // React 15 compat


	    if (forwardRefShim$1 !== forwardRef$1) {
	      props.ref = forwardedRef || innerRef;
	    } else {
	      props.innerRef = innerRef;
	    }

	    return react.createElement(Link, props);
	  });
	});

	{
	  NavLink.displayName = "NavLink";
	  var ariaCurrentType = propTypes.oneOf(["page", "step", "location", "date", "time", "true"]);
	  NavLink.propTypes = _extends({}, Link.propTypes, {
	    "aria-current": ariaCurrentType,
	    activeClassName: propTypes.string,
	    activeStyle: propTypes.object,
	    className: propTypes.string,
	    exact: propTypes.bool,
	    isActive: propTypes.func,
	    location: propTypes.object,
	    sensitive: propTypes.bool,
	    strict: propTypes.bool,
	    style: propTypes.object
	  });
	}

	var tslib = createCommonjsModule(function (module) {
	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */
	/* global global, define, System, Reflect, Promise */
	var __extends;
	var __assign;
	var __rest;
	var __decorate;
	var __param;
	var __metadata;
	var __awaiter;
	var __generator;
	var __exportStar;
	var __values;
	var __read;
	var __spread;
	var __spreadArrays;
	var __await;
	var __asyncGenerator;
	var __asyncDelegator;
	var __asyncValues;
	var __makeTemplateObject;
	var __importStar;
	var __importDefault;
	var __classPrivateFieldGet;
	var __classPrivateFieldSet;
	var __createBinding;
	(function (factory) {
	    var root = typeof global$1 === "object" ? global$1 : typeof self === "object" ? self : typeof this === "object" ? this : {};
	    {
	        factory(createExporter(root, createExporter(module.exports)));
	    }
	    function createExporter(exports, previous) {
	        if (exports !== root) {
	            if (typeof Object.create === "function") {
	                Object.defineProperty(exports, "__esModule", { value: true });
	            }
	            else {
	                exports.__esModule = true;
	            }
	        }
	        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };
	    }
	})
	(function (exporter) {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };

	    __extends = function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };

	    __assign = Object.assign || function (t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	        }
	        return t;
	    };

	    __rest = function (s, e) {
	        var t = {};
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	            t[p] = s[p];
	        if (s != null && typeof Object.getOwnPropertySymbols === "function")
	            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                    t[p[i]] = s[p[i]];
	            }
	        return t;
	    };

	    __decorate = function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };

	    __param = function (paramIndex, decorator) {
	        return function (target, key) { decorator(target, key, paramIndex); }
	    };

	    __metadata = function (metadataKey, metadataValue) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
	    };

	    __awaiter = function (thisArg, _arguments, P, generator) {
	        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	        return new (P || (P = Promise))(function (resolve, reject) {
	            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	            step((generator = generator.apply(thisArg, _arguments || [])).next());
	        });
	    };

	    __generator = function (thisArg, body) {
	        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	        function verb(n) { return function (v) { return step([n, v]); }; }
	        function step(op) {
	            if (f) throw new TypeError("Generator is already executing.");
	            while (_) try {
	                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	                if (y = 0, t) op = [op[0] & 2, t.value];
	                switch (op[0]) {
	                    case 0: case 1: t = op; break;
	                    case 4: _.label++; return { value: op[1], done: false };
	                    case 5: _.label++; y = op[1]; op = [0]; continue;
	                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                    default:
	                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                        if (t[2]) _.ops.pop();
	                        _.trys.pop(); continue;
	                }
	                op = body.call(thisArg, _);
	            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	        }
	    };

	    __exportStar = function(m, o) {
	        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
	    };

	    __createBinding = Object.create ? (function(o, m, k, k2) {
	        if (k2 === undefined) k2 = k;
	        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	    }) : (function(o, m, k, k2) {
	        if (k2 === undefined) k2 = k;
	        o[k2] = m[k];
	    });

	    __values = function (o) {
	        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
	        if (m) return m.call(o);
	        if (o && typeof o.length === "number") return {
	            next: function () {
	                if (o && i >= o.length) o = void 0;
	                return { value: o && o[i++], done: !o };
	            }
	        };
	        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
	    };

	    __read = function (o, n) {
	        var m = typeof Symbol === "function" && o[Symbol.iterator];
	        if (!m) return o;
	        var i = m.call(o), r, ar = [], e;
	        try {
	            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	        }
	        catch (error) { e = { error: error }; }
	        finally {
	            try {
	                if (r && !r.done && (m = i["return"])) m.call(i);
	            }
	            finally { if (e) throw e.error; }
	        }
	        return ar;
	    };

	    __spread = function () {
	        for (var ar = [], i = 0; i < arguments.length; i++)
	            ar = ar.concat(__read(arguments[i]));
	        return ar;
	    };

	    __spreadArrays = function () {
	        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
	        for (var r = Array(s), k = 0, i = 0; i < il; i++)
	            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
	                r[k] = a[j];
	        return r;
	    };

	    __await = function (v) {
	        return this instanceof __await ? (this.v = v, this) : new __await(v);
	    };

	    __asyncGenerator = function (thisArg, _arguments, generator) {
	        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
	        var g = generator.apply(thisArg, _arguments || []), i, q = [];
	        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
	        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
	        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
	        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }
	        function fulfill(value) { resume("next", value); }
	        function reject(value) { resume("throw", value); }
	        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
	    };

	    __asyncDelegator = function (o) {
	        var i, p;
	        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
	        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
	    };

	    __asyncValues = function (o) {
	        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
	        var m = o[Symbol.asyncIterator], i;
	        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
	        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
	        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
	    };

	    __makeTemplateObject = function (cooked, raw) {
	        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
	        return cooked;
	    };

	    var __setModuleDefault = Object.create ? (function(o, v) {
	        Object.defineProperty(o, "default", { enumerable: true, value: v });
	    }) : function(o, v) {
	        o["default"] = v;
	    };

	    __importStar = function (mod) {
	        if (mod && mod.__esModule) return mod;
	        var result = {};
	        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	        __setModuleDefault(result, mod);
	        return result;
	    };

	    __importDefault = function (mod) {
	        return (mod && mod.__esModule) ? mod : { "default": mod };
	    };

	    __classPrivateFieldGet = function (receiver, privateMap) {
	        if (!privateMap.has(receiver)) {
	            throw new TypeError("attempted to get private field on non-instance");
	        }
	        return privateMap.get(receiver);
	    };

	    __classPrivateFieldSet = function (receiver, privateMap, value) {
	        if (!privateMap.has(receiver)) {
	            throw new TypeError("attempted to set private field on non-instance");
	        }
	        privateMap.set(receiver, value);
	        return value;
	    };

	    exporter("__extends", __extends);
	    exporter("__assign", __assign);
	    exporter("__rest", __rest);
	    exporter("__decorate", __decorate);
	    exporter("__param", __param);
	    exporter("__metadata", __metadata);
	    exporter("__awaiter", __awaiter);
	    exporter("__generator", __generator);
	    exporter("__exportStar", __exportStar);
	    exporter("__createBinding", __createBinding);
	    exporter("__values", __values);
	    exporter("__read", __read);
	    exporter("__spread", __spread);
	    exporter("__spreadArrays", __spreadArrays);
	    exporter("__await", __await);
	    exporter("__asyncGenerator", __asyncGenerator);
	    exporter("__asyncDelegator", __asyncDelegator);
	    exporter("__asyncValues", __asyncValues);
	    exporter("__makeTemplateObject", __makeTemplateObject);
	    exporter("__importStar", __importStar);
	    exporter("__importDefault", __importDefault);
	    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
	    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
	});
	});

	unwrapExports(tslib);
	var tslib_1 = tslib.__extends;
	var tslib_2 = tslib.__assign;
	var tslib_3 = tslib.__rest;
	var tslib_4 = tslib.__decorate;
	var tslib_5 = tslib.__param;
	var tslib_6 = tslib.__metadata;
	var tslib_7 = tslib.__awaiter;
	var tslib_8 = tslib.__generator;
	var tslib_9 = tslib.__exportStar;
	var tslib_10 = tslib.__values;
	var tslib_11 = tslib.__read;
	var tslib_12 = tslib.__spread;
	var tslib_13 = tslib.__spreadArrays;
	var tslib_14 = tslib.__await;
	var tslib_15 = tslib.__asyncGenerator;
	var tslib_16 = tslib.__asyncDelegator;
	var tslib_17 = tslib.__asyncValues;
	var tslib_18 = tslib.__makeTemplateObject;
	var tslib_19 = tslib.__importStar;
	var tslib_20 = tslib.__importDefault;
	var tslib_21 = tslib.__classPrivateFieldGet;
	var tslib_22 = tslib.__classPrivateFieldSet;

	var index_cjs = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, '__esModule', { value: true });



	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
	 */
	var CONSTANTS = {
	    /**
	     * @define {boolean} Whether this is the client Node.js SDK.
	     */
	    NODE_CLIENT: false,
	    /**
	     * @define {boolean} Whether this is the Admin Node.js SDK.
	     */
	    NODE_ADMIN: false,
	    /**
	     * Firebase SDK Version
	     */
	    SDK_VERSION: '${JSCORE_VERSION}'
	};

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Throws an error if the provided assertion is falsy
	 */
	var assert = function (assertion, message) {
	    if (!assertion) {
	        throw assertionError(message);
	    }
	};
	/**
	 * Returns an Error object suitable for throwing.
	 */
	var assertionError = function (message) {
	    return new Error('Firebase Database (' +
	        CONSTANTS.SDK_VERSION +
	        ') INTERNAL ASSERT FAILED: ' +
	        message);
	};

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var stringToByteArray = function (str) {
	    // TODO(user): Use native implementations if/when available
	    var out = [];
	    var p = 0;
	    for (var i = 0; i < str.length; i++) {
	        var c = str.charCodeAt(i);
	        if (c < 128) {
	            out[p++] = c;
	        }
	        else if (c < 2048) {
	            out[p++] = (c >> 6) | 192;
	            out[p++] = (c & 63) | 128;
	        }
	        else if ((c & 0xfc00) === 0xd800 &&
	            i + 1 < str.length &&
	            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
	            // Surrogate Pair
	            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
	            out[p++] = (c >> 18) | 240;
	            out[p++] = ((c >> 12) & 63) | 128;
	            out[p++] = ((c >> 6) & 63) | 128;
	            out[p++] = (c & 63) | 128;
	        }
	        else {
	            out[p++] = (c >> 12) | 224;
	            out[p++] = ((c >> 6) & 63) | 128;
	            out[p++] = (c & 63) | 128;
	        }
	    }
	    return out;
	};
	/**
	 * Turns an array of numbers into the string given by the concatenation of the
	 * characters to which the numbers correspond.
	 * @param bytes Array of numbers representing characters.
	 * @return Stringification of the array.
	 */
	var byteArrayToString = function (bytes) {
	    // TODO(user): Use native implementations if/when available
	    var out = [];
	    var pos = 0, c = 0;
	    while (pos < bytes.length) {
	        var c1 = bytes[pos++];
	        if (c1 < 128) {
	            out[c++] = String.fromCharCode(c1);
	        }
	        else if (c1 > 191 && c1 < 224) {
	            var c2 = bytes[pos++];
	            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
	        }
	        else if (c1 > 239 && c1 < 365) {
	            // Surrogate Pair
	            var c2 = bytes[pos++];
	            var c3 = bytes[pos++];
	            var c4 = bytes[pos++];
	            var u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -
	                0x10000;
	            out[c++] = String.fromCharCode(0xd800 + (u >> 10));
	            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
	        }
	        else {
	            var c2 = bytes[pos++];
	            var c3 = bytes[pos++];
	            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
	        }
	    }
	    return out.join('');
	};
	// We define it as an object literal instead of a class because a class compiled down to es5 can't
	// be treeshaked. https://github.com/rollup/rollup/issues/1691
	// Static lookup maps, lazily populated by init_()
	var base64 = {
	    /**
	     * Maps bytes to characters.
	     */
	    byteToCharMap_: null,
	    /**
	     * Maps characters to bytes.
	     */
	    charToByteMap_: null,
	    /**
	     * Maps bytes to websafe characters.
	     * @private
	     */
	    byteToCharMapWebSafe_: null,
	    /**
	     * Maps websafe characters to bytes.
	     * @private
	     */
	    charToByteMapWebSafe_: null,
	    /**
	     * Our default alphabet, shared between
	     * ENCODED_VALS and ENCODED_VALS_WEBSAFE
	     */
	    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',
	    /**
	     * Our default alphabet. Value 64 (=) is special; it means "nothing."
	     */
	    get ENCODED_VALS() {
	        return this.ENCODED_VALS_BASE + '+/=';
	    },
	    /**
	     * Our websafe alphabet.
	     */
	    get ENCODED_VALS_WEBSAFE() {
	        return this.ENCODED_VALS_BASE + '-_.';
	    },
	    /**
	     * Whether this browser supports the atob and btoa functions. This extension
	     * started at Mozilla but is now implemented by many browsers. We use the
	     * ASSUME_* variables to avoid pulling in the full useragent detection library
	     * but still allowing the standard per-browser compilations.
	     *
	     */
	    HAS_NATIVE_SUPPORT: typeof atob === 'function',
	    /**
	     * Base64-encode an array of bytes.
	     *
	     * @param input An array of bytes (numbers with
	     *     value in [0, 255]) to encode.
	     * @param webSafe Boolean indicating we should use the
	     *     alternative alphabet.
	     * @return The base64 encoded string.
	     */
	    encodeByteArray: function (input, webSafe) {
	        if (!Array.isArray(input)) {
	            throw Error('encodeByteArray takes an array as a parameter');
	        }
	        this.init_();
	        var byteToCharMap = webSafe
	            ? this.byteToCharMapWebSafe_
	            : this.byteToCharMap_;
	        var output = [];
	        for (var i = 0; i < input.length; i += 3) {
	            var byte1 = input[i];
	            var haveByte2 = i + 1 < input.length;
	            var byte2 = haveByte2 ? input[i + 1] : 0;
	            var haveByte3 = i + 2 < input.length;
	            var byte3 = haveByte3 ? input[i + 2] : 0;
	            var outByte1 = byte1 >> 2;
	            var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);
	            var outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);
	            var outByte4 = byte3 & 0x3f;
	            if (!haveByte3) {
	                outByte4 = 64;
	                if (!haveByte2) {
	                    outByte3 = 64;
	                }
	            }
	            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
	        }
	        return output.join('');
	    },
	    /**
	     * Base64-encode a string.
	     *
	     * @param input A string to encode.
	     * @param webSafe If true, we should use the
	     *     alternative alphabet.
	     * @return The base64 encoded string.
	     */
	    encodeString: function (input, webSafe) {
	        // Shortcut for Mozilla browsers that implement
	        // a native base64 encoder in the form of "btoa/atob"
	        if (this.HAS_NATIVE_SUPPORT && !webSafe) {
	            return btoa(input);
	        }
	        return this.encodeByteArray(stringToByteArray(input), webSafe);
	    },
	    /**
	     * Base64-decode a string.
	     *
	     * @param input to decode.
	     * @param webSafe True if we should use the
	     *     alternative alphabet.
	     * @return string representing the decoded value.
	     */
	    decodeString: function (input, webSafe) {
	        // Shortcut for Mozilla browsers that implement
	        // a native base64 encoder in the form of "btoa/atob"
	        if (this.HAS_NATIVE_SUPPORT && !webSafe) {
	            return atob(input);
	        }
	        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
	    },
	    /**
	     * Base64-decode a string.
	     *
	     * In base-64 decoding, groups of four characters are converted into three
	     * bytes.  If the encoder did not apply padding, the input length may not
	     * be a multiple of 4.
	     *
	     * In this case, the last group will have fewer than 4 characters, and
	     * padding will be inferred.  If the group has one or two characters, it decodes
	     * to one byte.  If the group has three characters, it decodes to two bytes.
	     *
	     * @param input Input to decode.
	     * @param webSafe True if we should use the web-safe alphabet.
	     * @return bytes representing the decoded value.
	     */
	    decodeStringToByteArray: function (input, webSafe) {
	        this.init_();
	        var charToByteMap = webSafe
	            ? this.charToByteMapWebSafe_
	            : this.charToByteMap_;
	        var output = [];
	        for (var i = 0; i < input.length;) {
	            var byte1 = charToByteMap[input.charAt(i++)];
	            var haveByte2 = i < input.length;
	            var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
	            ++i;
	            var haveByte3 = i < input.length;
	            var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
	            ++i;
	            var haveByte4 = i < input.length;
	            var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
	            ++i;
	            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
	                throw Error();
	            }
	            var outByte1 = (byte1 << 2) | (byte2 >> 4);
	            output.push(outByte1);
	            if (byte3 !== 64) {
	                var outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);
	                output.push(outByte2);
	                if (byte4 !== 64) {
	                    var outByte3 = ((byte3 << 6) & 0xc0) | byte4;
	                    output.push(outByte3);
	                }
	            }
	        }
	        return output;
	    },
	    /**
	     * Lazy static initialization function. Called before
	     * accessing any of the static map variables.
	     * @private
	     */
	    init_: function () {
	        if (!this.byteToCharMap_) {
	            this.byteToCharMap_ = {};
	            this.charToByteMap_ = {};
	            this.byteToCharMapWebSafe_ = {};
	            this.charToByteMapWebSafe_ = {};
	            // We want quick mappings back and forth, so we precompute two maps.
	            for (var i = 0; i < this.ENCODED_VALS.length; i++) {
	                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
	                this.charToByteMap_[this.byteToCharMap_[i]] = i;
	                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
	                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
	                // Be forgiving when decoding and correctly decode both encodings.
	                if (i >= this.ENCODED_VALS_BASE.length) {
	                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
	                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
	                }
	            }
	        }
	    }
	};
	/**
	 * URL-safe base64 encoding
	 */
	var base64Encode = function (str) {
	    var utf8Bytes = stringToByteArray(str);
	    return base64.encodeByteArray(utf8Bytes, true);
	};
	/**
	 * URL-safe base64 decoding
	 *
	 * NOTE: DO NOT use the global atob() function - it does NOT support the
	 * base64Url variant encoding.
	 *
	 * @param str To be decoded
	 * @return Decoded result, if possible
	 */
	var base64Decode = function (str) {
	    try {
	        return base64.decodeString(str, true);
	    }
	    catch (e) {
	        console.error('base64Decode failed: ', e);
	    }
	    return null;
	};

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Do a deep-copy of basic JavaScript Objects or Arrays.
	 */
	function deepCopy(value) {
	    return deepExtend(undefined, value);
	}
	/**
	 * Copy properties from source to target (recursively allows extension
	 * of Objects and Arrays).  Scalar values in the target are over-written.
	 * If target is undefined, an object of the appropriate type will be created
	 * (and returned).
	 *
	 * We recursively copy all child properties of plain Objects in the source- so
	 * that namespace- like dictionaries are merged.
	 *
	 * Note that the target can be a function, in which case the properties in
	 * the source Object are copied onto it as static properties of the Function.
	 */
	function deepExtend(target, source) {
	    if (!(source instanceof Object)) {
	        return source;
	    }
	    switch (source.constructor) {
	        case Date:
	            // Treat Dates like scalars; if the target date object had any child
	            // properties - they will be lost!
	            var dateValue = source;
	            return new Date(dateValue.getTime());
	        case Object:
	            if (target === undefined) {
	                target = {};
	            }
	            break;
	        case Array:
	            // Always copy the array source and overwrite the target.
	            target = [];
	            break;
	        default:
	            // Not a plain Object - treat it as a scalar.
	            return source;
	    }
	    for (var prop in source) {
	        if (!source.hasOwnProperty(prop)) {
	            continue;
	        }
	        target[prop] = deepExtend(target[prop], source[prop]);
	    }
	    return target;
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var Deferred = /** @class */ (function () {
	    function Deferred() {
	        var _this = this;
	        this.reject = function () { };
	        this.resolve = function () { };
	        this.promise = new Promise(function (resolve, reject) {
	            _this.resolve = resolve;
	            _this.reject = reject;
	        });
	    }
	    /**
	     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
	     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
	     * and returns a node-style callback which will resolve or reject the Deferred's promise.
	     */
	    Deferred.prototype.wrapCallback = function (callback) {
	        var _this = this;
	        return function (error, value) {
	            if (error) {
	                _this.reject(error);
	            }
	            else {
	                _this.resolve(value);
	            }
	            if (typeof callback === 'function') {
	                // Attaching noop handler just in case developer wasn't expecting
	                // promises
	                _this.promise.catch(function () { });
	                // Some of our callbacks don't expect a value and our own tests
	                // assert that the parameter length is 1
	                if (callback.length === 1) {
	                    callback(error);
	                }
	                else {
	                    callback(error, value);
	                }
	            }
	        };
	    };
	    return Deferred;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Returns navigator.userAgent string or '' if it's not defined.
	 * @return user agent string
	 */
	function getUA() {
	    if (typeof navigator !== 'undefined' &&
	        typeof navigator['userAgent'] === 'string') {
	        return navigator['userAgent'];
	    }
	    else {
	        return '';
	    }
	}
	/**
	 * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
	 *
	 * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
	 * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
	 * wait for a callback.
	 */
	function isMobileCordova() {
	    return (typeof window !== 'undefined' &&
	        // @ts-ignore Setting up an broadly applicable index signature for Window
	        // just to deal with this case would probably be a bad idea.
	        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&
	        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));
	}
	/**
	 * Detect Node.js.
	 *
	 * @return true if Node.js environment is detected.
	 */
	// Node detection logic from: https://github.com/iliakan/detect-node/
	function isNode() {
	    try {
	        return (Object.prototype.toString.call(global$1.process) === '[object process]');
	    }
	    catch (e) {
	        return false;
	    }
	}
	/**
	 * Detect Browser Environment
	 */
	function isBrowser() {
	    return typeof self === 'object' && self.self === self;
	}
	function isBrowserExtension() {
	    var runtime = typeof chrome === 'object'
	        ? chrome.runtime
	        : typeof browser === 'object'
	            ? browser.runtime
	            : undefined;
	    return typeof runtime === 'object' && runtime.id !== undefined;
	}
	/**
	 * Detect React Native.
	 *
	 * @return true if ReactNative environment is detected.
	 */
	function isReactNative() {
	    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');
	}
	/** Detects Electron apps. */
	function isElectron() {
	    return getUA().indexOf('Electron/') >= 0;
	}
	/** Detects Internet Explorer. */
	function isIE() {
	    var ua = getUA();
	    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
	}
	/** Detects Universal Windows Platform apps. */
	function isUWP() {
	    return getUA().indexOf('MSAppHost/') >= 0;
	}
	/**
	 * Detect whether the current SDK build is the Node version.
	 *
	 * @return true if it's the Node SDK build.
	 */
	function isNodeSdk() {
	    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
	}
	/** Returns true if we are running in Safari. */
	function isSafari() {
	    return (!isNode() &&
	        navigator.userAgent.includes('Safari') &&
	        !navigator.userAgent.includes('Chrome'));
	}
	/**
	 * This method checks if indexedDB is supported by current browser/service worker context
	 * @return true if indexedDB is supported by current browser/service worker context
	 */
	function isIndexedDBAvailable() {
	    return 'indexedDB' in self && indexedDB !== null;
	}
	/**
	 * This method validates browser context for indexedDB by opening a dummy indexedDB database and reject
	 * if errors occur during the database open operation.
	 */
	function validateIndexedDBOpenable() {
	    return new Promise(function (resolve, reject) {
	        try {
	            var preExist_1 = true;
	            var DB_CHECK_NAME_1 = 'validate-browser-context-for-indexeddb-analytics-module';
	            var request_1 = window.indexedDB.open(DB_CHECK_NAME_1);
	            request_1.onsuccess = function () {
	                request_1.result.close();
	                // delete database only when it doesn't pre-exist
	                if (!preExist_1) {
	                    window.indexedDB.deleteDatabase(DB_CHECK_NAME_1);
	                }
	                resolve(true);
	            };
	            request_1.onupgradeneeded = function () {
	                preExist_1 = false;
	            };
	            request_1.onerror = function () {
	                var _a;
	                reject(((_a = request_1.error) === null || _a === void 0 ? void 0 : _a.message) || '');
	            };
	        }
	        catch (error) {
	            reject(error);
	        }
	    });
	}
	/**
	 *
	 * This method checks whether cookie is enabled within current browser
	 * @return true if cookie is enabled within current browser
	 */
	function areCookiesEnabled() {
	    if (!navigator || !navigator.cookieEnabled) {
	        return false;
	    }
	    return true;
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var ERROR_NAME = 'FirebaseError';
	// Based on code from:
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
	var FirebaseError = /** @class */ (function (_super) {
	    tslib.__extends(FirebaseError, _super);
	    function FirebaseError(code, message) {
	        var _this = _super.call(this, message) || this;
	        _this.code = code;
	        _this.name = ERROR_NAME;
	        // Fix For ES5
	        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
	        Object.setPrototypeOf(_this, FirebaseError.prototype);
	        // Maintains proper stack trace for where our error was thrown.
	        // Only available on V8.
	        if (Error.captureStackTrace) {
	            Error.captureStackTrace(_this, ErrorFactory.prototype.create);
	        }
	        return _this;
	    }
	    return FirebaseError;
	}(Error));
	var ErrorFactory = /** @class */ (function () {
	    function ErrorFactory(service, serviceName, errors) {
	        this.service = service;
	        this.serviceName = serviceName;
	        this.errors = errors;
	    }
	    ErrorFactory.prototype.create = function (code) {
	        var data = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            data[_i - 1] = arguments[_i];
	        }
	        var customData = data[0] || {};
	        var fullCode = this.service + "/" + code;
	        var template = this.errors[code];
	        var message = template ? replaceTemplate(template, customData) : 'Error';
	        // Service Name: Error message (service/code).
	        var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
	        var error = new FirebaseError(fullCode, fullMessage);
	        // Keys with an underscore at the end of their name are not included in
	        // error.data for some reason.
	        // TODO: Replace with Object.entries when lib is updated to es2017.
	        for (var _a = 0, _b = Object.keys(customData); _a < _b.length; _a++) {
	            var key = _b[_a];
	            if (key.slice(-1) !== '_') {
	                if (key in error) {
	                    console.warn("Overwriting FirebaseError base field \"" + key + "\" can cause unexpected behavior.");
	                }
	                error[key] = customData[key];
	            }
	        }
	        return error;
	    };
	    return ErrorFactory;
	}());
	function replaceTemplate(template, data) {
	    return template.replace(PATTERN, function (_, key) {
	        var value = data[key];
	        return value != null ? String(value) : "<" + key + "?>";
	    });
	}
	var PATTERN = /\{\$([^}]+)}/g;

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Evaluates a JSON string into a javascript object.
	 *
	 * @param {string} str A string containing JSON.
	 * @return {*} The javascript object representing the specified JSON.
	 */
	function jsonEval(str) {
	    return JSON.parse(str);
	}
	/**
	 * Returns JSON representing a javascript object.
	 * @param {*} data Javascript object to be stringified.
	 * @return {string} The JSON contents of the object.
	 */
	function stringify(data) {
	    return JSON.stringify(data);
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Decodes a Firebase auth. token into constituent parts.
	 *
	 * Notes:
	 * - May return with invalid / incomplete claims if there's no native base64 decoding support.
	 * - Doesn't check if the token is actually valid.
	 */
	var decode = function (token) {
	    var header = {}, claims = {}, data = {}, signature = '';
	    try {
	        var parts = token.split('.');
	        header = jsonEval(base64Decode(parts[0]) || '');
	        claims = jsonEval(base64Decode(parts[1]) || '');
	        signature = parts[2];
	        data = claims['d'] || {};
	        delete claims['d'];
	    }
	    catch (e) { }
	    return {
	        header: header,
	        claims: claims,
	        data: data,
	        signature: signature
	    };
	};
	/**
	 * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the
	 * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.
	 *
	 * Notes:
	 * - May return a false negative if there's no native base64 decoding support.
	 * - Doesn't check if the token is actually valid.
	 */
	var isValidTimestamp = function (token) {
	    var claims = decode(token).claims;
	    var now = Math.floor(new Date().getTime() / 1000);
	    var validSince = 0, validUntil = 0;
	    if (typeof claims === 'object') {
	        if (claims.hasOwnProperty('nbf')) {
	            validSince = claims['nbf'];
	        }
	        else if (claims.hasOwnProperty('iat')) {
	            validSince = claims['iat'];
	        }
	        if (claims.hasOwnProperty('exp')) {
	            validUntil = claims['exp'];
	        }
	        else {
	            // token will expire after 24h by default
	            validUntil = validSince + 86400;
	        }
	    }
	    return (!!now &&
	        !!validSince &&
	        !!validUntil &&
	        now >= validSince &&
	        now <= validUntil);
	};
	/**
	 * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.
	 *
	 * Notes:
	 * - May return null if there's no native base64 decoding support.
	 * - Doesn't check if the token is actually valid.
	 */
	var issuedAtTime = function (token) {
	    var claims = decode(token).claims;
	    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {
	        return claims['iat'];
	    }
	    return null;
	};
	/**
	 * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
	 *
	 * Notes:
	 * - May return a false negative if there's no native base64 decoding support.
	 * - Doesn't check if the token is actually valid.
	 */
	var isValidFormat = function (token) {
	    var decoded = decode(token), claims = decoded.claims;
	    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');
	};
	/**
	 * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
	 *
	 * Notes:
	 * - May return a false negative if there's no native base64 decoding support.
	 * - Doesn't check if the token is actually valid.
	 */
	var isAdmin = function (token) {
	    var claims = decode(token).claims;
	    return typeof claims === 'object' && claims['admin'] === true;
	};

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function contains(obj, key) {
	    return Object.prototype.hasOwnProperty.call(obj, key);
	}
	function safeGet(obj, key) {
	    if (Object.prototype.hasOwnProperty.call(obj, key)) {
	        return obj[key];
	    }
	    else {
	        return undefined;
	    }
	}
	function isEmpty(obj) {
	    for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	            return false;
	        }
	    }
	    return true;
	}
	function map(obj, fn, contextObj) {
	    var res = {};
	    for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	            res[key] = fn.call(contextObj, obj[key], key, obj);
	        }
	    }
	    return res;
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
	 * params object (e.g. {arg: 'val', arg2: 'val2'})
	 * Note: You must prepend it with ? when adding it to a URL.
	 */
	function querystring(querystringParams) {
	    var params = [];
	    var _loop_1 = function (key, value) {
	        if (Array.isArray(value)) {
	            value.forEach(function (arrayVal) {
	                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
	            });
	        }
	        else {
	            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
	        }
	    };
	    for (var _i = 0, _a = Object.entries(querystringParams); _i < _a.length; _i++) {
	        var _b = _a[_i], key = _b[0], value = _b[1];
	        _loop_1(key, value);
	    }
	    return params.length ? '&' + params.join('&') : '';
	}
	/**
	 * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object
	 * (e.g. {arg: 'val', arg2: 'val2'})
	 */
	function querystringDecode(querystring) {
	    var obj = {};
	    var tokens = querystring.replace(/^\?/, '').split('&');
	    tokens.forEach(function (token) {
	        if (token) {
	            var key = token.split('=');
	            obj[key[0]] = key[1];
	        }
	    });
	    return obj;
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @fileoverview SHA-1 cryptographic hash.
	 * Variable names follow the notation in FIPS PUB 180-3:
	 * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
	 *
	 * Usage:
	 *   var sha1 = new sha1();
	 *   sha1.update(bytes);
	 *   var hash = sha1.digest();
	 *
	 * Performance:
	 *   Chrome 23:   ~400 Mbit/s
	 *   Firefox 16:  ~250 Mbit/s
	 *
	 */
	/**
	 * SHA-1 cryptographic hash constructor.
	 *
	 * The properties declared here are discussed in the above algorithm document.
	 * @constructor
	 * @final
	 * @struct
	 */
	var Sha1 = /** @class */ (function () {
	    function Sha1() {
	        /**
	         * Holds the previous values of accumulated variables a-e in the compress_
	         * function.
	         * @private
	         */
	        this.chain_ = [];
	        /**
	         * A buffer holding the partially computed hash result.
	         * @private
	         */
	        this.buf_ = [];
	        /**
	         * An array of 80 bytes, each a part of the message to be hashed.  Referred to
	         * as the message schedule in the docs.
	         * @private
	         */
	        this.W_ = [];
	        /**
	         * Contains data needed to pad messages less than 64 bytes.
	         * @private
	         */
	        this.pad_ = [];
	        /**
	         * @private {number}
	         */
	        this.inbuf_ = 0;
	        /**
	         * @private {number}
	         */
	        this.total_ = 0;
	        this.blockSize = 512 / 8;
	        this.pad_[0] = 128;
	        for (var i = 1; i < this.blockSize; ++i) {
	            this.pad_[i] = 0;
	        }
	        this.reset();
	    }
	    Sha1.prototype.reset = function () {
	        this.chain_[0] = 0x67452301;
	        this.chain_[1] = 0xefcdab89;
	        this.chain_[2] = 0x98badcfe;
	        this.chain_[3] = 0x10325476;
	        this.chain_[4] = 0xc3d2e1f0;
	        this.inbuf_ = 0;
	        this.total_ = 0;
	    };
	    /**
	     * Internal compress helper function.
	     * @param buf Block to compress.
	     * @param offset Offset of the block in the buffer.
	     * @private
	     */
	    Sha1.prototype.compress_ = function (buf, offset) {
	        if (!offset) {
	            offset = 0;
	        }
	        var W = this.W_;
	        // get 16 big endian words
	        if (typeof buf === 'string') {
	            for (var i = 0; i < 16; i++) {
	                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
	                // have a bug that turns the post-increment ++ operator into pre-increment
	                // during JIT compilation.  We have code that depends heavily on SHA-1 for
	                // correctness and which is affected by this bug, so I've removed all uses
	                // of post-increment ++ in which the result value is used.  We can revert
	                // this change once the Safari bug
	                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
	                // most clients have been updated.
	                W[i] =
	                    (buf.charCodeAt(offset) << 24) |
	                        (buf.charCodeAt(offset + 1) << 16) |
	                        (buf.charCodeAt(offset + 2) << 8) |
	                        buf.charCodeAt(offset + 3);
	                offset += 4;
	            }
	        }
	        else {
	            for (var i = 0; i < 16; i++) {
	                W[i] =
	                    (buf[offset] << 24) |
	                        (buf[offset + 1] << 16) |
	                        (buf[offset + 2] << 8) |
	                        buf[offset + 3];
	                offset += 4;
	            }
	        }
	        // expand to 80 words
	        for (var i = 16; i < 80; i++) {
	            var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
	            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;
	        }
	        var a = this.chain_[0];
	        var b = this.chain_[1];
	        var c = this.chain_[2];
	        var d = this.chain_[3];
	        var e = this.chain_[4];
	        var f, k;
	        // TODO(user): Try to unroll this loop to speed up the computation.
	        for (var i = 0; i < 80; i++) {
	            if (i < 40) {
	                if (i < 20) {
	                    f = d ^ (b & (c ^ d));
	                    k = 0x5a827999;
	                }
	                else {
	                    f = b ^ c ^ d;
	                    k = 0x6ed9eba1;
	                }
	            }
	            else {
	                if (i < 60) {
	                    f = (b & c) | (d & (b | c));
	                    k = 0x8f1bbcdc;
	                }
	                else {
	                    f = b ^ c ^ d;
	                    k = 0xca62c1d6;
	                }
	            }
	            var t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;
	            e = d;
	            d = c;
	            c = ((b << 30) | (b >>> 2)) & 0xffffffff;
	            b = a;
	            a = t;
	        }
	        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;
	        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;
	        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;
	        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;
	        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;
	    };
	    Sha1.prototype.update = function (bytes, length) {
	        // TODO(johnlenz): tighten the function signature and remove this check
	        if (bytes == null) {
	            return;
	        }
	        if (length === undefined) {
	            length = bytes.length;
	        }
	        var lengthMinusBlock = length - this.blockSize;
	        var n = 0;
	        // Using local instead of member variables gives ~5% speedup on Firefox 16.
	        var buf = this.buf_;
	        var inbuf = this.inbuf_;
	        // The outer while loop should execute at most twice.
	        while (n < length) {
	            // When we have no data in the block to top up, we can directly process the
	            // input buffer (assuming it contains sufficient data). This gives ~25%
	            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
	            // the data is provided in large chunks (or in multiples of 64 bytes).
	            if (inbuf === 0) {
	                while (n <= lengthMinusBlock) {
	                    this.compress_(bytes, n);
	                    n += this.blockSize;
	                }
	            }
	            if (typeof bytes === 'string') {
	                while (n < length) {
	                    buf[inbuf] = bytes.charCodeAt(n);
	                    ++inbuf;
	                    ++n;
	                    if (inbuf === this.blockSize) {
	                        this.compress_(buf);
	                        inbuf = 0;
	                        // Jump to the outer loop so we use the full-block optimization.
	                        break;
	                    }
	                }
	            }
	            else {
	                while (n < length) {
	                    buf[inbuf] = bytes[n];
	                    ++inbuf;
	                    ++n;
	                    if (inbuf === this.blockSize) {
	                        this.compress_(buf);
	                        inbuf = 0;
	                        // Jump to the outer loop so we use the full-block optimization.
	                        break;
	                    }
	                }
	            }
	        }
	        this.inbuf_ = inbuf;
	        this.total_ += length;
	    };
	    /** @override */
	    Sha1.prototype.digest = function () {
	        var digest = [];
	        var totalBits = this.total_ * 8;
	        // Add pad 0x80 0x00*.
	        if (this.inbuf_ < 56) {
	            this.update(this.pad_, 56 - this.inbuf_);
	        }
	        else {
	            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
	        }
	        // Add # bits.
	        for (var i = this.blockSize - 1; i >= 56; i--) {
	            this.buf_[i] = totalBits & 255;
	            totalBits /= 256; // Don't use bit-shifting here!
	        }
	        this.compress_(this.buf_);
	        var n = 0;
	        for (var i = 0; i < 5; i++) {
	            for (var j = 24; j >= 0; j -= 8) {
	                digest[n] = (this.chain_[i] >> j) & 255;
	                ++n;
	            }
	        }
	        return digest;
	    };
	    return Sha1;
	}());

	/**
	 * Helper to make a Subscribe function (just like Promise helps make a
	 * Thenable).
	 *
	 * @param executor Function which can make calls to a single Observer
	 *     as a proxy.
	 * @param onNoObservers Callback when count of Observers goes to zero.
	 */
	function createSubscribe(executor, onNoObservers) {
	    var proxy = new ObserverProxy(executor, onNoObservers);
	    return proxy.subscribe.bind(proxy);
	}
	/**
	 * Implement fan-out for any number of Observers attached via a subscribe
	 * function.
	 */
	var ObserverProxy = /** @class */ (function () {
	    /**
	     * @param executor Function which can make calls to a single Observer
	     *     as a proxy.
	     * @param onNoObservers Callback when count of Observers goes to zero.
	     */
	    function ObserverProxy(executor, onNoObservers) {
	        var _this = this;
	        this.observers = [];
	        this.unsubscribes = [];
	        this.observerCount = 0;
	        // Micro-task scheduling by calling task.then().
	        this.task = Promise.resolve();
	        this.finalized = false;
	        this.onNoObservers = onNoObservers;
	        // Call the executor asynchronously so subscribers that are called
	        // synchronously after the creation of the subscribe function
	        // can still receive the very first value generated in the executor.
	        this.task
	            .then(function () {
	            executor(_this);
	        })
	            .catch(function (e) {
	            _this.error(e);
	        });
	    }
	    ObserverProxy.prototype.next = function (value) {
	        this.forEachObserver(function (observer) {
	            observer.next(value);
	        });
	    };
	    ObserverProxy.prototype.error = function (error) {
	        this.forEachObserver(function (observer) {
	            observer.error(error);
	        });
	        this.close(error);
	    };
	    ObserverProxy.prototype.complete = function () {
	        this.forEachObserver(function (observer) {
	            observer.complete();
	        });
	        this.close();
	    };
	    /**
	     * Subscribe function that can be used to add an Observer to the fan-out list.
	     *
	     * - We require that no event is sent to a subscriber sychronously to their
	     *   call to subscribe().
	     */
	    ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {
	        var _this = this;
	        var observer;
	        if (nextOrObserver === undefined &&
	            error === undefined &&
	            complete === undefined) {
	            throw new Error('Missing Observer.');
	        }
	        // Assemble an Observer object when passed as callback functions.
	        if (implementsAnyMethods(nextOrObserver, [
	            'next',
	            'error',
	            'complete'
	        ])) {
	            observer = nextOrObserver;
	        }
	        else {
	            observer = {
	                next: nextOrObserver,
	                error: error,
	                complete: complete
	            };
	        }
	        if (observer.next === undefined) {
	            observer.next = noop;
	        }
	        if (observer.error === undefined) {
	            observer.error = noop;
	        }
	        if (observer.complete === undefined) {
	            observer.complete = noop;
	        }
	        var unsub = this.unsubscribeOne.bind(this, this.observers.length);
	        // Attempt to subscribe to a terminated Observable - we
	        // just respond to the Observer with the final error or complete
	        // event.
	        if (this.finalized) {
	            // eslint-disable-next-line @typescript-eslint/no-floating-promises
	            this.task.then(function () {
	                try {
	                    if (_this.finalError) {
	                        observer.error(_this.finalError);
	                    }
	                    else {
	                        observer.complete();
	                    }
	                }
	                catch (e) {
	                    // nothing
	                }
	                return;
	            });
	        }
	        this.observers.push(observer);
	        return unsub;
	    };
	    // Unsubscribe is synchronous - we guarantee that no events are sent to
	    // any unsubscribed Observer.
	    ObserverProxy.prototype.unsubscribeOne = function (i) {
	        if (this.observers === undefined || this.observers[i] === undefined) {
	            return;
	        }
	        delete this.observers[i];
	        this.observerCount -= 1;
	        if (this.observerCount === 0 && this.onNoObservers !== undefined) {
	            this.onNoObservers(this);
	        }
	    };
	    ObserverProxy.prototype.forEachObserver = function (fn) {
	        if (this.finalized) {
	            // Already closed by previous event....just eat the additional values.
	            return;
	        }
	        // Since sendOne calls asynchronously - there is no chance that
	        // this.observers will become undefined.
	        for (var i = 0; i < this.observers.length; i++) {
	            this.sendOne(i, fn);
	        }
	    };
	    // Call the Observer via one of it's callback function. We are careful to
	    // confirm that the observe has not been unsubscribed since this asynchronous
	    // function had been queued.
	    ObserverProxy.prototype.sendOne = function (i, fn) {
	        var _this = this;
	        // Execute the callback asynchronously
	        // eslint-disable-next-line @typescript-eslint/no-floating-promises
	        this.task.then(function () {
	            if (_this.observers !== undefined && _this.observers[i] !== undefined) {
	                try {
	                    fn(_this.observers[i]);
	                }
	                catch (e) {
	                    // Ignore exceptions raised in Observers or missing methods of an
	                    // Observer.
	                    // Log error to console. b/31404806
	                    if (typeof console !== 'undefined' && console.error) {
	                        console.error(e);
	                    }
	                }
	            }
	        });
	    };
	    ObserverProxy.prototype.close = function (err) {
	        var _this = this;
	        if (this.finalized) {
	            return;
	        }
	        this.finalized = true;
	        if (err !== undefined) {
	            this.finalError = err;
	        }
	        // Proxy is no longer needed - garbage collect references
	        // eslint-disable-next-line @typescript-eslint/no-floating-promises
	        this.task.then(function () {
	            _this.observers = undefined;
	            _this.onNoObservers = undefined;
	        });
	    };
	    return ObserverProxy;
	}());
	/** Turn synchronous function into one called asynchronously. */
	function async(fn, onError) {
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        Promise.resolve(true)
	            .then(function () {
	            fn.apply(void 0, args);
	        })
	            .catch(function (error) {
	            if (onError) {
	                onError(error);
	            }
	        });
	    };
	}
	/**
	 * Return true if the object passed in implements any of the named methods.
	 */
	function implementsAnyMethods(obj, methods) {
	    if (typeof obj !== 'object' || obj === null) {
	        return false;
	    }
	    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
	        var method = methods_1[_i];
	        if (method in obj && typeof obj[method] === 'function') {
	            return true;
	        }
	    }
	    return false;
	}
	function noop() {
	    // do nothing
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Check to make sure the appropriate number of arguments are provided for a public function.
	 * Throws an error if it fails.
	 *
	 * @param fnName The function name
	 * @param minCount The minimum number of arguments to allow for the function call
	 * @param maxCount The maximum number of argument to allow for the function call
	 * @param argCount The actual number of arguments provided.
	 */
	var validateArgCount = function (fnName, minCount, maxCount, argCount) {
	    var argError;
	    if (argCount < minCount) {
	        argError = 'at least ' + minCount;
	    }
	    else if (argCount > maxCount) {
	        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
	    }
	    if (argError) {
	        var error = fnName +
	            ' failed: Was called with ' +
	            argCount +
	            (argCount === 1 ? ' argument.' : ' arguments.') +
	            ' Expects ' +
	            argError +
	            '.';
	        throw new Error(error);
	    }
	};
	/**
	 * Generates a string to prefix an error message about failed argument validation
	 *
	 * @param fnName The function name
	 * @param argumentNumber The index of the argument
	 * @param optional Whether or not the argument is optional
	 * @return The prefix to add to the error thrown for validation.
	 */
	function errorPrefix(fnName, argumentNumber, optional) {
	    var argName = '';
	    switch (argumentNumber) {
	        case 1:
	            argName = optional ? 'first' : 'First';
	            break;
	        case 2:
	            argName = optional ? 'second' : 'Second';
	            break;
	        case 3:
	            argName = optional ? 'third' : 'Third';
	            break;
	        case 4:
	            argName = optional ? 'fourth' : 'Fourth';
	            break;
	        default:
	            throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');
	    }
	    var error = fnName + ' failed: ';
	    error += argName + ' argument ';
	    return error;
	}
	/**
	 * @param fnName
	 * @param argumentNumber
	 * @param namespace
	 * @param optional
	 */
	function validateNamespace(fnName, argumentNumber, namespace, optional) {
	    if (optional && !namespace) {
	        return;
	    }
	    if (typeof namespace !== 'string') {
	        //TODO: I should do more validation here. We only allow certain chars in namespaces.
	        throw new Error(errorPrefix(fnName, argumentNumber, optional) +
	            'must be a valid firebase namespace.');
	    }
	}
	function validateCallback(fnName, argumentNumber, callback, optional) {
	    if (optional && !callback) {
	        return;
	    }
	    if (typeof callback !== 'function') {
	        throw new Error(errorPrefix(fnName, argumentNumber, optional) +
	            'must be a valid function.');
	    }
	}
	function validateContextObject(fnName, argumentNumber, context, optional) {
	    if (optional && !context) {
	        return;
	    }
	    if (typeof context !== 'object' || context === null) {
	        throw new Error(errorPrefix(fnName, argumentNumber, optional) +
	            'must be a valid context object.');
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
	// automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
	// so it's been modified.
	// Note that not all Unicode characters appear as single characters in JavaScript strings.
	// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
	// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
	// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
	// pair).
	// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3
	/**
	 * @param {string} str
	 * @return {Array}
	 */
	var stringToByteArray$1 = function (str) {
	    var out = [];
	    var p = 0;
	    for (var i = 0; i < str.length; i++) {
	        var c = str.charCodeAt(i);
	        // Is this the lead surrogate in a surrogate pair?
	        if (c >= 0xd800 && c <= 0xdbff) {
	            var high = c - 0xd800; // the high 10 bits.
	            i++;
	            assert(i < str.length, 'Surrogate pair missing trail surrogate.');
	            var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.
	            c = 0x10000 + (high << 10) + low;
	        }
	        if (c < 128) {
	            out[p++] = c;
	        }
	        else if (c < 2048) {
	            out[p++] = (c >> 6) | 192;
	            out[p++] = (c & 63) | 128;
	        }
	        else if (c < 65536) {
	            out[p++] = (c >> 12) | 224;
	            out[p++] = ((c >> 6) & 63) | 128;
	            out[p++] = (c & 63) | 128;
	        }
	        else {
	            out[p++] = (c >> 18) | 240;
	            out[p++] = ((c >> 12) & 63) | 128;
	            out[p++] = ((c >> 6) & 63) | 128;
	            out[p++] = (c & 63) | 128;
	        }
	    }
	    return out;
	};
	/**
	 * Calculate length without actually converting; useful for doing cheaper validation.
	 * @param {string} str
	 * @return {number}
	 */
	var stringLength = function (str) {
	    var p = 0;
	    for (var i = 0; i < str.length; i++) {
	        var c = str.charCodeAt(i);
	        if (c < 128) {
	            p++;
	        }
	        else if (c < 2048) {
	            p += 2;
	        }
	        else if (c >= 0xd800 && c <= 0xdbff) {
	            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
	            p += 4;
	            i++; // skip trail surrogate.
	        }
	        else {
	            p += 3;
	        }
	    }
	    return p;
	};

	exports.CONSTANTS = CONSTANTS;
	exports.Deferred = Deferred;
	exports.ErrorFactory = ErrorFactory;
	exports.FirebaseError = FirebaseError;
	exports.Sha1 = Sha1;
	exports.areCookiesEnabled = areCookiesEnabled;
	exports.assert = assert;
	exports.assertionError = assertionError;
	exports.async = async;
	exports.base64 = base64;
	exports.base64Decode = base64Decode;
	exports.base64Encode = base64Encode;
	exports.contains = contains;
	exports.createSubscribe = createSubscribe;
	exports.decode = decode;
	exports.deepCopy = deepCopy;
	exports.deepExtend = deepExtend;
	exports.errorPrefix = errorPrefix;
	exports.getUA = getUA;
	exports.isAdmin = isAdmin;
	exports.isBrowser = isBrowser;
	exports.isBrowserExtension = isBrowserExtension;
	exports.isElectron = isElectron;
	exports.isEmpty = isEmpty;
	exports.isIE = isIE;
	exports.isIndexedDBAvailable = isIndexedDBAvailable;
	exports.isMobileCordova = isMobileCordova;
	exports.isNode = isNode;
	exports.isNodeSdk = isNodeSdk;
	exports.isReactNative = isReactNative;
	exports.isSafari = isSafari;
	exports.isUWP = isUWP;
	exports.isValidFormat = isValidFormat;
	exports.isValidTimestamp = isValidTimestamp;
	exports.issuedAtTime = issuedAtTime;
	exports.jsonEval = jsonEval;
	exports.map = map;
	exports.querystring = querystring;
	exports.querystringDecode = querystringDecode;
	exports.safeGet = safeGet;
	exports.stringLength = stringLength;
	exports.stringToByteArray = stringToByteArray$1;
	exports.stringify = stringify;
	exports.validateArgCount = validateArgCount;
	exports.validateCallback = validateCallback;
	exports.validateContextObject = validateContextObject;
	exports.validateIndexedDBOpenable = validateIndexedDBOpenable;
	exports.validateNamespace = validateNamespace;

	});

	unwrapExports(index_cjs);
	var index_cjs_1 = index_cjs.CONSTANTS;
	var index_cjs_2 = index_cjs.Deferred;
	var index_cjs_3 = index_cjs.ErrorFactory;
	var index_cjs_4 = index_cjs.FirebaseError;
	var index_cjs_5 = index_cjs.Sha1;
	var index_cjs_6 = index_cjs.areCookiesEnabled;
	var index_cjs_7 = index_cjs.assert;
	var index_cjs_8 = index_cjs.assertionError;
	var index_cjs_9 = index_cjs.async;
	var index_cjs_10 = index_cjs.base64;
	var index_cjs_11 = index_cjs.base64Decode;
	var index_cjs_12 = index_cjs.base64Encode;
	var index_cjs_13 = index_cjs.contains;
	var index_cjs_14 = index_cjs.createSubscribe;
	var index_cjs_15 = index_cjs.decode;
	var index_cjs_16 = index_cjs.deepCopy;
	var index_cjs_17 = index_cjs.deepExtend;
	var index_cjs_18 = index_cjs.errorPrefix;
	var index_cjs_19 = index_cjs.getUA;
	var index_cjs_20 = index_cjs.isAdmin;
	var index_cjs_21 = index_cjs.isBrowser;
	var index_cjs_22 = index_cjs.isBrowserExtension;
	var index_cjs_23 = index_cjs.isElectron;
	var index_cjs_24 = index_cjs.isEmpty;
	var index_cjs_25 = index_cjs.isIE;
	var index_cjs_26 = index_cjs.isIndexedDBAvailable;
	var index_cjs_27 = index_cjs.isMobileCordova;
	var index_cjs_28 = index_cjs.isNode;
	var index_cjs_29 = index_cjs.isNodeSdk;
	var index_cjs_30 = index_cjs.isReactNative;
	var index_cjs_31 = index_cjs.isSafari;
	var index_cjs_32 = index_cjs.isUWP;
	var index_cjs_33 = index_cjs.isValidFormat;
	var index_cjs_34 = index_cjs.isValidTimestamp;
	var index_cjs_35 = index_cjs.issuedAtTime;
	var index_cjs_36 = index_cjs.jsonEval;
	var index_cjs_37 = index_cjs.map;
	var index_cjs_38 = index_cjs.querystring;
	var index_cjs_39 = index_cjs.querystringDecode;
	var index_cjs_40 = index_cjs.safeGet;
	var index_cjs_41 = index_cjs.stringLength;
	var index_cjs_42 = index_cjs.stringToByteArray;
	var index_cjs_43 = index_cjs.stringify;
	var index_cjs_44 = index_cjs.validateArgCount;
	var index_cjs_45 = index_cjs.validateCallback;
	var index_cjs_46 = index_cjs.validateContextObject;
	var index_cjs_47 = index_cjs.validateIndexedDBOpenable;
	var index_cjs_48 = index_cjs.validateNamespace;

	var index_cjs$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, '__esModule', { value: true });




	/**
	 * Component for service name T, e.g. `auth`, `auth-internal`
	 */
	var Component = /** @class */ (function () {
	    /**
	     *
	     * @param name The public service name, e.g. app, auth, firestore, database
	     * @param instanceFactory Service factory responsible for creating the public interface
	     * @param type whether the service provided by the component is public or private
	     */
	    function Component(name, instanceFactory, type) {
	        this.name = name;
	        this.instanceFactory = instanceFactory;
	        this.type = type;
	        this.multipleInstances = false;
	        /**
	         * Properties to be added to the service namespace
	         */
	        this.serviceProps = {};
	        this.instantiationMode = "LAZY" /* LAZY */;
	    }
	    Component.prototype.setInstantiationMode = function (mode) {
	        this.instantiationMode = mode;
	        return this;
	    };
	    Component.prototype.setMultipleInstances = function (multipleInstances) {
	        this.multipleInstances = multipleInstances;
	        return this;
	    };
	    Component.prototype.setServiceProps = function (props) {
	        this.serviceProps = props;
	        return this;
	    };
	    return Component;
	}());

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var DEFAULT_ENTRY_NAME = '[DEFAULT]';

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
	 * NameServiceMapping[T] is an alias for the type of the instance
	 */
	var Provider = /** @class */ (function () {
	    function Provider(name, container) {
	        this.name = name;
	        this.container = container;
	        this.component = null;
	        this.instances = new Map();
	        this.instancesDeferred = new Map();
	    }
	    /**
	     * @param identifier A provider can provide mulitple instances of a service
	     * if this.component.multipleInstances is true.
	     */
	    Provider.prototype.get = function (identifier) {
	        if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }
	        // if multipleInstances is not supported, use the default name
	        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
	        if (!this.instancesDeferred.has(normalizedIdentifier)) {
	            var deferred = new index_cjs.Deferred();
	            this.instancesDeferred.set(normalizedIdentifier, deferred);
	            // If the service instance is available, resolve the promise with it immediately
	            try {
	                var instance = this.getOrInitializeService(normalizedIdentifier);
	                if (instance) {
	                    deferred.resolve(instance);
	                }
	            }
	            catch (e) {
	                // when the instance factory throws an exception during get(), it should not cause
	                // a fatal error. We just return the unresolved promise in this case.
	            }
	        }
	        return this.instancesDeferred.get(normalizedIdentifier).promise;
	    };
	    Provider.prototype.getImmediate = function (options) {
	        var _a = tslib.__assign({ identifier: DEFAULT_ENTRY_NAME, optional: false }, options), identifier = _a.identifier, optional = _a.optional;
	        // if multipleInstances is not supported, use the default name
	        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
	        try {
	            var instance = this.getOrInitializeService(normalizedIdentifier);
	            if (!instance) {
	                if (optional) {
	                    return null;
	                }
	                throw Error("Service " + this.name + " is not available");
	            }
	            return instance;
	        }
	        catch (e) {
	            if (optional) {
	                return null;
	            }
	            else {
	                throw e;
	            }
	        }
	    };
	    Provider.prototype.getComponent = function () {
	        return this.component;
	    };
	    Provider.prototype.setComponent = function (component) {
	        var e_1, _a;
	        if (component.name !== this.name) {
	            throw Error("Mismatching Component " + component.name + " for Provider " + this.name + ".");
	        }
	        if (this.component) {
	            throw Error("Component for " + this.name + " has already been provided");
	        }
	        this.component = component;
	        // if the service is eager, initialize the default instance
	        if (isComponentEager(component)) {
	            try {
	                this.getOrInitializeService(DEFAULT_ENTRY_NAME);
	            }
	            catch (e) {
	                // when the instance factory for an eager Component throws an exception during the eager
	                // initialization, it should not cause a fatal error.
	                // TODO: Investigate if we need to make it configurable, because some component may want to cause
	                // a fatal error in this case?
	            }
	        }
	        try {
	            // Create service instances for the pending promises and resolve them
	            // NOTE: if this.multipleInstances is false, only the default instance will be created
	            // and all promises with resolve with it regardless of the identifier.
	            for (var _b = tslib.__values(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var _d = tslib.__read(_c.value, 2), instanceIdentifier = _d[0], instanceDeferred = _d[1];
	                var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
	                try {
	                    // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
	                    var instance = this.getOrInitializeService(normalizedIdentifier);
	                    instanceDeferred.resolve(instance);
	                }
	                catch (e) {
	                    // when the instance factory throws an exception, it should not cause
	                    // a fatal error. We just leave the promise unresolved.
	                }
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	    };
	    Provider.prototype.clearInstance = function (identifier) {
	        if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }
	        this.instancesDeferred.delete(identifier);
	        this.instances.delete(identifier);
	    };
	    // app.delete() will call this method on every provider to delete the services
	    // TODO: should we mark the provider as deleted?
	    Provider.prototype.delete = function () {
	        return tslib.__awaiter(this, void 0, void 0, function () {
	            var services;
	            return tslib.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        services = Array.from(this.instances.values());
	                        return [4 /*yield*/, Promise.all(services
	                                .filter(function (service) { return 'INTERNAL' in service; })
	                                // eslint-disable-next-line @typescript-eslint/no-explicit-any
	                                .map(function (service) { return service.INTERNAL.delete(); }))];
	                    case 1:
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Provider.prototype.isComponentSet = function () {
	        return this.component != null;
	    };
	    Provider.prototype.getOrInitializeService = function (identifier) {
	        var instance = this.instances.get(identifier);
	        if (!instance && this.component) {
	            instance = this.component.instanceFactory(this.container, normalizeIdentifierForFactory(identifier));
	            this.instances.set(identifier, instance);
	        }
	        return instance || null;
	    };
	    Provider.prototype.normalizeInstanceIdentifier = function (identifier) {
	        if (this.component) {
	            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
	        }
	        else {
	            return identifier; // assume multiple instances are supported before the component is provided.
	        }
	    };
	    return Provider;
	}());
	// undefined should be passed to the service factory for the default instance
	function normalizeIdentifierForFactory(identifier) {
	    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;
	}
	function isComponentEager(component) {
	    return component.instantiationMode === "EAGER" /* EAGER */;
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
	 */
	var ComponentContainer = /** @class */ (function () {
	    function ComponentContainer(name) {
	        this.name = name;
	        this.providers = new Map();
	    }
	    /**
	     *
	     * @param component Component being added
	     * @param overwrite When a component with the same name has already been registered,
	     * if overwrite is true: overwrite the existing component with the new component and create a new
	     * provider with the new component. It can be useful in tests where you want to use different mocks
	     * for different tests.
	     * if overwrite is false: throw an exception
	     */
	    ComponentContainer.prototype.addComponent = function (component) {
	        var provider = this.getProvider(component.name);
	        if (provider.isComponentSet()) {
	            throw new Error("Component " + component.name + " has already been registered with " + this.name);
	        }
	        provider.setComponent(component);
	    };
	    ComponentContainer.prototype.addOrOverwriteComponent = function (component) {
	        var provider = this.getProvider(component.name);
	        if (provider.isComponentSet()) {
	            // delete the existing provider from the container, so we can register the new component
	            this.providers.delete(component.name);
	        }
	        this.addComponent(component);
	    };
	    /**
	     * getProvider provides a type safe interface where it can only be called with a field name
	     * present in NameServiceMapping interface.
	     *
	     * Firebase SDKs providing services should extend NameServiceMapping interface to register
	     * themselves.
	     */
	    ComponentContainer.prototype.getProvider = function (name) {
	        if (this.providers.has(name)) {
	            return this.providers.get(name);
	        }
	        // create a Provider for a service that hasn't registered with Firebase
	        var provider = new Provider(name, this);
	        this.providers.set(name, provider);
	        return provider;
	    };
	    ComponentContainer.prototype.getProviders = function () {
	        return Array.from(this.providers.values());
	    };
	    return ComponentContainer;
	}());

	exports.Component = Component;
	exports.ComponentContainer = ComponentContainer;
	exports.Provider = Provider;

	});

	unwrapExports(index_cjs$1);
	var index_cjs_1$1 = index_cjs$1.Component;
	var index_cjs_2$1 = index_cjs$1.ComponentContainer;
	var index_cjs_3$1 = index_cjs$1.Provider;

	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation. All rights reserved.
	Licensed under the Apache License, Version 2.0 (the "License"); you may not use
	this file except in compliance with the License. You may obtain a copy of the
	License at http://www.apache.org/licenses/LICENSE-2.0

	THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
	WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
	MERCHANTABLITY OR NON-INFRINGEMENT.

	See the Apache Version 2.0 License for specific language governing permissions
	and limitations under the License.
	***************************************************************************** */

	function __spreadArrays() {
	    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
	    for (var r = Array(s), k = 0, i = 0; i < il; i++)
	        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
	            r[k] = a[j];
	    return r;
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var _a;
	/**
	 * A container for all of the Logger instances
	 */
	var instances = [];
	/**
	 * The JS SDK supports 5 log levels and also allows a user the ability to
	 * silence the logs altogether.
	 *
	 * The order is a follows:
	 * DEBUG < VERBOSE < INFO < WARN < ERROR
	 *
	 * All of the log types above the current log level will be captured (i.e. if
	 * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
	 * `VERBOSE` logs will not)
	 */
	var LogLevel;
	(function (LogLevel) {
	    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
	    LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
	    LogLevel[LogLevel["INFO"] = 2] = "INFO";
	    LogLevel[LogLevel["WARN"] = 3] = "WARN";
	    LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
	    LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
	})(LogLevel || (LogLevel = {}));
	var levelStringToEnum = {
	    'debug': LogLevel.DEBUG,
	    'verbose': LogLevel.VERBOSE,
	    'info': LogLevel.INFO,
	    'warn': LogLevel.WARN,
	    'error': LogLevel.ERROR,
	    'silent': LogLevel.SILENT
	};
	/**
	 * The default log level
	 */
	var defaultLogLevel = LogLevel.INFO;
	/**
	 * By default, `console.debug` is not displayed in the developer console (in
	 * chrome). To avoid forcing users to have to opt-in to these logs twice
	 * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
	 * logs to the `console.log` function.
	 */
	var ConsoleMethod = (_a = {},
	    _a[LogLevel.DEBUG] = 'log',
	    _a[LogLevel.VERBOSE] = 'log',
	    _a[LogLevel.INFO] = 'info',
	    _a[LogLevel.WARN] = 'warn',
	    _a[LogLevel.ERROR] = 'error',
	    _a);
	/**
	 * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
	 * messages on to their corresponding console counterparts (if the log method
	 * is supported by the current log level)
	 */
	var defaultLogHandler = function (instance, logType) {
	    var args = [];
	    for (var _i = 2; _i < arguments.length; _i++) {
	        args[_i - 2] = arguments[_i];
	    }
	    if (logType < instance.logLevel) {
	        return;
	    }
	    var now = new Date().toISOString();
	    var method = ConsoleMethod[logType];
	    if (method) {
	        console[method].apply(console, __spreadArrays(["[" + now + "]  " + instance.name + ":"], args));
	    }
	    else {
	        throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
	    }
	};
	var Logger = /** @class */ (function () {
	    /**
	     * Gives you an instance of a Logger to capture messages according to
	     * Firebase's logging scheme.
	     *
	     * @param name The name that the logs will be associated with
	     */
	    function Logger(name) {
	        this.name = name;
	        /**
	         * The log level of the given Logger instance.
	         */
	        this._logLevel = defaultLogLevel;
	        /**
	         * The main (internal) log handler for the Logger instance.
	         * Can be set to a new function in internal package code but not by user.
	         */
	        this._logHandler = defaultLogHandler;
	        /**
	         * The optional, additional, user-defined log handler for the Logger instance.
	         */
	        this._userLogHandler = null;
	        /**
	         * Capture the current instance for later use
	         */
	        instances.push(this);
	    }
	    Object.defineProperty(Logger.prototype, "logLevel", {
	        get: function () {
	            return this._logLevel;
	        },
	        set: function (val) {
	            if (!(val in LogLevel)) {
	                throw new TypeError("Invalid value \"" + val + "\" assigned to `logLevel`");
	            }
	            this._logLevel = val;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    // Workaround for setter/getter having to be the same type.
	    Logger.prototype.setLogLevel = function (val) {
	        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
	    };
	    Object.defineProperty(Logger.prototype, "logHandler", {
	        get: function () {
	            return this._logHandler;
	        },
	        set: function (val) {
	            if (typeof val !== 'function') {
	                throw new TypeError('Value assigned to `logHandler` must be a function');
	            }
	            this._logHandler = val;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Logger.prototype, "userLogHandler", {
	        get: function () {
	            return this._userLogHandler;
	        },
	        set: function (val) {
	            this._userLogHandler = val;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * The functions below are all based on the `console` interface
	     */
	    Logger.prototype.debug = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));
	        this._logHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));
	    };
	    Logger.prototype.log = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));
	        this._logHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));
	    };
	    Logger.prototype.info = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));
	        this._logHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));
	    };
	    Logger.prototype.warn = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));
	        this._logHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));
	    };
	    Logger.prototype.error = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));
	        this._logHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));
	    };
	    return Logger;
	}());
	function setLogLevel(level) {
	    instances.forEach(function (inst) {
	        inst.setLogLevel(level);
	    });
	}
	function setUserLogHandler(logCallback, options) {
	    var _loop_1 = function (instance) {
	        var customLogLevel = null;
	        if (options && options.level) {
	            customLogLevel = levelStringToEnum[options.level];
	        }
	        if (logCallback === null) {
	            instance.userLogHandler = null;
	        }
	        else {
	            instance.userLogHandler = function (instance, level) {
	                var args = [];
	                for (var _i = 2; _i < arguments.length; _i++) {
	                    args[_i - 2] = arguments[_i];
	                }
	                var message = args
	                    .map(function (arg) {
	                    if (arg == null) {
	                        return null;
	                    }
	                    else if (typeof arg === 'string') {
	                        return arg;
	                    }
	                    else if (typeof arg === 'number' || typeof arg === 'boolean') {
	                        return arg.toString();
	                    }
	                    else if (arg instanceof Error) {
	                        return arg.message;
	                    }
	                    else {
	                        try {
	                            return JSON.stringify(arg);
	                        }
	                        catch (ignored) {
	                            return null;
	                        }
	                    }
	                })
	                    .filter(function (arg) { return arg; })
	                    .join(' ');
	                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {
	                    logCallback({
	                        level: LogLevel[level].toLowerCase(),
	                        message: message,
	                        args: args,
	                        type: instance.name
	                    });
	                }
	            };
	        }
	    };
	    for (var _i = 0, instances_1 = instances; _i < instances_1.length; _i++) {
	        var instance = instances_1[_i];
	        _loop_1(instance);
	    }
	}

	var index_esm = /*#__PURE__*/Object.freeze({
		__proto__: null,
		get LogLevel () { return LogLevel; },
		Logger: Logger,
		setLogLevel: setLogLevel,
		setUserLogHandler: setUserLogHandler
	});

	var index_cjs$2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, '__esModule', { value: true });






	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var _a;
	var ERRORS = (_a = {},
	    _a["no-app" /* NO_APP */] = "No Firebase App '{$appName}' has been created - " +
	        'call Firebase App.initializeApp()',
	    _a["bad-app-name" /* BAD_APP_NAME */] = "Illegal App name: '{$appName}",
	    _a["duplicate-app" /* DUPLICATE_APP */] = "Firebase App named '{$appName}' already exists",
	    _a["app-deleted" /* APP_DELETED */] = "Firebase App named '{$appName}' already deleted",
	    _a["invalid-app-argument" /* INVALID_APP_ARGUMENT */] = 'firebase.{$appName}() takes either no argument or a ' +
	        'Firebase App instance.',
	    _a["invalid-log-argument" /* INVALID_LOG_ARGUMENT */] = 'First argument to `onLog` must be null or a function.',
	    _a);
	var ERROR_FACTORY = new index_cjs.ErrorFactory('app', 'Firebase', ERRORS);

	var name$1 = "@firebase/app";
	var version = "0.6.10";

	var name$2 = "@firebase/analytics";

	var name$3 = "@firebase/auth";

	var name$4 = "@firebase/database";

	var name$5 = "@firebase/functions";

	var name$6 = "@firebase/installations";

	var name$7 = "@firebase/messaging";

	var name$8 = "@firebase/performance";

	var name$9 = "@firebase/remote-config";

	var name$a = "@firebase/storage";

	var name$b = "@firebase/firestore";

	var name$c = "firebase-wrapper";

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var _a$1;
	var DEFAULT_ENTRY_NAME = '[DEFAULT]';
	var PLATFORM_LOG_STRING = (_a$1 = {},
	    _a$1[name$1] = 'fire-core',
	    _a$1[name$2] = 'fire-analytics',
	    _a$1[name$3] = 'fire-auth',
	    _a$1[name$4] = 'fire-rtdb',
	    _a$1[name$5] = 'fire-fn',
	    _a$1[name$6] = 'fire-iid',
	    _a$1[name$7] = 'fire-fcm',
	    _a$1[name$8] = 'fire-perf',
	    _a$1[name$9] = 'fire-rc',
	    _a$1[name$a] = 'fire-gcs',
	    _a$1[name$b] = 'fire-fst',
	    _a$1['fire-js'] = 'fire-js',
	    _a$1[name$c] = 'fire-js-all',
	    _a$1);

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var logger = new index_esm.Logger('@firebase/app');

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Global context object for a collection of services using
	 * a shared authentication state.
	 */
	var FirebaseAppImpl = /** @class */ (function () {
	    function FirebaseAppImpl(options, config, firebase_) {
	        var e_1, _a;
	        var _this = this;
	        this.firebase_ = firebase_;
	        this.isDeleted_ = false;
	        this.name_ = config.name;
	        this.automaticDataCollectionEnabled_ =
	            config.automaticDataCollectionEnabled || false;
	        this.options_ = index_cjs.deepCopy(options);
	        this.container = new index_cjs$1.ComponentContainer(config.name);
	        // add itself to container
	        this._addComponent(new index_cjs$1.Component('app', function () { return _this; }, "PUBLIC" /* PUBLIC */));
	        try {
	            // populate ComponentContainer with existing components
	            for (var _b = tslib.__values(this.firebase_.INTERNAL.components.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var component$1 = _c.value;
	                this._addComponent(component$1);
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	    }
	    Object.defineProperty(FirebaseAppImpl.prototype, "automaticDataCollectionEnabled", {
	        get: function () {
	            this.checkDestroyed_();
	            return this.automaticDataCollectionEnabled_;
	        },
	        set: function (val) {
	            this.checkDestroyed_();
	            this.automaticDataCollectionEnabled_ = val;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(FirebaseAppImpl.prototype, "name", {
	        get: function () {
	            this.checkDestroyed_();
	            return this.name_;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(FirebaseAppImpl.prototype, "options", {
	        get: function () {
	            this.checkDestroyed_();
	            return this.options_;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    FirebaseAppImpl.prototype.delete = function () {
	        var _this = this;
	        return new Promise(function (resolve) {
	            _this.checkDestroyed_();
	            resolve();
	        })
	            .then(function () {
	            _this.firebase_.INTERNAL.removeApp(_this.name_);
	            return Promise.all(_this.container.getProviders().map(function (provider) { return provider.delete(); }));
	        })
	            .then(function () {
	            _this.isDeleted_ = true;
	        });
	    };
	    /**
	     * Return a service instance associated with this app (creating it
	     * on demand), identified by the passed instanceIdentifier.
	     *
	     * NOTE: Currently storage and functions are the only ones that are leveraging this
	     * functionality. They invoke it by calling:
	     *
	     * ```javascript
	     * firebase.app().storage('STORAGE BUCKET ID')
	     * ```
	     *
	     * The service name is passed to this already
	     * @internal
	     */
	    FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {
	        if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME; }
	        this.checkDestroyed_();
	        // getImmediate will always succeed because _getService is only called for registered components.
	        return this.container.getProvider(name).getImmediate({
	            identifier: instanceIdentifier
	        });
	    };
	    /**
	     * Remove a service instance from the cache, so we will create a new instance for this service
	     * when people try to get this service again.
	     *
	     * NOTE: currently only firestore is using this functionality to support firestore shutdown.
	     *
	     * @param name The service name
	     * @param instanceIdentifier instance identifier in case multiple instances are allowed
	     * @internal
	     */
	    FirebaseAppImpl.prototype._removeServiceInstance = function (name, instanceIdentifier) {
	        if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME; }
	        // eslint-disable-next-line @typescript-eslint/no-explicit-any
	        this.container.getProvider(name).clearInstance(instanceIdentifier);
	    };
	    /**
	     * @param component the component being added to this app's container
	     */
	    FirebaseAppImpl.prototype._addComponent = function (component) {
	        try {
	            this.container.addComponent(component);
	        }
	        catch (e) {
	            logger.debug("Component " + component.name + " failed to register with FirebaseApp " + this.name, e);
	        }
	    };
	    FirebaseAppImpl.prototype._addOrOverwriteComponent = function (component) {
	        this.container.addOrOverwriteComponent(component);
	    };
	    /**
	     * This function will throw an Error if the App has already been deleted -
	     * use before performing API actions on the App.
	     */
	    FirebaseAppImpl.prototype.checkDestroyed_ = function () {
	        if (this.isDeleted_) {
	            throw ERROR_FACTORY.create("app-deleted" /* APP_DELETED */, { appName: this.name_ });
	        }
	    };
	    return FirebaseAppImpl;
	}());
	// Prevent dead-code elimination of these methods w/o invalid property
	// copying.
	(FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||
	    FirebaseAppImpl.prototype.delete ||
	    console.log('dc');

	var version$1 = "7.18.0";

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Because auth can't share code with other components, we attach the utility functions
	 * in an internal namespace to share code.
	 * This function return a firebase namespace object without
	 * any utility functions, so it can be shared between the regular firebaseNamespace and
	 * the lite version.
	 */
	function createFirebaseNamespaceCore(firebaseAppImpl) {
	    var apps = {};
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    var components = new Map();
	    // A namespace is a plain JavaScript Object.
	    var namespace = {
	        // Hack to prevent Babel from modifying the object returned
	        // as the firebase namespace.
	        // @ts-ignore
	        __esModule: true,
	        initializeApp: initializeApp,
	        // @ts-ignore
	        app: app,
	        registerVersion: registerVersion,
	        setLogLevel: index_esm.setLogLevel,
	        onLog: onLog,
	        // @ts-ignore
	        apps: null,
	        SDK_VERSION: version$1,
	        INTERNAL: {
	            registerComponent: registerComponent,
	            removeApp: removeApp,
	            components: components,
	            useAsService: useAsService
	        }
	    };
	    // Inject a circular default export to allow Babel users who were previously
	    // using:
	    //
	    //   import firebase from 'firebase';
	    //   which becomes: var firebase = require('firebase').default;
	    //
	    // instead of
	    //
	    //   import * as firebase from 'firebase';
	    //   which becomes: var firebase = require('firebase');
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    namespace['default'] = namespace;
	    // firebase.apps is a read-only getter.
	    Object.defineProperty(namespace, 'apps', {
	        get: getApps
	    });
	    /**
	     * Called by App.delete() - but before any services associated with the App
	     * are deleted.
	     */
	    function removeApp(name) {
	        delete apps[name];
	    }
	    /**
	     * Get the App object for a given name (or DEFAULT).
	     */
	    function app(name) {
	        name = name || DEFAULT_ENTRY_NAME;
	        if (!index_cjs.contains(apps, name)) {
	            throw ERROR_FACTORY.create("no-app" /* NO_APP */, { appName: name });
	        }
	        return apps[name];
	    }
	    // @ts-ignore
	    app['App'] = firebaseAppImpl;
	    function initializeApp(options, rawConfig) {
	        if (rawConfig === void 0) { rawConfig = {}; }
	        if (typeof rawConfig !== 'object' || rawConfig === null) {
	            var name_1 = rawConfig;
	            rawConfig = { name: name_1 };
	        }
	        var config = rawConfig;
	        if (config.name === undefined) {
	            config.name = DEFAULT_ENTRY_NAME;
	        }
	        var name = config.name;
	        if (typeof name !== 'string' || !name) {
	            throw ERROR_FACTORY.create("bad-app-name" /* BAD_APP_NAME */, {
	                appName: String(name)
	            });
	        }
	        if (index_cjs.contains(apps, name)) {
	            throw ERROR_FACTORY.create("duplicate-app" /* DUPLICATE_APP */, { appName: name });
	        }
	        var app = new firebaseAppImpl(options, config, namespace);
	        apps[name] = app;
	        return app;
	    }
	    /*
	     * Return an array of all the non-deleted FirebaseApps.
	     */
	    function getApps() {
	        // Make a copy so caller cannot mutate the apps list.
	        return Object.keys(apps).map(function (name) { return apps[name]; });
	    }
	    function registerComponent(component) {
	        var e_1, _a;
	        var componentName = component.name;
	        if (components.has(componentName)) {
	            logger.debug("There were multiple attempts to register component " + componentName + ".");
	            return component.type === "PUBLIC" /* PUBLIC */
	                ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
	                    namespace[componentName]
	                : null;
	        }
	        components.set(componentName, component);
	        // create service namespace for public components
	        if (component.type === "PUBLIC" /* PUBLIC */) {
	            // The Service namespace is an accessor function ...
	            var serviceNamespace = function (appArg) {
	                if (appArg === void 0) { appArg = app(); }
	                // eslint-disable-next-line @typescript-eslint/no-explicit-any
	                if (typeof appArg[componentName] !== 'function') {
	                    // Invalid argument.
	                    // This happens in the following case: firebase.storage('gs:/')
	                    throw ERROR_FACTORY.create("invalid-app-argument" /* INVALID_APP_ARGUMENT */, {
	                        appName: componentName
	                    });
	                }
	                // Forward service instance lookup to the FirebaseApp.
	                // eslint-disable-next-line @typescript-eslint/no-explicit-any
	                return appArg[componentName]();
	            };
	            // ... and a container for service-level properties.
	            if (component.serviceProps !== undefined) {
	                index_cjs.deepExtend(serviceNamespace, component.serviceProps);
	            }
	            // eslint-disable-next-line @typescript-eslint/no-explicit-any
	            namespace[componentName] = serviceNamespace;
	            // Patch the FirebaseAppImpl prototype
	            // eslint-disable-next-line @typescript-eslint/no-explicit-any
	            firebaseAppImpl.prototype[componentName] =
	                // TODO: The eslint disable can be removed and the 'ignoreRestArgs'
	                // option added to the no-explicit-any rule when ESlint releases it.
	                // eslint-disable-next-line @typescript-eslint/no-explicit-any
	                function () {
	                    var args = [];
	                    for (var _i = 0; _i < arguments.length; _i++) {
	                        args[_i] = arguments[_i];
	                    }
	                    var serviceFxn = this._getService.bind(this, componentName);
	                    return serviceFxn.apply(this, component.multipleInstances ? args : []);
	                };
	        }
	        try {
	            // add the component to existing app instances
	            for (var _b = tslib.__values(Object.keys(apps)), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var appName = _c.value;
	                apps[appName]._addComponent(component);
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	        return component.type === "PUBLIC" /* PUBLIC */
	            ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
	                namespace[componentName]
	            : null;
	    }
	    function registerVersion(libraryKeyOrName, version, variant) {
	        var _a;
	        // TODO: We can use this check to whitelist strings when/if we set up
	        // a good whitelist system.
	        var library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
	        if (variant) {
	            library += "-" + variant;
	        }
	        var libraryMismatch = library.match(/\s|\//);
	        var versionMismatch = version.match(/\s|\//);
	        if (libraryMismatch || versionMismatch) {
	            var warning = [
	                "Unable to register library \"" + library + "\" with version \"" + version + "\":"
	            ];
	            if (libraryMismatch) {
	                warning.push("library name \"" + library + "\" contains illegal characters (whitespace or \"/\")");
	            }
	            if (libraryMismatch && versionMismatch) {
	                warning.push('and');
	            }
	            if (versionMismatch) {
	                warning.push("version name \"" + version + "\" contains illegal characters (whitespace or \"/\")");
	            }
	            logger.warn(warning.join(' '));
	            return;
	        }
	        registerComponent(new index_cjs$1.Component(library + "-version", function () { return ({ library: library, version: version }); }, "VERSION" /* VERSION */));
	    }
	    function onLog(logCallback, options) {
	        if (logCallback !== null && typeof logCallback !== 'function') {
	            throw ERROR_FACTORY.create("invalid-log-argument" /* INVALID_LOG_ARGUMENT */, {
	                appName: name
	            });
	        }
	        index_esm.setUserLogHandler(logCallback, options);
	    }
	    // Map the requested service to a registered service name
	    // (used to map auth to serverAuth service when needed).
	    function useAsService(app, name) {
	        if (name === 'serverAuth') {
	            return null;
	        }
	        var useService = name;
	        return useService;
	    }
	    return namespace;
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Return a firebase namespace object.
	 *
	 * In production, this will be called exactly once and the result
	 * assigned to the 'firebase' global.  It may be called multiple times
	 * in unit tests.
	 */
	function createFirebaseNamespace() {
	    var namespace = createFirebaseNamespaceCore(FirebaseAppImpl);
	    namespace.INTERNAL = tslib.__assign(tslib.__assign({}, namespace.INTERNAL), { createFirebaseNamespace: createFirebaseNamespace,
	        extendNamespace: extendNamespace,
	        createSubscribe: index_cjs.createSubscribe,
	        ErrorFactory: index_cjs.ErrorFactory,
	        deepExtend: index_cjs.deepExtend });
	    /**
	     * Patch the top-level firebase namespace with additional properties.
	     *
	     * firebase.INTERNAL.extendNamespace()
	     */
	    function extendNamespace(props) {
	        index_cjs.deepExtend(namespace, props);
	    }
	    return namespace;
	}
	var firebase = createFirebaseNamespace();

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var PlatformLoggerService = /** @class */ (function () {
	    function PlatformLoggerService(container) {
	        this.container = container;
	    }
	    // In initial implementation, this will be called by installations on
	    // auth token refresh, and installations will send this string.
	    PlatformLoggerService.prototype.getPlatformInfoString = function () {
	        var providers = this.container.getProviders();
	        // Loop through providers and get library/version pairs from any that are
	        // version components.
	        return providers
	            .map(function (provider) {
	            if (isVersionServiceProvider(provider)) {
	                var service = provider.getImmediate();
	                return service.library + "/" + service.version;
	            }
	            else {
	                return null;
	            }
	        })
	            .filter(function (logString) { return logString; })
	            .join(' ');
	    };
	    return PlatformLoggerService;
	}());
	/**
	 *
	 * @param provider check if this provider provides a VersionService
	 *
	 * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
	 * provides VersionService. The provider is not necessarily a 'app-version'
	 * provider.
	 */
	function isVersionServiceProvider(provider) {
	    var component = provider.getComponent();
	    return (component === null || component === void 0 ? void 0 : component.type) === "VERSION" /* VERSION */;
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function registerCoreComponents(firebase, variant) {
	    firebase.INTERNAL.registerComponent(new index_cjs$1.Component('platform-logger', function (container) { return new PlatformLoggerService(container); }, "PRIVATE" /* PRIVATE */));
	    // Register `app` package.
	    firebase.registerVersion(name$1, version, variant);
	    // Register platform SDK identifier (no version).
	    firebase.registerVersion('fire-js', '');
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// Firebase Lite detection test
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	if (index_cjs.isBrowser() && self.firebase !== undefined) {
	    logger.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");
	    // eslint-disable-next-line
	    var sdkVersion = self.firebase.SDK_VERSION;
	    if (sdkVersion && sdkVersion.indexOf('LITE') >= 0) {
	        logger.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ");
	    }
	}
	var initializeApp = firebase.initializeApp;
	// TODO: This disable can be removed and the 'ignoreRestArgs' option added to
	// the no-explicit-any rule when ESlint releases it.
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	firebase.initializeApp = function () {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    // Environment check before initializing app
	    // Do the check in initializeApp, so people have a chance to disable it by setting logLevel
	    // in @firebase/logger
	    if (index_cjs.isNode()) {
	        logger.warn("\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the \"main\" field in package.json.\n      \n      If you are using Webpack, you can specify \"main\" as the first item in\n      \"resolve.mainFields\":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the rollup-plugin-node-resolve plugin and specify \"main\"\n      as the first item in \"mainFields\", e.g. ['main', 'module'].\n      https://github.com/rollup/rollup-plugin-node-resolve\n      ");
	    }
	    return initializeApp.apply(undefined, args);
	};
	var firebase$1 = firebase;
	registerCoreComponents(firebase$1);

	exports.default = firebase$1;
	exports.firebase = firebase$1;

	});

	var firebase = unwrapExports(index_cjs$2);
	var index_cjs_1$2 = index_cjs$2.firebase;

	function _interopDefault$1 (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

	var firebase$1 = _interopDefault$1(index_cjs$2);

	var name$1 = "firebase";
	var version = "7.18.0";

	/**
	 * @license
	 * Copyright 2018 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	firebase$1.registerVersion(name$1, version, 'app');

	var index_cjs$3 = firebase$1;

	(function() {var firebase = index_cjs$2.default;/*

	 Copyright The Closure Library Authors.
	 SPDX-License-Identifier: Apache-2.0
	*/
	var k,aa="function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value);};function ba(a){a=["object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof global$1&&global$1,a];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}return globalThis}var ca=ba(this);
	function da(a,b){if(b){var c=ca;a=a.split(".");for(var d=0;d<a.length-1;d++){var e=a[d];e in c||(c[e]={});c=c[e];}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&aa(c,a,{configurable:!0,writable:!0,value:b});}}function ea(a){var b=0;return function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}}function fa(a){var b="undefined"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];return b?b.call(a):{next:ea(a)}}
	da("Promise",function(a){function b(g){this.b=0;this.c=void 0;this.a=[];var h=this.f();try{g(h.resolve,h.reject);}catch(m){h.reject(m);}}function c(){this.a=null;}function d(g){return g instanceof b?g:new b(function(h){h(g);})}if(a)return a;c.prototype.b=function(g){if(null==this.a){this.a=[];var h=this;this.c(function(){h.g();});}this.a.push(g);};var e=ca.setTimeout;c.prototype.c=function(g){e(g,0);};c.prototype.g=function(){for(;this.a&&this.a.length;){var g=this.a;this.a=[];for(var h=0;h<g.length;++h){var m=
	g[h];g[h]=null;try{m();}catch(p){this.f(p);}}}this.a=null;};c.prototype.f=function(g){this.c(function(){throw g;});};b.prototype.f=function(){function g(p){return function(v){m||(m=!0,p.call(h,v));}}var h=this,m=!1;return {resolve:g(this.m),reject:g(this.g)}};b.prototype.m=function(g){if(g===this)this.g(new TypeError("A Promise cannot resolve to itself"));else if(g instanceof b)this.s(g);else {a:switch(typeof g){case "object":var h=null!=g;break a;case "function":h=!0;break a;default:h=!1;}h?this.u(g):this.h(g);}};
	b.prototype.u=function(g){var h=void 0;try{h=g.then;}catch(m){this.g(m);return}"function"==typeof h?this.w(h,g):this.h(g);};b.prototype.g=function(g){this.i(2,g);};b.prototype.h=function(g){this.i(1,g);};b.prototype.i=function(g,h){if(0!=this.b)throw Error("Cannot settle("+g+", "+h+"): Promise already settled in state"+this.b);this.b=g;this.c=h;this.l();};b.prototype.l=function(){if(null!=this.a){for(var g=0;g<this.a.length;++g)f.b(this.a[g]);this.a=null;}};var f=new c;b.prototype.s=function(g){var h=this.f();
	g.Oa(h.resolve,h.reject);};b.prototype.w=function(g,h){var m=this.f();try{g.call(h,m.resolve,m.reject);}catch(p){m.reject(p);}};b.prototype.then=function(g,h){function m(A,Q){return "function"==typeof A?function(wa){try{p(A(wa));}catch(ud){v(ud);}}:Q}var p,v,C=new b(function(A,Q){p=A;v=Q;});this.Oa(m(g,p),m(h,v));return C};b.prototype.catch=function(g){return this.then(void 0,g)};b.prototype.Oa=function(g,h){function m(){switch(p.b){case 1:g(p.c);break;case 2:h(p.c);break;default:throw Error("Unexpected state: "+
	p.b);}}var p=this;null==this.a?f.b(m):this.a.push(m);};b.resolve=d;b.reject=function(g){return new b(function(h,m){m(g);})};b.race=function(g){return new b(function(h,m){for(var p=fa(g),v=p.next();!v.done;v=p.next())d(v.value).Oa(h,m);})};b.all=function(g){var h=fa(g),m=h.next();return m.done?d([]):new b(function(p,v){function C(wa){return function(ud){A[wa]=ud;Q--;0==Q&&p(A);}}var A=[],Q=0;do A.push(void 0),Q++,d(m.value).Oa(C(A.length-1),v),m=h.next();while(!m.done)})};return b});
	var ha=ha||{},l=this||self,ia=/^[\w+/_-]+[=]{0,2}$/,ja=null;function ka(){}
	function la(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return "array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return "object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return "array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return "function"}else return "null";
	else if("function"==b&&"undefined"==typeof a.call)return "object";return b}function ma(a){var b=la(a);return "array"==b||"object"==b&&"number"==typeof a.length}function na(a){return "function"==la(a)}function n(a){var b=typeof a;return "object"==b&&null!=a||"function"==b}function oa(a){return Object.prototype.hasOwnProperty.call(a,pa)&&a[pa]||(a[pa]=++qa)}var pa="closure_uid_"+(1E9*Math.random()>>>0),qa=0;function ra(a,b,c){return a.call.apply(a.bind,arguments)}
	function sa(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var e=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(e,d);return a.apply(b,e)}}return function(){return a.apply(b,arguments)}}function q(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?q=ra:q=sa;return q.apply(null,arguments)}
	function ta(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var d=c.slice();d.push.apply(d,arguments);return a.apply(this,d)}}var ua=Date.now||function(){return +new Date};function r(a,b){function c(){}c.prototype=b.prototype;a.Za=b.prototype;a.prototype=new c;a.prototype.constructor=a;}function t(a,b,c){this.code=va+a;this.message=b||xa[a]||"";this.a=c||null;}r(t,Error);t.prototype.v=function(){var a={code:this.code,message:this.message};this.a&&(a.serverResponse=this.a);return a};t.prototype.toJSON=function(){return this.v()};function ya(a){var b=a&&a.code;return b?new t(b.substring(va.length),a.message,a.serverResponse):null}
	var va="auth/",xa={"admin-restricted-operation":"This operation is restricted to administrators only.","argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.",
	"captcha-check-failed":"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.","code-expired":"The SMS code has expired. Please re-send the verification code to try again.","cordova-not-ready":"Cordova framework is not ready.","cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.",
	"requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.","dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-change-needs-verification":"Multi-factor users must always have a verified email.","email-already-in-use":"The email address is already in use by another account.","expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.",
	"internal-error":"An internal error has occurred.","invalid-app-credential":"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.","invalid-app-id":"The mobile app identifier is not registed for the current project.","invalid-user-token":"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.","invalid-auth-event":"An internal error has occurred.",
	"invalid-verification-code":"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.","invalid-continue-uri":"The continue URL provided in the request is invalid.","invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.",
	"invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-dynamic-link-domain":"The provided dynamic link domain is not configured or authorized for the current project.","invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.","invalid-cert-hash":"The SHA-1 certificate hash provided is invalid.","invalid-credential":"The supplied auth credential is malformed or has expired.",
	"invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-multi-factor-session":"The request does not contain a valid proof of first factor successful sign-in.","invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.","invalid-oauth-client-id":"The OAuth client ID provided is either invalid or does not match the specified API key.",
	"unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.","invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.","wrong-password":"The password is invalid or the user does not have a password.","invalid-persistence-type":"The specified persistence type is invalid. It can only be local, session or none.","invalid-phone-number":"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].",
	"invalid-provider-id":"The specified provider ID is invalid.","invalid-recipient-email":"The email corresponding to this action failed to send as the provided recipient email address is invalid.","invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-verification-id":"The verification ID used to create the phone auth credential is invalid.","invalid-tenant-id":"The Auth instance's tenant ID is invalid.",
	"multi-factor-info-not-found":"The user does not have a second factor matching the identifier provided.","multi-factor-auth-required":"Proof of ownership of a second factor is required to complete sign-in.","missing-android-pkg-name":"An Android Package Name must be provided if the Android App is required to be installed.","auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.","missing-app-credential":"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.",
	"missing-verification-code":"The phone auth credential was created with an empty SMS verification code.","missing-continue-uri":"A continue URL must be provided in the request.","missing-iframe-start":"An internal error has occurred.","missing-ios-bundle-id":"An iOS Bundle ID must be provided if an App Store ID is provided.","missing-multi-factor-info":"No second factor identifier is provided.","missing-multi-factor-session":"The request is missing proof of first factor successful sign-in.","missing-or-invalid-nonce":"The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.",
	"missing-phone-number":"To send verification codes, provide a phone number for the recipient.","missing-verification-id":"The phone auth credential was created with an empty verification ID.","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.","network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.",
	"no-auth-event":"An internal error has occurred.","no-such-provider":"User was not linked to an account with the given provider.","null-user":"A null user object was provided as the argument for an operation which requires a non-null user object.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',
	"popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","quota-exceeded":"The project's quota for this operation has been exceeded.","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.",
	"rejected-credential":"The request contains malformed or mismatching credentials.","second-factor-already-in-use":"The second factor is already enrolled on this account.","maximum-second-factor-count-exceeded":"The maximum allowed number of second factors on a user has been exceeded.","tenant-id-mismatch":"The provided tenant ID does not match the Auth instance's tenant ID",timeout:"The operation has timed out.","user-token-expired":"The user's credential is no longer valid. The user must sign in again.",
	"too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","unauthorized-continue-uri":"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.","unsupported-first-factor":"Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.","unsupported-persistence-type":"The current environment does not support the specified persistence type.","unsupported-tenant-operation":"This operation is not supported in a multi-tenant context.",
	"unverified-email":"The operation requires a verified email.","user-cancelled":"The user did not grant your application the permissions it requested.","user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.","user-signed-out":"","weak-password":"The password must be 6 characters long or more.",
	"web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."};var za={hd:{Ra:"https://staging-identitytoolkit.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",Xa:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Ua:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"b"},pd:{Ra:"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",Xa:"https://securetoken.googleapis.com/v1/token",Ua:"https://identitytoolkit.googleapis.com/v2/",id:"p"},rd:{Ra:"https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",
	Xa:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Ua:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"s"},sd:{Ra:"https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",Xa:"https://test-securetoken.sandbox.googleapis.com/v1/token",Ua:"https://test-identitytoolkit.sandbox.googleapis.com/v2/",id:"t"}};
	function Aa(a){for(var b in za)if(za[b].id===a)return a=za[b],{firebaseEndpoint:a.Ra,secureTokenEndpoint:a.Xa,identityPlatformEndpoint:a.Ua};return null}var Ba;Ba=Aa("__EID__")?"__EID__":void 0;function Ca(a){if(!a)return !1;try{return !!a.$goog_Thenable}catch(b){return !1}}function u(a){if(Error.captureStackTrace)Error.captureStackTrace(this,u);else {var b=Error().stack;b&&(this.stack=b);}a&&(this.message=String(a));}r(u,Error);u.prototype.name="CustomError";function Da(a,b){a=a.split("%s");for(var c="",d=a.length-1,e=0;e<d;e++)c+=a[e]+(e<b.length?b[e]:"%s");u.call(this,c+a[d]);}r(Da,u);Da.prototype.name="AssertionError";function Ea(a,b){throw new Da("Failure"+(a?": "+a:""),Array.prototype.slice.call(arguments,1));}function Fa(a,b){this.c=a;this.f=b;this.b=0;this.a=null;}Fa.prototype.get=function(){if(0<this.b){this.b--;var a=this.a;this.a=a.next;a.next=null;}else a=this.c();return a};function Ga(a,b){a.f(b);100>a.b&&(a.b++,b.next=a.a,a.a=b);}function Ha(){this.b=this.a=null;}var Ja=new Fa(function(){return new Ia},function(a){a.reset();});Ha.prototype.add=function(a,b){var c=Ja.get();c.set(a,b);this.b?this.b.next=c:this.a=c;this.b=c;};function Ka(){var a=La,b=null;a.a&&(b=a.a,a.a=a.a.next,a.a||(a.b=null),b.next=null);return b}function Ia(){this.next=this.b=this.a=null;}Ia.prototype.set=function(a,b){this.a=a;this.b=b;this.next=null;};Ia.prototype.reset=function(){this.next=this.b=this.a=null;};var Ma=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if("string"===typeof a)return "string"!==typeof b||1!=b.length?-1:a.indexOf(b,0);for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return -1},w=Array.prototype.forEach?function(a,b,c){Array.prototype.forEach.call(a,b,c);}:function(a,b,c){for(var d=a.length,e="string"===typeof a?a.split(""):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a);};
	function Na(a,b){for(var c="string"===typeof a?a.split(""):a,d=a.length-1;0<=d;--d)d in c&&b.call(void 0,c[d],d,a);}
	var Oa=Array.prototype.filter?function(a,b){return Array.prototype.filter.call(a,b,void 0)}:function(a,b){for(var c=a.length,d=[],e=0,f="string"===typeof a?a.split(""):a,g=0;g<c;g++)if(g in f){var h=f[g];b.call(void 0,h,g,a)&&(d[e++]=h);}return d},Pa=Array.prototype.map?function(a,b){return Array.prototype.map.call(a,b,void 0)}:function(a,b){for(var c=a.length,d=Array(c),e="string"===typeof a?a.split(""):a,f=0;f<c;f++)f in e&&(d[f]=b.call(void 0,e[f],f,a));return d},Qa=Array.prototype.some?function(a,
	b){return Array.prototype.some.call(a,b,void 0)}:function(a,b){for(var c=a.length,d="string"===typeof a?a.split(""):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a))return !0;return !1};function Ra(a){a:{var b=Sa;for(var c=a.length,d="string"===typeof a?a.split(""):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){b=e;break a}b=-1;}return 0>b?null:"string"===typeof a?a.charAt(b):a[b]}function Ta(a,b){return 0<=Ma(a,b)}
	function Ua(a,b){b=Ma(a,b);var c;(c=0<=b)&&Array.prototype.splice.call(a,b,1);return c}function Va(a,b){var c=0;Na(a,function(d,e){b.call(void 0,d,e,a)&&1==Array.prototype.splice.call(a,e,1).length&&c++;});}function Wa(a){return Array.prototype.concat.apply([],arguments)}function Xa(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return []}var Ya=String.prototype.trim?function(a){return a.trim()}:function(a){return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]},Za=/&/g,$a=/</g,ab=/>/g,bb=/"/g,cb=/'/g,db=/\x00/g,eb=/[\x00&<>"']/;function x(a,b){return -1!=a.indexOf(b)}function fb(a,b){return a<b?-1:a>b?1:0}var gb;a:{var hb=l.navigator;if(hb){var ib=hb.userAgent;if(ib){gb=ib;break a}}gb="";}function y(a){return x(gb,a)}function jb(a,b){for(var c in a)b.call(void 0,a[c],c,a);}function kb(a){for(var b in a)return !1;return !0}function lb(a){var b={},c;for(c in a)b[c]=a[c];return b}var mb="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function z(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<mb.length;f++)c=mb[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c]);}}function nb(a,b){a:{try{var c=a&&a.ownerDocument,d=c&&(c.defaultView||c.parentWindow);d=d||l;if(d.Element&&d.Location){var e=d;break a}}catch(g){}e=null;}if(e&&"undefined"!=typeof e[b]&&(!a||!(a instanceof e[b])&&(a instanceof e.Location||a instanceof e.Element))){if(n(a))try{var f=a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a);}catch(g){f="<object could not be stringified>";}else f=void 0===a?"undefined":null===a?"null":typeof a;Ea("Argument is not a %s (or a non-Element, non-Location mock); got: %s",
	b,f);}}function ob(a,b){this.a=a===pb&&b||"";this.b=qb;}ob.prototype.ra=!0;ob.prototype.qa=function(){return this.a};ob.prototype.toString=function(){return "Const{"+this.a+"}"};function rb(a){if(a instanceof ob&&a.constructor===ob&&a.b===qb)return a.a;Ea("expected object of type Const, got '"+a+"'");return "type_error:Const"}var qb={},pb={},sb=new ob(pb,"");function tb(a,b){this.a=a===ub&&b||"";this.b=vb;}tb.prototype.ra=!0;tb.prototype.qa=function(){return this.a.toString()};tb.prototype.toString=function(){return "TrustedResourceUrl{"+this.a+"}"};function wb(a){if(a instanceof tb&&a.constructor===tb&&a.b===vb)return a.a;Ea("expected object of type TrustedResourceUrl, got '"+a+"' of type "+la(a));return "type_error:TrustedResourceUrl"}
	function xb(a,b){var c=rb(a);if(!yb.test(c))throw Error("Invalid TrustedResourceUrl format: "+c);a=c.replace(zb,function(d,e){if(!Object.prototype.hasOwnProperty.call(b,e))throw Error('Found marker, "'+e+'", in format string, "'+c+'", but no valid label mapping found in args: '+JSON.stringify(b));d=b[e];return d instanceof ob?rb(d):encodeURIComponent(String(d))});return new tb(ub,a)}
	var zb=/%{(\w+)}/g,yb=/^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i,vb={},ub={};function Ab(a,b){this.a=a===Bb&&b||"";this.b=Cb;}Ab.prototype.ra=!0;Ab.prototype.qa=function(){return this.a.toString()};Ab.prototype.toString=function(){return "SafeUrl{"+this.a+"}"};function Db(a){if(a instanceof Ab&&a.constructor===Ab&&a.b===Cb)return a.a;Ea("expected object of type SafeUrl, got '"+a+"' of type "+la(a));return "type_error:SafeUrl"}var Eb=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;
	function Fb(a){if(a instanceof Ab)return a;a="object"==typeof a&&a.ra?a.qa():String(a);Eb.test(a)||(a="about:invalid#zClosurez");return new Ab(Bb,a)}var Cb={},Bb={};function Gb(){this.a="";this.b=Hb;}Gb.prototype.ra=!0;Gb.prototype.qa=function(){return this.a.toString()};Gb.prototype.toString=function(){return "SafeHtml{"+this.a+"}"};function Ib(a){if(a instanceof Gb&&a.constructor===Gb&&a.b===Hb)return a.a;Ea("expected object of type SafeHtml, got '"+a+"' of type "+la(a));return "type_error:SafeHtml"}var Hb={};function Jb(a){var b=new Gb;b.a=a;return b}Jb("<!DOCTYPE html>");var Kb=Jb("");Jb("<br>");function Lb(a){var b=new tb(ub,rb(sb));nb(a,"HTMLIFrameElement");a.src=wb(b).toString();}function Mb(a,b){nb(a,"HTMLScriptElement");a.src=wb(b);if(null===ja)b:{b=l.document;if((b=b.querySelector&&b.querySelector("script[nonce]"))&&(b=b.nonce||b.getAttribute("nonce"))&&ia.test(b)){ja=b;break b}ja="";}b=ja;b&&a.setAttribute("nonce",b);}function Nb(a,b){for(var c=a.split("%s"),d="",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join("%s")}function Ob(a){eb.test(a)&&(-1!=a.indexOf("&")&&(a=a.replace(Za,"&amp;")),-1!=a.indexOf("<")&&(a=a.replace($a,"&lt;")),-1!=a.indexOf(">")&&(a=a.replace(ab,"&gt;")),-1!=a.indexOf('"')&&(a=a.replace(bb,"&quot;")),-1!=a.indexOf("'")&&(a=a.replace(cb,"&#39;")),-1!=a.indexOf("\x00")&&(a=a.replace(db,"&#0;")));return a}function Pb(a){Pb[" "](a);return a}Pb[" "]=ka;function Qb(a,b){var c=Rb;return Object.prototype.hasOwnProperty.call(c,a)?c[a]:c[a]=b(a)}var Sb=y("Opera"),Tb=y("Trident")||y("MSIE"),Ub=y("Edge"),Vb=Ub||Tb,Wb=y("Gecko")&&!(x(gb.toLowerCase(),"webkit")&&!y("Edge"))&&!(y("Trident")||y("MSIE"))&&!y("Edge"),Xb=x(gb.toLowerCase(),"webkit")&&!y("Edge");function Yb(){var a=l.document;return a?a.documentMode:void 0}var Zb;
	a:{var $b="",ac=function(){var a=gb;if(Wb)return /rv:([^\);]+)(\)|;)/.exec(a);if(Ub)return /Edge\/([\d\.]+)/.exec(a);if(Tb)return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(Xb)return /WebKit\/(\S+)/.exec(a);if(Sb)return /(?:Version)[ \/]?(\S+)/.exec(a)}();ac&&($b=ac?ac[1]:"");if(Tb){var bc=Yb();if(null!=bc&&bc>parseFloat($b)){Zb=String(bc);break a}}Zb=$b;}var Rb={};
	function cc(a){return Qb(a,function(){for(var b=0,c=Ya(String(Zb)).split("."),d=Ya(String(a)).split("."),e=Math.max(c.length,d.length),f=0;0==b&&f<e;f++){var g=c[f]||"",h=d[f]||"";do{g=/(\d*)(\D*)(.*)/.exec(g)||["","","",""];h=/(\d*)(\D*)(.*)/.exec(h)||["","","",""];if(0==g[0].length&&0==h[0].length)break;b=fb(0==g[1].length?0:parseInt(g[1],10),0==h[1].length?0:parseInt(h[1],10))||fb(0==g[2].length,0==h[2].length)||fb(g[2],h[2]);g=g[3];h=h[3];}while(0==b)}return 0<=b})}var dc;
	dc=l.document&&Tb?Yb():void 0;try{(new self.OffscreenCanvas(0,0)).getContext("2d");}catch(a){}var ec=!Tb||9<=Number(dc);function fc(a){var b=document;return "string"===typeof a?b.getElementById(a):a}function gc(a,b){jb(b,function(c,d){c&&"object"==typeof c&&c.ra&&(c=c.qa());"style"==d?a.style.cssText=c:"class"==d?a.className=c:"for"==d?a.htmlFor=c:hc.hasOwnProperty(d)?a.setAttribute(hc[d],c):0==d.lastIndexOf("aria-",0)||0==d.lastIndexOf("data-",0)?a.setAttribute(d,c):a[d]=c;});}
	var hc={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};
	function ic(a,b,c){var d=arguments,e=document,f=String(d[0]),g=d[1];if(!ec&&g&&(g.name||g.type)){f=["<",f];g.name&&f.push(' name="',Ob(g.name),'"');if(g.type){f.push(' type="',Ob(g.type),'"');var h={};z(h,g);delete h.type;g=h;}f.push(">");f=f.join("");}f=jc(e,f);g&&("string"===typeof g?f.className=g:Array.isArray(g)?f.className=g.join(" "):gc(f,g));2<d.length&&kc(e,f,d);return f}
	function kc(a,b,c){function d(g){g&&b.appendChild("string"===typeof g?a.createTextNode(g):g);}for(var e=2;e<c.length;e++){var f=c[e];!ma(f)||n(f)&&0<f.nodeType?d(f):w(lc(f)?Xa(f):f,d);}}function jc(a,b){b=String(b);"application/xhtml+xml"===a.contentType&&(b=b.toLowerCase());return a.createElement(b)}function lc(a){if(a&&"number"==typeof a.length){if(n(a))return "function"==typeof a.item||"string"==typeof a.item;if(na(a))return "function"==typeof a.item}return !1}function mc(a){l.setTimeout(function(){throw a;},0);}var nc;
	function oc(){var a=l.MessageChannel;"undefined"===typeof a&&"undefined"!==typeof window&&window.postMessage&&window.addEventListener&&!y("Presto")&&(a=function(){var e=jc(document,"IFRAME");e.style.display="none";Lb(e);document.documentElement.appendChild(e);var f=e.contentWindow;e=f.document;e.open();e.write(Ib(Kb));e.close();var g="callImmediate"+Math.random(),h="file:"==f.location.protocol?"*":f.location.protocol+"//"+f.location.host;e=q(function(m){if(("*"==h||m.origin==h)&&m.data==g)this.port1.onmessage();},
	this);f.addEventListener("message",e,!1);this.port1={};this.port2={postMessage:function(){f.postMessage(g,h);}};});if("undefined"!==typeof a&&!y("Trident")&&!y("MSIE")){var b=new a,c={},d=c;b.port1.onmessage=function(){if(void 0!==c.next){c=c.next;var e=c.Db;c.Db=null;e();}};return function(e){d.next={Db:e};d=d.next;b.port2.postMessage(0);}}return function(e){l.setTimeout(e,0);}}function pc(a,b){qc||rc();sc||(qc(),sc=!0);La.add(a,b);}var qc;function rc(){if(l.Promise&&l.Promise.resolve){var a=l.Promise.resolve(void 0);qc=function(){a.then(tc);};}else qc=function(){var b=tc;!na(l.setImmediate)||l.Window&&l.Window.prototype&&!y("Edge")&&l.Window.prototype.setImmediate==l.setImmediate?(nc||(nc=oc()),nc(b)):l.setImmediate(b);};}var sc=!1,La=new Ha;function tc(){for(var a;a=Ka();){try{a.a.call(a.b);}catch(b){mc(b);}Ga(Ja,a);}sc=!1;}function B(a,b){this.a=uc;this.i=void 0;this.f=this.b=this.c=null;this.g=this.h=!1;if(a!=ka)try{var c=this;a.call(b,function(d){vc(c,wc,d);},function(d){if(!(d instanceof xc))try{if(d instanceof Error)throw d;throw Error("Promise rejected.");}catch(e){}vc(c,yc,d);});}catch(d){vc(this,yc,d);}}var uc=0,wc=2,yc=3;function zc(){this.next=this.f=this.b=this.g=this.a=null;this.c=!1;}zc.prototype.reset=function(){this.f=this.b=this.g=this.a=null;this.c=!1;};var Ac=new Fa(function(){return new zc},function(a){a.reset();});
	function Bc(a,b,c){var d=Ac.get();d.g=a;d.b=b;d.f=c;return d}function D(a){if(a instanceof B)return a;var b=new B(ka);vc(b,wc,a);return b}function E(a){return new B(function(b,c){c(a);})}function Cc(a,b,c){Dc(a,b,c,null)||pc(ta(b,a));}function Ec(a){return new B(function(b,c){var d=a.length,e=[];if(d)for(var f=function(p,v){d--;e[p]=v;0==d&&b(e);},g=function(p){c(p);},h=0,m;h<a.length;h++)m=a[h],Cc(m,ta(f,h),g);else b(e);})}
	function Fc(a){return new B(function(b){var c=a.length,d=[];if(c)for(var e=function(h,m,p){c--;d[h]=m?{Mb:!0,value:p}:{Mb:!1,reason:p};0==c&&b(d);},f=0,g;f<a.length;f++)g=a[f],Cc(g,ta(e,f,!0),ta(e,f,!1));else b(d);})}B.prototype.then=function(a,b,c){return Gc(this,na(a)?a:null,na(b)?b:null,c)};B.prototype.$goog_Thenable=!0;k=B.prototype;k.ma=function(a,b){a=Bc(a,a,b);a.c=!0;Hc(this,a);return this};k.o=function(a,b){return Gc(this,null,a,b)};
	k.cancel=function(a){if(this.a==uc){var b=new xc(a);pc(function(){Ic(this,b);},this);}};function Ic(a,b){if(a.a==uc)if(a.c){var c=a.c;if(c.b){for(var d=0,e=null,f=null,g=c.b;g&&(g.c||(d++,g.a==a&&(e=g),!(e&&1<d)));g=g.next)e||(f=g);e&&(c.a==uc&&1==d?Ic(c,b):(f?(d=f,d.next==c.f&&(c.f=d),d.next=d.next.next):Jc(c),Kc(c,e,yc,b)));}a.c=null;}else vc(a,yc,b);}function Hc(a,b){a.b||a.a!=wc&&a.a!=yc||Lc(a);a.f?a.f.next=b:a.b=b;a.f=b;}
	function Gc(a,b,c,d){var e=Bc(null,null,null);e.a=new B(function(f,g){e.g=b?function(h){try{var m=b.call(d,h);f(m);}catch(p){g(p);}}:f;e.b=c?function(h){try{var m=c.call(d,h);void 0===m&&h instanceof xc?g(h):f(m);}catch(p){g(p);}}:g;});e.a.c=a;Hc(a,e);return e.a}k.Yc=function(a){this.a=uc;vc(this,wc,a);};k.Zc=function(a){this.a=uc;vc(this,yc,a);};
	function vc(a,b,c){a.a==uc&&(a===c&&(b=yc,c=new TypeError("Promise cannot resolve to itself")),a.a=1,Dc(c,a.Yc,a.Zc,a)||(a.i=c,a.a=b,a.c=null,Lc(a),b!=yc||c instanceof xc||Mc(a,c)));}function Dc(a,b,c,d){if(a instanceof B)return Hc(a,Bc(b||ka,c||null,d)),!0;if(Ca(a))return a.then(b,c,d),!0;if(n(a))try{var e=a.then;if(na(e))return Nc(a,e,b,c,d),!0}catch(f){return c.call(d,f),!0}return !1}
	function Nc(a,b,c,d,e){function f(m){h||(h=!0,d.call(e,m));}function g(m){h||(h=!0,c.call(e,m));}var h=!1;try{b.call(a,g,f);}catch(m){f(m);}}function Lc(a){a.h||(a.h=!0,pc(a.ec,a));}function Jc(a){var b=null;a.b&&(b=a.b,a.b=b.next,b.next=null);a.b||(a.f=null);return b}k.ec=function(){for(var a;a=Jc(this);)Kc(this,a,this.a,this.i);this.h=!1;};
	function Kc(a,b,c,d){if(c==yc&&b.b&&!b.c)for(;a&&a.g;a=a.c)a.g=!1;if(b.a)b.a.c=null,Oc(b,c,d);else try{b.c?b.g.call(b.f):Oc(b,c,d);}catch(e){Pc.call(null,e);}Ga(Ac,b);}function Oc(a,b,c){b==wc?a.g.call(a.f,c):a.b&&a.b.call(a.f,c);}function Mc(a,b){a.g=!0;pc(function(){a.g&&Pc.call(null,b);});}var Pc=mc;function xc(a){u.call(this,a);}r(xc,u);xc.prototype.name="cancel";function Qc(){this.wa=this.wa;this.na=this.na;}var Rc=0;Qc.prototype.wa=!1;function Tc(a){if(!a.wa&&(a.wa=!0,a.Ba(),0!=Rc)){var b=oa(a);}}Qc.prototype.Ba=function(){if(this.na)for(;this.na.length;)this.na.shift()();};var Uc=Object.freeze||function(a){return a};var Vc=!Tb||9<=Number(dc),Wc=Tb&&!cc("9"),Xc=function(){if(!l.addEventListener||!Object.defineProperty)return !1;var a=!1,b=Object.defineProperty({},"passive",{get:function(){a=!0;}});try{l.addEventListener("test",ka,b),l.removeEventListener("test",ka,b);}catch(c){}return a}();function F(a,b){this.type=a;this.b=this.target=b;this.defaultPrevented=!1;}F.prototype.preventDefault=function(){this.defaultPrevented=!0;};function Yc(a,b){F.call(this,a?a.type:"");this.relatedTarget=this.b=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key="";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.pointerId=0;this.pointerType="";this.a=null;if(a){var c=this.type=a.type,d=a.changedTouches&&a.changedTouches.length?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.b=b;if(b=a.relatedTarget){if(Wb){a:{try{Pb(b.nodeName);var e=!0;break a}catch(f){}e=!1;}e||(b=null);}}else "mouseover"==
	c?b=a.fromElement:"mouseout"==c&&(b=a.toElement);this.relatedTarget=b;d?(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0):(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0);this.button=a.button;this.key=a.key||"";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=
	a.metaKey;this.pointerId=a.pointerId||0;this.pointerType="string"===typeof a.pointerType?a.pointerType:Zc[a.pointerType]||"";this.a=a;a.defaultPrevented&&this.preventDefault();}}r(Yc,F);var Zc=Uc({2:"touch",3:"pen",4:"mouse"});Yc.prototype.preventDefault=function(){Yc.Za.preventDefault.call(this);var a=this.a;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,Wc)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1;}catch(b){}};Yc.prototype.f=function(){return this.a};var $c="closure_listenable_"+(1E6*Math.random()|0),ad=0;function bd(a,b,c,d,e){this.listener=a;this.proxy=null;this.src=b;this.type=c;this.capture=!!d;this.Ta=e;this.key=++ad;this.ua=this.Na=!1;}function cd(a){a.ua=!0;a.listener=null;a.proxy=null;a.src=null;a.Ta=null;}function dd(a){this.src=a;this.a={};this.b=0;}dd.prototype.add=function(a,b,c,d,e){var f=a.toString();a=this.a[f];a||(a=this.a[f]=[],this.b++);var g=ed(a,b,d,e);-1<g?(b=a[g],c||(b.Na=!1)):(b=new bd(b,this.src,f,!!d,e),b.Na=c,a.push(b));return b};function fd(a,b){var c=b.type;c in a.a&&Ua(a.a[c],b)&&(cd(b),0==a.a[c].length&&(delete a.a[c],a.b--));}function ed(a,b,c,d){for(var e=0;e<a.length;++e){var f=a[e];if(!f.ua&&f.listener==b&&f.capture==!!c&&f.Ta==d)return e}return -1}var gd="closure_lm_"+(1E6*Math.random()|0),hd={};function jd(a,b,c,d,e){if(d&&d.once)kd(a,b,c,d,e);else if(Array.isArray(b))for(var f=0;f<b.length;f++)jd(a,b[f],c,d,e);else c=ld(c),a&&a[$c]?md(a,b,c,n(d)?!!d.capture:!!d,e):nd(a,b,c,!1,d,e);}
	function nd(a,b,c,d,e,f){if(!b)throw Error("Invalid event type");var g=n(e)?!!e.capture:!!e,h=od(a);h||(a[gd]=h=new dd(a));c=h.add(b,c,d,g,f);if(!c.proxy){d=pd();c.proxy=d;d.src=a;d.listener=c;if(a.addEventListener)Xc||(e=g),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(qd(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");}}
	function pd(){var a=rd,b=Vc?function(c){return a.call(b.src,b.listener,c)}:function(c){c=a.call(b.src,b.listener,c);if(!c)return c};return b}function kd(a,b,c,d,e){if(Array.isArray(b))for(var f=0;f<b.length;f++)kd(a,b[f],c,d,e);else c=ld(c),a&&a[$c]?sd(a,b,c,n(d)?!!d.capture:!!d,e):nd(a,b,c,!0,d,e);}
	function td(a,b,c,d,e){if(Array.isArray(b))for(var f=0;f<b.length;f++)td(a,b[f],c,d,e);else (d=n(d)?!!d.capture:!!d,c=ld(c),a&&a[$c])?(a=a.u,b=String(b).toString(),b in a.a&&(f=a.a[b],c=ed(f,c,d,e),-1<c&&(cd(f[c]),Array.prototype.splice.call(f,c,1),0==f.length&&(delete a.a[b],a.b--)))):a&&(a=od(a))&&(b=a.a[b.toString()],a=-1,b&&(a=ed(b,c,d,e)),(c=-1<a?b[a]:null)&&vd(c));}
	function vd(a){if("number"!==typeof a&&a&&!a.ua){var b=a.src;if(b&&b[$c])fd(b.u,a);else {var c=a.type,d=a.proxy;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(qd(c),d):b.addListener&&b.removeListener&&b.removeListener(d);(c=od(b))?(fd(c,a),0==c.b&&(c.src=null,b[gd]=null)):cd(a);}}}function qd(a){return a in hd?hd[a]:hd[a]="on"+a}
	function wd(a,b,c,d){var e=!0;if(a=od(a))if(b=a.a[b.toString()])for(b=b.concat(),a=0;a<b.length;a++){var f=b[a];f&&f.capture==c&&!f.ua&&(f=xd(f,d),e=e&&!1!==f);}return e}function xd(a,b){var c=a.listener,d=a.Ta||a.src;a.Na&&vd(a);return c.call(d,b)}
	function rd(a,b){if(a.ua)return !0;if(!Vc){if(!b)a:{b=["window","event"];for(var c=l,d=0;d<b.length;d++)if(c=c[b[d]],null==c){b=null;break a}b=c;}d=b;b=new Yc(d,this);c=!0;if(!(0>d.keyCode||void 0!=d.returnValue)){a:{var e=!1;if(0==d.keyCode)try{d.keyCode=-1;break a}catch(g){e=!0;}if(e||void 0==d.returnValue)d.returnValue=!0;}d=[];for(e=b.b;e;e=e.parentNode)d.push(e);a=a.type;for(e=d.length-1;0<=e;e--){b.b=d[e];var f=wd(d[e],a,!0,b);c=c&&f;}for(e=0;e<d.length;e++)b.b=d[e],f=wd(d[e],a,!1,b),c=c&&f;}return c}return xd(a,
	new Yc(b,this))}function od(a){a=a[gd];return a instanceof dd?a:null}var yd="__closure_events_fn_"+(1E9*Math.random()>>>0);function ld(a){if(na(a))return a;a[yd]||(a[yd]=function(b){return a.handleEvent(b)});return a[yd]}function G(){Qc.call(this);this.u=new dd(this);this.Yb=this;this.eb=null;}r(G,Qc);G.prototype[$c]=!0;G.prototype.addEventListener=function(a,b,c,d){jd(this,a,b,c,d);};G.prototype.removeEventListener=function(a,b,c,d){td(this,a,b,c,d);};
	G.prototype.dispatchEvent=function(a){var b,c=this.eb;if(c)for(b=[];c;c=c.eb)b.push(c);c=this.Yb;var d=a.type||a;if("string"===typeof a)a=new F(a,c);else if(a instanceof F)a.target=a.target||c;else {var e=a;a=new F(d,c);z(a,e);}e=!0;if(b)for(var f=b.length-1;0<=f;f--){var g=a.b=b[f];e=zd(g,d,!0,a)&&e;}g=a.b=c;e=zd(g,d,!0,a)&&e;e=zd(g,d,!1,a)&&e;if(b)for(f=0;f<b.length;f++)g=a.b=b[f],e=zd(g,d,!1,a)&&e;return e};
	G.prototype.Ba=function(){G.Za.Ba.call(this);if(this.u){var a=this.u,c;for(c in a.a){for(var d=a.a[c],e=0;e<d.length;e++)cd(d[e]);delete a.a[c];a.b--;}}this.eb=null;};function md(a,b,c,d,e){a.u.add(String(b),c,!1,d,e);}function sd(a,b,c,d,e){a.u.add(String(b),c,!0,d,e);}
	function zd(a,b,c,d){b=a.u.a[String(b)];if(!b)return !0;b=b.concat();for(var e=!0,f=0;f<b.length;++f){var g=b[f];if(g&&!g.ua&&g.capture==c){var h=g.listener,m=g.Ta||g.src;g.Na&&fd(a.u,g);e=!1!==h.call(m,d)&&e;}}return e&&!d.defaultPrevented}function Ad(a,b,c){if(na(a))c&&(a=q(a,c));else if(a&&"function"==typeof a.handleEvent)a=q(a.handleEvent,a);else throw Error("Invalid listener argument");return 2147483647<Number(b)?-1:l.setTimeout(a,b||0)}function Bd(a){var b=null;return (new B(function(c,d){b=Ad(function(){c(void 0);},a);-1==b&&d(Error("Failed to schedule timer."));})).o(function(c){l.clearTimeout(b);throw c;})}function Cd(a){if(a.V&&"function"==typeof a.V)return a.V();if("string"===typeof a)return a.split("");if(ma(a)){for(var b=[],c=a.length,d=0;d<c;d++)b.push(a[d]);return b}b=[];c=0;for(d in a)b[c++]=a[d];return b}function Dd(a){if(a.X&&"function"==typeof a.X)return a.X();if(!a.V||"function"!=typeof a.V){if(ma(a)||"string"===typeof a){var b=[];a=a.length;for(var c=0;c<a;c++)b.push(c);return b}b=[];c=0;for(var d in a)b[c++]=d;return b}}
	function Ed(a,b){if(a.forEach&&"function"==typeof a.forEach)a.forEach(b,void 0);else if(ma(a)||"string"===typeof a)w(a,b,void 0);else for(var c=Dd(a),d=Cd(a),e=d.length,f=0;f<e;f++)b.call(void 0,d[f],c&&c[f],a);}function Fd(a,b){this.b={};this.a=[];this.c=0;var c=arguments.length;if(1<c){if(c%2)throw Error("Uneven number of arguments");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1]);}else if(a)if(a instanceof Fd)for(c=a.X(),d=0;d<c.length;d++)this.set(c[d],a.get(c[d]));else for(d in a)this.set(d,a[d]);}k=Fd.prototype;k.V=function(){Gd(this);for(var a=[],b=0;b<this.a.length;b++)a.push(this.b[this.a[b]]);return a};k.X=function(){Gd(this);return this.a.concat()};
	k.clear=function(){this.b={};this.c=this.a.length=0;};function Gd(a){if(a.c!=a.a.length){for(var b=0,c=0;b<a.a.length;){var d=a.a[b];Hd(a.b,d)&&(a.a[c++]=d);b++;}a.a.length=c;}if(a.c!=a.a.length){var e={};for(c=b=0;b<a.a.length;)d=a.a[b],Hd(e,d)||(a.a[c++]=d,e[d]=1),b++;a.a.length=c;}}k.get=function(a,b){return Hd(this.b,a)?this.b[a]:b};k.set=function(a,b){Hd(this.b,a)||(this.c++,this.a.push(a));this.b[a]=b;};
	k.forEach=function(a,b){for(var c=this.X(),d=0;d<c.length;d++){var e=c[d],f=this.get(e);a.call(b,f,e,this);}};function Hd(a,b){return Object.prototype.hasOwnProperty.call(a,b)}var Id=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/\\#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Jd(a,b){if(a){a=a.split("&");for(var c=0;c<a.length;c++){var d=a[c].indexOf("="),e=null;if(0<=d){var f=a[c].substring(0,d);e=a[c].substring(d+1);}else f=a[c];b(f,e?decodeURIComponent(e.replace(/\+/g," ")):"");}}}function Kd(a,b){this.b=this.i=this.f="";this.l=null;this.g=this.c="";this.h=!1;var c;a instanceof Kd?(this.h=void 0!==b?b:a.h,Ld(this,a.f),this.i=a.i,this.b=a.b,Md(this,a.l),this.c=a.c,Nd(this,Od(a.a)),this.g=a.g):a&&(c=String(a).match(Id))?(this.h=!!b,Ld(this,c[1]||"",!0),this.i=Pd(c[2]||""),this.b=Pd(c[3]||"",!0),Md(this,c[4]),this.c=Pd(c[5]||"",!0),Nd(this,c[6]||"",!0),this.g=Pd(c[7]||"")):(this.h=!!b,this.a=new Qd(null,this.h));}
	Kd.prototype.toString=function(){var a=[],b=this.f;b&&a.push(Rd(b,Sd,!0),":");var c=this.b;if(c||"file"==b)a.push("//"),(b=this.i)&&a.push(Rd(b,Sd,!0),"@"),a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),c=this.l,null!=c&&a.push(":",String(c));if(c=this.c)this.b&&"/"!=c.charAt(0)&&a.push("/"),a.push(Rd(c,"/"==c.charAt(0)?Td:Ud,!0));(c=this.a.toString())&&a.push("?",c);(c=this.g)&&a.push("#",Rd(c,Vd));return a.join("")};
	Kd.prototype.resolve=function(a){var b=new Kd(this),c=!!a.f;c?Ld(b,a.f):c=!!a.i;c?b.i=a.i:c=!!a.b;c?b.b=a.b:c=null!=a.l;var d=a.c;if(c)Md(b,a.l);else if(c=!!a.c){if("/"!=d.charAt(0))if(this.b&&!this.c)d="/"+d;else {var e=b.c.lastIndexOf("/");-1!=e&&(d=b.c.substr(0,e+1)+d);}e=d;if(".."==e||"."==e)d="";else if(x(e,"./")||x(e,"/.")){d=0==e.lastIndexOf("/",0);e=e.split("/");for(var f=[],g=0;g<e.length;){var h=e[g++];"."==h?d&&g==e.length&&f.push(""):".."==h?((1<f.length||1==f.length&&""!=f[0])&&f.pop(),
	d&&g==e.length&&f.push("")):(f.push(h),d=!0);}d=f.join("/");}else d=e;}c?b.c=d:c=""!==a.a.toString();c?Nd(b,Od(a.a)):c=!!a.g;c&&(b.g=a.g);return b};function Ld(a,b,c){a.f=c?Pd(b,!0):b;a.f&&(a.f=a.f.replace(/:$/,""));}function Md(a,b){if(b){b=Number(b);if(isNaN(b)||0>b)throw Error("Bad port number "+b);a.l=b;}else a.l=null;}function Nd(a,b,c){b instanceof Qd?(a.a=b,Wd(a.a,a.h)):(c||(b=Rd(b,Xd)),a.a=new Qd(b,a.h));}function H(a,b,c){a.a.set(b,c);}function Yd(a,b){return a.a.get(b)}
	function Zd(a){return a instanceof Kd?new Kd(a):new Kd(a,void 0)}function $d(a,b){var c=new Kd(null,void 0);Ld(c,"https");a&&(c.b=a);b&&(c.c=b);return c}function Pd(a,b){return a?b?decodeURI(a.replace(/%25/g,"%2525")):decodeURIComponent(a):""}function Rd(a,b,c){return "string"===typeof a?(a=encodeURI(a).replace(b,ae),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),a):null}function ae(a){a=a.charCodeAt(0);return "%"+(a>>4&15).toString(16)+(a&15).toString(16)}
	var Sd=/[#\/\?@]/g,Ud=/[#\?:]/g,Td=/[#\?]/g,Xd=/[#\?@]/g,Vd=/#/g;function Qd(a,b){this.b=this.a=null;this.c=a||null;this.f=!!b;}function be(a){a.a||(a.a=new Fd,a.b=0,a.c&&Jd(a.c,function(b,c){a.add(decodeURIComponent(b.replace(/\+/g," ")),c);}));}function ce(a){var b=Dd(a);if("undefined"==typeof b)throw Error("Keys are undefined");var c=new Qd(null,void 0);a=Cd(a);for(var d=0;d<b.length;d++){var e=b[d],f=a[d];Array.isArray(f)?de(c,e,f):c.add(e,f);}return c}k=Qd.prototype;
	k.add=function(a,b){be(this);this.c=null;a=ee(this,a);var c=this.a.get(a);c||this.a.set(a,c=[]);c.push(b);this.b+=1;return this};function fe(a,b){be(a);b=ee(a,b);Hd(a.a.b,b)&&(a.c=null,a.b-=a.a.get(b).length,a=a.a,Hd(a.b,b)&&(delete a.b[b],a.c--,a.a.length>2*a.c&&Gd(a)));}k.clear=function(){this.a=this.c=null;this.b=0;};function ge(a,b){be(a);b=ee(a,b);return Hd(a.a.b,b)}k.forEach=function(a,b){be(this);this.a.forEach(function(c,d){w(c,function(e){a.call(b,e,d,this);},this);},this);};
	k.X=function(){be(this);for(var a=this.a.V(),b=this.a.X(),c=[],d=0;d<b.length;d++)for(var e=a[d],f=0;f<e.length;f++)c.push(b[d]);return c};k.V=function(a){be(this);var b=[];if("string"===typeof a)ge(this,a)&&(b=Wa(b,this.a.get(ee(this,a))));else {a=this.a.V();for(var c=0;c<a.length;c++)b=Wa(b,a[c]);}return b};k.set=function(a,b){be(this);this.c=null;a=ee(this,a);ge(this,a)&&(this.b-=this.a.get(a).length);this.a.set(a,[b]);this.b+=1;return this};
	k.get=function(a,b){if(!a)return b;a=this.V(a);return 0<a.length?String(a[0]):b};function de(a,b,c){fe(a,b);0<c.length&&(a.c=null,a.a.set(ee(a,b),Xa(c)),a.b+=c.length);}k.toString=function(){if(this.c)return this.c;if(!this.a)return "";for(var a=[],b=this.a.X(),c=0;c<b.length;c++){var d=b[c],e=encodeURIComponent(String(d));d=this.V(d);for(var f=0;f<d.length;f++){var g=e;""!==d[f]&&(g+="="+encodeURIComponent(String(d[f])));a.push(g);}}return this.c=a.join("&")};
	function Od(a){var b=new Qd;b.c=a.c;a.a&&(b.a=new Fd(a.a),b.b=a.b);return b}function ee(a,b){b=String(b);a.f&&(b=b.toLowerCase());return b}function Wd(a,b){b&&!a.f&&(be(a),a.c=null,a.a.forEach(function(c,d){var e=d.toLowerCase();d!=e&&(fe(this,d),de(this,e,c));},a));a.f=b;}function he(a){var b=[];ie(new je,a,b);return b.join("")}function je(){}
	function ie(a,b,c){if(null==b)c.push("null");else {if("object"==typeof b){if(Array.isArray(b)){var d=b;b=d.length;c.push("[");for(var e="",f=0;f<b;f++)c.push(e),ie(a,d[f],c),e=",";c.push("]");return}if(b instanceof String||b instanceof Number||b instanceof Boolean)b=b.valueOf();else {c.push("{");e="";for(d in b)Object.prototype.hasOwnProperty.call(b,d)&&(f=b[d],"function"!=typeof f&&(c.push(e),ke(d,c),c.push(":"),ie(a,f,c),e=","));c.push("}");return}}switch(typeof b){case "string":ke(b,c);break;case "number":c.push(isFinite(b)&&
	!isNaN(b)?String(b):"null");break;case "boolean":c.push(String(b));break;case "function":c.push("null");break;default:throw Error("Unknown type: "+typeof b);}}}var le={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\x0B":"\\u000b"},me=/\uffff/.test("\uffff")?/[\\"\x00-\x1f\x7f-\uffff]/g:/[\\"\x00-\x1f\x7f-\xff]/g;
	function ke(a,b){b.push('"',a.replace(me,function(c){var d=le[c];d||(d="\\u"+(c.charCodeAt(0)|65536).toString(16).substr(1),le[c]=d);return d}),'"');}function ne(){var a=I();return Tb&&!!dc&&11==dc||/Edge\/\d+/.test(a)}function oe(){return l.window&&l.window.location.href||self&&self.location&&self.location.href||""}function pe(a,b){b=b||l.window;var c="about:blank";a&&(c=Db(Fb(a)));b.location.href=c;}function qe(a,b){var c=[],d;for(d in a)d in b?typeof a[d]!=typeof b[d]?c.push(d):"object"==typeof a[d]&&null!=a[d]&&null!=b[d]?0<qe(a[d],b[d]).length&&c.push(d):a[d]!==b[d]&&c.push(d):c.push(d);for(d in b)d in a||c.push(d);return c}
	function re(){var a=I();a=se(a)!=te?null:(a=a.match(/\sChrome\/(\d+)/i))&&2==a.length?parseInt(a[1],10):null;return a&&30>a?!1:!Tb||!dc||9<dc}function ue(a){a=(a||I()).toLowerCase();return a.match(/android/)||a.match(/webos/)||a.match(/iphone|ipad|ipod/)||a.match(/blackberry/)||a.match(/windows phone/)||a.match(/iemobile/)?!0:!1}function ve(a){a=a||l.window;try{a.close();}catch(b){}}
	function we(a,b,c){var d=Math.floor(1E9*Math.random()).toString();b=b||500;c=c||600;var e=(window.screen.availHeight-c)/2,f=(window.screen.availWidth-b)/2;b={width:b,height:c,top:0<e?e:0,left:0<f?f:0,location:!0,resizable:!0,statusbar:!0,toolbar:!1};c=I().toLowerCase();d&&(b.target=d,x(c,"crios/")&&(b.target="_blank"));se(I())==xe&&(a=a||"http://localhost",b.scrollbars=!0);c=a||"";(a=b)||(a={});d=window;b=c instanceof Ab?c:Fb("undefined"!=typeof c.href?c.href:String(c));c=a.target||c.target;e=[];
	for(g in a)switch(g){case "width":case "height":case "top":case "left":e.push(g+"="+a[g]);break;case "target":case "noopener":case "noreferrer":break;default:e.push(g+"="+(a[g]?1:0));}var g=e.join(",");if((y("iPhone")&&!y("iPod")&&!y("iPad")||y("iPad")||y("iPod"))&&d.navigator&&d.navigator.standalone&&c&&"_self"!=c)g=jc(document,"A"),nb(g,"HTMLAnchorElement"),b instanceof Ab||b instanceof Ab||(b="object"==typeof b&&b.ra?b.qa():String(b),Eb.test(b)||(b="about:invalid#zClosurez"),b=new Ab(Bb,b)),g.href=
	Db(b),g.setAttribute("target",c),a.noreferrer&&g.setAttribute("rel","noreferrer"),a=document.createEvent("MouseEvent"),a.initMouseEvent("click",!0,!0,d,1),g.dispatchEvent(a),g={};else if(a.noreferrer){if(g=d.open("",c,g),a=Db(b),g&&(Vb&&x(a,";")&&(a="'"+a.replace(/'/g,"%27")+"'"),g.opener=null,a=Jb('<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+Ob(a)+'">'),d=g.document))d.write(Ib(a)),d.close();}else (g=d.open(Db(b),c,g))&&a.noopener&&(g.opener=null);if(g)try{g.focus();}catch(h){}return g}
	function ye(a){return new B(function(b){function c(){Bd(2E3).then(function(){if(!a||a.closed)b();else return c()});}return c()})}var ze=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,Ae=/^[^@]+@[^@]+$/;function Be(){var a=null;return (new B(function(b){"complete"==l.document.readyState?b():(a=function(){b();},kd(window,"load",a));})).o(function(b){td(window,"load",a);throw b;})}
	function Ce(){return De(void 0)?Be().then(function(){return new B(function(a,b){var c=l.document,d=setTimeout(function(){b(Error("Cordova framework is not ready."));},1E3);c.addEventListener("deviceready",function(){clearTimeout(d);a();},!1);})}):E(Error("Cordova must run in an Android or iOS file scheme."))}function De(a){a=a||I();return !("file:"!==Ee()&&"ionic:"!==Ee()||!a.toLowerCase().match(/iphone|ipad|ipod|android/))}function Fe(){var a=l.window;try{return !(!a||a==a.top)}catch(b){return !1}}
	function Ge(){return "undefined"!==typeof l.WorkerGlobalScope&&"function"===typeof l.importScripts}function He(){return firebase.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":firebase.INTERNAL.hasOwnProperty("node")?"Node":Ge()?"Worker":"Browser"}function Ie(){var a=He();return "ReactNative"===a||"Node"===a}function Je(){for(var a=50,b=[];0<a;)b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),a--;return b.join("")}
	var xe="Firefox",te="Chrome";
	function se(a){var b=a.toLowerCase();if(x(b,"opera/")||x(b,"opr/")||x(b,"opios/"))return "Opera";if(x(b,"iemobile"))return "IEMobile";if(x(b,"msie")||x(b,"trident/"))return "IE";if(x(b,"edge/"))return "Edge";if(x(b,"firefox/"))return xe;if(x(b,"silk/"))return "Silk";if(x(b,"blackberry"))return "Blackberry";if(x(b,"webos"))return "Webos";if(!x(b,"safari/")||x(b,"chrome/")||x(b,"crios/")||x(b,"android"))if(!x(b,"chrome/")&&!x(b,"crios/")||x(b,"edge/")){if(x(b,"android"))return "Android";if((a=a.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&
	2==a.length)return a[1]}else return te;else return "Safari";return "Other"}var Ke={jd:"FirebaseCore-web",ld:"FirebaseUI-web"};function Le(a,b){b=b||[];var c=[],d={},e;for(e in Ke)d[Ke[e]]=!0;for(e=0;e<b.length;e++)"undefined"!==typeof d[b[e]]&&(delete d[b[e]],c.push(b[e]));c.sort();b=c;b.length||(b=["FirebaseCore-web"]);c=He();"Browser"===c?(d=I(),c=se(d)):"Worker"===c&&(d=I(),c=se(d)+"-"+c);return c+"/JsCore/"+a+"/"+b.join(",")}function I(){return l.navigator&&l.navigator.userAgent||""}
	function J(a,b){a=a.split(".");b=b||l;for(var c=0;c<a.length&&"object"==typeof b&&null!=b;c++)b=b[a[c]];c!=a.length&&(b=void 0);return b}function Me(){try{var a=l.localStorage,b=Ne();if(a)return a.setItem(b,"1"),a.removeItem(b),ne()?!!l.indexedDB:!0}catch(c){return Ge()&&!!l.indexedDB}return !1}function Oe(){return (Pe()||"chrome-extension:"===Ee()||De())&&!Ie()&&Me()&&!Ge()}function Pe(){return "http:"===Ee()||"https:"===Ee()}function Ee(){return l.location&&l.location.protocol||null}
	function Qe(a){a=a||I();return ue(a)||se(a)==xe?!1:!0}function Re(a){return "undefined"===typeof a?null:he(a)}function Se(a){var b={},c;for(c in a)a.hasOwnProperty(c)&&null!==a[c]&&void 0!==a[c]&&(b[c]=a[c]);return b}function Te(a){if(null!==a)return JSON.parse(a)}function Ne(a){return a?a:Math.floor(1E9*Math.random()).toString()}function Ue(a){a=a||I();return "Safari"==se(a)||a.toLowerCase().match(/iphone|ipad|ipod/)?!1:!0}
	function Ve(){var a=l.___jsl;if(a&&a.H)for(var b in a.H)if(a.H[b].r=a.H[b].r||[],a.H[b].L=a.H[b].L||[],a.H[b].r=a.H[b].L.concat(),a.CP)for(var c=0;c<a.CP.length;c++)a.CP[c]=null;}function We(a,b){if(a>b)throw Error("Short delay should be less than long delay!");this.a=a;this.c=b;a=I();b=He();this.b=ue(a)||"ReactNative"===b;}
	We.prototype.get=function(){var a=l.navigator;return (a&&"boolean"===typeof a.onLine&&(Pe()||"chrome-extension:"===Ee()||"undefined"!==typeof a.connection)?a.onLine:1)?this.b?this.c:this.a:Math.min(5E3,this.a)};function Xe(){var a=l.document;return a&&"undefined"!==typeof a.visibilityState?"visible"==a.visibilityState:!0}
	function Ye(){var a=l.document,b=null;return Xe()||!a?D():(new B(function(c){b=function(){Xe()&&(a.removeEventListener("visibilitychange",b,!1),c());};a.addEventListener("visibilitychange",b,!1);})).o(function(c){a.removeEventListener("visibilitychange",b,!1);throw c;})}function Ze(a){try{var b=new Date(parseInt(a,10));if(!isNaN(b.getTime())&&!/[^0-9]/.test(a))return b.toUTCString()}catch(c){}return null}function $e(){return !(!J("fireauth.oauthhelper",l)&&!J("fireauth.iframe",l))}
	function af(){var a=l.navigator;return a&&a.serviceWorker&&a.serviceWorker.controller||null}function bf(){var a=l.navigator;return a&&a.serviceWorker?D().then(function(){return a.serviceWorker.ready}).then(function(b){return b.active||null}).o(function(){return null}):D(null)}var cf={};function df(a){cf[a]||(cf[a]=!0,"undefined"!==typeof console&&"function"===typeof console.warn&&console.warn(a));}var ef;try{var ff={};Object.defineProperty(ff,"abcd",{configurable:!0,enumerable:!0,value:1});Object.defineProperty(ff,"abcd",{configurable:!0,enumerable:!0,value:2});ef=2==ff.abcd;}catch(a){ef=!1;}function K(a,b,c){ef?Object.defineProperty(a,b,{configurable:!0,enumerable:!0,value:c}):a[b]=c;}function L(a,b){if(b)for(var c in b)b.hasOwnProperty(c)&&K(a,c,b[c]);}function gf(a){var b={};L(b,a);return b}function hf(a){var b={},c;for(c in a)a.hasOwnProperty(c)&&(b[c]=a[c]);return b}
	function jf(a,b){if(!b||!b.length)return !0;if(!a)return !1;for(var c=0;c<b.length;c++){var d=a[b[c]];if(void 0===d||null===d||""===d)return !1}return !0}function kf(a){var b=a;if("object"==typeof a&&null!=a){b="length"in a?[]:{};for(var c in a)K(b,c,kf(a[c]));}return b}function lf(a){var b=a&&(a[mf]?"phone":null);if(b&&a&&a[nf]){K(this,"uid",a[nf]);K(this,"displayName",a[of]||null);var c=null;a[pf]&&(c=(new Date(a[pf])).toUTCString());K(this,"enrollmentTime",c);K(this,"factorId",b);}else throw new t("internal-error","Internal assert: invalid MultiFactorInfo object");}lf.prototype.v=function(){return {uid:this.uid,displayName:this.displayName,factorId:this.factorId,enrollmentTime:this.enrollmentTime}};function qf(a){try{var b=new rf(a);}catch(c){b=null;}return b}
	var of="displayName",pf="enrolledAt",nf="mfaEnrollmentId",mf="phoneInfo";function rf(a){lf.call(this,a);K(this,"phoneNumber",a[mf]);}r(rf,lf);rf.prototype.v=function(){var a=rf.Za.v.call(this);a.phoneNumber=this.phoneNumber;return a};function sf(a){var b={},c=a[tf],d=a[uf],e=a[vf];a=qf(a[wf]);if(!e||e!=xf&&e!=yf&&!c||e==yf&&!d||e==zf&&!a)throw Error("Invalid checkActionCode response!");e==yf?(b[Af]=c||null,b[Bf]=c||null,b[Cf]=d):(b[Af]=d||null,b[Bf]=d||null,b[Cf]=c||null);b[Df]=a||null;K(this,Ef,e);K(this,Ff,kf(b));}
	var zf="REVERT_SECOND_FACTOR_ADDITION",xf="EMAIL_SIGNIN",yf="VERIFY_AND_CHANGE_EMAIL",tf="email",wf="mfaInfo",uf="newEmail",vf="requestType",Cf="email",Af="fromEmail",Df="multiFactorInfo",Bf="previousEmail",Ff="data",Ef="operation";function Gf(a){a=Zd(a);var b=Yd(a,Hf)||null,c=Yd(a,If)||null,d=Yd(a,Jf)||null;d=d?Kf[d]||null:null;if(!b||!c||!d)throw new t("argument-error",Hf+", "+If+"and "+Jf+" are required in a valid action code URL.");L(this,{apiKey:b,operation:d,code:c,continueUrl:Yd(a,Lf)||null,languageCode:Yd(a,Mf)||null,tenantId:Yd(a,Nf)||null});}
	var Hf="apiKey",If="oobCode",Lf="continueUrl",Mf="languageCode",Jf="mode",Nf="tenantId",Kf={recoverEmail:"RECOVER_EMAIL",resetPassword:"PASSWORD_RESET",revertSecondFactorAddition:zf,signIn:xf,verifyAndChangeEmail:yf,verifyEmail:"VERIFY_EMAIL"};function Of(a){try{return new Gf(a)}catch(b){return null}}function Pf(a){var b=a[Qf];if("undefined"===typeof b)throw new t("missing-continue-uri");if("string"!==typeof b||"string"===typeof b&&!b.length)throw new t("invalid-continue-uri");this.h=b;this.b=this.a=null;this.g=!1;var c=a[Rf];if(c&&"object"===typeof c){b=c[Sf];var d=c[Tf];c=c[Uf];if("string"===typeof b&&b.length){this.a=b;if("undefined"!==typeof d&&"boolean"!==typeof d)throw new t("argument-error",Tf+" property must be a boolean when specified.");this.g=!!d;if("undefined"!==typeof c&&("string"!==
	typeof c||"string"===typeof c&&!c.length))throw new t("argument-error",Uf+" property must be a non empty string when specified.");this.b=c||null;}else {if("undefined"!==typeof b)throw new t("argument-error",Sf+" property must be a non empty string when specified.");if("undefined"!==typeof d||"undefined"!==typeof c)throw new t("missing-android-pkg-name");}}else if("undefined"!==typeof c)throw new t("argument-error",Rf+" property must be a non null object when specified.");this.f=null;if((b=a[Vf])&&"object"===
	typeof b)if(b=b[Wf],"string"===typeof b&&b.length)this.f=b;else {if("undefined"!==typeof b)throw new t("argument-error",Wf+" property must be a non empty string when specified.");}else if("undefined"!==typeof b)throw new t("argument-error",Vf+" property must be a non null object when specified.");b=a[Xf];if("undefined"!==typeof b&&"boolean"!==typeof b)throw new t("argument-error",Xf+" property must be a boolean when specified.");this.c=!!b;a=a[Yf];if("undefined"!==typeof a&&("string"!==typeof a||"string"===
	typeof a&&!a.length))throw new t("argument-error",Yf+" property must be a non empty string when specified.");this.i=a||null;}var Rf="android",Yf="dynamicLinkDomain",Xf="handleCodeInApp",Vf="iOS",Qf="url",Tf="installApp",Uf="minimumVersion",Sf="packageName",Wf="bundleId";
	function Zf(a){var b={};b.continueUrl=a.h;b.canHandleCodeInApp=a.c;if(b.androidPackageName=a.a)b.androidMinimumVersion=a.b,b.androidInstallApp=a.g;b.iOSBundleId=a.f;b.dynamicLinkDomain=a.i;for(var c in b)null===b[c]&&delete b[c];return b}function $f(a){return Pa(a,function(b){b=b.toString(16);return 1<b.length?b:"0"+b}).join("")}var ag=null;function bg(a){var b="";cg(a,function(c){b+=String.fromCharCode(c);});return b}function cg(a,b){function c(m){for(;d<a.length;){var p=a.charAt(d++),v=ag[p];if(null!=v)return v;if(!/^[\s\xa0]*$/.test(p))throw Error("Unknown base64 encoding at char: "+p);}return m}dg();for(var d=0;;){var e=c(-1),f=c(0),g=c(64),h=c(64);if(64===h&&-1===e)break;b(e<<2|f>>4);64!=g&&(b(f<<4&240|g>>2),64!=h&&b(g<<6&192|h));}}
	function dg(){if(!ag){ag={};for(var a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),b=["+/=","+/","-_=","-_.","-_"],c=0;5>c;c++)for(var d=a.concat(b[c].split("")),e=0;e<d.length;e++){var f=d[e];void 0===ag[f]&&(ag[f]=e);}}}function eg(a){var b=fg(a);if(!(b&&b.sub&&b.iss&&b.aud&&b.exp))throw Error("Invalid JWT");this.g=a;this.c=b.exp;this.h=b.sub;this.a=b.provider_id||b.firebase&&b.firebase.sign_in_provider||null;this.f=b.firebase&&b.firebase.tenant||null;this.b=!!b.is_anonymous||"anonymous"==this.a;}eg.prototype.S=function(){return this.f};eg.prototype.i=function(){return this.b};eg.prototype.toString=function(){return this.g};function gg(a){try{return new eg(a)}catch(b){return null}}
	function fg(a){if(!a)return null;a=a.split(".");if(3!=a.length)return null;a=a[1];for(var b=(4-a.length%4)%4,c=0;c<b;c++)a+=".";try{return JSON.parse(bg(a))}catch(d){}return null}var hg="oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),ig=["client_id","response_type","scope","redirect_uri","state"],jg={kd:{Ha:"locale",ta:700,sa:600,ea:"facebook.com",Va:ig},md:{Ha:null,ta:500,sa:750,ea:"github.com",Va:ig},nd:{Ha:"hl",ta:515,sa:680,ea:"google.com",Va:ig},td:{Ha:"lang",ta:485,sa:705,ea:"twitter.com",Va:hg},gd:{Ha:"locale",ta:640,sa:600,ea:"apple.com",Va:[]}};
	function kg(a){for(var b in jg)if(jg[b].ea==a)return jg[b];return null}function lg(a){var b={};b["facebook.com"]=mg;b["google.com"]=ng;b["github.com"]=og;b["twitter.com"]=pg;var c=a&&a[qg];try{if(c)return b[c]?new b[c](a):new rg(a);if("undefined"!==typeof a[sg])return new tg(a)}catch(d){}return null}var sg="idToken",qg="providerId";
	function tg(a){var b=a[qg];if(!b&&a[sg]){var c=gg(a[sg]);c&&c.a&&(b=c.a);}if(!b)throw Error("Invalid additional user info!");if("anonymous"==b||"custom"==b)b=null;c=!1;"undefined"!==typeof a.isNewUser?c=!!a.isNewUser:"identitytoolkit#SignupNewUserResponse"===a.kind&&(c=!0);K(this,"providerId",b);K(this,"isNewUser",c);}function rg(a){tg.call(this,a);a=Te(a.rawUserInfo||"{}");K(this,"profile",kf(a||{}));}r(rg,tg);
	function mg(a){rg.call(this,a);if("facebook.com"!=this.providerId)throw Error("Invalid provider ID!");}r(mg,rg);function og(a){rg.call(this,a);if("github.com"!=this.providerId)throw Error("Invalid provider ID!");K(this,"username",this.profile&&this.profile.login||null);}r(og,rg);function ng(a){rg.call(this,a);if("google.com"!=this.providerId)throw Error("Invalid provider ID!");}r(ng,rg);
	function pg(a){rg.call(this,a);if("twitter.com"!=this.providerId)throw Error("Invalid provider ID!");K(this,"username",a.screenName||null);}r(pg,rg);function ug(a){var b=Zd(a),c=Yd(b,"link"),d=Yd(Zd(c),"link");b=Yd(b,"deep_link_id");return Yd(Zd(b),"link")||b||d||c||a}function vg(a,b){if(!a&&!b)throw new t("internal-error","Internal assert: no raw session string available");if(a&&b)throw new t("internal-error","Internal assert: unable to determine the session type");this.a=a||null;this.b=b||null;this.type=this.a?wg:xg;}var wg="enroll",xg="signin";vg.prototype.Fa=function(){return this.a?D(this.a):D(this.b)};vg.prototype.v=function(){return this.type==wg?{multiFactorSession:{idToken:this.a}}:{multiFactorSession:{pendingCredential:this.b}}};function yg(){}yg.prototype.ia=function(){};yg.prototype.b=function(){};yg.prototype.c=function(){};yg.prototype.v=function(){};function zg(a,b){return a.then(function(c){if(c[Ag]){var d=gg(c[Ag]);if(!d||b!=d.h)throw new t("user-mismatch");return c}throw new t("user-mismatch");}).o(function(c){throw c&&c.code&&c.code==va+"user-not-found"?new t("user-mismatch"):c;})}
	function Bg(a,b){if(b)this.a=b;else throw new t("internal-error","failed to construct a credential");K(this,"providerId",a);K(this,"signInMethod",a);}Bg.prototype.ia=function(a){return Cg(a,Dg(this))};Bg.prototype.b=function(a,b){var c=Dg(this);c.idToken=b;return Eg(a,c)};Bg.prototype.c=function(a,b){return zg(Fg(a,Dg(this)),b)};function Dg(a){return {pendingToken:a.a,requestUri:"http://localhost"}}Bg.prototype.v=function(){return {providerId:this.providerId,signInMethod:this.signInMethod,pendingToken:this.a}};
	function Gg(a){if(a&&a.providerId&&a.signInMethod&&0==a.providerId.indexOf("saml.")&&a.pendingToken)try{return new Bg(a.providerId,a.pendingToken)}catch(b){}return null}
	function Hg(a,b,c){this.a=null;if(b.idToken||b.accessToken)b.idToken&&K(this,"idToken",b.idToken),b.accessToken&&K(this,"accessToken",b.accessToken),b.nonce&&!b.pendingToken&&K(this,"nonce",b.nonce),b.pendingToken&&(this.a=b.pendingToken);else if(b.oauthToken&&b.oauthTokenSecret)K(this,"accessToken",b.oauthToken),K(this,"secret",b.oauthTokenSecret);else throw new t("internal-error","failed to construct a credential");K(this,"providerId",a);K(this,"signInMethod",c);}
	Hg.prototype.ia=function(a){return Cg(a,Ig(this))};Hg.prototype.b=function(a,b){var c=Ig(this);c.idToken=b;return Eg(a,c)};Hg.prototype.c=function(a,b){var c=Ig(this);return zg(Fg(a,c),b)};
	function Ig(a){var b={};a.idToken&&(b.id_token=a.idToken);a.accessToken&&(b.access_token=a.accessToken);a.secret&&(b.oauth_token_secret=a.secret);b.providerId=a.providerId;a.nonce&&!a.a&&(b.nonce=a.nonce);b={postBody:ce(b).toString(),requestUri:"http://localhost"};a.a&&(delete b.postBody,b.pendingToken=a.a);return b}
	Hg.prototype.v=function(){var a={providerId:this.providerId,signInMethod:this.signInMethod};this.idToken&&(a.oauthIdToken=this.idToken);this.accessToken&&(a.oauthAccessToken=this.accessToken);this.secret&&(a.oauthTokenSecret=this.secret);this.nonce&&(a.nonce=this.nonce);this.a&&(a.pendingToken=this.a);return a};
	function Jg(a){if(a&&a.providerId&&a.signInMethod){var b={idToken:a.oauthIdToken,accessToken:a.oauthTokenSecret?null:a.oauthAccessToken,oauthTokenSecret:a.oauthTokenSecret,oauthToken:a.oauthTokenSecret&&a.oauthAccessToken,nonce:a.nonce,pendingToken:a.pendingToken};try{return new Hg(a.providerId,b,a.signInMethod)}catch(c){}}return null}function Kg(a,b){this.Oc=b||[];L(this,{providerId:a,isOAuthProvider:!0});this.Fb={};this.lb=(kg(a)||{}).Ha||null;this.kb=null;}
	Kg.prototype.Ia=function(a){this.Fb=lb(a);return this};function Lg(a){if("string"!==typeof a||0!=a.indexOf("saml."))throw new t("argument-error",'SAML provider IDs must be prefixed with "saml."');Kg.call(this,a,[]);}r(Lg,Kg);function M(a){Kg.call(this,a,ig);this.a=[];}r(M,Kg);M.prototype.Aa=function(a){Ta(this.a,a)||this.a.push(a);return this};M.prototype.Nb=function(){return Xa(this.a)};
	M.prototype.credential=function(a,b){var c;n(a)?c={idToken:a.idToken||null,accessToken:a.accessToken||null,nonce:a.rawNonce||null}:c={idToken:a||null,accessToken:b||null};if(!c.idToken&&!c.accessToken)throw new t("argument-error","credential failed: must provide the ID token and/or the access token.");return new Hg(this.providerId,c,this.providerId)};function Mg(){M.call(this,"facebook.com");}r(Mg,M);K(Mg,"PROVIDER_ID","facebook.com");K(Mg,"FACEBOOK_SIGN_IN_METHOD","facebook.com");
	function Ng(a){if(!a)throw new t("argument-error","credential failed: expected 1 argument (the OAuth access token).");var b=a;n(a)&&(b=a.accessToken);return (new Mg).credential({accessToken:b})}function Og(){M.call(this,"github.com");}r(Og,M);K(Og,"PROVIDER_ID","github.com");K(Og,"GITHUB_SIGN_IN_METHOD","github.com");
	function Pg(a){if(!a)throw new t("argument-error","credential failed: expected 1 argument (the OAuth access token).");var b=a;n(a)&&(b=a.accessToken);return (new Og).credential({accessToken:b})}function Qg(){M.call(this,"google.com");this.Aa("profile");}r(Qg,M);K(Qg,"PROVIDER_ID","google.com");K(Qg,"GOOGLE_SIGN_IN_METHOD","google.com");function Rg(a,b){var c=a;n(a)&&(c=a.idToken,b=a.accessToken);return (new Qg).credential({idToken:c,accessToken:b})}function Sg(){Kg.call(this,"twitter.com",hg);}r(Sg,Kg);
	K(Sg,"PROVIDER_ID","twitter.com");K(Sg,"TWITTER_SIGN_IN_METHOD","twitter.com");function Tg(a,b){var c=a;n(c)||(c={oauthToken:a,oauthTokenSecret:b});if(!c.oauthToken||!c.oauthTokenSecret)throw new t("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");return new Hg("twitter.com",c,"twitter.com")}
	function Ug(a,b,c){this.a=a;this.f=b;K(this,"providerId","password");K(this,"signInMethod",c===Vg.EMAIL_LINK_SIGN_IN_METHOD?Vg.EMAIL_LINK_SIGN_IN_METHOD:Vg.EMAIL_PASSWORD_SIGN_IN_METHOD);}Ug.prototype.ia=function(a){return this.signInMethod==Vg.EMAIL_LINK_SIGN_IN_METHOD?N(a,Wg,{email:this.a,oobCode:this.f}):N(a,Xg,{email:this.a,password:this.f})};
	Ug.prototype.b=function(a,b){return this.signInMethod==Vg.EMAIL_LINK_SIGN_IN_METHOD?N(a,Yg,{idToken:b,email:this.a,oobCode:this.f}):N(a,Zg,{idToken:b,email:this.a,password:this.f})};Ug.prototype.c=function(a,b){return zg(this.ia(a),b)};Ug.prototype.v=function(){return {email:this.a,password:this.f,signInMethod:this.signInMethod}};function $g(a){return a&&a.email&&a.password?new Ug(a.email,a.password,a.signInMethod):null}function Vg(){L(this,{providerId:"password",isOAuthProvider:!1});}
	function ah(a,b){b=bh(b);if(!b)throw new t("argument-error","Invalid email link!");return new Ug(a,b.code,Vg.EMAIL_LINK_SIGN_IN_METHOD)}function bh(a){a=ug(a);return (a=Of(a))&&a.operation===xf?a:null}L(Vg,{PROVIDER_ID:"password"});L(Vg,{EMAIL_LINK_SIGN_IN_METHOD:"emailLink"});L(Vg,{EMAIL_PASSWORD_SIGN_IN_METHOD:"password"});function ch(a){if(!(a.bb&&a.ab||a.Ja&&a.da))throw new t("internal-error");this.a=a;K(this,"providerId","phone");this.ea="phone";K(this,"signInMethod","phone");}
	ch.prototype.ia=function(a){return a.cb(dh(this))};ch.prototype.b=function(a,b){var c=dh(this);c.idToken=b;return N(a,eh,c)};ch.prototype.c=function(a,b){var c=dh(this);c.operation="REAUTH";a=N(a,fh,c);return zg(a,b)};ch.prototype.v=function(){var a={providerId:"phone"};this.a.bb&&(a.verificationId=this.a.bb);this.a.ab&&(a.verificationCode=this.a.ab);this.a.Ja&&(a.temporaryProof=this.a.Ja);this.a.da&&(a.phoneNumber=this.a.da);return a};
	function gh(a){if(a&&"phone"===a.providerId&&(a.verificationId&&a.verificationCode||a.temporaryProof&&a.phoneNumber)){var b={};w(["verificationId","verificationCode","temporaryProof","phoneNumber"],function(c){a[c]&&(b[c]=a[c]);});return new ch(b)}return null}function dh(a){return a.a.Ja&&a.a.da?{temporaryProof:a.a.Ja,phoneNumber:a.a.da}:{sessionInfo:a.a.bb,code:a.a.ab}}
	function hh(a){try{this.a=a||firebase.auth();}catch(b){throw new t("argument-error","Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().");}L(this,{providerId:"phone",isOAuthProvider:!1});}
	hh.prototype.cb=function(a,b){var c=this.a.b;return D(b.verify()).then(function(d){if("string"!==typeof d)throw new t("argument-error","An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch(b.type){case "recaptcha":var e=n(a)?a.session:null,f=n(a)?a.phoneNumber:a,g;e&&e.type==wg?g=e.Fa().then(function(h){return ih(c,{idToken:h,phoneEnrollmentInfo:{phoneNumber:f,recaptchaToken:d}})}):e&&e.type==xg?g=e.Fa().then(function(h){return jh(c,
	{mfaPendingCredential:h,mfaEnrollmentId:a.multiFactorHint&&a.multiFactorHint.uid||a.multiFactorUid,phoneSignInInfo:{recaptchaToken:d}})}):g=kh(c,{phoneNumber:f,recaptchaToken:d});return g.then(function(h){"function"===typeof b.reset&&b.reset();return h},function(h){"function"===typeof b.reset&&b.reset();throw h;});default:throw new t("argument-error",'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.');}})};
	function lh(a,b){if(!a)throw new t("missing-verification-id");if(!b)throw new t("missing-verification-code");return new ch({bb:a,ab:b})}L(hh,{PROVIDER_ID:"phone"});L(hh,{PHONE_SIGN_IN_METHOD:"phone"});
	function mh(a){if(a.temporaryProof&&a.phoneNumber)return new ch({Ja:a.temporaryProof,da:a.phoneNumber});var b=a&&a.providerId;if(!b||"password"===b)return null;var c=a&&a.oauthAccessToken,d=a&&a.oauthTokenSecret,e=a&&a.nonce,f=a&&a.oauthIdToken,g=a&&a.pendingToken;try{switch(b){case "google.com":return Rg(f,c);case "facebook.com":return Ng(c);case "github.com":return Pg(c);case "twitter.com":return Tg(c,d);default:return c||d||f||g?g?0==b.indexOf("saml.")?new Bg(b,g):new Hg(b,{pendingToken:g,idToken:a.oauthIdToken,
	accessToken:a.oauthAccessToken},b):(new M(b)).credential({idToken:f,accessToken:c,rawNonce:e}):null}}catch(h){return null}}function nh(a){if(!a.isOAuthProvider)throw new t("invalid-oauth-provider");}function oh(a,b,c,d,e,f,g){this.c=a;this.b=b||null;this.g=c||null;this.f=d||null;this.i=f||null;this.h=g||null;this.a=e||null;if(this.g||this.a){if(this.g&&this.a)throw new t("invalid-auth-event");if(this.g&&!this.f)throw new t("invalid-auth-event");}else throw new t("invalid-auth-event");}oh.prototype.getUid=function(){var a=[];a.push(this.c);this.b&&a.push(this.b);this.f&&a.push(this.f);this.h&&a.push(this.h);return a.join("-")};oh.prototype.S=function(){return this.h};
	oh.prototype.v=function(){return {type:this.c,eventId:this.b,urlResponse:this.g,sessionId:this.f,postBody:this.i,tenantId:this.h,error:this.a&&this.a.v()}};function ph(a){a=a||{};return a.type?new oh(a.type,a.eventId,a.urlResponse,a.sessionId,a.error&&ya(a.error),a.postBody,a.tenantId):null}function qh(){this.b=null;this.a=[];}var rh=null;function sh(a){var b=rh;b.a.push(a);b.b||(b.b=function(c){for(var d=0;d<b.a.length;d++)b.a[d](c);},a=J("universalLinks.subscribe",l),"function"===typeof a&&a(null,b.b));}function th(a){var b="unauthorized-domain",c=void 0,d=Zd(a);a=d.b;d=d.f;"chrome-extension"==d?c=Nb("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",a):"http"==d||"https"==d?c=Nb("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",a):b="operation-not-supported-in-this-environment";
	t.call(this,b,c);}r(th,t);function uh(a,b,c){t.call(this,a,c);a=b||{};a.Gb&&K(this,"email",a.Gb);a.da&&K(this,"phoneNumber",a.da);a.credential&&K(this,"credential",a.credential);a.Wb&&K(this,"tenantId",a.Wb);}r(uh,t);uh.prototype.v=function(){var a={code:this.code,message:this.message};this.email&&(a.email=this.email);this.phoneNumber&&(a.phoneNumber=this.phoneNumber);this.tenantId&&(a.tenantId=this.tenantId);var b=this.credential&&this.credential.v();b&&z(a,b);return a};uh.prototype.toJSON=function(){return this.v()};
	function vh(a){if(a.code){var b=a.code||"";0==b.indexOf(va)&&(b=b.substring(va.length));var c={credential:mh(a),Wb:a.tenantId};if(a.email)c.Gb=a.email;else if(a.phoneNumber)c.da=a.phoneNumber;else if(!c.credential)return new t(b,a.message||void 0);return new uh(b,c,a.message)}return null}function wh(){}wh.prototype.c=null;function xh(a){return a.c||(a.c=a.b())}var yh;function zh(){}r(zh,wh);zh.prototype.a=function(){var a=Ah(this);return a?new ActiveXObject(a):new XMLHttpRequest};zh.prototype.b=function(){var a={};Ah(this)&&(a[0]=!0,a[1]=!0);return a};
	function Ah(a){if(!a.f&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var b=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],c=0;c<b.length;c++){var d=b[c];try{return new ActiveXObject(d),a.f=d}catch(e){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed");}return a.f}yh=new zh;function Bh(){}r(Bh,wh);Bh.prototype.a=function(){var a=new XMLHttpRequest;if("withCredentials"in a)return a;if("undefined"!=typeof XDomainRequest)return new Ch;throw Error("Unsupported browser");};Bh.prototype.b=function(){return {}};
	function Ch(){this.a=new XDomainRequest;this.readyState=0;this.onreadystatechange=null;this.responseType=this.responseText=this.response="";this.status=-1;this.statusText="";this.a.onload=q(this.oc,this);this.a.onerror=q(this.Pb,this);this.a.onprogress=q(this.pc,this);this.a.ontimeout=q(this.tc,this);}k=Ch.prototype;k.open=function(a,b,c){if(null!=c&&!c)throw Error("Only async requests are supported.");this.a.open(a,b);};
	k.send=function(a){if(a)if("string"==typeof a)this.a.send(a);else throw Error("Only string data is supported");else this.a.send();};k.abort=function(){this.a.abort();};k.setRequestHeader=function(){};k.getResponseHeader=function(a){return "content-type"==a.toLowerCase()?this.a.contentType:""};k.oc=function(){this.status=200;this.response=this.responseText=this.a.responseText;Dh(this,4);};k.Pb=function(){this.status=500;this.response=this.responseText="";Dh(this,4);};k.tc=function(){this.Pb();};
	k.pc=function(){this.status=200;Dh(this,1);};function Dh(a,b){a.readyState=b;if(a.onreadystatechange)a.onreadystatechange();}k.getAllResponseHeaders=function(){return "content-type: "+this.a.contentType};function Eh(a,b,c){this.reset(a,b,c,void 0,void 0);}Eh.prototype.a=null;Eh.prototype.reset=function(a,b,c,d,e){delete this.a;};function Gh(a){this.f=a;this.b=this.c=this.a=null;}function Hh(a,b){this.name=a;this.value=b;}Hh.prototype.toString=function(){return this.name};var Ih=new Hh("SEVERE",1E3),Jh=new Hh("WARNING",900),Kh=new Hh("CONFIG",700),Lh=new Hh("FINE",500);function Mh(a){if(a.c)return a.c;if(a.a)return Mh(a.a);Ea("Root logger has no level set.");return null}Gh.prototype.log=function(a,b,c){if(a.value>=Mh(this).value)for(na(b)&&(b=b()),a=new Eh(a,String(b),this.f),c&&(a.a=c),c=this;c;)c=c.a;};var Nh={},Oh=null;
	function Ph(a){Oh||(Oh=new Gh(""),Nh[""]=Oh,Oh.c=Kh);var b;if(!(b=Nh[a])){b=new Gh(a);var c=a.lastIndexOf("."),d=a.substr(c+1);c=Ph(a.substr(0,c));c.b||(c.b={});c.b[d]=b;b.a=c;Nh[a]=b;}return b}function Qh(a,b){a&&a.log(Lh,b,void 0);}function Rh(a){this.f=a;}r(Rh,wh);Rh.prototype.a=function(){return new Sh(this.f)};Rh.prototype.b=function(a){return function(){return a}}({});function Sh(a){G.call(this);this.s=a;this.readyState=Th;this.status=0;this.responseType=this.responseText=this.response=this.statusText="";this.onreadystatechange=null;this.i=new Headers;this.b=null;this.m="GET";this.g="";this.a=!1;this.h=Ph("goog.net.FetchXmlHttp");this.l=this.c=this.f=null;}r(Sh,G);var Th=0;k=Sh.prototype;
	k.open=function(a,b){if(this.readyState!=Th)throw this.abort(),Error("Error reopening a connection");this.m=a;this.g=b;this.readyState=1;Uh(this);};k.send=function(a){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.a=!0;var b={headers:this.i,method:this.m,credentials:void 0,cache:void 0};a&&(b.body=a);this.s.fetch(new Request(this.g,b)).then(this.sc.bind(this),this.Sa.bind(this));};
	k.abort=function(){this.response=this.responseText="";this.i=new Headers;this.status=0;this.c&&this.c.cancel("Request was aborted.");1<=this.readyState&&this.a&&4!=this.readyState&&(this.a=!1,Vh(this,!1));this.readyState=Th;};
	k.sc=function(a){this.a&&(this.f=a,this.b||(this.b=a.headers,this.readyState=2,Uh(this)),this.a&&(this.readyState=3,Uh(this),this.a&&("arraybuffer"===this.responseType?a.arrayBuffer().then(this.qc.bind(this),this.Sa.bind(this)):"undefined"!==typeof l.ReadableStream&&"body"in a?(this.response=this.responseText="",this.c=a.body.getReader(),this.l=new TextDecoder,Wh(this)):a.text().then(this.rc.bind(this),this.Sa.bind(this)))));};function Wh(a){a.c.read().then(a.nc.bind(a)).catch(a.Sa.bind(a));}
	k.nc=function(a){if(this.a){var b=this.l.decode(a.value?a.value:new Uint8Array(0),{stream:!a.done});b&&(this.response=this.responseText+=b);a.done?Vh(this,!0):Uh(this);3==this.readyState&&Wh(this);}};k.rc=function(a){this.a&&(this.response=this.responseText=a,Vh(this,!0));};k.qc=function(a){this.a&&(this.response=a,Vh(this,!0));};k.Sa=function(a){var b=this.h;b&&b.log(Jh,"Failed to fetch url "+this.g,a instanceof Error?a:Error(a));this.a&&Vh(this,!0);};
	function Vh(a,b){b&&a.f&&(a.status=a.f.status,a.statusText=a.f.statusText);a.readyState=4;a.f=null;a.c=null;a.l=null;Uh(a);}k.setRequestHeader=function(a,b){this.i.append(a,b);};k.getResponseHeader=function(a){return this.b?this.b.get(a.toLowerCase())||"":((a=this.h)&&a.log(Jh,"Attempting to get response header but no headers have been received for url: "+this.g,void 0),"")};
	k.getAllResponseHeaders=function(){if(!this.b){var a=this.h;a&&a.log(Jh,"Attempting to get all response headers but no headers have been received for url: "+this.g,void 0);return ""}a=[];for(var b=this.b.entries(),c=b.next();!c.done;)c=c.value,a.push(c[0]+": "+c[1]),c=b.next();return a.join("\r\n")};function Uh(a){a.onreadystatechange&&a.onreadystatechange.call(a);}function Xh(a){G.call(this);this.headers=new Fd;this.D=a||null;this.c=!1;this.B=this.a=null;this.h=this.P=this.l="";this.f=this.O=this.i=this.N=!1;this.g=0;this.s=null;this.m=Yh;this.w=this.R=!1;}r(Xh,G);var Yh="";Xh.prototype.b=Ph("goog.net.XhrIo");var Zh=/^https?$/i,$h=["POST","PUT"];
	function ai(a,b,c,d,e){if(a.a)throw Error("[goog.net.XhrIo] Object is active with another request="+a.l+"; newUri="+b);c=c?c.toUpperCase():"GET";a.l=b;a.h="";a.P=c;a.N=!1;a.c=!0;a.a=a.D?a.D.a():yh.a();a.B=a.D?xh(a.D):xh(yh);a.a.onreadystatechange=q(a.Sb,a);try{Qh(a.b,bi(a,"Opening Xhr")),a.O=!0,a.a.open(c,String(b),!0),a.O=!1;}catch(g){Qh(a.b,bi(a,"Error opening Xhr: "+g.message));ci(a,g);return}b=d||"";var f=new Fd(a.headers);e&&Ed(e,function(g,h){f.set(h,g);});e=Ra(f.X());d=l.FormData&&b instanceof
	l.FormData;!Ta($h,c)||e||d||f.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8");f.forEach(function(g,h){this.a.setRequestHeader(h,g);},a);a.m&&(a.a.responseType=a.m);"withCredentials"in a.a&&a.a.withCredentials!==a.R&&(a.a.withCredentials=a.R);try{di(a),0<a.g&&(a.w=ei(a.a),Qh(a.b,bi(a,"Will abort after "+a.g+"ms if incomplete, xhr2 "+a.w)),a.w?(a.a.timeout=a.g,a.a.ontimeout=q(a.Ka,a)):a.s=Ad(a.Ka,a.g,a)),Qh(a.b,bi(a,"Sending request")),a.i=!0,a.a.send(b),a.i=!1;}catch(g){Qh(a.b,
	bi(a,"Send error: "+g.message)),ci(a,g);}}function ei(a){return Tb&&cc(9)&&"number"===typeof a.timeout&&void 0!==a.ontimeout}function Sa(a){return "content-type"==a.toLowerCase()}k=Xh.prototype;k.Ka=function(){"undefined"!=typeof ha&&this.a&&(this.h="Timed out after "+this.g+"ms, aborting",Qh(this.b,bi(this,this.h)),this.dispatchEvent("timeout"),this.abort(8));};function ci(a,b){a.c=!1;a.a&&(a.f=!0,a.a.abort(),a.f=!1);a.h=b;fi(a);gi(a);}
	function fi(a){a.N||(a.N=!0,a.dispatchEvent("complete"),a.dispatchEvent("error"));}k.abort=function(){this.a&&this.c&&(Qh(this.b,bi(this,"Aborting")),this.c=!1,this.f=!0,this.a.abort(),this.f=!1,this.dispatchEvent("complete"),this.dispatchEvent("abort"),gi(this));};k.Ba=function(){this.a&&(this.c&&(this.c=!1,this.f=!0,this.a.abort(),this.f=!1),gi(this,!0));Xh.Za.Ba.call(this);};k.Sb=function(){this.wa||(this.O||this.i||this.f?hi(this):this.Hc());};k.Hc=function(){hi(this);};
	function hi(a){if(a.c&&"undefined"!=typeof ha)if(a.B[1]&&4==ii(a)&&2==ji(a))Qh(a.b,bi(a,"Local request error detected and ignored"));else if(a.i&&4==ii(a))Ad(a.Sb,0,a);else if(a.dispatchEvent("readystatechange"),4==ii(a)){Qh(a.b,bi(a,"Request complete"));a.c=!1;try{var b=ji(a);a:switch(b){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var c=!0;break a;default:c=!1;}var d;if(!(d=c)){var e;if(e=0===b){var f=String(a.l).match(Id)[1]||null;if(!f&&l.self&&l.self.location){var g=l.self.location.protocol;
	f=g.substr(0,g.length-1);}e=!Zh.test(f?f.toLowerCase():"");}d=e;}if(d)a.dispatchEvent("complete"),a.dispatchEvent("success");else {try{var h=2<ii(a)?a.a.statusText:"";}catch(m){Qh(a.b,"Can not get status: "+m.message),h="";}a.h=h+" ["+ji(a)+"]";fi(a);}}finally{gi(a);}}}function gi(a,b){if(a.a){di(a);var c=a.a,d=a.B[0]?ka:null;a.a=null;a.B=null;b||a.dispatchEvent("ready");try{c.onreadystatechange=d;}catch(e){(a=a.b)&&a.log(Ih,"Problem encountered resetting onreadystatechange: "+e.message,void 0);}}}
	function di(a){a.a&&a.w&&(a.a.ontimeout=null);a.s&&(l.clearTimeout(a.s),a.s=null);}function ii(a){return a.a?a.a.readyState:0}function ji(a){try{return 2<ii(a)?a.a.status:-1}catch(b){return -1}}function ki(a){try{return a.a?a.a.responseText:""}catch(b){return Qh(a.b,"Can not get responseText: "+b.message),""}}
	k.getResponse=function(){try{if(!this.a)return null;if("response"in this.a)return this.a.response;switch(this.m){case Yh:case "text":return this.a.responseText;case "arraybuffer":if("mozResponseArrayBuffer"in this.a)return this.a.mozResponseArrayBuffer}var a=this.b;a&&a.log(Ih,"Response type "+this.m+" is not supported on this browser",void 0);return null}catch(b){return Qh(this.b,"Can not get response: "+b.message),null}};function bi(a,b){return b+" ["+a.P+" "+a.l+" "+ji(a)+"]"}function li(a){var b=mi;this.g=[];this.w=b;this.s=a||null;this.f=this.a=!1;this.c=void 0;this.u=this.B=this.i=!1;this.h=0;this.b=null;this.l=0;}li.prototype.cancel=function(a){if(this.a)this.c instanceof li&&this.c.cancel();else {if(this.b){var b=this.b;delete this.b;a?b.cancel(a):(b.l--,0>=b.l&&b.cancel());}this.w?this.w.call(this.s,this):this.u=!0;this.a||(a=new ni(this),oi(this),pi(this,!1,a));}};li.prototype.m=function(a,b){this.i=!1;pi(this,a,b);};function pi(a,b,c){a.a=!0;a.c=c;a.f=!b;qi(a);}
	function oi(a){if(a.a){if(!a.u)throw new ri(a);a.u=!1;}}function si(a,b){ti(a,null,b,void 0);}function ti(a,b,c,d){a.g.push([b,c,d]);a.a&&qi(a);}li.prototype.then=function(a,b,c){var d,e,f=new B(function(g,h){d=g;e=h;});ti(this,d,function(g){g instanceof ni?f.cancel():e(g);});return f.then(a,b,c)};li.prototype.$goog_Thenable=!0;function ui(a){return Qa(a.g,function(b){return na(b[1])})}
	function qi(a){if(a.h&&a.a&&ui(a)){var b=a.h,c=vi[b];c&&(l.clearTimeout(c.a),delete vi[b]);a.h=0;}a.b&&(a.b.l--,delete a.b);b=a.c;for(var d=c=!1;a.g.length&&!a.i;){var e=a.g.shift(),f=e[0],g=e[1];e=e[2];if(f=a.f?g:f)try{var h=f.call(e||a.s,b);void 0!==h&&(a.f=a.f&&(h==b||h instanceof Error),a.c=b=h);if(Ca(b)||"function"===typeof l.Promise&&b instanceof l.Promise)d=!0,a.i=!0;}catch(m){b=m,a.f=!0,ui(a)||(c=!0);}}a.c=b;d&&(h=q(a.m,a,!0),d=q(a.m,a,!1),b instanceof li?(ti(b,h,d),b.B=!0):b.then(h,d));c&&(b=
	new wi(b),vi[b.a]=b,a.h=b.a);}function ri(){u.call(this);}r(ri,u);ri.prototype.message="Deferred has already fired";ri.prototype.name="AlreadyCalledError";function ni(){u.call(this);}r(ni,u);ni.prototype.message="Deferred was canceled";ni.prototype.name="CanceledError";function wi(a){this.a=l.setTimeout(q(this.c,this),0);this.b=a;}wi.prototype.c=function(){delete vi[this.a];throw this.b;};var vi={};function xi(a){var c=document,d=wb(a).toString(),e=jc(document,"SCRIPT"),f={Tb:e,Ka:void 0},g=new li(f),h=null,m=5E3;(h=window.setTimeout(function(){yi(e,!0);var p=new zi(Ai,"Timeout reached for loading script "+d);oi(g);pi(g,!1,p);},m),f.Ka=h);e.onload=e.onreadystatechange=function(){e.readyState&&"loaded"!=e.readyState&&"complete"!=e.readyState||(yi(e,!1,h),oi(g),pi(g,!0,null));};e.onerror=function(){yi(e,!0,h);var p=new zi(Bi,"Error while loading script "+
	d);oi(g);pi(g,!1,p);};f={};z(f,{type:"text/javascript",charset:"UTF-8"});gc(e,f);Mb(e,a);Ci(c).appendChild(e);return g}function Ci(a){var b;return (b=(a||document).getElementsByTagName("HEAD"))&&0!=b.length?b[0]:a.documentElement}function mi(){if(this&&this.Tb){var a=this.Tb;a&&"SCRIPT"==a.tagName&&yi(a,!0,this.Ka);}}
	function yi(a,b,c){null!=c&&l.clearTimeout(c);a.onload=ka;a.onerror=ka;a.onreadystatechange=ka;b&&window.setTimeout(function(){a&&a.parentNode&&a.parentNode.removeChild(a);},0);}var Bi=0,Ai=1;function zi(a,b){var c="Jsloader error (code #"+a+")";b&&(c+=": "+b);u.call(this,c);this.code=a;}r(zi,u);function Di(a){this.f=a;}r(Di,wh);Di.prototype.a=function(){return new this.f};Di.prototype.b=function(){return {}};
	function Ei(a,b,c){this.c=a;a=b||{};this.u=a.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token";this.m=a.secureTokenTimeout||Fi;this.g=lb(a.secureTokenHeaders||Gi);this.h=a.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/";this.l=a.identityPlatformEndpoint||"https://identitytoolkit.googleapis.com/v2/";this.i=a.firebaseTimeout||Hi;this.a=lb(a.firebaseHeaders||Ii);c&&(this.a["X-Client-Version"]=c,this.g["X-Client-Version"]=c);c="Node"==He();c=l.XMLHttpRequest||
	c&&firebase.INTERNAL.node&&firebase.INTERNAL.node.XMLHttpRequest;if(!c&&!Ge())throw new t("internal-error","The XMLHttpRequest compatibility library was not found.");this.f=void 0;Ge()?this.f=new Rh(self):Ie()?this.f=new Di(c):this.f=new Bh;this.b=null;}var Ji,Ag="idToken",Fi=new We(3E4,6E4),Gi={"Content-Type":"application/x-www-form-urlencoded"},Hi=new We(3E4,6E4),Ii={"Content-Type":"application/json"};function Ki(a,b){b?a.a["X-Firebase-Locale"]=b:delete a.a["X-Firebase-Locale"];}
	function Li(a,b){b?(a.a["X-Client-Version"]=b,a.g["X-Client-Version"]=b):(delete a.a["X-Client-Version"],delete a.g["X-Client-Version"]);}Ei.prototype.S=function(){return this.b};function Mi(a,b,c,d,e,f,g){re()||Ge()?a=q(a.w,a):(Ji||(Ji=new B(function(h,m){Ni(h,m);})),a=q(a.s,a));a(b,c,d,e,f,g);}
	Ei.prototype.w=function(a,b,c,d,e,f){if(Ge()&&("undefined"===typeof l.fetch||"undefined"===typeof l.Headers||"undefined"===typeof l.Request))throw new t("operation-not-supported-in-this-environment","fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");var g=new Xh(this.f);if(f){g.g=Math.max(0,f);var h=setTimeout(function(){g.dispatchEvent("timeout");},f);}md(g,"complete",function(){h&&clearTimeout(h);var m=null;try{m=
	JSON.parse(ki(this))||null;}catch(p){m=null;}b&&b(m);});sd(g,"ready",function(){h&&clearTimeout(h);Tc(this);});sd(g,"timeout",function(){h&&clearTimeout(h);Tc(this);b&&b(null);});ai(g,a,c,d,e);};var Oi=new ob(pb,"https://apis.google.com/js/client.js?onload=%{onload}"),Pi="__fcb"+Math.floor(1E6*Math.random()).toString();
	function Ni(a,b){if(((window.gapi||{}).client||{}).request)a();else {l[Pi]=function(){((window.gapi||{}).client||{}).request?a():b(Error("CORS_UNSUPPORTED"));};var c=xb(Oi,{onload:Pi});si(xi(c),function(){b(Error("CORS_UNSUPPORTED"));});}}
	Ei.prototype.s=function(a,b,c,d,e){var f=this;Ji.then(function(){window.gapi.client.setApiKey(f.c);var g=window.gapi.auth.getToken();window.gapi.auth.setToken(null);window.gapi.client.request({path:a,method:c,body:d,headers:e,authType:"none",callback:function(h){window.gapi.auth.setToken(g);b&&b(h);}});}).o(function(g){b&&b({error:{message:g&&g.message||"CORS_UNSUPPORTED"}});});};
	function Qi(a,b){return new B(function(c,d){"refresh_token"==b.grant_type&&b.refresh_token||"authorization_code"==b.grant_type&&b.code?Mi(a,a.u+"?key="+encodeURIComponent(a.c),function(e){e?e.error?d(Ri(e)):e.access_token&&e.refresh_token?c(e):d(new t("internal-error")):d(new t("network-request-failed"));},"POST",ce(b).toString(),a.g,a.m.get()):d(new t("internal-error"));})}
	function Si(a,b,c,d,e,f,g){var h=Zd(b+c);H(h,"key",a.c);g&&H(h,"cb",ua().toString());var m="GET"==d;if(m)for(var p in e)e.hasOwnProperty(p)&&H(h,p,e[p]);return new B(function(v,C){Mi(a,h.toString(),function(A){A?A.error?C(Ri(A,f||{})):v(A):C(new t("network-request-failed"));},d,m?void 0:he(Se(e)),a.a,a.i.get());})}function Ti(a){a=a.email;if("string"!==typeof a||!Ae.test(a))throw new t("invalid-email");}function Ui(a){"email"in a&&Ti(a);}
	function Vi(a,b){return N(a,Wi,{identifier:b,continueUri:Pe()?oe():"http://localhost"}).then(function(c){return c.signinMethods||[]})}function Xi(a){return N(a,Yi,{}).then(function(b){return b.authorizedDomains||[]})}function O(a){if(!a[Ag]){if(a.mfaPendingCredential)throw new t("multi-factor-auth-required",null,lb(a));throw new t("internal-error");}}
	function Zi(a){if(a.phoneNumber||a.temporaryProof){if(!a.phoneNumber||!a.temporaryProof)throw new t("internal-error");}else {if(!a.sessionInfo)throw new t("missing-verification-id");if(!a.code)throw new t("missing-verification-code");}}Ei.prototype.vb=function(){return N(this,$i,{})};Ei.prototype.xb=function(a,b){return N(this,aj,{idToken:a,email:b})};Ei.prototype.yb=function(a,b){return N(this,Zg,{idToken:a,password:b})};var bj={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};k=Ei.prototype;
	k.zb=function(a,b){var c={idToken:a},d=[];jb(bj,function(e,f){var g=b[f];null===g?d.push(e):f in b&&(c[f]=g);});d.length&&(c.deleteAttribute=d);return N(this,aj,c)};k.rb=function(a,b){a={requestType:"PASSWORD_RESET",email:a};z(a,b);return N(this,cj,a)};k.sb=function(a,b){a={requestType:"EMAIL_SIGNIN",email:a};z(a,b);return N(this,dj,a)};k.qb=function(a,b){a={requestType:"VERIFY_EMAIL",idToken:a};z(a,b);return N(this,ej,a)};
	k.Ab=function(a,b,c){a={requestType:"VERIFY_AND_CHANGE_EMAIL",idToken:a,newEmail:b};z(a,c);return N(this,fj,a)};function kh(a,b){return N(a,gj,b)}k.cb=function(a){return N(this,hj,a)};function ih(a,b){return N(a,ij,b).then(function(c){return c.phoneSessionInfo.sessionInfo})}
	function jj(a){if(!a.phoneVerificationInfo)throw new t("internal-error");if(!a.phoneVerificationInfo.sessionInfo)throw new t("missing-verification-id");if(!a.phoneVerificationInfo.code)throw new t("missing-verification-code");}function jh(a,b){return N(a,kj,b).then(function(c){return c.phoneResponseInfo.sessionInfo})}function lj(a,b,c){return N(a,mj,{idToken:b,deleteProvider:c})}function nj(a){if(!a.requestUri||!a.sessionId&&!a.postBody&&!a.pendingToken)throw new t("internal-error");}
	function oj(a,b){b.oauthIdToken&&b.providerId&&0==b.providerId.indexOf("oidc.")&&!b.pendingToken&&(a.sessionId?b.nonce=a.sessionId:a.postBody&&(a=new Qd(a.postBody),ge(a,"nonce")&&(b.nonce=a.get("nonce"))));return b}
	function pj(a){var b=null;a.needConfirmation?(a.code="account-exists-with-different-credential",b=vh(a)):"FEDERATED_USER_ID_ALREADY_LINKED"==a.errorMessage?(a.code="credential-already-in-use",b=vh(a)):"EMAIL_EXISTS"==a.errorMessage?(a.code="email-already-in-use",b=vh(a)):a.errorMessage&&(b=qj(a.errorMessage));if(b)throw b;O(a);}function Cg(a,b){b.returnIdpCredential=!0;return N(a,rj,b)}function Eg(a,b){b.returnIdpCredential=!0;return N(a,sj,b)}
	function Fg(a,b){b.returnIdpCredential=!0;b.autoCreate=!1;return N(a,tj,b)}function uj(a){if(!a.oobCode)throw new t("invalid-action-code");}k.jb=function(a,b){return N(this,vj,{oobCode:a,newPassword:b})};k.Pa=function(a){return N(this,wj,{oobCode:a})};k.fb=function(a){return N(this,xj,{oobCode:a})};
	var xj={endpoint:"setAccountInfo",A:uj,Y:"email",C:!0},wj={endpoint:"resetPassword",A:uj,G:function(a){var b=a.requestType;if(!b||!a.email&&"EMAIL_SIGNIN"!=b&&"VERIFY_AND_CHANGE_EMAIL"!=b)throw new t("internal-error");},C:!0},yj={endpoint:"signupNewUser",A:function(a){Ti(a);if(!a.password)throw new t("weak-password");},G:O,U:!0,C:!0},Wi={endpoint:"createAuthUri",C:!0},zj={endpoint:"deleteAccount",M:["idToken"]},mj={endpoint:"setAccountInfo",M:["idToken","deleteProvider"],A:function(a){if("array"!=
	la(a.deleteProvider))throw new t("internal-error");}},Wg={endpoint:"emailLinkSignin",M:["email","oobCode"],A:Ti,G:O,U:!0,C:!0},Yg={endpoint:"emailLinkSignin",M:["idToken","email","oobCode"],A:Ti,G:O,U:!0},Aj={endpoint:"accounts/mfaEnrollment:finalize",M:["idToken","phoneVerificationInfo"],A:jj,G:O,C:!0,La:!0},Bj={endpoint:"accounts/mfaSignIn:finalize",M:["mfaPendingCredential","phoneVerificationInfo"],A:jj,G:O,C:!0,La:!0},Cj={endpoint:"getAccountInfo"},dj={endpoint:"getOobConfirmationCode",M:["requestType"],
	A:function(a){if("EMAIL_SIGNIN"!=a.requestType)throw new t("internal-error");Ti(a);},Y:"email",C:!0},ej={endpoint:"getOobConfirmationCode",M:["idToken","requestType"],A:function(a){if("VERIFY_EMAIL"!=a.requestType)throw new t("internal-error");},Y:"email",C:!0},fj={endpoint:"getOobConfirmationCode",M:["idToken","newEmail","requestType"],A:function(a){if("VERIFY_AND_CHANGE_EMAIL"!=a.requestType)throw new t("internal-error");},Y:"email",C:!0},cj={endpoint:"getOobConfirmationCode",M:["requestType"],A:function(a){if("PASSWORD_RESET"!=
	a.requestType)throw new t("internal-error");Ti(a);},Y:"email",C:!0},Yi={hb:!0,endpoint:"getProjectConfig",Rb:"GET"},Dj={hb:!0,endpoint:"getRecaptchaParam",Rb:"GET",G:function(a){if(!a.recaptchaSiteKey)throw new t("internal-error");}},vj={endpoint:"resetPassword",A:uj,Y:"email",C:!0},gj={endpoint:"sendVerificationCode",M:["phoneNumber","recaptchaToken"],Y:"sessionInfo",C:!0},aj={endpoint:"setAccountInfo",M:["idToken"],A:Ui,U:!0},Zg={endpoint:"setAccountInfo",M:["idToken"],A:function(a){Ui(a);if(!a.password)throw new t("weak-password");
	},G:O,U:!0},$i={endpoint:"signupNewUser",G:O,U:!0,C:!0},ij={endpoint:"accounts/mfaEnrollment:start",M:["idToken","phoneEnrollmentInfo"],A:function(a){if(!a.phoneEnrollmentInfo)throw new t("internal-error");if(!a.phoneEnrollmentInfo.phoneNumber)throw new t("missing-phone-number");if(!a.phoneEnrollmentInfo.recaptchaToken)throw new t("missing-app-credential");},G:function(a){if(!a.phoneSessionInfo||!a.phoneSessionInfo.sessionInfo)throw new t("internal-error");},C:!0,La:!0},kj={endpoint:"accounts/mfaSignIn:start",
	M:["mfaPendingCredential","mfaEnrollmentId","phoneSignInInfo"],A:function(a){if(!a.phoneSignInInfo||!a.phoneSignInInfo.recaptchaToken)throw new t("missing-app-credential");},G:function(a){if(!a.phoneResponseInfo||!a.phoneResponseInfo.sessionInfo)throw new t("internal-error");},C:!0,La:!0},rj={endpoint:"verifyAssertion",A:nj,Wa:oj,G:pj,U:!0,C:!0},tj={endpoint:"verifyAssertion",A:nj,Wa:oj,G:function(a){if(a.errorMessage&&"USER_NOT_FOUND"==a.errorMessage)throw new t("user-not-found");if(a.errorMessage)throw qj(a.errorMessage);
	O(a);},U:!0,C:!0},sj={endpoint:"verifyAssertion",A:function(a){nj(a);if(!a.idToken)throw new t("internal-error");},Wa:oj,G:pj,U:!0},Ej={endpoint:"verifyCustomToken",A:function(a){if(!a.token)throw new t("invalid-custom-token");},G:O,U:!0,C:!0},Xg={endpoint:"verifyPassword",A:function(a){Ti(a);if(!a.password)throw new t("wrong-password");},G:O,U:!0,C:!0},hj={endpoint:"verifyPhoneNumber",A:Zi,G:O,C:!0},eh={endpoint:"verifyPhoneNumber",A:function(a){if(!a.idToken)throw new t("internal-error");Zi(a);},
	G:function(a){if(a.temporaryProof)throw a.code="credential-already-in-use",vh(a);O(a);}},fh={Eb:{USER_NOT_FOUND:"user-not-found"},endpoint:"verifyPhoneNumber",A:Zi,G:O,C:!0},Fj={endpoint:"accounts/mfaEnrollment:withdraw",M:["idToken","mfaEnrollmentId"],G:function(a){if(!!a[Ag]^!!a.refreshToken)throw new t("internal-error");},C:!0,La:!0};
	function N(a,b,c){if(!jf(c,b.M))return E(new t("internal-error"));var d=!!b.La,e=b.Rb||"POST",f;return D(c).then(b.A).then(function(){b.U&&(c.returnSecureToken=!0);b.C&&a.b&&"undefined"===typeof c.tenantId&&(c.tenantId=a.b);return d?Si(a,a.l,b.endpoint,e,c,b.Eb,b.hb||!1):Si(a,a.h,b.endpoint,e,c,b.Eb,b.hb||!1)}).then(function(g){f=g;return b.Wa?b.Wa(c,f):f}).then(b.G).then(function(){if(!b.Y)return f;if(!(b.Y in f))throw new t("internal-error");return f[b.Y]})}
	function qj(a){return Ri({error:{errors:[{message:a}],code:400,message:a}})}
	function Ri(a,b){var c=(a.error&&a.error.errors&&a.error.errors[0]||{}).reason||"";var d={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(c=d[c]?new t(d[c]):null)return c;c=a.error&&a.error.message||"";d={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",
	MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_OR_INVALID_NONCE:"missing-or-invalid-nonce",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_RECIPIENT_EMAIL:"invalid-recipient-email",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",
	EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",INVALID_PROVIDER_ID:"invalid-provider-id",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",INVALID_APP_ID:"invalid-app-id",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",
	OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled",CAPTCHA_CHECK_FAILED:"captcha-check-failed",INVALID_APP_CREDENTIAL:"invalid-app-credential",INVALID_CODE:"invalid-verification-code",INVALID_PHONE_NUMBER:"invalid-phone-number",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_APP_CREDENTIAL:"missing-app-credential",MISSING_CODE:"missing-verification-code",MISSING_PHONE_NUMBER:"missing-phone-number",MISSING_SESSION_INFO:"missing-verification-id",
	QUOTA_EXCEEDED:"quota-exceeded",SESSION_EXPIRED:"code-expired",REJECTED_CREDENTIAL:"rejected-credential",INVALID_CONTINUE_URI:"invalid-continue-uri",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",MISSING_IOS_BUNDLE_ID:"missing-ios-bundle-id",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_DYNAMIC_LINK_DOMAIN:"invalid-dynamic-link-domain",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",INVALID_CERT_HASH:"invalid-cert-hash",UNSUPPORTED_TENANT_OPERATION:"unsupported-tenant-operation",
	INVALID_TENANT_ID:"invalid-tenant-id",TENANT_ID_MISMATCH:"tenant-id-mismatch",ADMIN_ONLY_OPERATION:"admin-restricted-operation",INVALID_MFA_PENDING_CREDENTIAL:"invalid-multi-factor-session",MFA_ENROLLMENT_NOT_FOUND:"multi-factor-info-not-found",MISSING_MFA_PENDING_CREDENTIAL:"missing-multi-factor-session",MISSING_MFA_ENROLLMENT_ID:"missing-multi-factor-info",EMAIL_CHANGE_NEEDS_VERIFICATION:"email-change-needs-verification",SECOND_FACTOR_EXISTS:"second-factor-already-in-use",SECOND_FACTOR_LIMIT_EXCEEDED:"maximum-second-factor-count-exceeded",
	UNSUPPORTED_FIRST_FACTOR:"unsupported-first-factor",UNVERIFIED_EMAIL:"unverified-email"};z(d,b||{});b=(b=c.match(/^[^\s]+\s*:\s*([\s\S]*)$/))&&1<b.length?b[1]:void 0;for(var e in d)if(0===c.indexOf(e))return new t(d[e],b);!b&&a&&(b=Re(a));return new t("internal-error",b)}function Gj(a){this.b=a;this.a=null;this.nb=Hj(this);}
	function Hj(a){return Ij().then(function(){return new B(function(b,c){J("gapi.iframes.getContext")().open({where:document.body,url:a.b,messageHandlersFilter:J("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),attributes:{style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},dontclear:!0},function(d){function e(){clearTimeout(f);b();}a.a=d;a.a.restyle({setHideOnLeave:!1});var f=setTimeout(function(){c(Error("Network Error"));},Jj.get());d.ping(e).then(e,function(){c(Error("Network Error"));});});})})}
	function Kj(a,b){return a.nb.then(function(){return new B(function(c){a.a.send(b.type,b,c,J("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));})})}function Lj(a,b){a.nb.then(function(){a.a.register("authEvent",b,J("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));});}var Mj=new ob(pb,"https://apis.google.com/js/api.js?onload=%{onload}"),Nj=new We(3E4,6E4),Jj=new We(5E3,15E3),Oj=null;
	function Ij(){return Oj?Oj:Oj=(new B(function(a,b){function c(){Ve();J("gapi.load")("gapi.iframes",{callback:a,ontimeout:function(){Ve();b(Error("Network Error"));},timeout:Nj.get()});}if(J("gapi.iframes.Iframe"))a();else if(J("gapi.load"))c();else {var d="__iframefcb"+Math.floor(1E6*Math.random()).toString();l[d]=function(){J("gapi.load")?c():b(Error("Network Error"));};d=xb(Mj,{onload:d});D(xi(d)).o(function(){b(Error("Network Error"));});}})).o(function(a){Oj=null;throw a;})}function Pj(a,b,c){this.i=a;this.g=b;this.h=c;this.f=null;this.a=$d(this.i,"/__/auth/iframe");H(this.a,"apiKey",this.g);H(this.a,"appName",this.h);this.b=null;this.c=[];}Pj.prototype.toString=function(){this.f?H(this.a,"v",this.f):fe(this.a.a,"v");this.b?H(this.a,"eid",this.b):fe(this.a.a,"eid");this.c.length?H(this.a,"fw",this.c.join(",")):fe(this.a.a,"fw");return this.a.toString()};function Qj(a,b,c,d,e){this.s=a;this.m=b;this.c=c;this.u=d;this.i=this.g=this.l=null;this.a=e;this.h=this.f=null;}
	Qj.prototype.ub=function(a){this.h=a;return this};
	Qj.prototype.toString=function(){var a=$d(this.s,"/__/auth/handler");H(a,"apiKey",this.m);H(a,"appName",this.c);H(a,"authType",this.u);if(this.a.isOAuthProvider){var b=this.a;try{var c=firebase.app(this.c).auth().ja();}catch(h){c=null;}b.kb=c;H(a,"providerId",this.a.providerId);b=this.a;c=Se(b.Fb);for(var d in c)c[d]=c[d].toString();d=b.Oc;c=lb(c);for(var e=0;e<d.length;e++){var f=d[e];f in c&&delete c[f];}b.lb&&b.kb&&!c[b.lb]&&(c[b.lb]=b.kb);kb(c)||H(a,"customParameters",Re(c));}"function"===typeof this.a.Nb&&
	(b=this.a.Nb(),b.length&&H(a,"scopes",b.join(",")));this.l?H(a,"redirectUrl",this.l):fe(a.a,"redirectUrl");this.g?H(a,"eventId",this.g):fe(a.a,"eventId");this.i?H(a,"v",this.i):fe(a.a,"v");if(this.b)for(var g in this.b)this.b.hasOwnProperty(g)&&!Yd(a,g)&&H(a,g,this.b[g]);this.h?H(a,"tid",this.h):fe(a.a,"tid");this.f?H(a,"eid",this.f):fe(a.a,"eid");g=Rj(this.c);g.length&&H(a,"fw",g.join(","));return a.toString()};function Rj(a){try{return firebase.app(a).auth().Ea()}catch(b){return []}}
	function Sj(a,b,c,d,e){this.u=a;this.f=b;this.b=c;this.c=d||null;this.h=e||null;this.m=this.s=this.w=null;this.g=[];this.l=this.a=null;}
	function Tj(a){var b=oe();return Xi(a).then(function(c){a:{var d=Zd(b),e=d.f;d=d.b;for(var f=0;f<c.length;f++){var g=c[f];var h=d;var m=e;0==g.indexOf("chrome-extension://")?h=Zd(g).b==h&&"chrome-extension"==m:"http"!=m&&"https"!=m?h=!1:ze.test(g)?h=h==g:(g=g.split(".").join("\\."),h=(new RegExp("^(.+\\."+g+"|"+g+")$","i")).test(h));if(h){c=!0;break a}}c=!1;}if(!c)throw new th(oe());})}
	function Uj(a){if(a.l)return a.l;a.l=Be().then(function(){if(!a.s){var b=a.c,c=a.h,d=Rj(a.b),e=new Pj(a.u,a.f,a.b);e.f=b;e.b=c;e.c=Xa(d||[]);a.s=e.toString();}a.i=new Gj(a.s);Vj(a);});return a.l}k=Sj.prototype;k.Lb=function(a,b,c){var d=new t("popup-closed-by-user"),e=new t("web-storage-unsupported"),f=this,g=!1;return this.ka().then(function(){Wj(f).then(function(h){h||(a&&ve(a),b(e),g=!0);});}).o(function(){}).then(function(){if(!g)return ye(a)}).then(function(){if(!g)return Bd(c).then(function(){b(d);})})};
	k.Ub=function(){var a=I();return !Qe(a)&&!Ue(a)};k.Qb=function(){return !1};
	k.Jb=function(a,b,c,d,e,f,g,h){if(!a)return E(new t("popup-blocked"));if(g&&!Qe())return this.ka().o(function(p){ve(a);e(p);}),d(),D();this.a||(this.a=Tj(Xj(this)));var m=this;return this.a.then(function(){var p=m.ka().o(function(v){ve(a);e(v);throw v;});d();return p}).then(function(){nh(c);if(!g){var p=Yj(m.u,m.f,m.b,b,c,null,f,m.c,void 0,m.h,h);pe(p,a);}}).o(function(p){"auth/network-request-failed"==p.code&&(m.a=null);throw p;})};
	function Xj(a){a.m||(a.w=a.c?Le(a.c,Rj(a.b)):null,a.m=new Ei(a.f,Aa(a.h),a.w));return a.m}k.Kb=function(a,b,c,d){this.a||(this.a=Tj(Xj(this)));var e=this;return this.a.then(function(){nh(b);var f=Yj(e.u,e.f,e.b,a,b,oe(),c,e.c,void 0,e.h,d);pe(f);}).o(function(f){"auth/network-request-failed"==f.code&&(e.a=null);throw f;})};k.ka=function(){var a=this;return Uj(this).then(function(){return a.i.nb}).o(function(){a.a=null;throw new t("network-request-failed");})};k.Xb=function(){return !0};
	function Yj(a,b,c,d,e,f,g,h,m,p,v){a=new Qj(a,b,c,d,e);a.l=f;a.g=g;a.i=h;a.b=lb(m||null);a.f=p;return a.ub(v).toString()}function Vj(a){if(!a.i)throw Error("IfcHandler must be initialized!");Lj(a.i,function(b){var c={};if(b&&b.authEvent){var d=!1;b=ph(b.authEvent);for(c=0;c<a.g.length;c++)d=a.g[c](b)||d;c={};c.status=d?"ACK":"ERROR";return D(c)}c.status="ERROR";return D(c)});}
	function Wj(a){var b={type:"webStorageSupport"};return Uj(a).then(function(){return Kj(a.i,b)}).then(function(c){if(c&&c.length&&"undefined"!==typeof c[0].webStorageSupport)return c[0].webStorageSupport;throw Error();})}k.Ca=function(a){this.g.push(a);};k.Qa=function(a){Va(this.g,function(b){return b==a});};function Zj(a){this.a=a||firebase.INTERNAL.reactNative&&firebase.INTERNAL.reactNative.AsyncStorage;if(!this.a)throw new t("internal-error","The React Native compatibility library was not found.");this.type="asyncStorage";}k=Zj.prototype;k.get=function(a){return D(this.a.getItem(a)).then(function(b){return b&&Te(b)})};k.set=function(a,b){return D(this.a.setItem(a,Re(b)))};k.T=function(a){return D(this.a.removeItem(a))};k.ba=function(){};k.ha=function(){};function ak(a){this.b=a;this.a={};this.f=q(this.c,this);}var bk=[];function ck(){var a=Ge()?self:null;w(bk,function(c){c.b==a&&(b=c);});if(!b){var b=new ak(a);bk.push(b);}return b}
	ak.prototype.c=function(a){var b=a.data.eventType,c=a.data.eventId,d=this.a[b];if(d&&0<d.length){a.ports[0].postMessage({status:"ack",eventId:c,eventType:b,response:null});var e=[];w(d,function(f){e.push(D().then(function(){return f(a.origin,a.data.data)}));});Fc(e).then(function(f){var g=[];w(f,function(h){g.push({fulfilled:h.Mb,value:h.value,reason:h.reason?h.reason.message:void 0});});w(g,function(h){for(var m in h)"undefined"===typeof h[m]&&delete h[m];});a.ports[0].postMessage({status:"done",eventId:c,
	eventType:b,response:g});});}};function dk(a,b,c){kb(a.a)&&a.b.addEventListener("message",a.f);"undefined"===typeof a.a[b]&&(a.a[b]=[]);a.a[b].push(c);}function ek(a){this.a=a;}ek.prototype.postMessage=function(a,b){this.a.postMessage(a,b);};function fk(a){this.c=a;this.b=!1;this.a=[];}
	function gk(a,b,c,d){var e,f=c||{},g,h,m,p=null;if(a.b)return E(Error("connection_unavailable"));var v=d?800:50,C="undefined"!==typeof MessageChannel?new MessageChannel:null;return (new B(function(A,Q){C?(e=Math.floor(Math.random()*Math.pow(10,20)).toString(),C.port1.start(),h=setTimeout(function(){Q(Error("unsupported_event"));},v),g=function(wa){wa.data.eventId===e&&("ack"===wa.data.status?(clearTimeout(h),m=setTimeout(function(){Q(Error("timeout"));},3E3)):"done"===wa.data.status?(clearTimeout(m),
	"undefined"!==typeof wa.data.response?A(wa.data.response):Q(Error("unknown_error"))):(clearTimeout(h),clearTimeout(m),Q(Error("invalid_response"))));},p={messageChannel:C,onMessage:g},a.a.push(p),C.port1.addEventListener("message",g),a.c.postMessage({eventType:b,eventId:e,data:f},[C.port2])):Q(Error("connection_unavailable"));})).then(function(A){hk(a,p);return A}).o(function(A){hk(a,p);throw A;})}
	function hk(a,b){if(b){var c=b.messageChannel,d=b.onMessage;c&&(c.port1.removeEventListener("message",d),c.port1.close());Va(a.a,function(e){return e==b});}}fk.prototype.close=function(){for(;0<this.a.length;)hk(this,this.a[0]);this.b=!0;};function ik(){if(!jk())throw new t("web-storage-unsupported");this.c={};this.a=[];this.b=0;this.u=l.indexedDB;this.type="indexedDB";this.g=this.l=this.f=this.i=null;this.s=!1;this.h=null;var a=this;Ge()&&self?(this.l=ck(),dk(this.l,"keyChanged",function(b,c){return kk(a).then(function(d){0<d.length&&w(a.a,function(e){e(d);});return {keyProcessed:Ta(d,c.key)}})}),dk(this.l,"ping",function(){return D(["keyChanged"])})):bf().then(function(b){if(a.h=b)a.g=new fk(new ek(b)),gk(a.g,"ping",null,!0).then(function(c){c[0].fulfilled&&
	Ta(c[0].value,"keyChanged")&&(a.s=!0);}).o(function(){});});}var lk;function mk(a){return new B(function(b,c){var d=a.u.deleteDatabase("firebaseLocalStorageDb");d.onsuccess=function(){b();};d.onerror=function(e){c(Error(e.target.error));};})}
	function nk(a){return new B(function(b,c){var d=a.u.open("firebaseLocalStorageDb",1);d.onerror=function(e){try{e.preventDefault();}catch(f){}c(Error(e.target.error));};d.onupgradeneeded=function(e){e=e.target.result;try{e.createObjectStore("firebaseLocalStorage",{keyPath:"fbase_key"});}catch(f){c(f);}};d.onsuccess=function(e){e=e.target.result;e.objectStoreNames.contains("firebaseLocalStorage")?b(e):mk(a).then(function(){return nk(a)}).then(function(f){b(f);}).o(function(f){c(f);});};})}
	function ok(a){a.m||(a.m=nk(a));return a.m}function jk(){try{return !!l.indexedDB}catch(a){return !1}}function pk(a){return a.objectStore("firebaseLocalStorage")}function qk(a,b){return a.transaction(["firebaseLocalStorage"],b?"readwrite":"readonly")}function rk(a){return new B(function(b,c){a.onsuccess=function(d){d&&d.target?b(d.target.result):b();};a.onerror=function(d){c(d.target.error);};})}k=ik.prototype;
	k.set=function(a,b){var c=!1,d,e=this;return ok(this).then(function(f){d=f;f=pk(qk(d,!0));return rk(f.get(a))}).then(function(f){var g=pk(qk(d,!0));if(f)return f.value=b,rk(g.put(f));e.b++;c=!0;f={};f.fbase_key=a;f.value=b;return rk(g.add(f))}).then(function(){e.c[a]=b;return sk(e,a)}).ma(function(){c&&e.b--;})};function sk(a,b){return a.g&&a.h&&af()===a.h?gk(a.g,"keyChanged",{key:b},a.s).then(function(){}).o(function(){}):D()}
	k.get=function(a){return ok(this).then(function(b){return rk(pk(qk(b,!1)).get(a))}).then(function(b){return b&&b.value})};k.T=function(a){var b=!1,c=this;return ok(this).then(function(d){b=!0;c.b++;return rk(pk(qk(d,!0))["delete"](a))}).then(function(){delete c.c[a];return sk(c,a)}).ma(function(){b&&c.b--;})};
	function kk(a){return ok(a).then(function(b){var c=pk(qk(b,!1));return c.getAll?rk(c.getAll()):new B(function(d,e){var f=[],g=c.openCursor();g.onsuccess=function(h){(h=h.target.result)?(f.push(h.value),h["continue"]()):d(f);};g.onerror=function(h){e(h.target.error);};})}).then(function(b){var c={},d=[];if(0==a.b){for(d=0;d<b.length;d++)c[b[d].fbase_key]=b[d].value;d=qe(a.c,c);a.c=c;}return d})}k.ba=function(a){0==this.a.length&&tk(this);this.a.push(a);};
	k.ha=function(a){Va(this.a,function(b){return b==a});0==this.a.length&&uk(this);};function tk(a){function b(){a.f=setTimeout(function(){a.i=kk(a).then(function(c){0<c.length&&w(a.a,function(d){d(c);});}).then(function(){b();}).o(function(c){"STOP_EVENT"!=c.message&&b();});},800);}uk(a);b();}function uk(a){a.i&&a.i.cancel("STOP_EVENT");a.f&&(clearTimeout(a.f),a.f=null);}function vk(a){var b=this,c=null;this.a=[];this.type="indexedDB";this.c=a;this.b=D().then(function(){if(jk()){var d=Ne(),e="__sak"+d;lk||(lk=new ik);c=lk;return c.set(e,d).then(function(){return c.get(e)}).then(function(f){if(f!==d)throw Error("indexedDB not supported!");return c.T(e)}).then(function(){return c}).o(function(){return b.c})}return b.c}).then(function(d){b.type=d.type;d.ba(function(e){w(b.a,function(f){f(e);});});return d});}k=vk.prototype;k.get=function(a){return this.b.then(function(b){return b.get(a)})};
	k.set=function(a,b){return this.b.then(function(c){return c.set(a,b)})};k.T=function(a){return this.b.then(function(b){return b.T(a)})};k.ba=function(a){this.a.push(a);};k.ha=function(a){Va(this.a,function(b){return b==a});};function wk(){this.a={};this.type="inMemory";}k=wk.prototype;k.get=function(a){return D(this.a[a])};k.set=function(a,b){this.a[a]=b;return D()};k.T=function(a){delete this.a[a];return D()};k.ba=function(){};k.ha=function(){};function xk(){if(!yk()){if("Node"==He())throw new t("internal-error","The LocalStorage compatibility library was not found.");throw new t("web-storage-unsupported");}this.a=zk()||firebase.INTERNAL.node.localStorage;this.type="localStorage";}function zk(){try{var a=l.localStorage,b=Ne();a&&(a.setItem(b,"1"),a.removeItem(b));return a}catch(c){return null}}
	function yk(){var a="Node"==He();a=zk()||a&&firebase.INTERNAL.node&&firebase.INTERNAL.node.localStorage;if(!a)return !1;try{return a.setItem("__sak","1"),a.removeItem("__sak"),!0}catch(b){return !1}}k=xk.prototype;k.get=function(a){var b=this;return D().then(function(){var c=b.a.getItem(a);return Te(c)})};k.set=function(a,b){var c=this;return D().then(function(){var d=Re(b);null===d?c.T(a):c.a.setItem(a,d);})};k.T=function(a){var b=this;return D().then(function(){b.a.removeItem(a);})};
	k.ba=function(a){l.window&&jd(l.window,"storage",a);};k.ha=function(a){l.window&&td(l.window,"storage",a);};function Ak(){this.type="nullStorage";}k=Ak.prototype;k.get=function(){return D(null)};k.set=function(){return D()};k.T=function(){return D()};k.ba=function(){};k.ha=function(){};function Bk(){if(!Ck()){if("Node"==He())throw new t("internal-error","The SessionStorage compatibility library was not found.");throw new t("web-storage-unsupported");}this.a=Dk()||firebase.INTERNAL.node.sessionStorage;this.type="sessionStorage";}function Dk(){try{var a=l.sessionStorage,b=Ne();a&&(a.setItem(b,"1"),a.removeItem(b));return a}catch(c){return null}}
	function Ck(){var a="Node"==He();a=Dk()||a&&firebase.INTERNAL.node&&firebase.INTERNAL.node.sessionStorage;if(!a)return !1;try{return a.setItem("__sak","1"),a.removeItem("__sak"),!0}catch(b){return !1}}k=Bk.prototype;k.get=function(a){var b=this;return D().then(function(){var c=b.a.getItem(a);return Te(c)})};k.set=function(a,b){var c=this;return D().then(function(){var d=Re(b);null===d?c.T(a):c.a.setItem(a,d);})};k.T=function(a){var b=this;return D().then(function(){b.a.removeItem(a);})};k.ba=function(){};
	k.ha=function(){};function Ek(){var a={};a.Browser=Fk;a.Node=Gk;a.ReactNative=Hk;a.Worker=Ik;this.a=a[He()];}var Jk,Fk={F:xk,$a:Bk},Gk={F:xk,$a:Bk},Hk={F:Zj,$a:Ak},Ik={F:xk,$a:Ak};/*

	 Copyright 2017 Google LLC

	 Licensed under the Apache License, Version 2.0 (the "License");
	 you may not use this file except in compliance with the License.
	 You may obtain a copy of the License at

	   http://www.apache.org/licenses/LICENSE-2.0

	 Unless required by applicable law or agreed to in writing, software
	 distributed under the License is distributed on an "AS IS" BASIS,
	 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 See the License for the specific language governing permissions and
	 limitations under the License.
	*/
	var Kk={od:"local",NONE:"none",qd:"session"};function Lk(a){var b=new t("invalid-persistence-type"),c=new t("unsupported-persistence-type");a:{for(d in Kk)if(Kk[d]==a){var d=!0;break a}d=!1;}if(!d||"string"!==typeof a)throw b;switch(He()){case "ReactNative":if("session"===a)throw c;break;case "Node":if("none"!==a)throw c;break;case "Worker":if("session"===a||!jk()&&"none"!==a)throw c;break;default:if(!Me()&&"none"!==a)throw c;}}
	function Mk(){var a=!Ue(I())&&Fe()?!0:!1,b=Qe(),c=Me();this.m=a;this.h=b;this.l=c;this.a={};Jk||(Jk=new Ek);a=Jk;try{this.g=!ne()&&$e()||!l.indexedDB?new a.a.F:new vk(Ge()?new wk:new a.a.F);}catch(d){this.g=new wk,this.h=!0;}try{this.i=new a.a.$a;}catch(d){this.i=new wk;}this.u=new wk;this.f=q(this.Vb,this);this.b={};}var Nk;function Ok(){Nk||(Nk=new Mk);return Nk}function Pk(a,b){switch(b){case "session":return a.i;case "none":return a.u;default:return a.g}}
	function Qk(a,b){return "firebase:"+a.name+(b?":"+b:"")}function Rk(a,b,c){var d=Qk(b,c),e=Pk(a,b.F);return a.get(b,c).then(function(f){var g=null;try{g=Te(l.localStorage.getItem(d));}catch(h){}if(g&&!f)return l.localStorage.removeItem(d),a.set(b,g,c);g&&f&&"localStorage"!=e.type&&l.localStorage.removeItem(d);})}k=Mk.prototype;k.get=function(a,b){return Pk(this,a.F).get(Qk(a,b))};function Sk(a,b,c){c=Qk(b,c);"local"==b.F&&(a.b[c]=null);return Pk(a,b.F).T(c)}
	k.set=function(a,b,c){var d=Qk(a,c),e=this,f=Pk(this,a.F);return f.set(d,b).then(function(){return f.get(d)}).then(function(g){"local"==a.F&&(e.b[d]=g);})};k.addListener=function(a,b,c){a=Qk(a,b);this.l&&(this.b[a]=l.localStorage.getItem(a));kb(this.a)&&(Pk(this,"local").ba(this.f),this.h||(ne()||!$e())&&l.indexedDB||!this.l||Tk(this));this.a[a]||(this.a[a]=[]);this.a[a].push(c);};
	k.removeListener=function(a,b,c){a=Qk(a,b);this.a[a]&&(Va(this.a[a],function(d){return d==c}),0==this.a[a].length&&delete this.a[a]);kb(this.a)&&(Pk(this,"local").ha(this.f),Uk(this));};function Tk(a){Uk(a);a.c=setInterval(function(){for(var b in a.a){var c=l.localStorage.getItem(b),d=a.b[b];c!=d&&(a.b[b]=c,c=new Yc({type:"storage",key:b,target:window,oldValue:d,newValue:c,a:!0}),a.Vb(c));}},1E3);}function Uk(a){a.c&&(clearInterval(a.c),a.c=null);}
	k.Vb=function(a){if(a&&a.f){var b=a.a.key;if(null==b)for(var c in this.a){var d=this.b[c];"undefined"===typeof d&&(d=null);var e=l.localStorage.getItem(c);e!==d&&(this.b[c]=e,this.ib(c));}else if(0==b.indexOf("firebase:")&&this.a[b]){"undefined"!==typeof a.a.a?Pk(this,"local").ha(this.f):Uk(this);if(this.m)if(c=l.localStorage.getItem(b),d=a.a.newValue,d!==c)null!==d?l.localStorage.setItem(b,d):l.localStorage.removeItem(b);else if(this.b[b]===d&&"undefined"===typeof a.a.a)return;var f=this;c=function(){if("undefined"!==
	typeof a.a.a||f.b[b]!==l.localStorage.getItem(b))f.b[b]=l.localStorage.getItem(b),f.ib(b);};Tb&&dc&&10==dc&&l.localStorage.getItem(b)!==a.a.newValue&&a.a.newValue!==a.a.oldValue?setTimeout(c,10):c();}}else w(a,q(this.ib,this));};k.ib=function(a){this.a[a]&&w(this.a[a],function(b){b();});};function Vk(a){this.a=a;this.b=Ok();}var Wk={name:"authEvent",F:"local"};function Xk(a){return a.b.get(Wk,a.a).then(function(b){return ph(b)})}function Yk(){this.a=Ok();}function Zk(){this.b=-1;}function $k(a,b){this.b=al;this.f=l.Uint8Array?new Uint8Array(this.b):Array(this.b);this.g=this.c=0;this.a=[];this.i=a;this.h=b;this.l=l.Int32Array?new Int32Array(64):Array(64);void 0===bl&&(l.Int32Array?bl=new Int32Array(cl):bl=cl);this.reset();}var bl;r($k,Zk);for(var al=64,dl=al-1,el=[],fl=0;fl<dl;fl++)el[fl]=0;var gl=Wa(128,el);$k.prototype.reset=function(){this.g=this.c=0;this.a=l.Int32Array?new Int32Array(this.h):Xa(this.h);};
	function hl(a){for(var b=a.f,c=a.l,d=0,e=0;e<b.length;)c[d++]=b[e]<<24|b[e+1]<<16|b[e+2]<<8|b[e+3],e=4*d;for(b=16;64>b;b++){e=c[b-15]|0;d=c[b-2]|0;var f=(c[b-16]|0)+((e>>>7|e<<25)^(e>>>18|e<<14)^e>>>3)|0,g=(c[b-7]|0)+((d>>>17|d<<15)^(d>>>19|d<<13)^d>>>10)|0;c[b]=f+g|0;}d=a.a[0]|0;e=a.a[1]|0;var h=a.a[2]|0,m=a.a[3]|0,p=a.a[4]|0,v=a.a[5]|0,C=a.a[6]|0;f=a.a[7]|0;for(b=0;64>b;b++){var A=((d>>>2|d<<30)^(d>>>13|d<<19)^(d>>>22|d<<10))+(d&e^d&h^e&h)|0;g=p&v^~p&C;f=f+((p>>>6|p<<26)^(p>>>11|p<<21)^(p>>>25|p<<
	7))|0;g=g+(bl[b]|0)|0;g=f+(g+(c[b]|0)|0)|0;f=C;C=v;v=p;p=m+g|0;m=h;h=e;e=d;d=g+A|0;}a.a[0]=a.a[0]+d|0;a.a[1]=a.a[1]+e|0;a.a[2]=a.a[2]+h|0;a.a[3]=a.a[3]+m|0;a.a[4]=a.a[4]+p|0;a.a[5]=a.a[5]+v|0;a.a[6]=a.a[6]+C|0;a.a[7]=a.a[7]+f|0;}
	function il(a,b,c){void 0===c&&(c=b.length);var d=0,e=a.c;if("string"===typeof b)for(;d<c;)a.f[e++]=b.charCodeAt(d++),e==a.b&&(hl(a),e=0);else if(ma(b))for(;d<c;){var f=b[d++];if(!("number"==typeof f&&0<=f&&255>=f&&f==(f|0)))throw Error("message must be a byte array");a.f[e++]=f;e==a.b&&(hl(a),e=0);}else throw Error("message must be string or array");a.c=e;a.g+=c;}
	var cl=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,
	4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function jl(){$k.call(this,8,kl);}r(jl,$k);var kl=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function ll(a,b,c,d,e){this.u=a;this.i=b;this.l=c;this.m=d||null;this.s=e||null;this.h=b+":"+c;this.w=new Yk;this.g=new Vk(this.h);this.f=null;this.b=[];this.a=this.c=null;}function ml(a){return new t("invalid-cordova-configuration",a)}k=ll.prototype;
	k.ka=function(){return this.Ga?this.Ga:this.Ga=Ce().then(function(){if("function"!==typeof J("universalLinks.subscribe",l))throw ml("cordova-universal-links-plugin-fix is not installed");if("undefined"===typeof J("BuildInfo.packageName",l))throw ml("cordova-plugin-buildinfo is not installed");if("function"!==typeof J("cordova.plugins.browsertab.openUrl",l))throw ml("cordova-plugin-browsertab is not installed");if("function"!==typeof J("cordova.InAppBrowser.open",l))throw ml("cordova-plugin-inappbrowser is not installed");
	},function(){throw new t("cordova-not-ready");})};function nl(){for(var a=20,b=[];0<a;)b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),a--;return b.join("")}function ol(a){var b=new jl;il(b,a);a=[];var c=8*b.g;56>b.c?il(b,gl,56-b.c):il(b,gl,b.b-(b.c-56));for(var d=63;56<=d;d--)b.f[d]=c&255,c/=256;hl(b);for(d=c=0;d<b.i;d++)for(var e=24;0<=e;e-=8)a[c++]=b.a[d]>>e&255;return $f(a)}
	k.Lb=function(a,b){b(new t("operation-not-supported-in-this-environment"));return D()};k.Jb=function(){return E(new t("operation-not-supported-in-this-environment"))};k.Xb=function(){return !1};k.Ub=function(){return !0};k.Qb=function(){return !0};
	k.Kb=function(a,b,c,d){if(this.c)return E(new t("redirect-operation-pending"));var e=this,f=l.document,g=null,h=null,m=null,p=null;return this.c=D().then(function(){nh(b);return pl(e)}).then(function(){return ql(e,a,b,c,d)}).then(function(){return (new B(function(v,C){h=function(){var A=J("cordova.plugins.browsertab.close",l);v();"function"===typeof A&&A();e.a&&"function"===typeof e.a.close&&(e.a.close(),e.a=null);return !1};e.Ca(h);m=function(){g||(g=Bd(2E3).then(function(){C(new t("redirect-cancelled-by-user"));}));};
	p=function(){Xe()&&m();};f.addEventListener("resume",m,!1);I().toLowerCase().match(/android/)||f.addEventListener("visibilitychange",p,!1);})).o(function(v){return rl(e).then(function(){throw v;})})}).ma(function(){m&&f.removeEventListener("resume",m,!1);p&&f.removeEventListener("visibilitychange",p,!1);g&&g.cancel();h&&e.Qa(h);e.c=null;})};
	function ql(a,b,c,d,e){var f=nl(),g=new oh(b,d,null,f,new t("no-auth-event"),null,e),h=J("BuildInfo.packageName",l);if("string"!==typeof h)throw new t("invalid-cordova-configuration");var m=J("BuildInfo.displayName",l),p={};if(I().toLowerCase().match(/iphone|ipad|ipod/))p.ibi=h;else if(I().toLowerCase().match(/android/))p.apn=h;else return E(new t("operation-not-supported-in-this-environment"));m&&(p.appDisplayName=m);f=ol(f);p.sessionId=f;var v=Yj(a.u,a.i,a.l,b,c,null,d,a.m,p,a.s,e);return a.ka().then(function(){var C=
	a.h;return a.w.a.set(Wk,g.v(),C)}).then(function(){var C=J("cordova.plugins.browsertab.isAvailable",l);if("function"!==typeof C)throw new t("invalid-cordova-configuration");var A=null;C(function(Q){if(Q){A=J("cordova.plugins.browsertab.openUrl",l);if("function"!==typeof A)throw new t("invalid-cordova-configuration");A(v);}else {A=J("cordova.InAppBrowser.open",l);if("function"!==typeof A)throw new t("invalid-cordova-configuration");Q=I();a.a=A(v,Q.match(/(iPad|iPhone|iPod).*OS 7_\d/i)||Q.match(/(iPad|iPhone|iPod).*OS 8_\d/i)?
	"_blank":"_system","location=yes");}});})}function sl(a,b){for(var c=0;c<a.b.length;c++)try{a.b[c](b);}catch(d){}}function pl(a){a.f||(a.f=a.ka().then(function(){return new B(function(b){function c(d){b(d);a.Qa(c);return !1}a.Ca(c);tl(a);})}));return a.f}function rl(a){var b=null;return Xk(a.g).then(function(c){b=c;c=a.g;return Sk(c.b,Wk,c.a)}).then(function(){return b})}
	function tl(a){function b(g){d=!0;e&&e.cancel();rl(a).then(function(h){var m=c;if(h&&g&&g.url){var p=null;m=ug(g.url);-1!=m.indexOf("/__/auth/callback")&&(p=Zd(m),p=Te(Yd(p,"firebaseError")||null),p=(p="object"===typeof p?ya(p):null)?new oh(h.c,h.b,null,null,p,null,h.S()):new oh(h.c,h.b,m,h.f,null,null,h.S()));m=p||c;}sl(a,m);});}var c=new oh("unknown",null,null,null,new t("no-auth-event")),d=!1,e=Bd(500).then(function(){return rl(a).then(function(){d||sl(a,c);})}),f=l.handleOpenURL;l.handleOpenURL=function(g){0==
	g.toLowerCase().indexOf(J("BuildInfo.packageName",l).toLowerCase()+"://")&&b({url:g});if("function"===typeof f)try{f(g);}catch(h){console.error(h);}};rh||(rh=new qh);sh(b);}k.Ca=function(a){this.b.push(a);pl(this).o(function(b){"auth/invalid-cordova-configuration"===b.code&&(b=new oh("unknown",null,null,null,new t("no-auth-event")),a(b));});};k.Qa=function(a){Va(this.b,function(b){return b==a});};function ul(a){this.a=a;this.b=Ok();}var vl={name:"pendingRedirect",F:"session"};function wl(a){return a.b.set(vl,"pending",a.a)}function xl(a){return Sk(a.b,vl,a.a)}function yl(a){return a.b.get(vl,a.a).then(function(b){return "pending"==b})}function zl(a,b,c){this.i={};this.w=0;this.D=a;this.u=b;this.m=c;this.h=[];this.f=!1;this.l=q(this.s,this);this.b=new Al;this.B=new Bl;this.g=new ul(this.u+":"+this.m);this.c={};this.c.unknown=this.b;this.c.signInViaRedirect=this.b;this.c.linkViaRedirect=this.b;this.c.reauthViaRedirect=this.b;this.c.signInViaPopup=this.B;this.c.linkViaPopup=this.B;this.c.reauthViaPopup=this.B;this.a=Cl(this.D,this.u,this.m,Ba);}
	function Cl(a,b,c,d){var e=firebase.SDK_VERSION||null;return De()?new ll(a,b,c,e,d):new Sj(a,b,c,e,d)}zl.prototype.reset=function(){this.f=!1;this.a.Qa(this.l);this.a=Cl(this.D,this.u,this.m);this.i={};};function Dl(a){a.f||(a.f=!0,a.a.Ca(a.l));var b=a.a;return a.a.ka().o(function(c){a.a==b&&a.reset();throw c;})}function El(a){a.a.Ub()&&Dl(a).o(function(b){var c=new oh("unknown",null,null,null,new t("operation-not-supported-in-this-environment"));Fl(b)&&a.s(c);});a.a.Qb()||Gl(a.b);}
	function Hl(a,b){Ta(a.h,b)||a.h.push(b);a.f||yl(a.g).then(function(c){c?xl(a.g).then(function(){Dl(a).o(function(d){var e=new oh("unknown",null,null,null,new t("operation-not-supported-in-this-environment"));Fl(d)&&a.s(e);});}):El(a);}).o(function(){El(a);});}function Il(a,b){Va(a.h,function(c){return c==b});}
	zl.prototype.s=function(a){if(!a)throw new t("invalid-auth-event");6E5<=ua()-this.w&&(this.i={},this.w=0);if(a&&a.getUid()&&this.i.hasOwnProperty(a.getUid()))return !1;for(var b=!1,c=0;c<this.h.length;c++){var d=this.h[c];if(d.Cb(a.c,a.b)){if(b=this.c[a.c])b.h(a,d),a&&(a.f||a.b)&&(this.i[a.getUid()]=!0,this.w=ua());b=!0;break}}Gl(this.b);return b};var Jl=new We(2E3,1E4),Kl=new We(3E4,6E4);zl.prototype.pa=function(){return this.b.pa()};
	function Ll(a,b,c,d,e,f,g){return a.a.Jb(b,c,d,function(){a.f||(a.f=!0,a.a.Ca(a.l));},function(){a.reset();},e,f,g)}function Fl(a){return a&&"auth/cordova-not-ready"==a.code?!0:!1}
	function Ml(a,b,c,d,e){var f;return wl(a.g).then(function(){return a.a.Kb(b,c,d,e).o(function(g){if(Fl(g))throw new t("operation-not-supported-in-this-environment");f=g;return xl(a.g).then(function(){throw f;})}).then(function(){return a.a.Xb()?new B(function(){}):xl(a.g).then(function(){return a.pa()}).then(function(){}).o(function(){})})})}function Nl(a,b,c,d,e){return a.a.Lb(d,function(f){b.la(c,null,f,e);},Jl.get())}var Ol={};
	function Pl(a,b,c){var d=b+":"+c;Ol[d]||(Ol[d]=new zl(a,b,c));return Ol[d]}function Al(){this.b=null;this.f=[];this.c=[];this.a=null;this.i=this.g=!1;}Al.prototype.reset=function(){this.b=null;this.a&&(this.a.cancel(),this.a=null);};
	Al.prototype.h=function(a,b){if(a){this.reset();this.g=!0;var c=a.c,d=a.b,e=a.a&&"auth/web-storage-unsupported"==a.a.code,f=a.a&&"auth/operation-not-supported-in-this-environment"==a.a.code;this.i=!(!e&&!f);"unknown"!=c||e||f?a.a?(Ql(this,!0,null,a.a),D()):b.Da(c,d)?Rl(this,a,b):E(new t("invalid-auth-event")):(Ql(this,!1,null,null),D());}else E(new t("invalid-auth-event"));};function Gl(a){a.g||(a.g=!0,Ql(a,!1,null,null));}function Sl(a){a.g&&!a.i&&Ql(a,!1,null,null);}
	function Rl(a,b,c){c=c.Da(b.c,b.b);var d=b.g,e=b.f,f=b.i,g=b.S(),h=!!b.c.match(/Redirect$/);c(d,e,g,f).then(function(m){Ql(a,h,m,null);}).o(function(m){Ql(a,h,null,m);});}function Tl(a,b){a.b=function(){return E(b)};if(a.c.length)for(var c=0;c<a.c.length;c++)a.c[c](b);}function Ul(a,b){a.b=function(){return D(b)};if(a.f.length)for(var c=0;c<a.f.length;c++)a.f[c](b);}function Ql(a,b,c,d){b?d?Tl(a,d):Ul(a,c):Ul(a,{user:null});a.f=[];a.c=[];}
	Al.prototype.pa=function(){var a=this;return new B(function(b,c){a.b?a.b().then(b,c):(a.f.push(b),a.c.push(c),Vl(a));})};function Vl(a){var b=new t("timeout");a.a&&a.a.cancel();a.a=Bd(Kl.get()).then(function(){a.b||(a.g=!0,Ql(a,!0,null,b));});}function Bl(){}Bl.prototype.h=function(a,b){if(a){var c=a.c,d=a.b;a.a?(b.la(a.c,null,a.a,a.b),D()):b.Da(c,d)?Wl(a,b):E(new t("invalid-auth-event"));}else E(new t("invalid-auth-event"));};
	function Wl(a,b){var c=a.b,d=a.c;b.Da(d,c)(a.g,a.f,a.S(),a.i).then(function(e){b.la(d,e,null,c);}).o(function(e){b.la(d,null,e,c);});}function Xl(){this.Bb=!1;Object.defineProperty(this,"appVerificationDisabled",{get:function(){return this.Bb},set:function(a){this.Bb=a;},enumerable:!1});}function Yl(a,b){this.a=b;K(this,"verificationId",a);}Yl.prototype.confirm=function(a){a=lh(this.verificationId,a);return this.a(a)};function Zl(a,b,c,d){return (new hh(a)).cb(b,c).then(function(e){return new Yl(e,d)})}function $l(a){var b=fg(a);if(!(b&&b.exp&&b.auth_time&&b.iat))throw new t("internal-error","An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");L(this,{token:a,expirationTime:Ze(1E3*b.exp),authTime:Ze(1E3*b.auth_time),issuedAtTime:Ze(1E3*b.iat),signInProvider:b.firebase&&b.firebase.sign_in_provider?b.firebase.sign_in_provider:null,signInSecondFactor:b.firebase&&b.firebase.sign_in_second_factor?b.firebase.sign_in_second_factor:null,claims:b});}
	function am(a,b,c){var d=b&&b[bm];if(!d)throw new t("argument-error","Internal assert: Invalid MultiFactorResolver");this.a=a;this.f=lb(b);this.g=c;this.c=new vg(null,d);this.b=[];var e=this;w(b[cm]||[],function(f){(f=qf(f))&&e.b.push(f);});K(this,"auth",this.a);K(this,"session",this.c);K(this,"hints",this.b);}var cm="mfaInfo",bm="mfaPendingCredential";am.prototype.Pc=function(a){var b=this;return a.ob(this.a.b,this.c).then(function(c){var d=lb(b.f);delete d[cm];delete d[bm];z(d,c);return b.g(d)})};function dm(a,b,c,d){t.call(this,"multi-factor-auth-required",d,b);this.b=new am(a,b,c);K(this,"resolver",this.b);}r(dm,t);function em(a,b,c){if(a&&n(a.serverResponse)&&"auth/multi-factor-auth-required"===a.code)try{return new dm(b,a.serverResponse,c,a.message)}catch(d){}return null}function fm(){}fm.prototype.ob=function(a,b,c){return b.type==wg?gm(this,a,b,c):hm(this,a,b)};function gm(a,b,c,d){return c.Fa().then(function(e){e={idToken:e};"undefined"!==typeof d&&(e.displayName=d);z(e,{phoneVerificationInfo:dh(a.a)});return N(b,Aj,e)})}function hm(a,b,c){return c.Fa().then(function(d){d={mfaPendingCredential:d};z(d,{phoneVerificationInfo:dh(a.a)});return N(b,Bj,d)})}function im(a){K(this,"factorId",a.ea);this.a=a;}r(im,fm);
	function jm(a){im.call(this,a);if(this.a.ea!=hh.PROVIDER_ID)throw new t("argument-error","firebase.auth.PhoneMultiFactorAssertion requires a valid firebase.auth.PhoneAuthCredential");}r(jm,im);function km(a,b){F.call(this,a);for(var c in b)this[c]=b[c];}r(km,F);function lm(a,b){this.a=a;this.b=[];this.c=q(this.wc,this);jd(this.a,"userReloaded",this.c);var c=[];b&&b.multiFactor&&b.multiFactor.enrolledFactors&&w(b.multiFactor.enrolledFactors,function(d){var e=null,f={};if(d){d.uid&&(f[nf]=d.uid);d.displayName&&(f[of]=d.displayName);d.enrollmentTime&&(f[pf]=(new Date(d.enrollmentTime)).toISOString());d.phoneNumber&&(f[mf]=d.phoneNumber);try{e=new rf(f);}catch(g){}d=e;}else d=null;d&&c.push(d);});mm(this,c);}
	function nm(a){var b=[];w(a.mfaInfo||[],function(c){(c=qf(c))&&b.push(c);});return b}k=lm.prototype;k.wc=function(a){mm(this,nm(a.ed));};function mm(a,b){a.b=b;K(a,"enrolledFactors",b);}k.Ob=function(){return this.a.I().then(function(a){return new vg(a,null)})};k.dc=function(a,b){var c=this,d=this.a.a;return this.Ob().then(function(e){return a.ob(d,e,b)}).then(function(e){om(c.a,e);return c.a.reload()})};
	k.$c=function(a){var b=this,c="string"===typeof a?a:a.uid,d=this.a.a;return this.a.I().then(function(e){return N(d,Fj,{idToken:e,mfaEnrollmentId:c})}).then(function(e){var f=Oa(b.b,function(g){return g.uid!=c});mm(b,f);om(b.a,e);return b.a.reload().o(function(g){if("auth/user-token-expired"!=g.code)throw g;})})};k.v=function(){return {multiFactor:{enrolledFactors:Pa(this.b,function(a){return a.v()})}}};function pm(a,b,c){this.h=a;this.i=b;this.g=c;this.c=3E4;this.f=96E4;this.b=null;this.a=this.c;if(this.f<this.c)throw Error("Proactive refresh lower bound greater than upper bound!");}pm.prototype.start=function(){this.a=this.c;qm(this,!0);};function rm(a,b){if(b)return a.a=a.c,a.g();b=a.a;a.a*=2;a.a>a.f&&(a.a=a.f);return b}function qm(a,b){a.stop();a.b=Bd(rm(a,b)).then(function(){return Ye()}).then(function(){return a.h()}).then(function(){qm(a,!0);}).o(function(c){a.i(c)&&qm(a,!1);});}
	pm.prototype.stop=function(){this.b&&(this.b.cancel(),this.b=null);};function sm(a){this.c=a;this.b=this.a=null;}sm.prototype.v=function(){return {apiKey:this.c.c,refreshToken:this.a,accessToken:this.b&&this.b.toString(),expirationTime:tm(this)}};function tm(a){return a.b&&1E3*a.b.c||0}function um(a,b){var c=b.refreshToken;a.b=gg(b[Ag]||"");a.a=c;}function vm(a,b){a.b=b.b;a.a=b.a;}
	function wm(a,b){return Qi(a.c,b).then(function(c){a.b=gg(c.access_token);a.a=c.refresh_token;return {accessToken:a.b.toString(),refreshToken:a.a}}).o(function(c){"auth/user-token-expired"==c.code&&(a.a=null);throw c;})}sm.prototype.getToken=function(a){a=!!a;return this.b&&!this.a?E(new t("user-token-expired")):a||!this.b||ua()>tm(this)-3E4?this.a?wm(this,{grant_type:"refresh_token",refresh_token:this.a}):D(null):D({accessToken:this.b.toString(),refreshToken:this.a})};function xm(a,b){this.a=a||null;this.b=b||null;L(this,{lastSignInTime:Ze(b||null),creationTime:Ze(a||null)});}function ym(a){return new xm(a.a,a.b)}xm.prototype.v=function(){return {lastLoginAt:this.b,createdAt:this.a}};function zm(a,b,c,d,e,f){L(this,{uid:a,displayName:d||null,photoURL:e||null,email:c||null,phoneNumber:f||null,providerId:b});}
	function P(a,b,c){this.N=[];this.l=a.apiKey;this.m=a.appName;this.s=a.authDomain||null;a=firebase.SDK_VERSION?Le(firebase.SDK_VERSION):null;this.a=new Ei(this.l,Aa(Ba),a);this.b=new sm(this.a);Am(this,b[Ag]);um(this.b,b);K(this,"refreshToken",this.b.a);Bm(this,c||{});G.call(this);this.P=!1;this.s&&Oe()&&(this.i=Pl(this.s,this.l,this.m));this.R=[];this.h=null;this.B=Cm(this);this.Z=q(this.Ma,this);var d=this;this.oa=null;this.za=function(e){d.va(e.g);};this.aa=null;this.W=[];this.ya=function(e){Dm(d,
	e.c);};this.$=null;this.O=new lm(this,c);K(this,"multiFactor",this.O);}r(P,G);P.prototype.va=function(a){this.oa=a;Ki(this.a,a);};P.prototype.ja=function(){return this.oa};function Em(a,b){a.aa&&td(a.aa,"languageCodeChanged",a.za);(a.aa=b)&&jd(b,"languageCodeChanged",a.za);}function Dm(a,b){a.W=b;Li(a.a,firebase.SDK_VERSION?Le(firebase.SDK_VERSION,a.W):null);}P.prototype.Ea=function(){return Xa(this.W)};function Fm(a,b){a.$&&td(a.$,"frameworkChanged",a.ya);(a.$=b)&&jd(b,"frameworkChanged",a.ya);}
	P.prototype.Ma=function(){this.B.b&&(this.B.stop(),this.B.start());};function Gm(a){try{return firebase.app(a.m).auth()}catch(b){throw new t("internal-error","No firebase.auth.Auth instance is available for the Firebase App '"+a.m+"'!");}}function Cm(a){return new pm(function(){return a.I(!0)},function(b){return b&&"auth/network-request-failed"==b.code?!0:!1},function(){var b=tm(a.b)-ua()-3E5;return 0<b?b:0})}
	function Hm(a){a.D||a.B.b||(a.B.start(),td(a,"tokenChanged",a.Z),jd(a,"tokenChanged",a.Z));}function Im(a){td(a,"tokenChanged",a.Z);a.B.stop();}function Am(a,b){a.xa=b;K(a,"_lat",b);}function Jm(a,b){Va(a.R,function(c){return c==b});}function Km(a){for(var b=[],c=0;c<a.R.length;c++)b.push(a.R[c](a));return Fc(b).then(function(){return a})}function Lm(a){a.i&&!a.P&&(a.P=!0,Hl(a.i,a));}
	function Bm(a,b){L(a,{uid:b.uid,displayName:b.displayName||null,photoURL:b.photoURL||null,email:b.email||null,emailVerified:b.emailVerified||!1,phoneNumber:b.phoneNumber||null,isAnonymous:b.isAnonymous||!1,tenantId:b.tenantId||null,metadata:new xm(b.createdAt,b.lastLoginAt),providerData:[]});a.a.b=a.tenantId;}K(P.prototype,"providerId","firebase");function Mm(){}function Nm(a){return D().then(function(){if(a.D)throw new t("app-deleted");})}
	function Om(a){return Pa(a.providerData,function(b){return b.providerId})}function Pm(a,b){b&&(Qm(a,b.providerId),a.providerData.push(b));}function Qm(a,b){Va(a.providerData,function(c){return c.providerId==b});}function Rm(a,b,c){("uid"!=b||c)&&a.hasOwnProperty(b)&&K(a,b,c);}
	function Sm(a,b){a!=b&&(L(a,{uid:b.uid,displayName:b.displayName,photoURL:b.photoURL,email:b.email,emailVerified:b.emailVerified,phoneNumber:b.phoneNumber,isAnonymous:b.isAnonymous,tenantId:b.tenantId,providerData:[]}),b.metadata?K(a,"metadata",ym(b.metadata)):K(a,"metadata",new xm),w(b.providerData,function(c){Pm(a,c);}),vm(a.b,b.b),K(a,"refreshToken",a.b.a),mm(a.O,b.O.b));}k=P.prototype;k.reload=function(){var a=this;return R(this,Nm(this).then(function(){return Tm(a).then(function(){return Km(a)}).then(Mm)}))};
	function Tm(a){return a.I().then(function(b){var c=a.isAnonymous;return Um(a,b).then(function(){c||Rm(a,"isAnonymous",!1);return b})})}k.mc=function(a){return this.I(a).then(function(b){return new $l(b)})};k.I=function(a){var b=this;return R(this,Nm(this).then(function(){return b.b.getToken(a)}).then(function(c){if(!c)throw new t("internal-error");c.accessToken!=b.xa&&(Am(b,c.accessToken),b.dispatchEvent(new km("tokenChanged")));Rm(b,"refreshToken",c.refreshToken);return c.accessToken}))};
	function om(a,b){b[Ag]&&a.xa!=b[Ag]&&(um(a.b,b),a.dispatchEvent(new km("tokenChanged")),Am(a,b[Ag]),Rm(a,"refreshToken",a.b.a));}function Um(a,b){return N(a.a,Cj,{idToken:b}).then(q(a.Ic,a))}
	k.Ic=function(a){a=a.users;if(!a||!a.length)throw new t("internal-error");a=a[0];Bm(this,{uid:a.localId,displayName:a.displayName,photoURL:a.photoUrl,email:a.email,emailVerified:!!a.emailVerified,phoneNumber:a.phoneNumber,lastLoginAt:a.lastLoginAt,createdAt:a.createdAt,tenantId:a.tenantId});for(var b=Vm(a),c=0;c<b.length;c++)Pm(this,b[c]);Rm(this,"isAnonymous",!(this.email&&a.passwordHash)&&!(this.providerData&&this.providerData.length));this.dispatchEvent(new km("userReloaded",{ed:a}));};
	function Vm(a){return (a=a.providerUserInfo)&&a.length?Pa(a,function(b){return new zm(b.rawId,b.providerId,b.email,b.displayName,b.photoUrl,b.phoneNumber)}):[]}k.Jc=function(a){df("firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateWithCredential instead.");return this.pb(a)};
	k.pb=function(a){var b=this,c=null;return R(this,a.c(this.a,this.uid).then(function(d){om(b,d);c=Wm(b,d,"reauthenticate");b.h=null;return b.reload()}).then(function(){return c}),!0)};function Xm(a,b){return Tm(a).then(function(){if(Ta(Om(a),b))return Km(a).then(function(){throw new t("provider-already-linked");})})}k.Ac=function(a){df("firebase.User.prototype.linkAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.linkWithCredential instead.");return this.mb(a)};
	k.mb=function(a){var b=this,c=null;return R(this,Xm(this,a.providerId).then(function(){return b.I()}).then(function(d){return a.b(b.a,d)}).then(function(d){c=Wm(b,d,"link");return Ym(b,d)}).then(function(){return c}))};k.Bc=function(a,b){var c=this;return R(this,Xm(this,"phone").then(function(){return Zl(Gm(c),a,b,q(c.mb,c))}))};k.Kc=function(a,b){var c=this;return R(this,D().then(function(){return Zl(Gm(c),a,b,q(c.pb,c))}),!0)};
	function Wm(a,b,c){var d=mh(b);b=lg(b);return gf({user:a,credential:d,additionalUserInfo:b,operationType:c})}function Ym(a,b){om(a,b);return a.reload().then(function(){return a})}k.xb=function(a){var b=this;return R(this,this.I().then(function(c){return b.a.xb(c,a)}).then(function(c){om(b,c);return b.reload()}))};k.cd=function(a){var b=this;return R(this,this.I().then(function(c){return a.b(b.a,c)}).then(function(c){om(b,c);return b.reload()}))};
	k.yb=function(a){var b=this;return R(this,this.I().then(function(c){return b.a.yb(c,a)}).then(function(c){om(b,c);return b.reload()}))};
	k.zb=function(a){if(void 0===a.displayName&&void 0===a.photoURL)return Nm(this);var b=this;return R(this,this.I().then(function(c){return b.a.zb(c,{displayName:a.displayName,photoUrl:a.photoURL})}).then(function(c){om(b,c);Rm(b,"displayName",c.displayName||null);Rm(b,"photoURL",c.photoUrl||null);w(b.providerData,function(d){"password"===d.providerId&&(K(d,"displayName",b.displayName),K(d,"photoURL",b.photoURL));});return Km(b)}).then(Mm))};
	k.ad=function(a){var b=this;return R(this,Tm(this).then(function(c){return Ta(Om(b),a)?lj(b.a,c,[a]).then(function(d){var e={};w(d.providerUserInfo||[],function(f){e[f.providerId]=!0;});w(Om(b),function(f){e[f]||Qm(b,f);});e[hh.PROVIDER_ID]||K(b,"phoneNumber",null);return Km(b)}):Km(b).then(function(){throw new t("no-such-provider");})}))};
	k.delete=function(){var a=this;return R(this,this.I().then(function(b){return N(a.a,zj,{idToken:b})}).then(function(){a.dispatchEvent(new km("userDeleted"));})).then(function(){for(var b=0;b<a.N.length;b++)a.N[b].cancel("app-deleted");Em(a,null);Fm(a,null);a.N=[];a.D=!0;Im(a);K(a,"refreshToken",null);a.i&&Il(a.i,a);})};
	k.Cb=function(a,b){return "linkViaPopup"==a&&(this.g||null)==b&&this.f||"reauthViaPopup"==a&&(this.g||null)==b&&this.f||"linkViaRedirect"==a&&(this.fa||null)==b||"reauthViaRedirect"==a&&(this.fa||null)==b?!0:!1};k.la=function(a,b,c,d){"linkViaPopup"!=a&&"reauthViaPopup"!=a||d!=(this.g||null)||(c&&this.w?this.w(c):b&&!c&&this.f&&this.f(b),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.w);};
	k.Da=function(a,b){return "linkViaPopup"==a&&b==(this.g||null)?q(this.Hb,this):"reauthViaPopup"==a&&b==(this.g||null)?q(this.Ib,this):"linkViaRedirect"==a&&(this.fa||null)==b?q(this.Hb,this):"reauthViaRedirect"==a&&(this.fa||null)==b?q(this.Ib,this):null};k.Cc=function(a){var b=this;return Zm(this,"linkViaPopup",a,function(){return Xm(b,a.providerId).then(function(){return Km(b)})},!1)};k.Lc=function(a){return Zm(this,"reauthViaPopup",a,function(){return D()},!0)};
	function Zm(a,b,c,d,e){if(!Oe())return E(new t("operation-not-supported-in-this-environment"));if(a.h&&!e)return E(a.h);var f=kg(c.providerId),g=Ne(a.uid+":::"),h=null;(!Qe()||Fe())&&a.s&&c.isOAuthProvider&&(h=Yj(a.s,a.l,a.m,b,c,null,g,firebase.SDK_VERSION||null,null,null,a.tenantId));var m=we(h,f&&f.ta,f&&f.sa);d=d().then(function(){$m(a);if(!e)return a.I().then(function(){})}).then(function(){return Ll(a.i,m,b,c,g,!!h,a.tenantId)}).then(function(){return new B(function(p,v){a.la(b,null,new t("cancelled-popup-request"),
	a.g||null);a.f=p;a.w=v;a.g=g;a.c=Nl(a.i,a,b,m,g);})}).then(function(p){m&&ve(m);return p?gf(p):null}).o(function(p){m&&ve(m);throw p;});return R(a,d,e)}k.Dc=function(a){var b=this;return an(this,"linkViaRedirect",a,function(){return Xm(b,a.providerId)},!1)};k.Mc=function(a){return an(this,"reauthViaRedirect",a,function(){return D()},!0)};
	function an(a,b,c,d,e){if(!Oe())return E(new t("operation-not-supported-in-this-environment"));if(a.h&&!e)return E(a.h);var f=null,g=Ne(a.uid+":::");d=d().then(function(){$m(a);if(!e)return a.I().then(function(){})}).then(function(){a.fa=g;return Km(a)}).then(function(h){a.ga&&(h=a.ga,h=h.b.set(bn,a.v(),h.a));return h}).then(function(){return Ml(a.i,b,c,g,a.tenantId)}).o(function(h){f=h;if(a.ga)return cn(a.ga);throw f;}).then(function(){if(f)throw f;});return R(a,d,e)}
	function $m(a){if(!a.i||!a.P){if(a.i&&!a.P)throw new t("internal-error");throw new t("auth-domain-config-required");}}k.Hb=function(a,b,c,d){var e=this;this.c&&(this.c.cancel(),this.c=null);var f=null;c=this.I().then(function(g){return Eg(e.a,{requestUri:a,postBody:d,sessionId:b,idToken:g})}).then(function(g){f=Wm(e,g,"link");return Ym(e,g)}).then(function(){return f});return R(this,c)};
	k.Ib=function(a,b,c,d){var e=this;this.c&&(this.c.cancel(),this.c=null);var f=null,g=D().then(function(){return zg(Fg(e.a,{requestUri:a,sessionId:b,postBody:d,tenantId:c}),e.uid)}).then(function(h){f=Wm(e,h,"reauthenticate");om(e,h);e.h=null;return e.reload()}).then(function(){return f});return R(this,g,!0)};
	k.qb=function(a){var b=this,c=null;return R(this,this.I().then(function(d){c=d;return "undefined"===typeof a||kb(a)?{}:Zf(new Pf(a))}).then(function(d){return b.a.qb(c,d)}).then(function(d){if(b.email!=d)return b.reload()}).then(function(){}))};k.Ab=function(a,b){var c=this,d=null;return R(this,this.I().then(function(e){d=e;return "undefined"===typeof b||kb(b)?{}:Zf(new Pf(b))}).then(function(e){return c.a.Ab(d,a,e)}).then(function(e){if(c.email!=e)return c.reload()}).then(function(){}))};
	function R(a,b,c){var d=dn(a,b,c);a.N.push(d);d.ma(function(){Ua(a.N,d);});return d.o(function(e){var f=null;e&&"auth/multi-factor-auth-required"===e.code&&(f=em(e.v(),Gm(a),q(a.hc,a)));throw f||e;})}k.hc=function(a){var b=null,c=this;a=zg(D(a),c.uid).then(function(d){b=Wm(c,d,"reauthenticate");om(c,d);c.h=null;return c.reload()}).then(function(){return b});return R(this,a,!0)};
	function dn(a,b,c){return a.h&&!c?(b.cancel(),E(a.h)):b.o(function(d){!d||"auth/user-disabled"!=d.code&&"auth/user-token-expired"!=d.code||(a.h||a.dispatchEvent(new km("userInvalidated")),a.h=d);throw d;})}k.toJSON=function(){return this.v()};
	k.v=function(){var a={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,phoneNumber:this.phoneNumber,isAnonymous:this.isAnonymous,tenantId:this.tenantId,providerData:[],apiKey:this.l,appName:this.m,authDomain:this.s,stsTokenManager:this.b.v(),redirectEventId:this.fa||null};this.metadata&&z(a,this.metadata.v());w(this.providerData,function(b){a.providerData.push(hf(b));});z(a,this.O.v());return a};
	function en(a){if(!a.apiKey)return null;var b={apiKey:a.apiKey,authDomain:a.authDomain,appName:a.appName},c={};if(a.stsTokenManager&&a.stsTokenManager.accessToken)c[Ag]=a.stsTokenManager.accessToken,c.refreshToken=a.stsTokenManager.refreshToken||null;else return null;var d=new P(b,c,a);a.providerData&&w(a.providerData,function(e){e&&Pm(d,gf(e));});a.redirectEventId&&(d.fa=a.redirectEventId);return d}
	function fn(a,b,c,d){var e=new P(a,b);c&&(e.ga=c);d&&Dm(e,d);return e.reload().then(function(){return e})}function gn(a,b,c,d){var e=a.b,f={};f[Ag]=e.b&&e.b.toString();f.refreshToken=e.a;b=new P(b||{apiKey:a.l,authDomain:a.s,appName:a.m},f);c&&(b.ga=c);d&&Dm(b,d);Sm(b,a);return b}function hn(a){this.a=a;this.b=Ok();}var bn={name:"redirectUser",F:"session"};function cn(a){return Sk(a.b,bn,a.a)}function jn(a,b){return a.b.get(bn,a.a).then(function(c){c&&b&&(c.authDomain=b);return en(c||{})})}function kn(a){this.a=a;this.b=Ok();this.c=null;this.f=ln(this);this.b.addListener(mn("local"),this.a,q(this.g,this));}kn.prototype.g=function(){var a=this,b=mn("local");nn(this,function(){return D().then(function(){return a.c&&"local"!=a.c.F?a.b.get(b,a.a):null}).then(function(c){if(c)return on(a,"local").then(function(){a.c=b;})})});};function on(a,b){var c=[],d;for(d in Kk)Kk[d]!==b&&c.push(Sk(a.b,mn(Kk[d]),a.a));c.push(Sk(a.b,pn,a.a));return Ec(c)}
	function ln(a){var b=mn("local"),c=mn("session"),d=mn("none");return Rk(a.b,b,a.a).then(function(){return a.b.get(c,a.a)}).then(function(e){return e?c:a.b.get(d,a.a).then(function(f){return f?d:a.b.get(b,a.a).then(function(g){return g?b:a.b.get(pn,a.a).then(function(h){return h?mn(h):b})})})}).then(function(e){a.c=e;return on(a,e.F)}).o(function(){a.c||(a.c=b);})}var pn={name:"persistence",F:"session"};function mn(a){return {name:"authUser",F:a}}
	kn.prototype.tb=function(a){var b=null,c=this;Lk(a);return nn(this,function(){return a!=c.c.F?c.b.get(c.c,c.a).then(function(d){b=d;return on(c,a)}).then(function(){c.c=mn(a);if(b)return c.b.set(c.c,b,c.a)}):D()})};function qn(a){return nn(a,function(){return a.b.set(pn,a.c.F,a.a)})}function rn(a,b){return nn(a,function(){return a.b.set(a.c,b.v(),a.a)})}function sn(a){return nn(a,function(){return Sk(a.b,a.c,a.a)})}
	function tn(a,b){return nn(a,function(){return a.b.get(a.c,a.a).then(function(c){c&&b&&(c.authDomain=b);return en(c||{})})})}function nn(a,b){a.f=a.f.then(b,b);return a.f}function un(a){this.l=!1;K(this,"settings",new Xl);K(this,"app",a);if(S(this).options&&S(this).options.apiKey)a=firebase.SDK_VERSION?Le(firebase.SDK_VERSION):null,this.b=new Ei(S(this).options&&S(this).options.apiKey,Aa(Ba),a);else throw new t("invalid-api-key");this.P=[];this.m=[];this.O=[];this.$b=firebase.INTERNAL.createSubscribe(q(this.xc,this));this.W=void 0;this.ac=firebase.INTERNAL.createSubscribe(q(this.yc,this));vn(this,null);this.i=new kn(S(this).options.apiKey+":"+S(this).name);this.B=
	new hn(S(this).options.apiKey+":"+S(this).name);this.Z=T(this,wn(this));this.h=T(this,xn(this));this.aa=!1;this.oa=q(this.Xc,this);this.Ma=q(this.ca,this);this.xa=q(this.jc,this);this.ya=q(this.uc,this);this.za=q(this.vc,this);this.a=null;yn(this);this.INTERNAL={};this.INTERNAL["delete"]=q(this.delete,this);this.INTERNAL.logFramework=q(this.Ec,this);this.s=0;G.call(this);zn(this);this.N=[];}r(un,G);function An(a){F.call(this,"languageCodeChanged");this.g=a;}r(An,F);
	function Bn(a){F.call(this,"frameworkChanged");this.c=a;}r(Bn,F);k=un.prototype;k.tb=function(a){a=this.i.tb(a);return T(this,a)};k.va=function(a){this.$===a||this.l||(this.$=a,Ki(this.b,this.$),this.dispatchEvent(new An(this.ja())));};k.ja=function(){return this.$};k.dd=function(){var a=l.navigator;this.va(a?a.languages&&a.languages[0]||a.language||a.userLanguage||null:null);};k.Ec=function(a){this.N.push(a);Li(this.b,firebase.SDK_VERSION?Le(firebase.SDK_VERSION,this.N):null);this.dispatchEvent(new Bn(this.N));};
	k.Ea=function(){return Xa(this.N)};k.ub=function(a){this.R===a||this.l||(this.R=a,this.b.b=this.R);};k.S=function(){return this.R};function zn(a){Object.defineProperty(a,"lc",{get:function(){return this.ja()},set:function(b){this.va(b);},enumerable:!1});a.$=null;Object.defineProperty(a,"ti",{get:function(){return this.S()},set:function(b){this.ub(b);},enumerable:!1});a.R=null;}
	k.toJSON=function(){return {apiKey:S(this).options.apiKey,authDomain:S(this).options.authDomain,appName:S(this).name,currentUser:U(this)&&U(this).v()}};function Cn(a){return a.Zb||E(new t("auth-domain-config-required"))}function yn(a){var b=S(a).options.authDomain,c=S(a).options.apiKey;b&&Oe()&&(a.Zb=a.Z.then(function(){if(!a.l){a.a=Pl(b,c,S(a).name);Hl(a.a,a);U(a)&&Lm(U(a));if(a.D){Lm(a.D);var d=a.D;d.va(a.ja());Em(d,a);d=a.D;Dm(d,a.N);Fm(d,a);a.D=null;}return a.a}}));}
	k.Cb=function(a,b){switch(a){case "unknown":case "signInViaRedirect":return !0;case "signInViaPopup":return this.g==b&&!!this.f;default:return !1}};k.la=function(a,b,c,d){"signInViaPopup"==a&&this.g==d&&(c&&this.w?this.w(c):b&&!c&&this.f&&this.f(b),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.w);};k.Da=function(a,b){return "signInViaRedirect"==a||"signInViaPopup"==a&&this.g==b&&this.f?q(this.gc,this):null};
	k.gc=function(a,b,c,d){var e=this,f={requestUri:a,postBody:d,sessionId:b,tenantId:c};this.c&&(this.c.cancel(),this.c=null);return e.Z.then(function(){return Dn(e,Cg(e.b,f))})};
	k.Vc=function(a){if(!Oe())return E(new t("operation-not-supported-in-this-environment"));var b=this,c=kg(a.providerId),d=Ne(),e=null;(!Qe()||Fe())&&S(this).options.authDomain&&a.isOAuthProvider&&(e=Yj(S(this).options.authDomain,S(this).options.apiKey,S(this).name,"signInViaPopup",a,null,d,firebase.SDK_VERSION||null,null,null,this.S()));var f=we(e,c&&c.ta,c&&c.sa);c=Cn(this).then(function(g){return Ll(g,f,"signInViaPopup",a,d,!!e,b.S())}).then(function(){return new B(function(g,h){b.la("signInViaPopup",
	null,new t("cancelled-popup-request"),b.g);b.f=g;b.w=h;b.g=d;b.c=Nl(b.a,b,"signInViaPopup",f,d);})}).then(function(g){f&&ve(f);return g?gf(g):null}).o(function(g){f&&ve(f);throw g;});return T(this,c)};k.Wc=function(a){if(!Oe())return E(new t("operation-not-supported-in-this-environment"));var b=this,c=Cn(this).then(function(){return qn(b.i)}).then(function(){return Ml(b.a,"signInViaRedirect",a,void 0,b.S())});return T(this,c)};
	function En(a){if(!Oe())return E(new t("operation-not-supported-in-this-environment"));var b=Cn(a).then(function(){return a.a.pa()}).then(function(c){return c?gf(c):null});return T(a,b)}k.pa=function(){var a=this;return En(this).then(function(b){a.a&&Sl(a.a.b);return b}).o(function(b){a.a&&Sl(a.a.b);throw b;})};
	k.bd=function(a){if(!a)return E(new t("null-user"));if(this.R!=a.tenantId)return E(new t("tenant-id-mismatch"));var b=this,c={};c.apiKey=S(this).options.apiKey;c.authDomain=S(this).options.authDomain;c.appName=S(this).name;var d=gn(a,c,b.B,b.Ea());return T(this,this.h.then(function(){if(S(b).options.apiKey!=a.l)return d.reload()}).then(function(){if(U(b)&&a.uid==U(b).uid)return Sm(U(b),a),b.ca(a);vn(b,d);Lm(d);return b.ca(d)}).then(function(){Fn(b);}))};
	function Gn(a,b){var c={};c.apiKey=S(a).options.apiKey;c.authDomain=S(a).options.authDomain;c.appName=S(a).name;return a.Z.then(function(){return fn(c,b,a.B,a.Ea())}).then(function(d){if(U(a)&&d.uid==U(a).uid)return Sm(U(a),d),a.ca(d);vn(a,d);Lm(d);return a.ca(d)}).then(function(){Fn(a);})}
	function vn(a,b){U(a)&&(Jm(U(a),a.Ma),td(U(a),"tokenChanged",a.xa),td(U(a),"userDeleted",a.ya),td(U(a),"userInvalidated",a.za),Im(U(a)));b&&(b.R.push(a.Ma),jd(b,"tokenChanged",a.xa),jd(b,"userDeleted",a.ya),jd(b,"userInvalidated",a.za),0<a.s&&Hm(b));K(a,"currentUser",b);b&&(b.va(a.ja()),Em(b,a),Dm(b,a.N),Fm(b,a));}k.wb=function(){var a=this,b=this.h.then(function(){a.a&&Sl(a.a.b);if(!U(a))return D();vn(a,null);return sn(a.i).then(function(){Fn(a);})});return T(this,b)};
	function Hn(a){var b=jn(a.B,S(a).options.authDomain).then(function(c){if(a.D=c)c.ga=a.B;return cn(a.B)});return T(a,b)}function wn(a){var b=S(a).options.authDomain,c=Hn(a).then(function(){return tn(a.i,b)}).then(function(d){return d?(d.ga=a.B,a.D&&(a.D.fa||null)==(d.fa||null)?d:d.reload().then(function(){return rn(a.i,d).then(function(){return d})}).o(function(e){return "auth/network-request-failed"==e.code?d:sn(a.i)})):null}).then(function(d){vn(a,d||null);});return T(a,c)}
	function xn(a){return a.Z.then(function(){return En(a)}).o(function(){}).then(function(){if(!a.l)return a.oa()}).o(function(){}).then(function(){if(!a.l){a.aa=!0;var b=a.i;b.b.addListener(mn("local"),b.a,a.oa);}})}
	k.Xc=function(){var a=this;return tn(this.i,S(this).options.authDomain).then(function(b){if(!a.l){var c;if(c=U(a)&&b){c=U(a).uid;var d=b.uid;c=void 0===c||null===c||""===c||void 0===d||null===d||""===d?!1:c==d;}if(c)return Sm(U(a),b),U(a).I();if(U(a)||b)vn(a,b),b&&(Lm(b),b.ga=a.B),a.a&&Hl(a.a,a),Fn(a);}})};k.ca=function(a){return rn(this.i,a)};k.jc=function(){Fn(this);this.ca(U(this));};k.uc=function(){this.wb();};k.vc=function(){this.wb();};
	function Dn(a,b){var c=null,d=null;return T(a,b.then(function(e){c=mh(e);d=lg(e);return Gn(a,e)},function(e){var f=null;e&&"auth/multi-factor-auth-required"===e.code&&(f=em(e.v(),a,q(a.ic,a)));throw f||e;}).then(function(){return gf({user:U(a),credential:c,additionalUserInfo:d,operationType:"signIn"})}))}k.ic=function(a){var b=this;return this.h.then(function(){return Dn(b,D(a))})};k.xc=function(a){var b=this;this.addAuthTokenListener(function(){a.next(U(b));});};
	k.yc=function(a){var b=this;In(this,function(){a.next(U(b));});};k.Gc=function(a,b,c){var d=this;this.aa&&Promise.resolve().then(function(){"function"===typeof a?a(U(d)):"function"===typeof a.next&&a.next(U(d));});return this.$b(a,b,c)};k.Fc=function(a,b,c){var d=this;this.aa&&Promise.resolve().then(function(){d.W=d.getUid();"function"===typeof a?a(U(d)):"function"===typeof a.next&&a.next(U(d));});return this.ac(a,b,c)};
	k.kc=function(a){var b=this,c=this.h.then(function(){return U(b)?U(b).I(a).then(function(d){return {accessToken:d}}):null});return T(this,c)};k.Rc=function(a){var b=this;return this.h.then(function(){return Dn(b,N(b.b,Ej,{token:a}))}).then(function(c){var d=c.user;Rm(d,"isAnonymous",!1);b.ca(d);return c})};k.Sc=function(a,b){var c=this;return this.h.then(function(){return Dn(c,N(c.b,Xg,{email:a,password:b}))})};
	k.cc=function(a,b){var c=this;return this.h.then(function(){return Dn(c,N(c.b,yj,{email:a,password:b}))})};k.Ya=function(a){var b=this;return this.h.then(function(){return Dn(b,a.ia(b.b))})};k.Qc=function(a){df("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInWithCredential instead.");return this.Ya(a)};
	k.vb=function(){var a=this;return this.h.then(function(){var b=U(a);if(b&&b.isAnonymous){var c=gf({providerId:null,isNewUser:!1});return gf({user:b,credential:null,additionalUserInfo:c,operationType:"signIn"})}return Dn(a,a.b.vb()).then(function(d){var e=d.user;Rm(e,"isAnonymous",!0);a.ca(e);return d})})};function S(a){return a.app}function U(a){return a.currentUser}k.getUid=function(){return U(this)&&U(this).uid||null};function Jn(a){return U(a)&&U(a)._lat||null}
	function Fn(a){if(a.aa){for(var b=0;b<a.m.length;b++)if(a.m[b])a.m[b](Jn(a));if(a.W!==a.getUid()&&a.O.length)for(a.W=a.getUid(),b=0;b<a.O.length;b++)if(a.O[b])a.O[b](Jn(a));}}k.bc=function(a){this.addAuthTokenListener(a);this.s++;0<this.s&&U(this)&&Hm(U(this));};k.Nc=function(a){var b=this;w(this.m,function(c){c==a&&b.s--;});0>this.s&&(this.s=0);0==this.s&&U(this)&&Im(U(this));this.removeAuthTokenListener(a);};
	k.addAuthTokenListener=function(a){var b=this;this.m.push(a);T(this,this.h.then(function(){b.l||Ta(b.m,a)&&a(Jn(b));}));};k.removeAuthTokenListener=function(a){Va(this.m,function(b){return b==a});};function In(a,b){a.O.push(b);T(a,a.h.then(function(){!a.l&&Ta(a.O,b)&&a.W!==a.getUid()&&(a.W=a.getUid(),b(Jn(a)));}));}
	k.delete=function(){this.l=!0;for(var a=0;a<this.P.length;a++)this.P[a].cancel("app-deleted");this.P=[];this.i&&(a=this.i,a.b.removeListener(mn("local"),a.a,this.oa));this.a&&(Il(this.a,this),Sl(this.a.b));return Promise.resolve()};function T(a,b){a.P.push(b);b.ma(function(){Ua(a.P,b);});return b}k.fc=function(a){return T(this,Vi(this.b,a))};k.zc=function(a){return !!bh(a)};
	k.sb=function(a,b){var c=this;return T(this,D().then(function(){var d=new Pf(b);if(!d.c)throw new t("argument-error",Xf+" must be true when sending sign in link to email");return Zf(d)}).then(function(d){return c.b.sb(a,d)}).then(function(){}))};k.fd=function(a){return this.Pa(a).then(function(b){return b.data.email})};k.jb=function(a,b){return T(this,this.b.jb(a,b).then(function(){}))};k.Pa=function(a){return T(this,this.b.Pa(a).then(function(b){return new sf(b)}))};
	k.fb=function(a){return T(this,this.b.fb(a).then(function(){}))};k.rb=function(a,b){var c=this;return T(this,D().then(function(){return "undefined"===typeof b||kb(b)?{}:Zf(new Pf(b))}).then(function(d){return c.b.rb(a,d)}).then(function(){}))};k.Uc=function(a,b){return T(this,Zl(this,a,b,q(this.Ya,this)))};
	k.Tc=function(a,b){var c=this;return T(this,D().then(function(){var d=b||oe(),e=ah(a,d);d=bh(d);if(!d)throw new t("argument-error","Invalid email link!");if(d.tenantId!==c.S())throw new t("tenant-id-mismatch");return c.Ya(e)}))};function Kn(){}Kn.prototype.render=function(){};Kn.prototype.reset=function(){};Kn.prototype.getResponse=function(){};Kn.prototype.execute=function(){};function Ln(){this.a={};this.b=1E12;}var Mn=null;Ln.prototype.render=function(a,b){this.a[this.b.toString()]=new Nn(a,b);return this.b++};Ln.prototype.reset=function(a){var b=On(this,a);a=Pn(a);b&&a&&(b.delete(),delete this.a[a]);};Ln.prototype.getResponse=function(a){return (a=On(this,a))?a.getResponse():null};Ln.prototype.execute=function(a){(a=On(this,a))&&a.execute();};function On(a,b){return (b=Pn(b))?a.a[b]||null:null}function Pn(a){return (a="undefined"===typeof a?1E12:a)?a.toString():null}
	function Nn(a,b){this.g=!1;this.c=b;this.a=this.b=null;this.h="invisible"!==this.c.size;this.f=fc(a);var c=this;this.i=function(){c.execute();};this.h?this.execute():jd(this.f,"click",this.i);}Nn.prototype.getResponse=function(){Qn(this);return this.b};
	Nn.prototype.execute=function(){Qn(this);var a=this;this.a||(this.a=setTimeout(function(){a.b=Je();var b=a.c.callback,c=a.c["expired-callback"];if(b)try{b(a.b);}catch(d){}a.a=setTimeout(function(){a.a=null;a.b=null;if(c)try{c();}catch(d){}a.h&&a.execute();},6E4);},500));};Nn.prototype.delete=function(){Qn(this);this.g=!0;clearTimeout(this.a);this.a=null;td(this.f,"click",this.i);};function Qn(a){if(a.g)throw Error("reCAPTCHA mock was already deleted!");}function Rn(){}K(Rn,"FACTOR_ID","phone");function Sn(){}Sn.prototype.g=function(){Mn||(Mn=new Ln);return D(Mn)};Sn.prototype.c=function(){};var Tn=null;function Un(){this.b=l.grecaptcha?Infinity:0;this.f=null;this.a="__rcb"+Math.floor(1E6*Math.random()).toString();}var Vn=new ob(pb,"https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"),Wn=new We(3E4,6E4);
	Un.prototype.g=function(a){var b=this;return new B(function(c,d){var e=setTimeout(function(){d(new t("network-request-failed"));},Wn.get());if(!l.grecaptcha||a!==b.f&&!b.b){l[b.a]=function(){if(l.grecaptcha){b.f=a;var g=l.grecaptcha.render;l.grecaptcha.render=function(h,m){h=g(h,m);b.b++;return h};clearTimeout(e);c(l.grecaptcha);}else clearTimeout(e),d(new t("internal-error"));delete l[b.a];};var f=xb(Vn,{onload:b.a,hl:a||""});D(xi(f)).o(function(){clearTimeout(e);d(new t("internal-error","Unable to load external reCAPTCHA dependencies!"));});}else clearTimeout(e),
	c(l.grecaptcha);})};Un.prototype.c=function(){this.b--;};var Xn=null;function Yn(a,b,c,d,e,f,g){K(this,"type","recaptcha");this.c=this.f=null;this.D=!1;this.u=b;this.g=null;g?(Tn||(Tn=new Sn),g=Tn):(Xn||(Xn=new Un),g=Xn);this.m=g;this.a=c||{theme:"light",type:"image"};this.h=[];if(this.a[Zn])throw new t("argument-error","sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");this.i="invisible"===this.a[$n];if(!l.document)throw new t("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");
	if(!fc(b)||!this.i&&fc(b).hasChildNodes())throw new t("argument-error","reCAPTCHA container is either not found or already contains inner elements!");this.s=new Ei(a,f||null,e||null);this.w=d||function(){return null};var h=this;this.l=[];var m=this.a[ao];this.a[ao]=function(v){bo(h,v);if("function"===typeof m)m(v);else if("string"===typeof m){var C=J(m,l);"function"===typeof C&&C(v);}};var p=this.a[co];this.a[co]=function(){bo(h,null);if("function"===typeof p)p();else if("string"===typeof p){var v=
	J(p,l);"function"===typeof v&&v();}};}var ao="callback",co="expired-callback",Zn="sitekey",$n="size";function bo(a,b){for(var c=0;c<a.l.length;c++)try{a.l[c](b);}catch(d){}}function eo(a,b){Va(a.l,function(c){return c==b});}function fo(a,b){a.h.push(b);b.ma(function(){Ua(a.h,b);});return b}k=Yn.prototype;
	k.Ga=function(){var a=this;return this.f?this.f:this.f=fo(this,D().then(function(){if(Pe()&&!Ge())return Be();throw new t("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.");}).then(function(){return a.m.g(a.w())}).then(function(b){a.g=b;return N(a.s,Dj,{})}).then(function(b){a.a[Zn]=b.recaptchaSiteKey;}).o(function(b){a.f=null;throw b;}))};
	k.render=function(){go(this);var a=this;return fo(this,this.Ga().then(function(){if(null===a.c){var b=a.u;if(!a.i){var c=fc(b);b=ic("DIV");c.appendChild(b);}a.c=a.g.render(b,a.a);}return a.c}))};k.verify=function(){go(this);var a=this;return fo(this,this.render().then(function(b){return new B(function(c){var d=a.g.getResponse(b);if(d)c(d);else {var e=function(f){f&&(eo(a,e),c(f));};a.l.push(e);a.i&&a.g.execute(a.c);}})}))};k.reset=function(){go(this);null!==this.c&&this.g.reset(this.c);};
	function go(a){if(a.D)throw new t("internal-error","RecaptchaVerifier instance has been destroyed.");}k.clear=function(){go(this);this.D=!0;this.m.c();for(var a=0;a<this.h.length;a++)this.h[a].cancel("RecaptchaVerifier instance has been destroyed.");if(!this.i){a=fc(this.u);for(var b;b=a.firstChild;)a.removeChild(b);}};
	function ho(a,b,c){var d=!1;try{this.b=c||firebase.app();}catch(g){throw new t("argument-error","No firebase.app.App instance is currently initialized.");}if(this.b.options&&this.b.options.apiKey)c=this.b.options.apiKey;else throw new t("invalid-api-key");var e=this,f=null;try{f=this.b.auth().Ea();}catch(g){}try{d=this.b.auth().settings.appVerificationDisabledForTesting;}catch(g){}f=firebase.SDK_VERSION?Le(firebase.SDK_VERSION,f):null;Yn.call(this,c,a,b,function(){try{var g=e.b.auth().ja();}catch(h){g=
	null;}return g},f,Aa(Ba),d);}r(ho,Yn);function io(a,b,c,d){a:{c=Array.prototype.slice.call(c);var e=0;for(var f=!1,g=0;g<b.length;g++)if(b[g].optional)f=!0;else {if(f)throw new t("internal-error","Argument validator encountered a required argument after an optional argument.");e++;}f=b.length;if(c.length<e||f<c.length)d="Expected "+(e==f?1==e?"1 argument":e+" arguments":e+"-"+f+" arguments")+" but got "+c.length+".";else {for(e=0;e<c.length;e++)if(f=b[e].optional&&void 0===c[e],!b[e].K(c[e])&&!f){b=b[e];if(0>e||e>=jo.length)throw new t("internal-error",
	"Argument validator received an unsupported number of arguments.");c=jo[e];d=(d?"":c+" argument ")+(b.name?'"'+b.name+'" ':"")+"must be "+b.J+".";break a}d=null;}}if(d)throw new t("argument-error",a+" failed: "+d);}var jo="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");function V(a,b){return {name:a||"",J:"a valid string",optional:!!b,K:function(c){return "string"===typeof c}}}
	function ko(a,b){return {name:a||"",J:"a boolean",optional:!!b,K:function(c){return "boolean"===typeof c}}}function W(a,b){return {name:a||"",J:"a valid object",optional:!!b,K:n}}function lo(a,b){return {name:a||"",J:"a function",optional:!!b,K:function(c){return "function"===typeof c}}}function mo(a,b){return {name:a||"",J:"null",optional:!!b,K:function(c){return null===c}}}function no(){return {name:"",J:"an HTML element",optional:!1,K:function(a){return !!(a&&a instanceof Element)}}}
	function oo(){return {name:"auth",J:"an instance of Firebase Auth",optional:!0,K:function(a){return !!(a&&a instanceof un)}}}function po(){return {name:"app",J:"an instance of Firebase App",optional:!0,K:function(a){return !!(a&&a instanceof firebase.app.App)}}}function qo(a){return {name:a?a+"Credential":"credential",J:a?"a valid "+a+" credential":"a valid credential",optional:!1,K:function(b){if(!b)return !1;var c=!a||b.providerId===a;return !(!b.ia||!c)}}}
	function ro(){return {name:"multiFactorAssertion",J:"a valid multiFactorAssertion",optional:!1,K:function(a){return a?!!a.ob:!1}}}function so(){return {name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(a){return !!(a&&a.providerId&&a.hasOwnProperty&&a.hasOwnProperty("isOAuthProvider"))}}}function to(a,b){return n(a)&&"string"===typeof a.type&&a.type===b&&"function"===typeof a.Fa}function uo(a){return n(a)&&"string"===typeof a.uid}
	function vo(){return {name:"applicationVerifier",J:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,K:function(a){return !(!a||"string"!==typeof a.type||"function"!==typeof a.verify)}}}function X(a,b,c,d){return {name:c||"",J:a.J+" or "+b.J,optional:!!d,K:function(e){return a.K(e)||b.K(e)}}}function Y(a,b){for(var c in b){var d=b[c].name;a[d]=wo(d,a[c],b[c].j);}}function xo(a,b){for(var c in b){var d=b[c].name;d!==c&&Object.defineProperty(a,d,{get:ta(function(e){return this[e]},c),set:ta(function(e,f,g,h){io(e,[g],[h],!0);this[f]=h;},d,c,b[c].gb),enumerable:!0});}}function Z(a,b,c,d){a[b]=wo(b,c,d);}
	function wo(a,b,c){function d(){var g=Array.prototype.slice.call(arguments);io(e,c,g);return b.apply(this,g)}if(!c)return b;var e=yo(a),f;for(f in b)d[f]=b[f];for(f in b.prototype)d.prototype[f]=b.prototype[f];return d}function yo(a){a=a.split(".");return a[a.length-1]}Y(un.prototype,{fb:{name:"applyActionCode",j:[V("code")]},Pa:{name:"checkActionCode",j:[V("code")]},jb:{name:"confirmPasswordReset",j:[V("code"),V("newPassword")]},cc:{name:"createUserWithEmailAndPassword",j:[V("email"),V("password")]},fc:{name:"fetchSignInMethodsForEmail",j:[V("email")]},pa:{name:"getRedirectResult",j:[]},zc:{name:"isSignInWithEmailLink",j:[V("emailLink")]},Fc:{name:"onAuthStateChanged",j:[X(W(),lo(),"nextOrObserver"),lo("opt_error",!0),lo("opt_completed",!0)]},Gc:{name:"onIdTokenChanged",
	j:[X(W(),lo(),"nextOrObserver"),lo("opt_error",!0),lo("opt_completed",!0)]},rb:{name:"sendPasswordResetEmail",j:[V("email"),X(W("opt_actionCodeSettings",!0),mo(null,!0),"opt_actionCodeSettings",!0)]},sb:{name:"sendSignInLinkToEmail",j:[V("email"),W("actionCodeSettings")]},tb:{name:"setPersistence",j:[V("persistence")]},Qc:{name:"signInAndRetrieveDataWithCredential",j:[qo()]},vb:{name:"signInAnonymously",j:[]},Ya:{name:"signInWithCredential",j:[qo()]},Rc:{name:"signInWithCustomToken",j:[V("token")]},
	Sc:{name:"signInWithEmailAndPassword",j:[V("email"),V("password")]},Tc:{name:"signInWithEmailLink",j:[V("email"),V("emailLink",!0)]},Uc:{name:"signInWithPhoneNumber",j:[V("phoneNumber"),vo()]},Vc:{name:"signInWithPopup",j:[so()]},Wc:{name:"signInWithRedirect",j:[so()]},bd:{name:"updateCurrentUser",j:[X(function(a){return {name:"user",J:"an instance of Firebase User",optional:!!a,K:function(b){return !!(b&&b instanceof P)}}}(),mo(),"user")]},wb:{name:"signOut",j:[]},toJSON:{name:"toJSON",j:[V(null,!0)]},
	dd:{name:"useDeviceLanguage",j:[]},fd:{name:"verifyPasswordResetCode",j:[V("code")]}});xo(un.prototype,{lc:{name:"languageCode",gb:X(V(),mo(),"languageCode")},ti:{name:"tenantId",gb:X(V(),mo(),"tenantId")}});un.Persistence=Kk;un.Persistence.LOCAL="local";un.Persistence.SESSION="session";un.Persistence.NONE="none";
	Y(P.prototype,{"delete":{name:"delete",j:[]},mc:{name:"getIdTokenResult",j:[ko("opt_forceRefresh",!0)]},I:{name:"getIdToken",j:[ko("opt_forceRefresh",!0)]},Ac:{name:"linkAndRetrieveDataWithCredential",j:[qo()]},mb:{name:"linkWithCredential",j:[qo()]},Bc:{name:"linkWithPhoneNumber",j:[V("phoneNumber"),vo()]},Cc:{name:"linkWithPopup",j:[so()]},Dc:{name:"linkWithRedirect",j:[so()]},Jc:{name:"reauthenticateAndRetrieveDataWithCredential",j:[qo()]},pb:{name:"reauthenticateWithCredential",j:[qo()]},Kc:{name:"reauthenticateWithPhoneNumber",
	j:[V("phoneNumber"),vo()]},Lc:{name:"reauthenticateWithPopup",j:[so()]},Mc:{name:"reauthenticateWithRedirect",j:[so()]},reload:{name:"reload",j:[]},qb:{name:"sendEmailVerification",j:[X(W("opt_actionCodeSettings",!0),mo(null,!0),"opt_actionCodeSettings",!0)]},toJSON:{name:"toJSON",j:[V(null,!0)]},ad:{name:"unlink",j:[V("provider")]},xb:{name:"updateEmail",j:[V("email")]},yb:{name:"updatePassword",j:[V("password")]},cd:{name:"updatePhoneNumber",j:[qo("phone")]},zb:{name:"updateProfile",j:[W("profile")]},
	Ab:{name:"verifyBeforeUpdateEmail",j:[V("email"),X(W("opt_actionCodeSettings",!0),mo(null,!0),"opt_actionCodeSettings",!0)]}});Y(Ln.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}});Y(Kn.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}});Y(B.prototype,{ma:{name:"finally"},o:{name:"catch"},then:{name:"then"}});
	xo(Xl.prototype,{appVerificationDisabled:{name:"appVerificationDisabledForTesting",gb:ko("appVerificationDisabledForTesting")}});Y(Yl.prototype,{confirm:{name:"confirm",j:[V("verificationCode")]}});Z(yg,"fromJSON",function(a){a="string"===typeof a?JSON.parse(a):a;for(var b,c=[Jg,$g,gh,Gg],d=0;d<c.length;d++)if(b=c[d](a))return b;return null},[X(V(),W(),"json")]);Z(Vg,"credential",function(a,b){return new Ug(a,b)},[V("email"),V("password")]);Y(Ug.prototype,{v:{name:"toJSON",j:[V(null,!0)]}});
	Y(Mg.prototype,{Aa:{name:"addScope",j:[V("scope")]},Ia:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(Mg,"credential",Ng,[X(V(),W(),"token")]);Z(Vg,"credentialWithLink",ah,[V("email"),V("emailLink")]);Y(Og.prototype,{Aa:{name:"addScope",j:[V("scope")]},Ia:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(Og,"credential",Pg,[X(V(),W(),"token")]);Y(Qg.prototype,{Aa:{name:"addScope",j:[V("scope")]},Ia:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});
	Z(Qg,"credential",Rg,[X(V(),X(W(),mo()),"idToken"),X(V(),mo(),"accessToken",!0)]);Y(Sg.prototype,{Ia:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(Sg,"credential",Tg,[X(V(),W(),"token"),V("secret",!0)]);Y(M.prototype,{Aa:{name:"addScope",j:[V("scope")]},credential:{name:"credential",j:[X(V(),X(W(),mo()),"optionsOrIdToken"),X(V(),mo(),"accessToken",!0)]},Ia:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Y(Hg.prototype,{v:{name:"toJSON",j:[V(null,!0)]}});
	Y(Bg.prototype,{v:{name:"toJSON",j:[V(null,!0)]}});Z(hh,"credential",lh,[V("verificationId"),V("verificationCode")]);
	Y(hh.prototype,{cb:{name:"verifyPhoneNumber",j:[X(V(),function(a,b){return {name:a||"phoneInfoOptions",J:"valid phone info options",optional:!!b,K:function(c){return c?c.session&&c.phoneNumber?to(c.session,wg)&&"string"===typeof c.phoneNumber:c.session&&c.multiFactorHint?to(c.session,xg)&&uo(c.multiFactorHint):c.session&&c.multiFactorUid?to(c.session,xg)&&"string"===typeof c.multiFactorUid:c.phoneNumber?"string"===typeof c.phoneNumber:!1:!1}}}(),"phoneInfoOptions"),vo()]}});
	Y(ch.prototype,{v:{name:"toJSON",j:[V(null,!0)]}});Y(t.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(uh.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(th.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(dm.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(am.prototype,{Pc:{name:"resolveSignIn",j:[ro()]}});
	Y(lm.prototype,{Ob:{name:"getSession",j:[]},dc:{name:"enroll",j:[ro(),V("displayName",!0)]},$c:{name:"unenroll",j:[X({name:"multiFactorInfo",J:"a valid multiFactorInfo",optional:!1,K:uo},V(),"multiFactorInfoIdentifier")]}});Y(ho.prototype,{clear:{name:"clear",j:[]},render:{name:"render",j:[]},verify:{name:"verify",j:[]}});Z(Gf,"parseLink",Of,[V("link")]);Z(Rn,"assertion",function(a){return new jm(a)},[qo("phone")]);
	(function(){if("undefined"!==typeof firebase&&firebase.INTERNAL&&firebase.INTERNAL.registerComponent){var a={ActionCodeInfo:{Operation:{EMAIL_SIGNIN:xf,PASSWORD_RESET:"PASSWORD_RESET",RECOVER_EMAIL:"RECOVER_EMAIL",REVERT_SECOND_FACTOR_ADDITION:zf,VERIFY_AND_CHANGE_EMAIL:yf,VERIFY_EMAIL:"VERIFY_EMAIL"}},Auth:un,AuthCredential:yg,Error:t};Z(a,"EmailAuthProvider",Vg,[]);Z(a,"FacebookAuthProvider",Mg,[]);Z(a,"GithubAuthProvider",Og,[]);Z(a,"GoogleAuthProvider",Qg,[]);Z(a,"TwitterAuthProvider",Sg,[]);
	Z(a,"OAuthProvider",M,[V("providerId")]);Z(a,"SAMLAuthProvider",Lg,[V("providerId")]);Z(a,"PhoneAuthProvider",hh,[oo()]);Z(a,"RecaptchaVerifier",ho,[X(V(),no(),"recaptchaContainer"),W("recaptchaParameters",!0),po()]);Z(a,"ActionCodeURL",Gf,[]);Z(a,"PhoneMultiFactorGenerator",Rn,[]);firebase.INTERNAL.registerComponent({name:"auth",instanceFactory:function(b){b=b.getProvider("app").getImmediate();return new un(b)},multipleInstances:!1,serviceProps:a,instantiationMode:"LAZY",type:"PUBLIC"});firebase.INTERNAL.registerComponent({name:"auth-internal",
	instanceFactory:function(b){b=b.getProvider("auth").getImmediate();return {getUid:q(b.getUid,b),getToken:q(b.kc,b),addAuthTokenListener:q(b.bc,b),removeAuthTokenListener:q(b.Nc,b)}},multipleInstances:!1,instantiationMode:"LAZY",type:"PRIVATE"});firebase.registerVersion("@firebase/auth","0.14.9");firebase.INTERNAL.extendNamespace({User:P});}else throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");})();}).apply(typeof global$1 !== 'undefined' ? global$1 : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {});

	// shim for using process in browser
	// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	var cachedSetTimeout = defaultSetTimout;
	var cachedClearTimeout = defaultClearTimeout;
	if (typeof global$1.setTimeout === 'function') {
	    cachedSetTimeout = setTimeout;
	}
	if (typeof global$1.clearTimeout === 'function') {
	    cachedClearTimeout = clearTimeout;
	}

	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	function nextTick(fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	}
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	var title = 'browser';
	var platform = 'browser';
	var browser$1 = true;
	var env = {};
	var argv = [];
	var version$1 = ''; // empty string to avoid regexp issues
	var versions = {};
	var release = {};
	var config = {};

	function noop$1() {}

	var on = noop$1;
	var addListener = noop$1;
	var once = noop$1;
	var off = noop$1;
	var removeListener = noop$1;
	var removeAllListeners = noop$1;
	var emit = noop$1;

	function binding(name) {
	    throw new Error('process.binding is not supported');
	}

	function cwd () { return '/' }
	function chdir (dir) {
	    throw new Error('process.chdir is not supported');
	}function umask() { return 0; }

	// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
	var performance$1 = global$1.performance || {};
	var performanceNow =
	  performance$1.now        ||
	  performance$1.mozNow     ||
	  performance$1.msNow      ||
	  performance$1.oNow       ||
	  performance$1.webkitNow  ||
	  function(){ return (new Date()).getTime() };

	// generate timestamp or delta
	// see http://nodejs.org/api/process.html#process_process_hrtime
	function hrtime(previousTimestamp){
	  var clocktime = performanceNow.call(performance$1)*1e-3;
	  var seconds = Math.floor(clocktime);
	  var nanoseconds = Math.floor((clocktime%1)*1e9);
	  if (previousTimestamp) {
	    seconds = seconds - previousTimestamp[0];
	    nanoseconds = nanoseconds - previousTimestamp[1];
	    if (nanoseconds<0) {
	      seconds--;
	      nanoseconds += 1e9;
	    }
	  }
	  return [seconds,nanoseconds]
	}

	var startTime = new Date();
	function uptime() {
	  var currentTime = new Date();
	  var dif = currentTime - startTime;
	  return dif / 1000;
	}

	var process = {
	  nextTick: nextTick,
	  title: title,
	  browser: browser$1,
	  env: env,
	  argv: argv,
	  version: version$1,
	  versions: versions,
	  on: on,
	  addListener: addListener,
	  once: once,
	  off: off,
	  removeListener: removeListener,
	  removeAllListeners: removeAllListeners,
	  emit: emit,
	  binding: binding,
	  cwd: cwd,
	  chdir: chdir,
	  umask: umask,
	  hrtime: hrtime,
	  platform: platform,
	  release: release,
	  config: config,
	  uptime: uptime
	};

	var index_cjs$4 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, '__esModule', { value: true });

	function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

	var firebase = _interopDefault(index_cjs$2);





	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Wraps a DOM Storage object and:
	 * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.
	 * - prefixes names with "firebase:" to avoid collisions with app data.
	 *
	 * We automatically (see storage.js) create two such wrappers, one for sessionStorage,
	 * and one for localStorage.
	 *
	 * @constructor
	 */
	var DOMStorageWrapper = /** @class */ (function () {
	    /**
	     * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)
	     */
	    function DOMStorageWrapper(domStorage_) {
	        this.domStorage_ = domStorage_;
	        // Use a prefix to avoid collisions with other stuff saved by the app.
	        this.prefix_ = 'firebase:';
	    }
	    /**
	     * @param {string} key The key to save the value under
	     * @param {?Object} value The value being stored, or null to remove the key.
	     */
	    DOMStorageWrapper.prototype.set = function (key, value) {
	        if (value == null) {
	            this.domStorage_.removeItem(this.prefixedName_(key));
	        }
	        else {
	            this.domStorage_.setItem(this.prefixedName_(key), index_cjs.stringify(value));
	        }
	    };
	    /**
	     * @param {string} key
	     * @return {*} The value that was stored under this key, or null
	     */
	    DOMStorageWrapper.prototype.get = function (key) {
	        var storedVal = this.domStorage_.getItem(this.prefixedName_(key));
	        if (storedVal == null) {
	            return null;
	        }
	        else {
	            return index_cjs.jsonEval(storedVal);
	        }
	    };
	    /**
	     * @param {string} key
	     */
	    DOMStorageWrapper.prototype.remove = function (key) {
	        this.domStorage_.removeItem(this.prefixedName_(key));
	    };
	    /**
	     * @param {string} name
	     * @return {string}
	     */
	    DOMStorageWrapper.prototype.prefixedName_ = function (name) {
	        return this.prefix_ + name;
	    };
	    DOMStorageWrapper.prototype.toString = function () {
	        return this.domStorage_.toString();
	    };
	    return DOMStorageWrapper;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An in-memory storage implementation that matches the API of DOMStorageWrapper
	 * (TODO: create interface for both to implement).
	 *
	 * @constructor
	 */
	var MemoryStorage = /** @class */ (function () {
	    function MemoryStorage() {
	        this.cache_ = {};
	        this.isInMemoryStorage = true;
	    }
	    MemoryStorage.prototype.set = function (key, value) {
	        if (value == null) {
	            delete this.cache_[key];
	        }
	        else {
	            this.cache_[key] = value;
	        }
	    };
	    MemoryStorage.prototype.get = function (key) {
	        if (index_cjs.contains(this.cache_, key)) {
	            return this.cache_[key];
	        }
	        return null;
	    };
	    MemoryStorage.prototype.remove = function (key) {
	        delete this.cache_[key];
	    };
	    return MemoryStorage;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.
	 * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change
	 * to reflect this type
	 *
	 * @param {string} domStorageName Name of the underlying storage object
	 *   (e.g. 'localStorage' or 'sessionStorage').
	 * @return {?} Turning off type information until a common interface is defined.
	 */
	var createStoragefor = function (domStorageName) {
	    try {
	        // NOTE: just accessing "localStorage" or "window['localStorage']" may throw a security exception,
	        // so it must be inside the try/catch.
	        if (typeof window !== 'undefined' &&
	            typeof window[domStorageName] !== 'undefined') {
	            // Need to test cache. Just because it's here doesn't mean it works
	            var domStorage = window[domStorageName];
	            domStorage.setItem('firebase:sentinel', 'cache');
	            domStorage.removeItem('firebase:sentinel');
	            return new DOMStorageWrapper(domStorage);
	        }
	    }
	    catch (e) { }
	    // Failed to create wrapper.  Just return in-memory storage.
	    // TODO: log?
	    return new MemoryStorage();
	};
	/** A storage object that lasts across sessions */
	var PersistentStorage = createStoragefor('localStorage');
	/** A storage object that only lasts one session */
	var SessionStorage = createStoragefor('sessionStorage');

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var logClient = new index_esm.Logger('@firebase/database');
	/**
	 * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).
	 * @type {function(): number} Generated ID.
	 */
	var LUIDGenerator = (function () {
	    var id = 1;
	    return function () {
	        return id++;
	    };
	})();
	/**
	 * Sha1 hash of the input string
	 * @param {!string} str The string to hash
	 * @return {!string} The resulting hash
	 */
	var sha1 = function (str) {
	    var utf8Bytes = index_cjs.stringToByteArray(str);
	    var sha1 = new index_cjs.Sha1();
	    sha1.update(utf8Bytes);
	    var sha1Bytes = sha1.digest();
	    return index_cjs.base64.encodeByteArray(sha1Bytes);
	};
	/**
	 * @param {...*} varArgs
	 * @return {string}
	 * @private
	 */
	var buildLogMessage_ = function () {
	    var varArgs = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        varArgs[_i] = arguments[_i];
	    }
	    var message = '';
	    for (var i = 0; i < varArgs.length; i++) {
	        var arg = varArgs[i];
	        if (Array.isArray(arg) ||
	            (arg &&
	                typeof arg === 'object' &&
	                // eslint-disable-next-line @typescript-eslint/no-explicit-any
	                typeof arg.length === 'number')) {
	            message += buildLogMessage_.apply(null, arg);
	        }
	        else if (typeof arg === 'object') {
	            message += index_cjs.stringify(arg);
	        }
	        else {
	            message += arg;
	        }
	        message += ' ';
	    }
	    return message;
	};
	/**
	 * Use this for all debug messages in Firebase.
	 * @type {?function(string)}
	 */
	var logger = null;
	/**
	 * Flag to check for log availability on first log message
	 * @type {boolean}
	 * @private
	 */
	var firstLog_ = true;
	/**
	 * The implementation of Firebase.enableLogging (defined here to break dependencies)
	 * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger
	 * @param {boolean=} persistent Whether or not to persist logging settings across refreshes
	 */
	var enableLogging = function (logger_, persistent) {
	    index_cjs.assert(!persistent || logger_ === true || logger_ === false, "Can't turn on custom loggers persistently.");
	    if (logger_ === true) {
	        logClient.logLevel = index_esm.LogLevel.VERBOSE;
	        logger = logClient.log.bind(logClient);
	        if (persistent) {
	            SessionStorage.set('logging_enabled', true);
	        }
	    }
	    else if (typeof logger_ === 'function') {
	        logger = logger_;
	    }
	    else {
	        logger = null;
	        SessionStorage.remove('logging_enabled');
	    }
	};
	/**
	 *
	 * @param {...(string|Arguments)} varArgs
	 */
	var log = function () {
	    var varArgs = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        varArgs[_i] = arguments[_i];
	    }
	    if (firstLog_ === true) {
	        firstLog_ = false;
	        if (logger === null && SessionStorage.get('logging_enabled') === true) {
	            enableLogging(true);
	        }
	    }
	    if (logger) {
	        var message = buildLogMessage_.apply(null, varArgs);
	        logger(message);
	    }
	};
	/**
	 * @param {!string} prefix
	 * @return {function(...[*])}
	 */
	var logWrapper = function (prefix) {
	    return function () {
	        var varArgs = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            varArgs[_i] = arguments[_i];
	        }
	        log.apply(void 0, tslib.__spread([prefix], varArgs));
	    };
	};
	/**
	 * @param {...string} varArgs
	 */
	var error = function () {
	    var varArgs = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        varArgs[_i] = arguments[_i];
	    }
	    var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, tslib.__spread(varArgs));
	    logClient.error(message);
	};
	/**
	 * @param {...string} varArgs
	 */
	var fatal = function () {
	    var varArgs = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        varArgs[_i] = arguments[_i];
	    }
	    var message = "FIREBASE FATAL ERROR: " + buildLogMessage_.apply(void 0, tslib.__spread(varArgs));
	    logClient.error(message);
	    throw new Error(message);
	};
	/**
	 * @param {...*} varArgs
	 */
	var warn = function () {
	    var varArgs = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        varArgs[_i] = arguments[_i];
	    }
	    var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, tslib.__spread(varArgs));
	    logClient.warn(message);
	};
	/**
	 * Logs a warning if the containing page uses https. Called when a call to new Firebase
	 * does not use https.
	 */
	var warnIfPageIsSecure = function () {
	    // Be very careful accessing browser globals. Who knows what may or may not exist.
	    if (typeof window !== 'undefined' &&
	        window.location &&
	        window.location.protocol &&
	        window.location.protocol.indexOf('https:') !== -1) {
	        warn('Insecure Firebase access from a secure page. ' +
	            'Please use https in calls to new Firebase().');
	    }
	};
	/**
	 * Returns true if data is NaN, or +/- Infinity.
	 * @param {*} data
	 * @return {boolean}
	 */
	var isInvalidJSONNumber = function (data) {
	    return (typeof data === 'number' &&
	        (data !== data || // NaN
	            data === Number.POSITIVE_INFINITY ||
	            data === Number.NEGATIVE_INFINITY));
	};
	/**
	 * @param {function()} fn
	 */
	var executeWhenDOMReady = function (fn) {
	    if (index_cjs.isNodeSdk() || document.readyState === 'complete') {
	        fn();
	    }
	    else {
	        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which
	        // fire before onload), but fall back to onload.
	        var called_1 = false;
	        var wrappedFn_1 = function () {
	            if (!document.body) {
	                setTimeout(wrappedFn_1, Math.floor(10));
	                return;
	            }
	            if (!called_1) {
	                called_1 = true;
	                fn();
	            }
	        };
	        if (document.addEventListener) {
	            document.addEventListener('DOMContentLoaded', wrappedFn_1, false);
	            // fallback to onload.
	            window.addEventListener('load', wrappedFn_1, false);
	            // eslint-disable-next-line @typescript-eslint/no-explicit-any
	        }
	        else if (document.attachEvent) {
	            // IE.
	            // eslint-disable-next-line @typescript-eslint/no-explicit-any
	            document.attachEvent('onreadystatechange', function () {
	                if (document.readyState === 'complete') {
	                    wrappedFn_1();
	                }
	            });
	            // fallback to onload.
	            // eslint-disable-next-line @typescript-eslint/no-explicit-any
	            window.attachEvent('onload', wrappedFn_1);
	            // jQuery has an extra hack for IE that we could employ (based on
	            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.
	            // I'm hoping we don't need it.
	        }
	    }
	};
	/**
	 * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names
	 * @type {!string}
	 */
	var MIN_NAME = '[MIN_NAME]';
	/**
	 * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names
	 * @type {!string}
	 */
	var MAX_NAME = '[MAX_NAME]';
	/**
	 * Compares valid Firebase key names, plus min and max name
	 * @param {!string} a
	 * @param {!string} b
	 * @return {!number}
	 */
	var nameCompare = function (a, b) {
	    if (a === b) {
	        return 0;
	    }
	    else if (a === MIN_NAME || b === MAX_NAME) {
	        return -1;
	    }
	    else if (b === MIN_NAME || a === MAX_NAME) {
	        return 1;
	    }
	    else {
	        var aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);
	        if (aAsInt !== null) {
	            if (bAsInt !== null) {
	                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;
	            }
	            else {
	                return -1;
	            }
	        }
	        else if (bAsInt !== null) {
	            return 1;
	        }
	        else {
	            return a < b ? -1 : 1;
	        }
	    }
	};
	/**
	 * @param {!string} a
	 * @param {!string} b
	 * @return {!number} comparison result.
	 */
	var stringCompare = function (a, b) {
	    if (a === b) {
	        return 0;
	    }
	    else if (a < b) {
	        return -1;
	    }
	    else {
	        return 1;
	    }
	};
	/**
	 * @param {string} key
	 * @param {Object} obj
	 * @return {*}
	 */
	var requireKey = function (key, obj) {
	    if (obj && key in obj) {
	        return obj[key];
	    }
	    else {
	        throw new Error('Missing required key (' + key + ') in object: ' + index_cjs.stringify(obj));
	    }
	};
	/**
	 * @param {*} obj
	 * @return {string}
	 */
	var ObjectToUniqueKey = function (obj) {
	    if (typeof obj !== 'object' || obj === null) {
	        return index_cjs.stringify(obj);
	    }
	    var keys = [];
	    // eslint-disable-next-line guard-for-in
	    for (var k in obj) {
	        keys.push(k);
	    }
	    // Export as json, but with the keys sorted.
	    keys.sort();
	    var key = '{';
	    for (var i = 0; i < keys.length; i++) {
	        if (i !== 0) {
	            key += ',';
	        }
	        key += index_cjs.stringify(keys[i]);
	        key += ':';
	        key += ObjectToUniqueKey(obj[keys[i]]);
	    }
	    key += '}';
	    return key;
	};
	/**
	 * Splits a string into a number of smaller segments of maximum size
	 * @param {!string} str The string
	 * @param {!number} segsize The maximum number of chars in the string.
	 * @return {Array.<string>} The string, split into appropriately-sized chunks
	 */
	var splitStringBySize = function (str, segsize) {
	    var len = str.length;
	    if (len <= segsize) {
	        return [str];
	    }
	    var dataSegs = [];
	    for (var c = 0; c < len; c += segsize) {
	        if (c + segsize > len) {
	            dataSegs.push(str.substring(c, len));
	        }
	        else {
	            dataSegs.push(str.substring(c, c + segsize));
	        }
	    }
	    return dataSegs;
	};
	/**
	 * Apply a function to each (key, value) pair in an object or
	 * apply a function to each (index, value) pair in an array
	 * @param obj The object or array to iterate over
	 * @param fn The function to apply
	 */
	function each(obj, fn) {
	    for (var key in obj) {
	        if (obj.hasOwnProperty(key)) {
	            fn(key, obj[key]);
	        }
	    }
	}
	/**
	 * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)
	 * I made one modification at the end and removed the NaN / Infinity
	 * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.
	 * @param {!number} v A double
	 * @return {string}
	 */
	var doubleToIEEE754String = function (v) {
	    index_cjs.assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL
	    var ebits = 11, fbits = 52;
	    var bias = (1 << (ebits - 1)) - 1;
	    var s, e, f, ln, i;
	    // Compute sign, exponent, fraction
	    // Skip NaN / Infinity handling --MJL.
	    if (v === 0) {
	        e = 0;
	        f = 0;
	        s = 1 / v === -Infinity ? 1 : 0;
	    }
	    else {
	        s = v < 0;
	        v = Math.abs(v);
	        if (v >= Math.pow(2, 1 - bias)) {
	            // Normalized
	            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);
	            e = ln + bias;
	            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));
	        }
	        else {
	            // Denormalized
	            e = 0;
	            f = Math.round(v / Math.pow(2, 1 - bias - fbits));
	        }
	    }
	    // Pack sign, exponent, fraction
	    var bits = [];
	    for (i = fbits; i; i -= 1) {
	        bits.push(f % 2 ? 1 : 0);
	        f = Math.floor(f / 2);
	    }
	    for (i = ebits; i; i -= 1) {
	        bits.push(e % 2 ? 1 : 0);
	        e = Math.floor(e / 2);
	    }
	    bits.push(s ? 1 : 0);
	    bits.reverse();
	    var str = bits.join('');
	    // Return the data as a hex string. --MJL
	    var hexByteString = '';
	    for (i = 0; i < 64; i += 8) {
	        var hexByte = parseInt(str.substr(i, 8), 2).toString(16);
	        if (hexByte.length === 1) {
	            hexByte = '0' + hexByte;
	        }
	        hexByteString = hexByteString + hexByte;
	    }
	    return hexByteString.toLowerCase();
	};
	/**
	 * Used to detect if we're in a Chrome content script (which executes in an
	 * isolated environment where long-polling doesn't work).
	 * @return {boolean}
	 */
	var isChromeExtensionContentScript = function () {
	    return !!(typeof window === 'object' &&
	        window['chrome'] &&
	        window['chrome']['extension'] &&
	        !/^chrome/.test(window.location.href));
	};
	/**
	 * Used to detect if we're in a Windows 8 Store app.
	 * @return {boolean}
	 */
	var isWindowsStoreApp = function () {
	    // Check for the presence of a couple WinRT globals
	    return typeof Windows === 'object' && typeof Windows.UI === 'object';
	};
	/**
	 * Converts a server error code to a Javascript Error
	 * @param {!string} code
	 * @param {!Query} query
	 * @return {Error}
	 */
	var errorForServerCode = function (code, query) {
	    var reason = 'Unknown Error';
	    if (code === 'too_big') {
	        reason =
	            'The data requested exceeds the maximum size ' +
	                'that can be accessed with a single request.';
	    }
	    else if (code === 'permission_denied') {
	        reason = "Client doesn't have permission to access the desired data.";
	    }
	    else if (code === 'unavailable') {
	        reason = 'The service is unavailable';
	    }
	    var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason);
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    error.code = code.toUpperCase();
	    return error;
	};
	/**
	 * Used to test for integer-looking strings
	 * @type {RegExp}
	 * @private
	 */
	var INTEGER_REGEXP_ = new RegExp('^-?(0*)\\d{1,10}$');
	/**
	 * If the string contains a 32-bit integer, return it.  Else return null.
	 * @param {!string} str
	 * @return {?number}
	 */
	var tryParseInt = function (str) {
	    if (INTEGER_REGEXP_.test(str)) {
	        var intVal = Number(str);
	        if (intVal >= -2147483648 && intVal <= 2147483647) {
	            return intVal;
	        }
	    }
	    return null;
	};
	/**
	 * Helper to run some code but catch any exceptions and re-throw them later.
	 * Useful for preventing user callbacks from breaking internal code.
	 *
	 * Re-throwing the exception from a setTimeout is a little evil, but it's very
	 * convenient (we don't have to try to figure out when is a safe point to
	 * re-throw it), and the behavior seems reasonable:
	 *
	 * * If you aren't pausing on exceptions, you get an error in the console with
	 *   the correct stack trace.
	 * * If you're pausing on all exceptions, the debugger will pause on your
	 *   exception and then again when we rethrow it.
	 * * If you're only pausing on uncaught exceptions, the debugger will only pause
	 *   on us re-throwing it.
	 *
	 * @param {!function()} fn The code to guard.
	 */
	var exceptionGuard = function (fn) {
	    try {
	        fn();
	    }
	    catch (e) {
	        // Re-throw exception when it's safe.
	        setTimeout(function () {
	            // It used to be that "throw e" would result in a good console error with
	            // relevant context, but as of Chrome 39, you just get the firebase.js
	            // file/line number where we re-throw it, which is useless. So we log
	            // e.stack explicitly.
	            var stack = e.stack || '';
	            warn('Exception was thrown by user callback.', stack);
	            throw e;
	        }, Math.floor(0));
	    }
	};
	/**
	 * @return {boolean} true if we think we're currently being crawled.
	 */
	var beingCrawled = function () {
	    var userAgent = (typeof window === 'object' &&
	        window['navigator'] &&
	        window['navigator']['userAgent']) ||
	        '';
	    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we
	    // believe to support JavaScript/AJAX rendering.
	    // NOTE: Google Webmaster Tools doesn't really belong, but their "This is how a visitor to your website
	    // would have seen the page" is flaky if we don't treat it as a crawler.
	    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);
	};
	/**
	 * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.
	 *
	 * It is removed with clearTimeout() as normal.
	 *
	 * @param {Function} fn Function to run.
	 * @param {number} time Milliseconds to wait before running.
	 * @return {number|Object} The setTimeout() return value.
	 */
	var setTimeoutNonBlocking = function (fn, time) {
	    var timeout = setTimeout(fn, time);
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    if (typeof timeout === 'object' && timeout['unref']) {
	        // eslint-disable-next-line @typescript-eslint/no-explicit-any
	        timeout['unref']();
	    }
	    return timeout;
	};

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An immutable object representing a parsed path.  It's immutable so that you
	 * can pass them around to other functions without worrying about them changing
	 * it.
	 */
	var Path = /** @class */ (function () {
	    /**
	     * @param {string|Array.<string>} pathOrString Path string to parse,
	     *      or another path, or the raw tokens array
	     * @param {number=} pieceNum
	     */
	    function Path(pathOrString, pieceNum) {
	        if (pieceNum === void 0) {
	            this.pieces_ = pathOrString.split('/');
	            // Remove empty pieces.
	            var copyTo = 0;
	            for (var i = 0; i < this.pieces_.length; i++) {
	                if (this.pieces_[i].length > 0) {
	                    this.pieces_[copyTo] = this.pieces_[i];
	                    copyTo++;
	                }
	            }
	            this.pieces_.length = copyTo;
	            this.pieceNum_ = 0;
	        }
	        else {
	            this.pieces_ = pathOrString;
	            this.pieceNum_ = pieceNum;
	        }
	    }
	    Object.defineProperty(Path, "Empty", {
	        /**
	         * Singleton to represent an empty path
	         *
	         * @const
	         */
	        get: function () {
	            return new Path('');
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Path.prototype.getFront = function () {
	        if (this.pieceNum_ >= this.pieces_.length) {
	            return null;
	        }
	        return this.pieces_[this.pieceNum_];
	    };
	    /**
	     * @return {number} The number of segments in this path
	     */
	    Path.prototype.getLength = function () {
	        return this.pieces_.length - this.pieceNum_;
	    };
	    /**
	     * @return {!Path}
	     */
	    Path.prototype.popFront = function () {
	        var pieceNum = this.pieceNum_;
	        if (pieceNum < this.pieces_.length) {
	            pieceNum++;
	        }
	        return new Path(this.pieces_, pieceNum);
	    };
	    /**
	     * @return {?string}
	     */
	    Path.prototype.getBack = function () {
	        if (this.pieceNum_ < this.pieces_.length) {
	            return this.pieces_[this.pieces_.length - 1];
	        }
	        return null;
	    };
	    Path.prototype.toString = function () {
	        var pathString = '';
	        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {
	            if (this.pieces_[i] !== '') {
	                pathString += '/' + this.pieces_[i];
	            }
	        }
	        return pathString || '/';
	    };
	    Path.prototype.toUrlEncodedString = function () {
	        var pathString = '';
	        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {
	            if (this.pieces_[i] !== '') {
	                pathString += '/' + encodeURIComponent(String(this.pieces_[i]));
	            }
	        }
	        return pathString || '/';
	    };
	    /**
	     * Shallow copy of the parts of the path.
	     *
	     * @param {number=} begin
	     * @return {!Array<string>}
	     */
	    Path.prototype.slice = function (begin) {
	        if (begin === void 0) { begin = 0; }
	        return this.pieces_.slice(this.pieceNum_ + begin);
	    };
	    /**
	     * @return {?Path}
	     */
	    Path.prototype.parent = function () {
	        if (this.pieceNum_ >= this.pieces_.length) {
	            return null;
	        }
	        var pieces = [];
	        for (var i = this.pieceNum_; i < this.pieces_.length - 1; i++) {
	            pieces.push(this.pieces_[i]);
	        }
	        return new Path(pieces, 0);
	    };
	    /**
	     * @param {string|!Path} childPathObj
	     * @return {!Path}
	     */
	    Path.prototype.child = function (childPathObj) {
	        var pieces = [];
	        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {
	            pieces.push(this.pieces_[i]);
	        }
	        if (childPathObj instanceof Path) {
	            for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {
	                pieces.push(childPathObj.pieces_[i]);
	            }
	        }
	        else {
	            var childPieces = childPathObj.split('/');
	            for (var i = 0; i < childPieces.length; i++) {
	                if (childPieces[i].length > 0) {
	                    pieces.push(childPieces[i]);
	                }
	            }
	        }
	        return new Path(pieces, 0);
	    };
	    /**
	     * @return {boolean} True if there are no segments in this path
	     */
	    Path.prototype.isEmpty = function () {
	        return this.pieceNum_ >= this.pieces_.length;
	    };
	    /**
	     * @param {!Path} outerPath
	     * @param {!Path} innerPath
	     * @return {!Path} The path from outerPath to innerPath
	     */
	    Path.relativePath = function (outerPath, innerPath) {
	        var outer = outerPath.getFront(), inner = innerPath.getFront();
	        if (outer === null) {
	            return innerPath;
	        }
	        else if (outer === inner) {
	            return Path.relativePath(outerPath.popFront(), innerPath.popFront());
	        }
	        else {
	            throw new Error('INTERNAL ERROR: innerPath (' +
	                innerPath +
	                ') is not within ' +
	                'outerPath (' +
	                outerPath +
	                ')');
	        }
	    };
	    /**
	     * @param {!Path} left
	     * @param {!Path} right
	     * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.
	     */
	    Path.comparePaths = function (left, right) {
	        var leftKeys = left.slice();
	        var rightKeys = right.slice();
	        for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {
	            var cmp = nameCompare(leftKeys[i], rightKeys[i]);
	            if (cmp !== 0) {
	                return cmp;
	            }
	        }
	        if (leftKeys.length === rightKeys.length) {
	            return 0;
	        }
	        return leftKeys.length < rightKeys.length ? -1 : 1;
	    };
	    /**
	     *
	     * @param {Path} other
	     * @return {boolean} true if paths are the same.
	     */
	    Path.prototype.equals = function (other) {
	        if (this.getLength() !== other.getLength()) {
	            return false;
	        }
	        for (var i = this.pieceNum_, j = other.pieceNum_; i <= this.pieces_.length; i++, j++) {
	            if (this.pieces_[i] !== other.pieces_[j]) {
	                return false;
	            }
	        }
	        return true;
	    };
	    /**
	     *
	     * @param {!Path} other
	     * @return {boolean} True if this path is a parent (or the same as) other
	     */
	    Path.prototype.contains = function (other) {
	        var i = this.pieceNum_;
	        var j = other.pieceNum_;
	        if (this.getLength() > other.getLength()) {
	            return false;
	        }
	        while (i < this.pieces_.length) {
	            if (this.pieces_[i] !== other.pieces_[j]) {
	                return false;
	            }
	            ++i;
	            ++j;
	        }
	        return true;
	    };
	    return Path;
	}()); // end Path
	/**
	 * Dynamic (mutable) path used to count path lengths.
	 *
	 * This class is used to efficiently check paths for valid
	 * length (in UTF8 bytes) and depth (used in path validation).
	 *
	 * Throws Error exception if path is ever invalid.
	 *
	 * The definition of a path always begins with '/'.
	 */
	var ValidationPath = /** @class */ (function () {
	    /**
	     * @param {!Path} path Initial Path.
	     * @param {string} errorPrefix_ Prefix for any error messages.
	     */
	    function ValidationPath(path, errorPrefix_) {
	        this.errorPrefix_ = errorPrefix_;
	        /** @type {!Array<string>} */
	        this.parts_ = path.slice();
	        /** @type {number} Initialize to number of '/' chars needed in path. */
	        this.byteLength_ = Math.max(1, this.parts_.length);
	        for (var i = 0; i < this.parts_.length; i++) {
	            this.byteLength_ += index_cjs.stringLength(this.parts_[i]);
	        }
	        this.checkValid_();
	    }
	    Object.defineProperty(ValidationPath, "MAX_PATH_DEPTH", {
	        /** @const {number} Maximum key depth. */
	        get: function () {
	            return 32;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(ValidationPath, "MAX_PATH_LENGTH_BYTES", {
	        /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */
	        get: function () {
	            return 768;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /** @param {string} child */
	    ValidationPath.prototype.push = function (child) {
	        // Count the needed '/'
	        if (this.parts_.length > 0) {
	            this.byteLength_ += 1;
	        }
	        this.parts_.push(child);
	        this.byteLength_ += index_cjs.stringLength(child);
	        this.checkValid_();
	    };
	    ValidationPath.prototype.pop = function () {
	        var last = this.parts_.pop();
	        this.byteLength_ -= index_cjs.stringLength(last);
	        // Un-count the previous '/'
	        if (this.parts_.length > 0) {
	            this.byteLength_ -= 1;
	        }
	    };
	    ValidationPath.prototype.checkValid_ = function () {
	        if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {
	            throw new Error(this.errorPrefix_ +
	                'has a key path longer than ' +
	                ValidationPath.MAX_PATH_LENGTH_BYTES +
	                ' bytes (' +
	                this.byteLength_ +
	                ').');
	        }
	        if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {
	            throw new Error(this.errorPrefix_ +
	                'path specified exceeds the maximum depth that can be written (' +
	                ValidationPath.MAX_PATH_DEPTH +
	                ') or object contains a cycle ' +
	                this.toErrorString());
	        }
	    };
	    /**
	     * String for use in error messages - uses '.' notation for path.
	     *
	     * @return {string}
	     */
	    ValidationPath.prototype.toErrorString = function () {
	        if (this.parts_.length === 0) {
	            return '';
	        }
	        return "in property '" + this.parts_.join('.') + "'";
	    };
	    return ValidationPath;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var PROTOCOL_VERSION = '5';
	var VERSION_PARAM = 'v';
	var TRANSPORT_SESSION_PARAM = 's';
	var REFERER_PARAM = 'r';
	var FORGE_REF = 'f';
	var FORGE_DOMAIN = 'firebaseio.com';
	var LAST_SESSION_PARAM = 'ls';
	var APPLICATION_ID_PARAM = 'p';
	var WEBSOCKET = 'websocket';
	var LONG_POLLING = 'long_polling';

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A class that holds metadata about a Repo object
	 *
	 * @constructor
	 */
	var RepoInfo = /** @class */ (function () {
	    /**
	     * @param {string} host Hostname portion of the url for the repo
	     * @param {boolean} secure Whether or not this repo is accessed over ssl
	     * @param {string} namespace The namespace represented by the repo
	     * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).
	     * @param {string=} persistenceKey Override the default session persistence storage key
	     */
	    function RepoInfo(host, secure, namespace, webSocketOnly, persistenceKey, includeNamespaceInQueryParams) {
	        if (persistenceKey === void 0) { persistenceKey = ''; }
	        if (includeNamespaceInQueryParams === void 0) { includeNamespaceInQueryParams = false; }
	        this.secure = secure;
	        this.namespace = namespace;
	        this.webSocketOnly = webSocketOnly;
	        this.persistenceKey = persistenceKey;
	        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;
	        this.host = host.toLowerCase();
	        this.domain = this.host.substr(this.host.indexOf('.') + 1);
	        this.internalHost =
	            PersistentStorage.get('host:' + host) || this.host;
	    }
	    RepoInfo.prototype.needsQueryParam = function () {
	        return (this.host !== this.internalHost ||
	            this.isCustomHost() ||
	            this.includeNamespaceInQueryParams);
	    };
	    RepoInfo.prototype.isCacheableHost = function () {
	        return this.internalHost.substr(0, 2) === 's-';
	    };
	    RepoInfo.prototype.isDemoHost = function () {
	        return this.domain === 'firebaseio-demo.com';
	    };
	    RepoInfo.prototype.isCustomHost = function () {
	        return (this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com');
	    };
	    RepoInfo.prototype.updateHost = function (newHost) {
	        if (newHost !== this.internalHost) {
	            this.internalHost = newHost;
	            if (this.isCacheableHost()) {
	                PersistentStorage.set('host:' + this.host, this.internalHost);
	            }
	        }
	    };
	    /**
	     * Returns the websocket URL for this repo
	     * @param {string} type of connection
	     * @param {Object} params list
	     * @return {string} The URL for this repo
	     */
	    RepoInfo.prototype.connectionURL = function (type, params) {
	        index_cjs.assert(typeof type === 'string', 'typeof type must == string');
	        index_cjs.assert(typeof params === 'object', 'typeof params must == object');
	        var connURL;
	        if (type === WEBSOCKET) {
	            connURL =
	                (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';
	        }
	        else if (type === LONG_POLLING) {
	            connURL =
	                (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';
	        }
	        else {
	            throw new Error('Unknown connection type: ' + type);
	        }
	        if (this.needsQueryParam()) {
	            params['ns'] = this.namespace;
	        }
	        var pairs = [];
	        each(params, function (key, value) {
	            pairs.push(key + '=' + value);
	        });
	        return connURL + pairs.join('&');
	    };
	    /** @return {string} */
	    RepoInfo.prototype.toString = function () {
	        var str = this.toURLString();
	        if (this.persistenceKey) {
	            str += '<' + this.persistenceKey + '>';
	        }
	        return str;
	    };
	    /** @return {string} */
	    RepoInfo.prototype.toURLString = function () {
	        return (this.secure ? 'https://' : 'http://') + this.host;
	    };
	    return RepoInfo;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @param {!string} pathString
	 * @return {string}
	 */
	function decodePath(pathString) {
	    var pathStringDecoded = '';
	    var pieces = pathString.split('/');
	    for (var i = 0; i < pieces.length; i++) {
	        if (pieces[i].length > 0) {
	            var piece = pieces[i];
	            try {
	                piece = decodeURIComponent(piece.replace(/\+/g, ' '));
	            }
	            catch (e) { }
	            pathStringDecoded += '/' + piece;
	        }
	    }
	    return pathStringDecoded;
	}
	/**
	 * @param {!string} queryString
	 * @return {!{[key:string]:string}} key value hash
	 */
	function decodeQuery(queryString) {
	    var e_1, _a;
	    var results = {};
	    if (queryString.charAt(0) === '?') {
	        queryString = queryString.substring(1);
	    }
	    try {
	        for (var _b = tslib.__values(queryString.split('&')), _c = _b.next(); !_c.done; _c = _b.next()) {
	            var segment = _c.value;
	            if (segment.length === 0) {
	                continue;
	            }
	            var kv = segment.split('=');
	            if (kv.length === 2) {
	                results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);
	            }
	            else {
	                warn("Invalid query segment '" + segment + "' in query '" + queryString + "'");
	            }
	        }
	    }
	    catch (e_1_1) { e_1 = { error: e_1_1 }; }
	    finally {
	        try {
	            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	        }
	        finally { if (e_1) throw e_1.error; }
	    }
	    return results;
	}
	/**
	 *
	 * @param {!string} dataURL
	 * @return {{repoInfo: !RepoInfo, path: !Path}}
	 */
	var parseRepoInfo = function (dataURL) {
	    var parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;
	    if (parsedUrl.domain === 'firebase.com') {
	        fatal(parsedUrl.host +
	            ' is no longer supported. ' +
	            'Please use <YOUR FIREBASE>.firebaseio.com instead');
	    }
	    // Catch common error of uninitialized namespace value.
	    if ((!namespace || namespace === 'undefined') &&
	        parsedUrl.domain !== 'localhost') {
	        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');
	    }
	    if (!parsedUrl.secure) {
	        warnIfPageIsSecure();
	    }
	    var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';
	    return {
	        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, 
	        /*persistenceKey=*/ '', 
	        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),
	        path: new Path(parsedUrl.pathString)
	    };
	};
	/**
	 *
	 * @param {!string} dataURL
	 * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string, namespace: string}}
	 */
	var parseDatabaseURL = function (dataURL) {
	    // Default to empty strings in the event of a malformed string.
	    var host = '', domain = '', subdomain = '', pathString = '', namespace = '';
	    // Always default to SSL, unless otherwise specified.
	    var secure = true, scheme = 'https', port = 443;
	    // Don't do any validation here. The caller is responsible for validating the result of parsing.
	    if (typeof dataURL === 'string') {
	        // Parse scheme.
	        var colonInd = dataURL.indexOf('//');
	        if (colonInd >= 0) {
	            scheme = dataURL.substring(0, colonInd - 1);
	            dataURL = dataURL.substring(colonInd + 2);
	        }
	        // Parse host, path, and query string.
	        var slashInd = dataURL.indexOf('/');
	        if (slashInd === -1) {
	            slashInd = dataURL.length;
	        }
	        var questionMarkInd = dataURL.indexOf('?');
	        if (questionMarkInd === -1) {
	            questionMarkInd = dataURL.length;
	        }
	        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));
	        if (slashInd < questionMarkInd) {
	            // For pathString, questionMarkInd will always come after slashInd
	            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));
	        }
	        var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));
	        // If we have a port, use scheme for determining if it's secure.
	        colonInd = host.indexOf(':');
	        if (colonInd >= 0) {
	            secure = scheme === 'https' || scheme === 'wss';
	            port = parseInt(host.substring(colonInd + 1), 10);
	        }
	        else {
	            colonInd = host.length;
	        }
	        var hostWithoutPort = host.slice(0, colonInd);
	        if (hostWithoutPort.toLowerCase() === 'localhost') {
	            domain = 'localhost';
	        }
	        else if (hostWithoutPort.split('.').length <= 2) {
	            domain = hostWithoutPort;
	        }
	        else {
	            // Interpret the subdomain of a 3 or more component URL as the namespace name.
	            var dotInd = host.indexOf('.');
	            subdomain = host.substring(0, dotInd).toLowerCase();
	            domain = host.substring(dotInd + 1);
	            // Normalize namespaces to lowercase to share storage / connection.
	            namespace = subdomain;
	        }
	        // Always treat the value of the `ns` as the namespace name if it is present.
	        if ('ns' in queryParams) {
	            namespace = queryParams['ns'];
	        }
	    }
	    return {
	        host: host,
	        port: port,
	        domain: domain,
	        subdomain: subdomain,
	        secure: secure,
	        scheme: scheme,
	        pathString: pathString,
	        namespace: namespace
	    };
	};

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * True for invalid Firebase keys
	 * @type {RegExp}
	 * @private
	 */
	var INVALID_KEY_REGEX_ = /[\[\].#$\/\u0000-\u001F\u007F]/;
	/**
	 * True for invalid Firebase paths.
	 * Allows '/' in paths.
	 * @type {RegExp}
	 * @private
	 */
	var INVALID_PATH_REGEX_ = /[\[\].#$\u0000-\u001F\u007F]/;
	/**
	 * Maximum number of characters to allow in leaf value
	 * @type {number}
	 * @private
	 */
	var MAX_LEAF_SIZE_ = 10 * 1024 * 1024;
	/**
	 * @param {*} key
	 * @return {boolean}
	 */
	var isValidKey = function (key) {
	    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));
	};
	/**
	 * @param {string} pathString
	 * @return {boolean}
	 */
	var isValidPathString = function (pathString) {
	    return (typeof pathString === 'string' &&
	        pathString.length !== 0 &&
	        !INVALID_PATH_REGEX_.test(pathString));
	};
	/**
	 * @param {string} pathString
	 * @return {boolean}
	 */
	var isValidRootPathString = function (pathString) {
	    if (pathString) {
	        // Allow '/.info/' at the beginning.
	        pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
	    }
	    return isValidPathString(pathString);
	};
	/**
	 * @param {*} priority
	 * @return {boolean}
	 */
	var isValidPriority = function (priority) {
	    return (priority === null ||
	        typeof priority === 'string' ||
	        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||
	        (priority &&
	            typeof priority === 'object' &&
	            // eslint-disable-next-line @typescript-eslint/no-explicit-any
	            index_cjs.contains(priority, '.sv')));
	};
	/**
	 * Pre-validate a datum passed as an argument to Firebase function.
	 *
	 * @param {string} fnName
	 * @param {number} argumentNumber
	 * @param {*} data
	 * @param {!Path} path
	 * @param {boolean} optional
	 */
	var validateFirebaseDataArg = function (fnName, argumentNumber, data, path, optional) {
	    if (optional && data === undefined) {
	        return;
	    }
	    validateFirebaseData(index_cjs.errorPrefix(fnName, argumentNumber, optional), data, path);
	};
	/**
	 * Validate a data object client-side before sending to server.
	 *
	 * @param {string} errorPrefix
	 * @param {*} data
	 * @param {!Path|!ValidationPath} path_
	 */
	var validateFirebaseData = function (errorPrefix, data, path_) {
	    var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;
	    if (data === undefined) {
	        throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());
	    }
	    if (typeof data === 'function') {
	        throw new Error(errorPrefix +
	            'contains a function ' +
	            path.toErrorString() +
	            ' with contents = ' +
	            data.toString());
	    }
	    if (isInvalidJSONNumber(data)) {
	        throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());
	    }
	    // Check max leaf size, but try to avoid the utf8 conversion if we can.
	    if (typeof data === 'string' &&
	        data.length > MAX_LEAF_SIZE_ / 3 &&
	        index_cjs.stringLength(data) > MAX_LEAF_SIZE_) {
	        throw new Error(errorPrefix +
	            'contains a string greater than ' +
	            MAX_LEAF_SIZE_ +
	            ' utf8 bytes ' +
	            path.toErrorString() +
	            " ('" +
	            data.substring(0, 50) +
	            "...')");
	    }
	    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON
	    // to save extra walking of large objects.
	    if (data && typeof data === 'object') {
	        var hasDotValue_1 = false;
	        var hasActualChild_1 = false;
	        each(data, function (key, value) {
	            if (key === '.value') {
	                hasDotValue_1 = true;
	            }
	            else if (key !== '.priority' && key !== '.sv') {
	                hasActualChild_1 = true;
	                if (!isValidKey(key)) {
	                    throw new Error(errorPrefix +
	                        ' contains an invalid key (' +
	                        key +
	                        ') ' +
	                        path.toErrorString() +
	                        '.  Keys must be non-empty strings ' +
	                        'and can\'t contain ".", "#", "$", "/", "[", or "]"');
	                }
	            }
	            path.push(key);
	            validateFirebaseData(errorPrefix, value, path);
	            path.pop();
	        });
	        if (hasDotValue_1 && hasActualChild_1) {
	            throw new Error(errorPrefix +
	                ' contains ".value" child ' +
	                path.toErrorString() +
	                ' in addition to actual children.');
	        }
	    }
	};
	/**
	 * Pre-validate paths passed in the firebase function.
	 *
	 * @param {string} errorPrefix
	 * @param {Array<!Path>} mergePaths
	 */
	var validateFirebaseMergePaths = function (errorPrefix, mergePaths) {
	    var i, curPath;
	    for (i = 0; i < mergePaths.length; i++) {
	        curPath = mergePaths[i];
	        var keys = curPath.slice();
	        for (var j = 0; j < keys.length; j++) {
	            if (keys[j] === '.priority' && j === keys.length - 1) ;
	            else if (!isValidKey(keys[j])) {
	                throw new Error(errorPrefix +
	                    'contains an invalid key (' +
	                    keys[j] +
	                    ') in path ' +
	                    curPath.toString() +
	                    '. Keys must be non-empty strings ' +
	                    'and can\'t contain ".", "#", "$", "/", "[", or "]"');
	            }
	        }
	    }
	    // Check that update keys are not descendants of each other.
	    // We rely on the property that sorting guarantees that ancestors come
	    // right before descendants.
	    mergePaths.sort(Path.comparePaths);
	    var prevPath = null;
	    for (i = 0; i < mergePaths.length; i++) {
	        curPath = mergePaths[i];
	        if (prevPath !== null && prevPath.contains(curPath)) {
	            throw new Error(errorPrefix +
	                'contains a path ' +
	                prevPath.toString() +
	                ' that is ancestor of another path ' +
	                curPath.toString());
	        }
	        prevPath = curPath;
	    }
	};
	/**
	 * pre-validate an object passed as an argument to firebase function (
	 * must be an object - e.g. for firebase.update()).
	 *
	 * @param {string} fnName
	 * @param {number} argumentNumber
	 * @param {*} data
	 * @param {!Path} path
	 * @param {boolean} optional
	 */
	var validateFirebaseMergeDataArg = function (fnName, argumentNumber, data, path, optional) {
	    if (optional && data === undefined) {
	        return;
	    }
	    var errorPrefix = index_cjs.errorPrefix(fnName, argumentNumber, optional);
	    if (!(data && typeof data === 'object') || Array.isArray(data)) {
	        throw new Error(errorPrefix + ' must be an object containing the children to replace.');
	    }
	    var mergePaths = [];
	    each(data, function (key, value) {
	        var curPath = new Path(key);
	        validateFirebaseData(errorPrefix, value, path.child(curPath));
	        if (curPath.getBack() === '.priority') {
	            if (!isValidPriority(value)) {
	                throw new Error(errorPrefix +
	                    "contains an invalid value for '" +
	                    curPath.toString() +
	                    "', which must be a valid " +
	                    'Firebase priority (a string, finite number, server value, or null).');
	            }
	        }
	        mergePaths.push(curPath);
	    });
	    validateFirebaseMergePaths(errorPrefix, mergePaths);
	};
	var validatePriority = function (fnName, argumentNumber, priority, optional) {
	    if (optional && priority === undefined) {
	        return;
	    }
	    if (isInvalidJSONNumber(priority)) {
	        throw new Error(index_cjs.errorPrefix(fnName, argumentNumber, optional) +
	            'is ' +
	            priority.toString() +
	            ', but must be a valid Firebase priority (a string, finite number, ' +
	            'server value, or null).');
	    }
	    // Special case to allow importing data with a .sv.
	    if (!isValidPriority(priority)) {
	        throw new Error(index_cjs.errorPrefix(fnName, argumentNumber, optional) +
	            'must be a valid Firebase priority ' +
	            '(a string, finite number, server value, or null).');
	    }
	};
	var validateEventType = function (fnName, argumentNumber, eventType, optional) {
	    if (optional && eventType === undefined) {
	        return;
	    }
	    switch (eventType) {
	        case 'value':
	        case 'child_added':
	        case 'child_removed':
	        case 'child_changed':
	        case 'child_moved':
	            break;
	        default:
	            throw new Error(index_cjs.errorPrefix(fnName, argumentNumber, optional) +
	                'must be a valid event type = "value", "child_added", "child_removed", ' +
	                '"child_changed", or "child_moved".');
	    }
	};
	var validateKey = function (fnName, argumentNumber, key, optional) {
	    if (optional && key === undefined) {
	        return;
	    }
	    if (!isValidKey(key)) {
	        throw new Error(index_cjs.errorPrefix(fnName, argumentNumber, optional) +
	            'was an invalid key = "' +
	            key +
	            '".  Firebase keys must be non-empty strings and ' +
	            'can\'t contain ".", "#", "$", "/", "[", or "]").');
	    }
	};
	var validatePathString = function (fnName, argumentNumber, pathString, optional) {
	    if (optional && pathString === undefined) {
	        return;
	    }
	    if (!isValidPathString(pathString)) {
	        throw new Error(index_cjs.errorPrefix(fnName, argumentNumber, optional) +
	            'was an invalid path = "' +
	            pathString +
	            '". Paths must be non-empty strings and ' +
	            'can\'t contain ".", "#", "$", "[", or "]"');
	    }
	};
	var validateRootPathString = function (fnName, argumentNumber, pathString, optional) {
	    if (pathString) {
	        // Allow '/.info/' at the beginning.
	        pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
	    }
	    validatePathString(fnName, argumentNumber, pathString, optional);
	};
	var validateWritablePath = function (fnName, path) {
	    if (path.getFront() === '.info') {
	        throw new Error(fnName + " failed = Can't modify data under /.info/");
	    }
	};
	var validateUrl = function (fnName, argumentNumber, parsedUrl) {
	    // TODO = Validate server better.
	    var pathString = parsedUrl.path.toString();
	    if (!(typeof parsedUrl.repoInfo.host === 'string') ||
	        parsedUrl.repoInfo.host.length === 0 ||
	        (!isValidKey(parsedUrl.repoInfo.namespace) &&
	            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||
	        (pathString.length !== 0 && !isValidRootPathString(pathString))) {
	        throw new Error(index_cjs.errorPrefix(fnName, argumentNumber, false) +
	            'must be a valid firebase URL and ' +
	            'the path can\'t contain ".", "#", "$", "[", or "]".');
	    }
	};
	var validateBoolean = function (fnName, argumentNumber, bool, optional) {
	    if (optional && bool === undefined) {
	        return;
	    }
	    if (typeof bool !== 'boolean') {
	        throw new Error(index_cjs.errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');
	    }
	};

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @constructor
	 */
	var OnDisconnect = /** @class */ (function () {
	    /**
	     * @param {!Repo} repo_
	     * @param {!Path} path_
	     */
	    function OnDisconnect(repo_, path_) {
	        this.repo_ = repo_;
	        this.path_ = path_;
	    }
	    /**
	     * @param {function(?Error)=} onComplete
	     * @return {!firebase.Promise}
	     */
	    OnDisconnect.prototype.cancel = function (onComplete) {
	        index_cjs.validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);
	        index_cjs.validateCallback('OnDisconnect.cancel', 1, onComplete, true);
	        var deferred = new index_cjs.Deferred();
	        this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));
	        return deferred.promise;
	    };
	    /**
	     * @param {function(?Error)=} onComplete
	     * @return {!firebase.Promise}
	     */
	    OnDisconnect.prototype.remove = function (onComplete) {
	        index_cjs.validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);
	        validateWritablePath('OnDisconnect.remove', this.path_);
	        index_cjs.validateCallback('OnDisconnect.remove', 1, onComplete, true);
	        var deferred = new index_cjs.Deferred();
	        this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));
	        return deferred.promise;
	    };
	    /**
	     * @param {*} value
	     * @param {function(?Error)=} onComplete
	     * @return {!firebase.Promise}
	     */
	    OnDisconnect.prototype.set = function (value, onComplete) {
	        index_cjs.validateArgCount('OnDisconnect.set', 1, 2, arguments.length);
	        validateWritablePath('OnDisconnect.set', this.path_);
	        validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);
	        index_cjs.validateCallback('OnDisconnect.set', 2, onComplete, true);
	        var deferred = new index_cjs.Deferred();
	        this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));
	        return deferred.promise;
	    };
	    /**
	     * @param {*} value
	     * @param {number|string|null} priority
	     * @param {function(?Error)=} onComplete
	     * @return {!firebase.Promise}
	     */
	    OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {
	        index_cjs.validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);
	        validateWritablePath('OnDisconnect.setWithPriority', this.path_);
	        validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);
	        validatePriority('OnDisconnect.setWithPriority', 2, priority, false);
	        index_cjs.validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);
	        var deferred = new index_cjs.Deferred();
	        this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));
	        return deferred.promise;
	    };
	    /**
	     * @param {!Object} objectToMerge
	     * @param {function(?Error)=} onComplete
	     * @return {!firebase.Promise}
	     */
	    OnDisconnect.prototype.update = function (objectToMerge, onComplete) {
	        index_cjs.validateArgCount('OnDisconnect.update', 1, 2, arguments.length);
	        validateWritablePath('OnDisconnect.update', this.path_);
	        if (Array.isArray(objectToMerge)) {
	            var newObjectToMerge = {};
	            for (var i = 0; i < objectToMerge.length; ++i) {
	                newObjectToMerge['' + i] = objectToMerge[i];
	            }
	            objectToMerge = newObjectToMerge;
	            warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +
	                'existing data, or an Object with integer keys if you really do want to only update some of the children.');
	        }
	        validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);
	        index_cjs.validateCallback('OnDisconnect.update', 2, onComplete, true);
	        var deferred = new index_cjs.Deferred();
	        this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));
	        return deferred.promise;
	    };
	    return OnDisconnect;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var TransactionResult = /** @class */ (function () {
	    /**
	     * A type for the resolve value of Firebase.transaction.
	     * @constructor
	     * @dict
	     * @param {boolean} committed
	     * @param {DataSnapshot} snapshot
	     */
	    function TransactionResult(committed, snapshot) {
	        this.committed = committed;
	        this.snapshot = snapshot;
	    }
	    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
	    // for end-users
	    TransactionResult.prototype.toJSON = function () {
	        index_cjs.validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);
	        return { committed: this.committed, snapshot: this.snapshot.toJSON() };
	    };
	    return TransactionResult;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Fancy ID generator that creates 20-character string identifiers with the
	 * following properties:
	 *
	 * 1. They're based on timestamp so that they sort *after* any existing ids.
	 * 2. They contain 72-bits of random data after the timestamp so that IDs won't
	 *    collide with other clients' IDs.
	 * 3. They sort *lexicographically* (so the timestamp is converted to characters
	 *    that will sort properly).
	 * 4. They're monotonically increasing. Even if you generate more than one in
	 *    the same timestamp, the latter ones will sort after the former ones. We do
	 *    this by using the previous random bits but "incrementing" them by 1 (only
	 *    in the case of a timestamp collision).
	 */
	var nextPushId = (function () {
	    // Modeled after base64 web-safe chars, but ordered by ASCII.
	    var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';
	    // Timestamp of last push, used to prevent local collisions if you push twice
	    // in one ms.
	    var lastPushTime = 0;
	    // We generate 72-bits of randomness which get turned into 12 characters and
	    // appended to the timestamp to prevent collisions with other clients. We
	    // store the last characters we generated because in the event of a collision,
	    // we'll use those same characters except "incremented" by one.
	    var lastRandChars = [];
	    return function (now) {
	        var duplicateTime = now === lastPushTime;
	        lastPushTime = now;
	        var i;
	        var timeStampChars = new Array(8);
	        for (i = 7; i >= 0; i--) {
	            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);
	            // NOTE: Can't use << here because javascript will convert to int and lose
	            // the upper bits.
	            now = Math.floor(now / 64);
	        }
	        index_cjs.assert(now === 0, 'Cannot push at time == 0');
	        var id = timeStampChars.join('');
	        if (!duplicateTime) {
	            for (i = 0; i < 12; i++) {
	                lastRandChars[i] = Math.floor(Math.random() * 64);
	            }
	        }
	        else {
	            // If the timestamp hasn't changed since last push, use the same random
	            // number, except incremented by 1.
	            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {
	                lastRandChars[i] = 0;
	            }
	            lastRandChars[i]++;
	        }
	        for (i = 0; i < 12; i++) {
	            id += PUSH_CHARS.charAt(lastRandChars[i]);
	        }
	        index_cjs.assert(id.length === 20, 'nextPushId: Length should be 20.');
	        return id;
	    };
	})();

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 *
	 * @param {!string} name
	 * @param {!Node} node
	 * @constructor
	 * @struct
	 */
	var NamedNode = /** @class */ (function () {
	    function NamedNode(name, node) {
	        this.name = name;
	        this.node = node;
	    }
	    /**
	     *
	     * @param {!string} name
	     * @param {!Node} node
	     * @return {NamedNode}
	     */
	    NamedNode.Wrap = function (name, node) {
	        return new NamedNode(name, node);
	    };
	    return NamedNode;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 *
	 * @constructor
	 */
	var Index = /** @class */ (function () {
	    function Index() {
	    }
	    /**
	     * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for
	     * this index
	     */
	    Index.prototype.getCompare = function () {
	        return this.compare.bind(this);
	    };
	    /**
	     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,
	     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.
	     *
	     * @param {!Node} oldNode
	     * @param {!Node} newNode
	     * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode
	     */
	    Index.prototype.indexedValueChanged = function (oldNode, newNode) {
	        var oldWrapped = new NamedNode(MIN_NAME, oldNode);
	        var newWrapped = new NamedNode(MIN_NAME, newNode);
	        return this.compare(oldWrapped, newWrapped) !== 0;
	    };
	    /**
	     * @return {!NamedNode} a node wrapper that will sort equal to or less than
	     * any other node wrapper, using this index
	     */
	    Index.prototype.minPost = function () {
	        // eslint-disable-next-line @typescript-eslint/no-explicit-any
	        return NamedNode.MIN;
	    };
	    return Index;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __EMPTY_NODE;
	var KeyIndex = /** @class */ (function (_super) {
	    tslib.__extends(KeyIndex, _super);
	    function KeyIndex() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Object.defineProperty(KeyIndex, "__EMPTY_NODE", {
	        get: function () {
	            return __EMPTY_NODE;
	        },
	        set: function (val) {
	            __EMPTY_NODE = val;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * @inheritDoc
	     */
	    KeyIndex.prototype.compare = function (a, b) {
	        return nameCompare(a.name, b.name);
	    };
	    /**
	     * @inheritDoc
	     */
	    KeyIndex.prototype.isDefinedOn = function (node) {
	        // We could probably return true here (since every node has a key), but it's never called
	        // so just leaving unimplemented for now.
	        throw index_cjs.assertionError('KeyIndex.isDefinedOn not expected to be called.');
	    };
	    /**
	     * @inheritDoc
	     */
	    KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
	        return false; // The key for a node never changes.
	    };
	    /**
	     * @inheritDoc
	     */
	    KeyIndex.prototype.minPost = function () {
	        // eslint-disable-next-line @typescript-eslint/no-explicit-any
	        return NamedNode.MIN;
	    };
	    /**
	     * @inheritDoc
	     */
	    KeyIndex.prototype.maxPost = function () {
	        // TODO: This should really be created once and cached in a static property, but
	        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.
	        return new NamedNode(MAX_NAME, __EMPTY_NODE);
	    };
	    /**
	     * @param {*} indexValue
	     * @param {string} name
	     * @return {!NamedNode}
	     */
	    KeyIndex.prototype.makePost = function (indexValue, name) {
	        index_cjs.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');
	        // We just use empty node, but it'll never be compared, since our comparator only looks at name.
	        return new NamedNode(indexValue, __EMPTY_NODE);
	    };
	    /**
	     * @return {!string} String representation for inclusion in a query spec
	     */
	    KeyIndex.prototype.toString = function () {
	        return '.key';
	    };
	    return KeyIndex;
	}(Index));
	var KEY_INDEX = new KeyIndex();

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var MAX_NODE;
	function setMaxNode(val) {
	    MAX_NODE = val;
	}
	/**
	 * @param {(!string|!number)} priority
	 * @return {!string}
	 */
	var priorityHashText = function (priority) {
	    if (typeof priority === 'number') {
	        return 'number:' + doubleToIEEE754String(priority);
	    }
	    else {
	        return 'string:' + priority;
	    }
	};
	/**
	 * Validates that a priority snapshot Node is valid.
	 *
	 * @param {!Node} priorityNode
	 */
	var validatePriorityNode = function (priorityNode) {
	    if (priorityNode.isLeafNode()) {
	        var val = priorityNode.val();
	        index_cjs.assert(typeof val === 'string' ||
	            typeof val === 'number' ||
	            (typeof val === 'object' && index_cjs.contains(val, '.sv')), 'Priority must be a string or number.');
	    }
	    else {
	        index_cjs.assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');
	    }
	    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.
	    index_cjs.assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), "Priority nodes can't have a priority of their own.");
	};

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __childrenNodeConstructor;
	/**
	 * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It
	 * implements Node and stores the value of the node (a string,
	 * number, or boolean) accessible via getValue().
	 */
	var LeafNode = /** @class */ (function () {
	    /**
	     * @implements {Node}
	     * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.
	     *                                         The object type is possible in the event of a deferred value
	     * @param {!Node=} priorityNode_ The priority of this node.
	     */
	    function LeafNode(value_, priorityNode_) {
	        if (priorityNode_ === void 0) { priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE; }
	        this.value_ = value_;
	        this.priorityNode_ = priorityNode_;
	        this.lazyHash_ = null;
	        index_cjs.assert(this.value_ !== undefined && this.value_ !== null, "LeafNode shouldn't be created with null/undefined value.");
	        validatePriorityNode(this.priorityNode_);
	    }
	    Object.defineProperty(LeafNode, "__childrenNodeConstructor", {
	        get: function () {
	            return __childrenNodeConstructor;
	        },
	        set: function (val) {
	            __childrenNodeConstructor = val;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /** @inheritDoc */
	    LeafNode.prototype.isLeafNode = function () {
	        return true;
	    };
	    /** @inheritDoc */
	    LeafNode.prototype.getPriority = function () {
	        return this.priorityNode_;
	    };
	    /** @inheritDoc */
	    LeafNode.prototype.updatePriority = function (newPriorityNode) {
	        return new LeafNode(this.value_, newPriorityNode);
	    };
	    /** @inheritDoc */
	    LeafNode.prototype.getImmediateChild = function (childName) {
	        // Hack to treat priority as a regular child
	        if (childName === '.priority') {
	            return this.priorityNode_;
	        }
	        else {
	            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
	        }
	    };
	    /** @inheritDoc */
	    LeafNode.prototype.getChild = function (path) {
	        if (path.isEmpty()) {
	            return this;
	        }
	        else if (path.getFront() === '.priority') {
	            return this.priorityNode_;
	        }
	        else {
	            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    LeafNode.prototype.hasChild = function () {
	        return false;
	    };
	    /** @inheritDoc */
	    LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {
	        return null;
	    };
	    /** @inheritDoc */
	    LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {
	        if (childName === '.priority') {
	            return this.updatePriority(newChildNode);
	        }
	        else if (newChildNode.isEmpty() && childName !== '.priority') {
	            return this;
	        }
	        else {
	            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);
	        }
	    };
	    /** @inheritDoc */
	    LeafNode.prototype.updateChild = function (path, newChildNode) {
	        var front = path.getFront();
	        if (front === null) {
	            return newChildNode;
	        }
	        else if (newChildNode.isEmpty() && front !== '.priority') {
	            return this;
	        }
	        else {
	            index_cjs.assert(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');
	            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));
	        }
	    };
	    /** @inheritDoc */
	    LeafNode.prototype.isEmpty = function () {
	        return false;
	    };
	    /** @inheritDoc */
	    LeafNode.prototype.numChildren = function () {
	        return 0;
	    };
	    /** @inheritDoc */
	    LeafNode.prototype.forEachChild = function (index, action) {
	        return false;
	    };
	    /**
	     * @inheritDoc
	     */
	    LeafNode.prototype.val = function (exportFormat) {
	        if (exportFormat && !this.getPriority().isEmpty()) {
	            return {
	                '.value': this.getValue(),
	                '.priority': this.getPriority().val()
	            };
	        }
	        else {
	            return this.getValue();
	        }
	    };
	    /** @inheritDoc */
	    LeafNode.prototype.hash = function () {
	        if (this.lazyHash_ === null) {
	            var toHash = '';
	            if (!this.priorityNode_.isEmpty()) {
	                toHash +=
	                    'priority:' +
	                        priorityHashText(this.priorityNode_.val()) +
	                        ':';
	            }
	            var type = typeof this.value_;
	            toHash += type + ':';
	            if (type === 'number') {
	                toHash += doubleToIEEE754String(this.value_);
	            }
	            else {
	                toHash += this.value_;
	            }
	            this.lazyHash_ = sha1(toHash);
	        }
	        return this.lazyHash_;
	    };
	    /**
	     * Returns the value of the leaf node.
	     * @return {Object|string|number|boolean} The value of the node.
	     */
	    LeafNode.prototype.getValue = function () {
	        return this.value_;
	    };
	    /**
	     * @inheritDoc
	     */
	    LeafNode.prototype.compareTo = function (other) {
	        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {
	            return 1;
	        }
	        else if (other instanceof LeafNode.__childrenNodeConstructor) {
	            return -1;
	        }
	        else {
	            index_cjs.assert(other.isLeafNode(), 'Unknown node type');
	            return this.compareToLeafNode_(other);
	        }
	    };
	    /**
	     * Comparison specifically for two leaf nodes
	     * @param {!LeafNode} otherLeaf
	     * @return {!number}
	     * @private
	     */
	    LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {
	        var otherLeafType = typeof otherLeaf.value_;
	        var thisLeafType = typeof this.value_;
	        var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);
	        var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);
	        index_cjs.assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);
	        index_cjs.assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);
	        if (otherIndex === thisIndex) {
	            // Same type, compare values
	            if (thisLeafType === 'object') {
	                // Deferred value nodes are all equal, but we should also never get to this point...
	                return 0;
	            }
	            else {
	                // Note that this works because true > false, all others are number or string comparisons
	                if (this.value_ < otherLeaf.value_) {
	                    return -1;
	                }
	                else if (this.value_ === otherLeaf.value_) {
	                    return 0;
	                }
	                else {
	                    return 1;
	                }
	            }
	        }
	        else {
	            return thisIndex - otherIndex;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    LeafNode.prototype.withIndex = function () {
	        return this;
	    };
	    /**
	     * @inheritDoc
	     */
	    LeafNode.prototype.isIndexed = function () {
	        return true;
	    };
	    /**
	     * @inheritDoc
	     */
	    LeafNode.prototype.equals = function (other) {
	        /**
	         * @inheritDoc
	         */
	        if (other === this) {
	            return true;
	        }
	        else if (other.isLeafNode()) {
	            var otherLeaf = other;
	            return (this.value_ === otherLeaf.value_ &&
	                this.priorityNode_.equals(otherLeaf.priorityNode_));
	        }
	        else {
	            return false;
	        }
	    };
	    /**
	     * The sort order for comparing leaf nodes of different types. If two leaf nodes have
	     * the same type, the comparison falls back to their value
	     * @type {Array.<!string>}
	     * @const
	     */
	    LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];
	    return LeafNode;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var nodeFromJSON;
	var MAX_NODE$1;
	function setNodeFromJSON(val) {
	    nodeFromJSON = val;
	}
	function setMaxNode$1(val) {
	    MAX_NODE$1 = val;
	}
	/**
	 * @constructor
	 * @extends {Index}
	 * @private
	 */
	var PriorityIndex = /** @class */ (function (_super) {
	    tslib.__extends(PriorityIndex, _super);
	    function PriorityIndex() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @inheritDoc
	     */
	    PriorityIndex.prototype.compare = function (a, b) {
	        var aPriority = a.node.getPriority();
	        var bPriority = b.node.getPriority();
	        var indexCmp = aPriority.compareTo(bPriority);
	        if (indexCmp === 0) {
	            return nameCompare(a.name, b.name);
	        }
	        else {
	            return indexCmp;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    PriorityIndex.prototype.isDefinedOn = function (node) {
	        return !node.getPriority().isEmpty();
	    };
	    /**
	     * @inheritDoc
	     */
	    PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
	        return !oldNode.getPriority().equals(newNode.getPriority());
	    };
	    /**
	     * @inheritDoc
	     */
	    PriorityIndex.prototype.minPost = function () {
	        // eslint-disable-next-line @typescript-eslint/no-explicit-any
	        return NamedNode.MIN;
	    };
	    /**
	     * @inheritDoc
	     */
	    PriorityIndex.prototype.maxPost = function () {
	        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));
	    };
	    /**
	     * @param {*} indexValue
	     * @param {string} name
	     * @return {!NamedNode}
	     */
	    PriorityIndex.prototype.makePost = function (indexValue, name) {
	        var priorityNode = nodeFromJSON(indexValue);
	        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));
	    };
	    /**
	     * @return {!string} String representation for inclusion in a query spec
	     */
	    PriorityIndex.prototype.toString = function () {
	        return '.priority';
	    };
	    return PriorityIndex;
	}(Index));
	var PRIORITY_INDEX = new PriorityIndex();

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An iterator over an LLRBNode.
	 */
	var SortedMapIterator = /** @class */ (function () {
	    /**
	     * @template K, V, T
	     * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.
	     * @param {?K} startKey
	     * @param {function(K, K): number} comparator
	     * @param {boolean} isReverse_ Whether or not to iterate in reverse
	     * @param {(function(K, V):T)=} resultGenerator_
	     */
	    function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {
	        if (resultGenerator_ === void 0) { resultGenerator_ = null; }
	        this.isReverse_ = isReverse_;
	        this.resultGenerator_ = resultGenerator_;
	        /** @private
	         * @type {Array.<!LLRBNode>}
	         */
	        this.nodeStack_ = [];
	        var cmp = 1;
	        while (!node.isEmpty()) {
	            node = node;
	            cmp = startKey ? comparator(node.key, startKey) : 1;
	            // flip the comparison if we're going in reverse
	            if (isReverse_) {
	                cmp *= -1;
	            }
	            if (cmp < 0) {
	                // This node is less than our start key. ignore it
	                if (this.isReverse_) {
	                    node = node.left;
	                }
	                else {
	                    node = node.right;
	                }
	            }
	            else if (cmp === 0) {
	                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;
	                this.nodeStack_.push(node);
	                break;
	            }
	            else {
	                // This node is greater than our start key, add it to the stack and move to the next one
	                this.nodeStack_.push(node);
	                if (this.isReverse_) {
	                    node = node.right;
	                }
	                else {
	                    node = node.left;
	                }
	            }
	        }
	    }
	    SortedMapIterator.prototype.getNext = function () {
	        if (this.nodeStack_.length === 0) {
	            return null;
	        }
	        var node = this.nodeStack_.pop();
	        var result;
	        if (this.resultGenerator_) {
	            result = this.resultGenerator_(node.key, node.value);
	        }
	        else {
	            result = { key: node.key, value: node.value };
	        }
	        if (this.isReverse_) {
	            node = node.left;
	            while (!node.isEmpty()) {
	                this.nodeStack_.push(node);
	                node = node.right;
	            }
	        }
	        else {
	            node = node.right;
	            while (!node.isEmpty()) {
	                this.nodeStack_.push(node);
	                node = node.left;
	            }
	        }
	        return result;
	    };
	    SortedMapIterator.prototype.hasNext = function () {
	        return this.nodeStack_.length > 0;
	    };
	    SortedMapIterator.prototype.peek = function () {
	        if (this.nodeStack_.length === 0) {
	            return null;
	        }
	        var node = this.nodeStack_[this.nodeStack_.length - 1];
	        if (this.resultGenerator_) {
	            return this.resultGenerator_(node.key, node.value);
	        }
	        else {
	            return { key: node.key, value: node.value };
	        }
	    };
	    return SortedMapIterator;
	}());
	/**
	 * Represents a node in a Left-leaning Red-Black tree.
	 */
	var LLRBNode = /** @class */ (function () {
	    /**
	     * @template K, V
	     * @param {!K} key Key associated with this node.
	     * @param {!V} value Value associated with this node.
	     * @param {?boolean} color Whether this node is red.
	     * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.
	     * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.
	     */
	    function LLRBNode(key, value, color, left, right) {
	        this.key = key;
	        this.value = value;
	        this.color = color != null ? color : LLRBNode.RED;
	        this.left =
	            left != null ? left : SortedMap.EMPTY_NODE;
	        this.right =
	            right != null ? right : SortedMap.EMPTY_NODE;
	    }
	    /**
	     * Returns a copy of the current node, optionally replacing pieces of it.
	     *
	     * @param {?K} key New key for the node, or null.
	     * @param {?V} value New value for the node, or null.
	     * @param {?boolean} color New color for the node, or null.
	     * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.
	     * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.
	     * @return {!LLRBNode} The node copy.
	     */
	    LLRBNode.prototype.copy = function (key, value, color, left, right) {
	        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);
	    };
	    /**
	     * @return {number} The total number of nodes in the tree.
	     */
	    LLRBNode.prototype.count = function () {
	        return this.left.count() + 1 + this.right.count();
	    };
	    /**
	     * @return {boolean} True if the tree is empty.
	     */
	    LLRBNode.prototype.isEmpty = function () {
	        return false;
	    };
	    /**
	     * Traverses the tree in key order and calls the specified action function
	     * for each node.
	     *
	     * @param {function(!K, !V):*} action Callback function to be called for each
	     *   node.  If it returns true, traversal is aborted.
	     * @return {*} The first truthy value returned by action, or the last falsey
	     *   value returned by action
	     */
	    LLRBNode.prototype.inorderTraversal = function (action) {
	        return (this.left.inorderTraversal(action) ||
	            !!action(this.key, this.value) ||
	            this.right.inorderTraversal(action));
	    };
	    /**
	     * Traverses the tree in reverse key order and calls the specified action function
	     * for each node.
	     *
	     * @param {function(!Object, !Object)} action Callback function to be called for each
	     * node.  If it returns true, traversal is aborted.
	     * @return {*} True if traversal was aborted.
	     */
	    LLRBNode.prototype.reverseTraversal = function (action) {
	        return (this.right.reverseTraversal(action) ||
	            action(this.key, this.value) ||
	            this.left.reverseTraversal(action));
	    };
	    /**
	     * @return {!Object} The minimum node in the tree.
	     * @private
	     */
	    LLRBNode.prototype.min_ = function () {
	        if (this.left.isEmpty()) {
	            return this;
	        }
	        else {
	            return this.left.min_();
	        }
	    };
	    /**
	     * @return {!K} The maximum key in the tree.
	     */
	    LLRBNode.prototype.minKey = function () {
	        return this.min_().key;
	    };
	    /**
	     * @return {!K} The maximum key in the tree.
	     */
	    LLRBNode.prototype.maxKey = function () {
	        if (this.right.isEmpty()) {
	            return this.key;
	        }
	        else {
	            return this.right.maxKey();
	        }
	    };
	    /**
	     *
	     * @param {!Object} key Key to insert.
	     * @param {!Object} value Value to insert.
	     * @param {Comparator} comparator Comparator.
	     * @return {!LLRBNode} New tree, with the key/value added.
	     */
	    LLRBNode.prototype.insert = function (key, value, comparator) {
	        var n = this;
	        var cmp = comparator(key, n.key);
	        if (cmp < 0) {
	            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);
	        }
	        else if (cmp === 0) {
	            n = n.copy(null, value, null, null, null);
	        }
	        else {
	            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));
	        }
	        return n.fixUp_();
	    };
	    /**
	     * @private
	     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.
	     */
	    LLRBNode.prototype.removeMin_ = function () {
	        if (this.left.isEmpty()) {
	            return SortedMap.EMPTY_NODE;
	        }
	        var n = this;
	        if (!n.left.isRed_() && !n.left.left.isRed_()) {
	            n = n.moveRedLeft_();
	        }
	        n = n.copy(null, null, null, n.left.removeMin_(), null);
	        return n.fixUp_();
	    };
	    /**
	     * @param {!Object} key The key of the item to remove.
	     * @param {Comparator} comparator Comparator.
	     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.
	     */
	    LLRBNode.prototype.remove = function (key, comparator) {
	        var n, smallest;
	        n = this;
	        if (comparator(key, n.key) < 0) {
	            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {
	                n = n.moveRedLeft_();
	            }
	            n = n.copy(null, null, null, n.left.remove(key, comparator), null);
	        }
	        else {
	            if (n.left.isRed_()) {
	                n = n.rotateRight_();
	            }
	            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {
	                n = n.moveRedRight_();
	            }
	            if (comparator(key, n.key) === 0) {
	                if (n.right.isEmpty()) {
	                    return SortedMap.EMPTY_NODE;
	                }
	                else {
	                    smallest = n.right.min_();
	                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());
	                }
	            }
	            n = n.copy(null, null, null, null, n.right.remove(key, comparator));
	        }
	        return n.fixUp_();
	    };
	    /**
	     * @private
	     * @return {boolean} Whether this is a RED node.
	     */
	    LLRBNode.prototype.isRed_ = function () {
	        return this.color;
	    };
	    /**
	     * @private
	     * @return {!LLRBNode} New tree after performing any needed rotations.
	     */
	    LLRBNode.prototype.fixUp_ = function () {
	        var n = this;
	        if (n.right.isRed_() && !n.left.isRed_()) {
	            n = n.rotateLeft_();
	        }
	        if (n.left.isRed_() && n.left.left.isRed_()) {
	            n = n.rotateRight_();
	        }
	        if (n.left.isRed_() && n.right.isRed_()) {
	            n = n.colorFlip_();
	        }
	        return n;
	    };
	    /**
	     * @private
	     * @return {!LLRBNode} New tree, after moveRedLeft.
	     */
	    LLRBNode.prototype.moveRedLeft_ = function () {
	        var n = this.colorFlip_();
	        if (n.right.left.isRed_()) {
	            n = n.copy(null, null, null, null, n.right.rotateRight_());
	            n = n.rotateLeft_();
	            n = n.colorFlip_();
	        }
	        return n;
	    };
	    /**
	     * @private
	     * @return {!LLRBNode} New tree, after moveRedRight.
	     */
	    LLRBNode.prototype.moveRedRight_ = function () {
	        var n = this.colorFlip_();
	        if (n.left.left.isRed_()) {
	            n = n.rotateRight_();
	            n = n.colorFlip_();
	        }
	        return n;
	    };
	    /**
	     * @private
	     * @return {!LLRBNode} New tree, after rotateLeft.
	     */
	    LLRBNode.prototype.rotateLeft_ = function () {
	        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);
	        return this.right.copy(null, null, this.color, nl, null);
	    };
	    /**
	     * @private
	     * @return {!LLRBNode} New tree, after rotateRight.
	     */
	    LLRBNode.prototype.rotateRight_ = function () {
	        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);
	        return this.left.copy(null, null, this.color, null, nr);
	    };
	    /**
	     * @private
	     * @return {!LLRBNode} New tree, after colorFlip.
	     */
	    LLRBNode.prototype.colorFlip_ = function () {
	        var left = this.left.copy(null, null, !this.left.color, null, null);
	        var right = this.right.copy(null, null, !this.right.color, null, null);
	        return this.copy(null, null, !this.color, left, right);
	    };
	    /**
	     * For testing.
	     *
	     * @private
	     * @return {boolean} True if all is well.
	     */
	    LLRBNode.prototype.checkMaxDepth_ = function () {
	        var blackDepth = this.check_();
	        return Math.pow(2.0, blackDepth) <= this.count() + 1;
	    };
	    /**
	     * @private
	     * @return {number} Not sure what this returns exactly. :-).
	     */
	    LLRBNode.prototype.check_ = function () {
	        if (this.isRed_() && this.left.isRed_()) {
	            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');
	        }
	        if (this.right.isRed_()) {
	            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');
	        }
	        var blackDepth = this.left.check_();
	        if (blackDepth !== this.right.check_()) {
	            throw new Error('Black depths differ');
	        }
	        else {
	            return blackDepth + (this.isRed_() ? 0 : 1);
	        }
	    };
	    LLRBNode.RED = true;
	    LLRBNode.BLACK = false;
	    return LLRBNode;
	}());
	/**
	 * Represents an empty node (a leaf node in the Red-Black Tree).
	 */
	var LLRBEmptyNode = /** @class */ (function () {
	    function LLRBEmptyNode() {
	    }
	    /**
	     * Returns a copy of the current node.
	     *
	     * @return {!LLRBEmptyNode} The node copy.
	     */
	    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {
	        return this;
	    };
	    /**
	     * Returns a copy of the tree, with the specified key/value added.
	     *
	     * @param {!K} key Key to be added.
	     * @param {!V} value Value to be added.
	     * @param {Comparator} comparator Comparator.
	     * @return {!LLRBNode} New tree, with item added.
	     */
	    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {
	        return new LLRBNode(key, value, null);
	    };
	    /**
	     * Returns a copy of the tree, with the specified key removed.
	     *
	     * @param {!K} key The key to remove.
	     * @param {Comparator} comparator Comparator.
	     * @return {!LLRBEmptyNode} New tree, with item removed.
	     */
	    LLRBEmptyNode.prototype.remove = function (key, comparator) {
	        return this;
	    };
	    /**
	     * @return {number} The total number of nodes in the tree.
	     */
	    LLRBEmptyNode.prototype.count = function () {
	        return 0;
	    };
	    /**
	     * @return {boolean} True if the tree is empty.
	     */
	    LLRBEmptyNode.prototype.isEmpty = function () {
	        return true;
	    };
	    /**
	     * Traverses the tree in key order and calls the specified action function
	     * for each node.
	     *
	     * @param {function(!K, !V):*} action Callback function to be called for each
	     * node.  If it returns true, traversal is aborted.
	     * @return {boolean} True if traversal was aborted.
	     */
	    LLRBEmptyNode.prototype.inorderTraversal = function (action) {
	        return false;
	    };
	    /**
	     * Traverses the tree in reverse key order and calls the specified action function
	     * for each node.
	     *
	     * @param {function(!K, !V)} action Callback function to be called for each
	     * node.  If it returns true, traversal is aborted.
	     * @return {boolean} True if traversal was aborted.
	     */
	    LLRBEmptyNode.prototype.reverseTraversal = function (action) {
	        return false;
	    };
	    /**
	     * @return {null}
	     */
	    LLRBEmptyNode.prototype.minKey = function () {
	        return null;
	    };
	    /**
	     * @return {null}
	     */
	    LLRBEmptyNode.prototype.maxKey = function () {
	        return null;
	    };
	    /**
	     * @private
	     * @return {number} Not sure what this returns exactly. :-).
	     */
	    LLRBEmptyNode.prototype.check_ = function () {
	        return 0;
	    };
	    /**
	     * @private
	     * @return {boolean} Whether this node is red.
	     */
	    LLRBEmptyNode.prototype.isRed_ = function () {
	        return false;
	    };
	    return LLRBEmptyNode;
	}());
	/**
	 * An immutable sorted map implementation, based on a Left-leaning Red-Black
	 * tree.
	 */
	var SortedMap = /** @class */ (function () {
	    /**
	     * @template K, V
	     * @param {function(K, K):number} comparator_ Key comparator.
	     * @param {LLRBNode=} root_ (Optional) Root node for the map.
	     */
	    function SortedMap(comparator_, root_) {
	        if (root_ === void 0) { root_ = SortedMap.EMPTY_NODE; }
	        this.comparator_ = comparator_;
	        this.root_ = root_;
	    }
	    /**
	     * Returns a copy of the map, with the specified key/value added or replaced.
	     * (TODO: We should perhaps rename this method to 'put')
	     *
	     * @param {!K} key Key to be added.
	     * @param {!V} value Value to be added.
	     * @return {!SortedMap.<K, V>} New map, with item added.
	     */
	    SortedMap.prototype.insert = function (key, value) {
	        return new SortedMap(this.comparator_, this.root_
	            .insert(key, value, this.comparator_)
	            .copy(null, null, LLRBNode.BLACK, null, null));
	    };
	    /**
	     * Returns a copy of the map, with the specified key removed.
	     *
	     * @param {!K} key The key to remove.
	     * @return {!SortedMap.<K, V>} New map, with item removed.
	     */
	    SortedMap.prototype.remove = function (key) {
	        return new SortedMap(this.comparator_, this.root_
	            .remove(key, this.comparator_)
	            .copy(null, null, LLRBNode.BLACK, null, null));
	    };
	    /**
	     * Returns the value of the node with the given key, or null.
	     *
	     * @param {!K} key The key to look up.
	     * @return {?V} The value of the node with the given key, or null if the
	     * key doesn't exist.
	     */
	    SortedMap.prototype.get = function (key) {
	        var cmp;
	        var node = this.root_;
	        while (!node.isEmpty()) {
	            cmp = this.comparator_(key, node.key);
	            if (cmp === 0) {
	                return node.value;
	            }
	            else if (cmp < 0) {
	                node = node.left;
	            }
	            else if (cmp > 0) {
	                node = node.right;
	            }
	        }
	        return null;
	    };
	    /**
	     * Returns the key of the item *before* the specified key, or null if key is the first item.
	     * @param {K} key The key to find the predecessor of
	     * @return {?K} The predecessor key.
	     */
	    SortedMap.prototype.getPredecessorKey = function (key) {
	        var cmp, node = this.root_, rightParent = null;
	        while (!node.isEmpty()) {
	            cmp = this.comparator_(key, node.key);
	            if (cmp === 0) {
	                if (!node.left.isEmpty()) {
	                    node = node.left;
	                    while (!node.right.isEmpty()) {
	                        node = node.right;
	                    }
	                    return node.key;
	                }
	                else if (rightParent) {
	                    return rightParent.key;
	                }
	                else {
	                    return null; // first item.
	                }
	            }
	            else if (cmp < 0) {
	                node = node.left;
	            }
	            else if (cmp > 0) {
	                rightParent = node;
	                node = node.right;
	            }
	        }
	        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');
	    };
	    /**
	     * @return {boolean} True if the map is empty.
	     */
	    SortedMap.prototype.isEmpty = function () {
	        return this.root_.isEmpty();
	    };
	    /**
	     * @return {number} The total number of nodes in the map.
	     */
	    SortedMap.prototype.count = function () {
	        return this.root_.count();
	    };
	    /**
	     * @return {?K} The minimum key in the map.
	     */
	    SortedMap.prototype.minKey = function () {
	        return this.root_.minKey();
	    };
	    /**
	     * @return {?K} The maximum key in the map.
	     */
	    SortedMap.prototype.maxKey = function () {
	        return this.root_.maxKey();
	    };
	    /**
	     * Traverses the map in key order and calls the specified action function
	     * for each key/value pair.
	     *
	     * @param {function(!K, !V):*} action Callback function to be called
	     * for each key/value pair.  If action returns true, traversal is aborted.
	     * @return {*} The first truthy value returned by action, or the last falsey
	     *   value returned by action
	     */
	    SortedMap.prototype.inorderTraversal = function (action) {
	        return this.root_.inorderTraversal(action);
	    };
	    /**
	     * Traverses the map in reverse key order and calls the specified action function
	     * for each key/value pair.
	     *
	     * @param {function(!Object, !Object)} action Callback function to be called
	     * for each key/value pair.  If action returns true, traversal is aborted.
	     * @return {*} True if the traversal was aborted.
	     */
	    SortedMap.prototype.reverseTraversal = function (action) {
	        return this.root_.reverseTraversal(action);
	    };
	    /**
	     * Returns an iterator over the SortedMap.
	     * @template T
	     * @param {(function(K, V):T)=} resultGenerator
	     * @return {SortedMapIterator.<K, V, T>} The iterator.
	     */
	    SortedMap.prototype.getIterator = function (resultGenerator) {
	        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);
	    };
	    SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {
	        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);
	    };
	    SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {
	        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);
	    };
	    SortedMap.prototype.getReverseIterator = function (resultGenerator) {
	        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);
	    };
	    /**
	     * Always use the same empty node, to reduce memory.
	     * @const
	     */
	    SortedMap.EMPTY_NODE = new LLRBEmptyNode();
	    return SortedMap;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var LOG_2 = Math.log(2);
	/**
	 * @constructor
	 */
	var Base12Num = /** @class */ (function () {
	    /**
	     * @param {number} length
	     */
	    function Base12Num(length) {
	        var logBase2 = function (num) {
	            // eslint-disable-next-line @typescript-eslint/no-explicit-any
	            return parseInt((Math.log(num) / LOG_2), 10);
	        };
	        var bitMask = function (bits) { return parseInt(Array(bits + 1).join('1'), 2); };
	        this.count = logBase2(length + 1);
	        this.current_ = this.count - 1;
	        var mask = bitMask(this.count);
	        this.bits_ = (length + 1) & mask;
	    }
	    /**
	     * @return {boolean}
	     */
	    Base12Num.prototype.nextBitIsOne = function () {
	        //noinspection JSBitwiseOperatorUsage
	        var result = !(this.bits_ & (0x1 << this.current_));
	        this.current_--;
	        return result;
	    };
	    return Base12Num;
	}());
	/**
	 * Takes a list of child nodes and constructs a SortedSet using the given comparison
	 * function
	 *
	 * Uses the algorithm described in the paper linked here:
	 * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458
	 *
	 * @template K, V
	 * @param {Array.<!NamedNode>} childList Unsorted list of children
	 * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used
	 * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's
	 *                                                        type is not NamedNode
	 * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map
	 * @return {SortedMap.<K, V>}
	 */
	var buildChildSet = function (childList, cmp, keyFn, mapSortFn) {
	    childList.sort(cmp);
	    var buildBalancedTree = function (low, high) {
	        var length = high - low;
	        var namedNode;
	        var key;
	        if (length === 0) {
	            return null;
	        }
	        else if (length === 1) {
	            namedNode = childList[low];
	            key = keyFn ? keyFn(namedNode) : namedNode;
	            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);
	        }
	        else {
	            // eslint-disable-next-line @typescript-eslint/no-explicit-any
	            var middle = parseInt((length / 2), 10) + low;
	            var left = buildBalancedTree(low, middle);
	            var right = buildBalancedTree(middle + 1, high);
	            namedNode = childList[middle];
	            key = keyFn ? keyFn(namedNode) : namedNode;
	            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);
	        }
	    };
	    var buildFrom12Array = function (base12) {
	        var node = null;
	        var root = null;
	        var index = childList.length;
	        var buildPennant = function (chunkSize, color) {
	            var low = index - chunkSize;
	            var high = index;
	            index -= chunkSize;
	            var childTree = buildBalancedTree(low + 1, high);
	            var namedNode = childList[low];
	            var key = keyFn ? keyFn(namedNode) : namedNode;
	            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));
	        };
	        var attachPennant = function (pennant) {
	            if (node) {
	                node.left = pennant;
	                node = pennant;
	            }
	            else {
	                root = pennant;
	                node = pennant;
	            }
	        };
	        for (var i = 0; i < base12.count; ++i) {
	            var isOne = base12.nextBitIsOne();
	            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))
	            var chunkSize = Math.pow(2, base12.count - (i + 1));
	            if (isOne) {
	                buildPennant(chunkSize, LLRBNode.BLACK);
	            }
	            else {
	                // current == 2
	                buildPennant(chunkSize, LLRBNode.BLACK);
	                buildPennant(chunkSize, LLRBNode.RED);
	            }
	        }
	        return root;
	    };
	    var base12 = new Base12Num(childList.length);
	    var root = buildFrom12Array(base12);
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    return new SortedMap(mapSortFn || cmp, root);
	};

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var _defaultIndexMap;
	var fallbackObject = {};
	var IndexMap = /** @class */ (function () {
	    function IndexMap(indexes_, indexSet_) {
	        this.indexes_ = indexes_;
	        this.indexSet_ = indexSet_;
	    }
	    Object.defineProperty(IndexMap, "Default", {
	        /**
	         * The default IndexMap for nodes without a priority
	         */
	        get: function () {
	            index_cjs.assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');
	            _defaultIndexMap =
	                _defaultIndexMap ||
	                    new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });
	            return _defaultIndexMap;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    IndexMap.prototype.get = function (indexKey) {
	        var sortedMap = index_cjs.safeGet(this.indexes_, indexKey);
	        if (!sortedMap) {
	            throw new Error('No index defined for ' + indexKey);
	        }
	        if (sortedMap instanceof SortedMap) {
	            return sortedMap;
	        }
	        else {
	            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the
	            // regular child map
	            return null;
	        }
	    };
	    IndexMap.prototype.hasIndex = function (indexDefinition) {
	        return index_cjs.contains(this.indexSet_, indexDefinition.toString());
	    };
	    IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {
	        index_cjs.assert(indexDefinition !== KEY_INDEX, "KeyIndex always exists and isn't meant to be added to the IndexMap.");
	        var childList = [];
	        var sawIndexedValue = false;
	        var iter = existingChildren.getIterator(NamedNode.Wrap);
	        var next = iter.getNext();
	        while (next) {
	            sawIndexedValue =
	                sawIndexedValue || indexDefinition.isDefinedOn(next.node);
	            childList.push(next);
	            next = iter.getNext();
	        }
	        var newIndex;
	        if (sawIndexedValue) {
	            newIndex = buildChildSet(childList, indexDefinition.getCompare());
	        }
	        else {
	            newIndex = fallbackObject;
	        }
	        var indexName = indexDefinition.toString();
	        var newIndexSet = tslib.__assign({}, this.indexSet_);
	        newIndexSet[indexName] = indexDefinition;
	        var newIndexes = tslib.__assign({}, this.indexes_);
	        newIndexes[indexName] = newIndex;
	        return new IndexMap(newIndexes, newIndexSet);
	    };
	    /**
	     * Ensure that this node is properly tracked in any indexes that we're maintaining
	     */
	    IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {
	        var _this = this;
	        var newIndexes = index_cjs.map(this.indexes_, function (indexedChildren, indexName) {
	            var index = index_cjs.safeGet(_this.indexSet_, indexName);
	            index_cjs.assert(index, 'Missing index implementation for ' + indexName);
	            if (indexedChildren === fallbackObject) {
	                // Check to see if we need to index everything
	                if (index.isDefinedOn(namedNode.node)) {
	                    // We need to build this index
	                    var childList = [];
	                    var iter = existingChildren.getIterator(NamedNode.Wrap);
	                    var next = iter.getNext();
	                    while (next) {
	                        if (next.name !== namedNode.name) {
	                            childList.push(next);
	                        }
	                        next = iter.getNext();
	                    }
	                    childList.push(namedNode);
	                    return buildChildSet(childList, index.getCompare());
	                }
	                else {
	                    // No change, this remains a fallback
	                    return fallbackObject;
	                }
	            }
	            else {
	                var existingSnap = existingChildren.get(namedNode.name);
	                var newChildren = indexedChildren;
	                if (existingSnap) {
	                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));
	                }
	                return newChildren.insert(namedNode, namedNode.node);
	            }
	        });
	        return new IndexMap(newIndexes, this.indexSet_);
	    };
	    /**
	     * Create a new IndexMap instance with the given value removed
	     */
	    IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {
	        var newIndexes = index_cjs.map(this.indexes_, function (indexedChildren) {
	            if (indexedChildren === fallbackObject) {
	                // This is the fallback. Just return it, nothing to do in this case
	                return indexedChildren;
	            }
	            else {
	                var existingSnap = existingChildren.get(namedNode.name);
	                if (existingSnap) {
	                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));
	                }
	                else {
	                    // No record of this child
	                    return indexedChildren;
	                }
	            }
	        });
	        return new IndexMap(newIndexes, this.indexSet_);
	    };
	    return IndexMap;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function NAME_ONLY_COMPARATOR(left, right) {
	    return nameCompare(left.name, right.name);
	}
	function NAME_COMPARATOR(left, right) {
	    return nameCompare(left, right);
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// TODO: For memory savings, don't store priorityNode_ if it's empty.
	var EMPTY_NODE;
	/**
	 * ChildrenNode is a class for storing internal nodes in a DataSnapshot
	 * (i.e. nodes with children).  It implements Node and stores the
	 * list of children in the children property, sorted by child name.
	 *
	 * @constructor
	 * @implements {Node}
	 */
	var ChildrenNode = /** @class */ (function () {
	    /**
	     *
	     * @param {!SortedMap.<string, !Node>} children_ List of children
	     * of this node..
	     * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).
	     * @param {!IndexMap} indexMap_
	     */
	    function ChildrenNode(children_, priorityNode_, indexMap_) {
	        this.children_ = children_;
	        this.priorityNode_ = priorityNode_;
	        this.indexMap_ = indexMap_;
	        this.lazyHash_ = null;
	        /**
	         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use
	         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own
	         * class instead of an empty ChildrenNode.
	         */
	        if (this.priorityNode_) {
	            validatePriorityNode(this.priorityNode_);
	        }
	        if (this.children_.isEmpty()) {
	            index_cjs.assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');
	        }
	    }
	    Object.defineProperty(ChildrenNode, "EMPTY_NODE", {
	        get: function () {
	            return (EMPTY_NODE ||
	                (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /** @inheritDoc */
	    ChildrenNode.prototype.isLeafNode = function () {
	        return false;
	    };
	    /** @inheritDoc */
	    ChildrenNode.prototype.getPriority = function () {
	        return this.priorityNode_ || EMPTY_NODE;
	    };
	    /** @inheritDoc */
	    ChildrenNode.prototype.updatePriority = function (newPriorityNode) {
	        if (this.children_.isEmpty()) {
	            // Don't allow priorities on empty nodes
	            return this;
	        }
	        else {
	            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);
	        }
	    };
	    /** @inheritDoc */
	    ChildrenNode.prototype.getImmediateChild = function (childName) {
	        // Hack to treat priority as a regular child
	        if (childName === '.priority') {
	            return this.getPriority();
	        }
	        else {
	            var child = this.children_.get(childName);
	            return child === null ? EMPTY_NODE : child;
	        }
	    };
	    /** @inheritDoc */
	    ChildrenNode.prototype.getChild = function (path) {
	        var front = path.getFront();
	        if (front === null) {
	            return this;
	        }
	        return this.getImmediateChild(front).getChild(path.popFront());
	    };
	    /** @inheritDoc */
	    ChildrenNode.prototype.hasChild = function (childName) {
	        return this.children_.get(childName) !== null;
	    };
	    /** @inheritDoc */
	    ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {
	        index_cjs.assert(newChildNode, 'We should always be passing snapshot nodes');
	        if (childName === '.priority') {
	            return this.updatePriority(newChildNode);
	        }
	        else {
	            var namedNode = new NamedNode(childName, newChildNode);
	            var newChildren = void 0, newIndexMap = void 0;
	            if (newChildNode.isEmpty()) {
	                newChildren = this.children_.remove(childName);
	                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);
	            }
	            else {
	                newChildren = this.children_.insert(childName, newChildNode);
	                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);
	            }
	            var newPriority = newChildren.isEmpty()
	                ? EMPTY_NODE
	                : this.priorityNode_;
	            return new ChildrenNode(newChildren, newPriority, newIndexMap);
	        }
	    };
	    /** @inheritDoc */
	    ChildrenNode.prototype.updateChild = function (path, newChildNode) {
	        var front = path.getFront();
	        if (front === null) {
	            return newChildNode;
	        }
	        else {
	            index_cjs.assert(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');
	            var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);
	            return this.updateImmediateChild(front, newImmediateChild);
	        }
	    };
	    /** @inheritDoc */
	    ChildrenNode.prototype.isEmpty = function () {
	        return this.children_.isEmpty();
	    };
	    /** @inheritDoc */
	    ChildrenNode.prototype.numChildren = function () {
	        return this.children_.count();
	    };
	    /** @inheritDoc */
	    ChildrenNode.prototype.val = function (exportFormat) {
	        if (this.isEmpty()) {
	            return null;
	        }
	        var obj = {};
	        var numKeys = 0, maxKey = 0, allIntegerKeys = true;
	        this.forEachChild(PRIORITY_INDEX, function (key, childNode) {
	            obj[key] = childNode.val(exportFormat);
	            numKeys++;
	            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {
	                maxKey = Math.max(maxKey, Number(key));
	            }
	            else {
	                allIntegerKeys = false;
	            }
	        });
	        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {
	            // convert to array.
	            var array = [];
	            // eslint-disable-next-line guard-for-in
	            for (var key in obj) {
	                array[key] = obj[key];
	            }
	            return array;
	        }
	        else {
	            if (exportFormat && !this.getPriority().isEmpty()) {
	                obj['.priority'] = this.getPriority().val();
	            }
	            return obj;
	        }
	    };
	    /** @inheritDoc */
	    ChildrenNode.prototype.hash = function () {
	        if (this.lazyHash_ === null) {
	            var toHash_1 = '';
	            if (!this.getPriority().isEmpty()) {
	                toHash_1 +=
	                    'priority:' +
	                        priorityHashText(this.getPriority().val()) +
	                        ':';
	            }
	            this.forEachChild(PRIORITY_INDEX, function (key, childNode) {
	                var childHash = childNode.hash();
	                if (childHash !== '') {
	                    toHash_1 += ':' + key + ':' + childHash;
	                }
	            });
	            this.lazyHash_ = toHash_1 === '' ? '' : sha1(toHash_1);
	        }
	        return this.lazyHash_;
	    };
	    /** @inheritDoc */
	    ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {
	        var idx = this.resolveIndex_(index);
	        if (idx) {
	            var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));
	            return predecessor ? predecessor.name : null;
	        }
	        else {
	            return this.children_.getPredecessorKey(childName);
	        }
	    };
	    /**
	     * @param {!Index} indexDefinition
	     * @return {?string}
	     */
	    ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {
	        var idx = this.resolveIndex_(indexDefinition);
	        if (idx) {
	            var minKey = idx.minKey();
	            return minKey && minKey.name;
	        }
	        else {
	            return this.children_.minKey();
	        }
	    };
	    /**
	     * @param {!Index} indexDefinition
	     * @return {?NamedNode}
	     */
	    ChildrenNode.prototype.getFirstChild = function (indexDefinition) {
	        var minKey = this.getFirstChildName(indexDefinition);
	        if (minKey) {
	            return new NamedNode(minKey, this.children_.get(minKey));
	        }
	        else {
	            return null;
	        }
	    };
	    /**
	     * Given an index, return the key name of the largest value we have, according to that index
	     * @param {!Index} indexDefinition
	     * @return {?string}
	     */
	    ChildrenNode.prototype.getLastChildName = function (indexDefinition) {
	        var idx = this.resolveIndex_(indexDefinition);
	        if (idx) {
	            var maxKey = idx.maxKey();
	            return maxKey && maxKey.name;
	        }
	        else {
	            return this.children_.maxKey();
	        }
	    };
	    /**
	     * @param {!Index} indexDefinition
	     * @return {?NamedNode}
	     */
	    ChildrenNode.prototype.getLastChild = function (indexDefinition) {
	        var maxKey = this.getLastChildName(indexDefinition);
	        if (maxKey) {
	            return new NamedNode(maxKey, this.children_.get(maxKey));
	        }
	        else {
	            return null;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    ChildrenNode.prototype.forEachChild = function (index, action) {
	        var idx = this.resolveIndex_(index);
	        if (idx) {
	            return idx.inorderTraversal(function (wrappedNode) {
	                return action(wrappedNode.name, wrappedNode.node);
	            });
	        }
	        else {
	            return this.children_.inorderTraversal(action);
	        }
	    };
	    /**
	     * @param {!Index} indexDefinition
	     * @return {SortedMapIterator}
	     */
	    ChildrenNode.prototype.getIterator = function (indexDefinition) {
	        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);
	    };
	    /**
	     *
	     * @param {!NamedNode} startPost
	     * @param {!Index} indexDefinition
	     * @return {!SortedMapIterator}
	     */
	    ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {
	        var idx = this.resolveIndex_(indexDefinition);
	        if (idx) {
	            return idx.getIteratorFrom(startPost, function (key) { return key; });
	        }
	        else {
	            var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);
	            var next = iterator.peek();
	            while (next != null && indexDefinition.compare(next, startPost) < 0) {
	                iterator.getNext();
	                next = iterator.peek();
	            }
	            return iterator;
	        }
	    };
	    /**
	     * @param {!Index} indexDefinition
	     * @return {!SortedMapIterator}
	     */
	    ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {
	        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);
	    };
	    /**
	     * @param {!NamedNode} endPost
	     * @param {!Index} indexDefinition
	     * @return {!SortedMapIterator}
	     */
	    ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {
	        var idx = this.resolveIndex_(indexDefinition);
	        if (idx) {
	            return idx.getReverseIteratorFrom(endPost, function (key) {
	                return key;
	            });
	        }
	        else {
	            var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);
	            var next = iterator.peek();
	            while (next != null && indexDefinition.compare(next, endPost) > 0) {
	                iterator.getNext();
	                next = iterator.peek();
	            }
	            return iterator;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    ChildrenNode.prototype.compareTo = function (other) {
	        if (this.isEmpty()) {
	            if (other.isEmpty()) {
	                return 0;
	            }
	            else {
	                return -1;
	            }
	        }
	        else if (other.isLeafNode() || other.isEmpty()) {
	            return 1;
	        }
	        else if (other === MAX_NODE$2) {
	            return -1;
	        }
	        else {
	            // Must be another node with children.
	            return 0;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    ChildrenNode.prototype.withIndex = function (indexDefinition) {
	        if (indexDefinition === KEY_INDEX ||
	            this.indexMap_.hasIndex(indexDefinition)) {
	            return this;
	        }
	        else {
	            var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);
	            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    ChildrenNode.prototype.isIndexed = function (index) {
	        return index === KEY_INDEX || this.indexMap_.hasIndex(index);
	    };
	    /**
	     * @inheritDoc
	     */
	    ChildrenNode.prototype.equals = function (other) {
	        if (other === this) {
	            return true;
	        }
	        else if (other.isLeafNode()) {
	            return false;
	        }
	        else {
	            var otherChildrenNode = other;
	            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {
	                return false;
	            }
	            else if (this.children_.count() === otherChildrenNode.children_.count()) {
	                var thisIter = this.getIterator(PRIORITY_INDEX);
	                var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);
	                var thisCurrent = thisIter.getNext();
	                var otherCurrent = otherIter.getNext();
	                while (thisCurrent && otherCurrent) {
	                    if (thisCurrent.name !== otherCurrent.name ||
	                        !thisCurrent.node.equals(otherCurrent.node)) {
	                        return false;
	                    }
	                    thisCurrent = thisIter.getNext();
	                    otherCurrent = otherIter.getNext();
	                }
	                return thisCurrent === null && otherCurrent === null;
	            }
	            else {
	                return false;
	            }
	        }
	    };
	    /**
	     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used
	     * instead.
	     *
	     * @private
	     * @param {!Index} indexDefinition
	     * @return {?SortedMap.<NamedNode, Node>}
	     */
	    ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {
	        if (indexDefinition === KEY_INDEX) {
	            return null;
	        }
	        else {
	            return this.indexMap_.get(indexDefinition.toString());
	        }
	    };
	    /**
	     * @private
	     * @type {RegExp}
	     */
	    ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\d*)$/;
	    return ChildrenNode;
	}());
	/**
	 * @constructor
	 * @extends {ChildrenNode}
	 * @private
	 */
	var MaxNode = /** @class */ (function (_super) {
	    tslib.__extends(MaxNode, _super);
	    function MaxNode() {
	        return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;
	    }
	    MaxNode.prototype.compareTo = function (other) {
	        if (other === this) {
	            return 0;
	        }
	        else {
	            return 1;
	        }
	    };
	    MaxNode.prototype.equals = function (other) {
	        // Not that we every compare it, but MAX_NODE is only ever equal to itself
	        return other === this;
	    };
	    MaxNode.prototype.getPriority = function () {
	        return this;
	    };
	    MaxNode.prototype.getImmediateChild = function (childName) {
	        return ChildrenNode.EMPTY_NODE;
	    };
	    MaxNode.prototype.isEmpty = function () {
	        return false;
	    };
	    return MaxNode;
	}(ChildrenNode));
	/**
	 * Marker that will sort higher than any other snapshot.
	 * @type {!MAX_NODE}
	 * @const
	 */
	var MAX_NODE$2 = new MaxNode();
	Object.defineProperties(NamedNode, {
	    MIN: {
	        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)
	    },
	    MAX: {
	        value: new NamedNode(MAX_NAME, MAX_NODE$2)
	    }
	});
	/**
	 * Reference Extensions
	 */
	KeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;
	LeafNode.__childrenNodeConstructor = ChildrenNode;
	setMaxNode(MAX_NODE$2);
	setMaxNode$1(MAX_NODE$2);

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var USE_HINZE = true;
	/**
	 * Constructs a snapshot node representing the passed JSON and returns it.
	 * @param {*} json JSON to create a node for.
	 * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the
	 * passed JSON contains a .priority property.
	 * @return {!Node}
	 */
	function nodeFromJSON$1(json, priority) {
	    if (priority === void 0) { priority = null; }
	    if (json === null) {
	        return ChildrenNode.EMPTY_NODE;
	    }
	    if (typeof json === 'object' && '.priority' in json) {
	        priority = json['.priority'];
	    }
	    index_cjs.assert(priority === null ||
	        typeof priority === 'string' ||
	        typeof priority === 'number' ||
	        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);
	    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {
	        json = json['.value'];
	    }
	    // Valid leaf nodes include non-objects or server-value wrapper objects
	    if (typeof json !== 'object' || '.sv' in json) {
	        var jsonLeaf = json;
	        return new LeafNode(jsonLeaf, nodeFromJSON$1(priority));
	    }
	    if (!(json instanceof Array) && USE_HINZE) {
	        var children_1 = [];
	        var childrenHavePriority_1 = false;
	        var hinzeJsonObj = json;
	        each(hinzeJsonObj, function (key, child) {
	            if (key.substring(0, 1) !== '.') {
	                // Ignore metadata nodes
	                var childNode = nodeFromJSON$1(child);
	                if (!childNode.isEmpty()) {
	                    childrenHavePriority_1 =
	                        childrenHavePriority_1 || !childNode.getPriority().isEmpty();
	                    children_1.push(new NamedNode(key, childNode));
	                }
	            }
	        });
	        if (children_1.length === 0) {
	            return ChildrenNode.EMPTY_NODE;
	        }
	        var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) { return namedNode.name; }, NAME_COMPARATOR);
	        if (childrenHavePriority_1) {
	            var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());
	            return new ChildrenNode(childSet, nodeFromJSON$1(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));
	        }
	        else {
	            return new ChildrenNode(childSet, nodeFromJSON$1(priority), IndexMap.Default);
	        }
	    }
	    else {
	        var node_1 = ChildrenNode.EMPTY_NODE;
	        each(json, function (key, childData) {
	            if (index_cjs.contains(json, key)) {
	                if (key.substring(0, 1) !== '.') {
	                    // ignore metadata nodes.
	                    var childNode = nodeFromJSON$1(childData);
	                    if (childNode.isLeafNode() || !childNode.isEmpty()) {
	                        node_1 = node_1.updateImmediateChild(key, childNode);
	                    }
	                }
	            }
	        });
	        return node_1.updatePriority(nodeFromJSON$1(priority));
	    }
	}
	setNodeFromJSON(nodeFromJSON$1);

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @constructor
	 * @extends {Index}
	 * @private
	 */
	var ValueIndex = /** @class */ (function (_super) {
	    tslib.__extends(ValueIndex, _super);
	    function ValueIndex() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @inheritDoc
	     */
	    ValueIndex.prototype.compare = function (a, b) {
	        var indexCmp = a.node.compareTo(b.node);
	        if (indexCmp === 0) {
	            return nameCompare(a.name, b.name);
	        }
	        else {
	            return indexCmp;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    ValueIndex.prototype.isDefinedOn = function (node) {
	        return true;
	    };
	    /**
	     * @inheritDoc
	     */
	    ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
	        return !oldNode.equals(newNode);
	    };
	    /**
	     * @inheritDoc
	     */
	    ValueIndex.prototype.minPost = function () {
	        // eslint-disable-next-line @typescript-eslint/no-explicit-any
	        return NamedNode.MIN;
	    };
	    /**
	     * @inheritDoc
	     */
	    ValueIndex.prototype.maxPost = function () {
	        // eslint-disable-next-line @typescript-eslint/no-explicit-any
	        return NamedNode.MAX;
	    };
	    /**
	     * @param {*} indexValue
	     * @param {string} name
	     * @return {!NamedNode}
	     */
	    ValueIndex.prototype.makePost = function (indexValue, name) {
	        var valueNode = nodeFromJSON$1(indexValue);
	        return new NamedNode(name, valueNode);
	    };
	    /**
	     * @return {!string} String representation for inclusion in a query spec
	     */
	    ValueIndex.prototype.toString = function () {
	        return '.value';
	    };
	    return ValueIndex;
	}(Index));
	var VALUE_INDEX = new ValueIndex();

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @param {!Path} indexPath
	 * @constructor
	 * @extends {Index}
	 */
	var PathIndex = /** @class */ (function (_super) {
	    tslib.__extends(PathIndex, _super);
	    function PathIndex(indexPath_) {
	        var _this = _super.call(this) || this;
	        _this.indexPath_ = indexPath_;
	        index_cjs.assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', "Can't create PathIndex with empty path or .priority key");
	        return _this;
	    }
	    /**
	     * @param {!Node} snap
	     * @return {!Node}
	     * @protected
	     */
	    PathIndex.prototype.extractChild = function (snap) {
	        return snap.getChild(this.indexPath_);
	    };
	    /**
	     * @inheritDoc
	     */
	    PathIndex.prototype.isDefinedOn = function (node) {
	        return !node.getChild(this.indexPath_).isEmpty();
	    };
	    /**
	     * @inheritDoc
	     */
	    PathIndex.prototype.compare = function (a, b) {
	        var aChild = this.extractChild(a.node);
	        var bChild = this.extractChild(b.node);
	        var indexCmp = aChild.compareTo(bChild);
	        if (indexCmp === 0) {
	            return nameCompare(a.name, b.name);
	        }
	        else {
	            return indexCmp;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    PathIndex.prototype.makePost = function (indexValue, name) {
	        var valueNode = nodeFromJSON$1(indexValue);
	        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);
	        return new NamedNode(name, node);
	    };
	    /**
	     * @inheritDoc
	     */
	    PathIndex.prototype.maxPost = function () {
	        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE$2);
	        return new NamedNode(MAX_NAME, node);
	    };
	    /**
	     * @inheritDoc
	     */
	    PathIndex.prototype.toString = function () {
	        return this.indexPath_.slice().join('/');
	    };
	    return PathIndex;
	}(Index));

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Class representing a firebase data snapshot.  It wraps a SnapshotNode and
	 * surfaces the public methods (val, forEach, etc.) we want to expose.
	 */
	var DataSnapshot = /** @class */ (function () {
	    /**
	     * @param {!Node} node_ A SnapshotNode to wrap.
	     * @param {!Reference} ref_ The ref of the location this snapshot came from.
	     * @param {!Index} index_ The iteration order for this snapshot
	     */
	    function DataSnapshot(node_, ref_, index_) {
	        this.node_ = node_;
	        this.ref_ = ref_;
	        this.index_ = index_;
	    }
	    /**
	     * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is
	     * empty.
	     *
	     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.
	     */
	    DataSnapshot.prototype.val = function () {
	        index_cjs.validateArgCount('DataSnapshot.val', 0, 0, arguments.length);
	        return this.node_.val();
	    };
	    /**
	     * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting
	     * the entire node contents.
	     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.
	     */
	    DataSnapshot.prototype.exportVal = function () {
	        index_cjs.validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);
	        return this.node_.val(true);
	    };
	    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
	    // for end-users
	    DataSnapshot.prototype.toJSON = function () {
	        // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content
	        index_cjs.validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);
	        return this.exportVal();
	    };
	    /**
	     * Returns whether the snapshot contains a non-null value.
	     *
	     * @return {boolean} Whether the snapshot contains a non-null value, or is empty.
	     */
	    DataSnapshot.prototype.exists = function () {
	        index_cjs.validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);
	        return !this.node_.isEmpty();
	    };
	    /**
	     * Returns a DataSnapshot of the specified child node's contents.
	     *
	     * @param {!string} childPathString Path to a child.
	     * @return {!DataSnapshot} DataSnapshot for child node.
	     */
	    DataSnapshot.prototype.child = function (childPathString) {
	        index_cjs.validateArgCount('DataSnapshot.child', 0, 1, arguments.length);
	        // Ensure the childPath is a string (can be a number)
	        childPathString = String(childPathString);
	        validatePathString('DataSnapshot.child', 1, childPathString, false);
	        var childPath = new Path(childPathString);
	        var childRef = this.ref_.child(childPath);
	        return new DataSnapshot(this.node_.getChild(childPath), childRef, PRIORITY_INDEX);
	    };
	    /**
	     * Returns whether the snapshot contains a child at the specified path.
	     *
	     * @param {!string} childPathString Path to a child.
	     * @return {boolean} Whether the child exists.
	     */
	    DataSnapshot.prototype.hasChild = function (childPathString) {
	        index_cjs.validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);
	        validatePathString('DataSnapshot.hasChild', 1, childPathString, false);
	        var childPath = new Path(childPathString);
	        return !this.node_.getChild(childPath).isEmpty();
	    };
	    /**
	     * Returns the priority of the object, or null if no priority was set.
	     *
	     * @return {string|number|null} The priority.
	     */
	    DataSnapshot.prototype.getPriority = function () {
	        index_cjs.validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);
	        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)
	        return this.node_.getPriority().val();
	    };
	    /**
	     * Iterates through child nodes and calls the specified action for each one.
	     *
	     * @param {function(!DataSnapshot)} action Callback function to be called
	     * for each child.
	     * @return {boolean} True if forEach was canceled by action returning true for
	     * one of the child nodes.
	     */
	    DataSnapshot.prototype.forEach = function (action) {
	        var _this = this;
	        index_cjs.validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);
	        index_cjs.validateCallback('DataSnapshot.forEach', 1, action, false);
	        if (this.node_.isLeafNode()) {
	            return false;
	        }
	        var childrenNode = this.node_;
	        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...
	        return !!childrenNode.forEachChild(this.index_, function (key, node) {
	            return action(new DataSnapshot(node, _this.ref_.child(key), PRIORITY_INDEX));
	        });
	    };
	    /**
	     * Returns whether this DataSnapshot has children.
	     * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.
	     */
	    DataSnapshot.prototype.hasChildren = function () {
	        index_cjs.validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);
	        if (this.node_.isLeafNode()) {
	            return false;
	        }
	        else {
	            return !this.node_.isEmpty();
	        }
	    };
	    Object.defineProperty(DataSnapshot.prototype, "key", {
	        get: function () {
	            return this.ref_.getKey();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * Returns the number of children for this DataSnapshot.
	     * @return {number} The number of children that this DataSnapshot contains.
	     */
	    DataSnapshot.prototype.numChildren = function () {
	        index_cjs.validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);
	        return this.node_.numChildren();
	    };
	    /**
	     * @return {Reference} The Firebase reference for the location this snapshot's data came from.
	     */
	    DataSnapshot.prototype.getRef = function () {
	        index_cjs.validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);
	        return this.ref_;
	    };
	    Object.defineProperty(DataSnapshot.prototype, "ref", {
	        get: function () {
	            return this.getRef();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    return DataSnapshot;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Encapsulates the data needed to raise an event
	 * @implements {Event}
	 */
	var DataEvent = /** @class */ (function () {
	    /**
	     * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed
	     * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided
	     * @param {!DataSnapshot} snapshot The data backing the event
	     * @param {?string=} prevName Optional, the name of the previous child for child_* events.
	     */
	    function DataEvent(eventType, eventRegistration, snapshot, prevName) {
	        this.eventType = eventType;
	        this.eventRegistration = eventRegistration;
	        this.snapshot = snapshot;
	        this.prevName = prevName;
	    }
	    /**
	     * @inheritDoc
	     */
	    DataEvent.prototype.getPath = function () {
	        var ref = this.snapshot.getRef();
	        if (this.eventType === 'value') {
	            return ref.path;
	        }
	        else {
	            return ref.getParent().path;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    DataEvent.prototype.getEventType = function () {
	        return this.eventType;
	    };
	    /**
	     * @inheritDoc
	     */
	    DataEvent.prototype.getEventRunner = function () {
	        return this.eventRegistration.getEventRunner(this);
	    };
	    /**
	     * @inheritDoc
	     */
	    DataEvent.prototype.toString = function () {
	        return (this.getPath().toString() +
	            ':' +
	            this.eventType +
	            ':' +
	            index_cjs.stringify(this.snapshot.exportVal()));
	    };
	    return DataEvent;
	}());
	var CancelEvent = /** @class */ (function () {
	    /**
	     * @param {EventRegistration} eventRegistration
	     * @param {Error} error
	     * @param {!Path} path
	     */
	    function CancelEvent(eventRegistration, error, path) {
	        this.eventRegistration = eventRegistration;
	        this.error = error;
	        this.path = path;
	    }
	    /**
	     * @inheritDoc
	     */
	    CancelEvent.prototype.getPath = function () {
	        return this.path;
	    };
	    /**
	     * @inheritDoc
	     */
	    CancelEvent.prototype.getEventType = function () {
	        return 'cancel';
	    };
	    /**
	     * @inheritDoc
	     */
	    CancelEvent.prototype.getEventRunner = function () {
	        return this.eventRegistration.getEventRunner(this);
	    };
	    /**
	     * @inheritDoc
	     */
	    CancelEvent.prototype.toString = function () {
	        return this.path.toString() + ':cancel';
	    };
	    return CancelEvent;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Represents registration for 'value' events.
	 */
	var ValueEventRegistration = /** @class */ (function () {
	    /**
	     * @param {?function(!DataSnapshot)} callback_
	     * @param {?function(Error)} cancelCallback_
	     * @param {?Object} context_
	     */
	    function ValueEventRegistration(callback_, cancelCallback_, context_) {
	        this.callback_ = callback_;
	        this.cancelCallback_ = cancelCallback_;
	        this.context_ = context_;
	    }
	    /**
	     * @inheritDoc
	     */
	    ValueEventRegistration.prototype.respondsTo = function (eventType) {
	        return eventType === 'value';
	    };
	    /**
	     * @inheritDoc
	     */
	    ValueEventRegistration.prototype.createEvent = function (change, query) {
	        var index = query.getQueryParams().getIndex();
	        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, query.getRef(), index));
	    };
	    /**
	     * @inheritDoc
	     */
	    ValueEventRegistration.prototype.getEventRunner = function (eventData) {
	        var ctx = this.context_;
	        if (eventData.getEventType() === 'cancel') {
	            index_cjs.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');
	            var cancelCB_1 = this.cancelCallback_;
	            return function () {
	                // We know that error exists, we checked above that this is a cancel event
	                cancelCB_1.call(ctx, eventData.error);
	            };
	        }
	        else {
	            var cb_1 = this.callback_;
	            return function () {
	                cb_1.call(ctx, eventData.snapshot);
	            };
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    ValueEventRegistration.prototype.createCancelEvent = function (error, path) {
	        if (this.cancelCallback_) {
	            return new CancelEvent(this, error, path);
	        }
	        else {
	            return null;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    ValueEventRegistration.prototype.matches = function (other) {
	        if (!(other instanceof ValueEventRegistration)) {
	            return false;
	        }
	        else if (!other.callback_ || !this.callback_) {
	            // If no callback specified, we consider it to match any callback.
	            return true;
	        }
	        else {
	            return (other.callback_ === this.callback_ && other.context_ === this.context_);
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    ValueEventRegistration.prototype.hasAnyCallback = function () {
	        return this.callback_ !== null;
	    };
	    return ValueEventRegistration;
	}());
	/**
	 * Represents the registration of 1 or more child_xxx events.
	 *
	 * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you
	 * register a group of callbacks together in the future.
	 *
	 * @constructor
	 * @implements {EventRegistration}
	 */
	var ChildEventRegistration = /** @class */ (function () {
	    /**
	     * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_
	     * @param {?function(Error)} cancelCallback_
	     * @param {Object=} context_
	     */
	    function ChildEventRegistration(callbacks_, cancelCallback_, context_) {
	        this.callbacks_ = callbacks_;
	        this.cancelCallback_ = cancelCallback_;
	        this.context_ = context_;
	    }
	    /**
	     * @inheritDoc
	     */
	    ChildEventRegistration.prototype.respondsTo = function (eventType) {
	        var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;
	        eventToCheck =
	            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;
	        return index_cjs.contains(this.callbacks_, eventToCheck);
	    };
	    /**
	     * @inheritDoc
	     */
	    ChildEventRegistration.prototype.createCancelEvent = function (error, path) {
	        if (this.cancelCallback_) {
	            return new CancelEvent(this, error, path);
	        }
	        else {
	            return null;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    ChildEventRegistration.prototype.createEvent = function (change, query) {
	        index_cjs.assert(change.childName != null, 'Child events should have a childName.');
	        var ref = query.getRef().child(/** @type {!string} */ change.childName);
	        var index = query.getQueryParams().getIndex();
	        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, ref, index), change.prevName);
	    };
	    /**
	     * @inheritDoc
	     */
	    ChildEventRegistration.prototype.getEventRunner = function (eventData) {
	        var ctx = this.context_;
	        if (eventData.getEventType() === 'cancel') {
	            index_cjs.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');
	            var cancelCB_2 = this.cancelCallback_;
	            return function () {
	                // We know that error exists, we checked above that this is a cancel event
	                cancelCB_2.call(ctx, eventData.error);
	            };
	        }
	        else {
	            var cb_2 = this.callbacks_[eventData.eventType];
	            return function () {
	                cb_2.call(ctx, eventData.snapshot, eventData.prevName);
	            };
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    ChildEventRegistration.prototype.matches = function (other) {
	        var _this = this;
	        if (other instanceof ChildEventRegistration) {
	            if (!this.callbacks_ || !other.callbacks_) {
	                return true;
	            }
	            else if (this.context_ === other.context_) {
	                var otherKeys = Object.keys(other.callbacks_);
	                var thisKeys = Object.keys(this.callbacks_);
	                var otherCount = otherKeys.length;
	                var thisCount = thisKeys.length;
	                if (otherCount === thisCount) {
	                    // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.
	                    // If event types don't match, not a match
	                    // If count is not 1, exact match across all
	                    if (otherCount === 1) {
	                        var otherKey = otherKeys[0];
	                        var thisKey = thisKeys[0];
	                        return (thisKey === otherKey &&
	                            (!other.callbacks_[otherKey] ||
	                                !this.callbacks_[thisKey] ||
	                                other.callbacks_[otherKey] === this.callbacks_[thisKey]));
	                    }
	                    else {
	                        // Exact match on each key.
	                        return thisKeys.every(function (eventType) {
	                            return other.callbacks_[eventType] === _this.callbacks_[eventType];
	                        });
	                    }
	                }
	            }
	        }
	        return false;
	    };
	    /**
	     * @inheritDoc
	     */
	    ChildEventRegistration.prototype.hasAnyCallback = function () {
	        return this.callbacks_ !== null;
	    };
	    return ChildEventRegistration;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __referenceConstructor;
	/**
	 * A Query represents a filter to be applied to a firebase location.  This object purely represents the
	 * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.
	 *
	 * Since every Firebase reference is a query, Firebase inherits from this object.
	 */
	var Query = /** @class */ (function () {
	    function Query(repo, path, queryParams_, orderByCalled_) {
	        this.repo = repo;
	        this.path = path;
	        this.queryParams_ = queryParams_;
	        this.orderByCalled_ = orderByCalled_;
	    }
	    Object.defineProperty(Query, "__referenceConstructor", {
	        get: function () {
	            index_cjs.assert(__referenceConstructor, 'Reference.ts has not been loaded');
	            return __referenceConstructor;
	        },
	        set: function (val) {
	            __referenceConstructor = val;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * Validates start/end values for queries.
	     * @param {!QueryParams} params
	     * @private
	     */
	    Query.validateQueryEndpoints_ = function (params) {
	        var startNode = null;
	        var endNode = null;
	        if (params.hasStart()) {
	            startNode = params.getIndexStartValue();
	        }
	        if (params.hasEnd()) {
	            endNode = params.getIndexEndValue();
	        }
	        if (params.getIndex() === KEY_INDEX) {
	            var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +
	                'startAt(), endAt(), or equalTo().';
	            var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), endAt(),' +
	                'or equalTo() must be a string.';
	            if (params.hasStart()) {
	                var startName = params.getIndexStartName();
	                if (startName !== MIN_NAME) {
	                    throw new Error(tooManyArgsError);
	                }
	                else if (typeof startNode !== 'string') {
	                    throw new Error(wrongArgTypeError);
	                }
	            }
	            if (params.hasEnd()) {
	                var endName = params.getIndexEndName();
	                if (endName !== MAX_NAME) {
	                    throw new Error(tooManyArgsError);
	                }
	                else if (typeof endNode !== 'string') {
	                    throw new Error(wrongArgTypeError);
	                }
	            }
	        }
	        else if (params.getIndex() === PRIORITY_INDEX) {
	            if ((startNode != null && !isValidPriority(startNode)) ||
	                (endNode != null && !isValidPriority(endNode))) {
	                throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +
	                    'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');
	            }
	        }
	        else {
	            index_cjs.assert(params.getIndex() instanceof PathIndex ||
	                params.getIndex() === VALUE_INDEX, 'unknown index type.');
	            if ((startNode != null && typeof startNode === 'object') ||
	                (endNode != null && typeof endNode === 'object')) {
	                throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +
	                    'an object.');
	            }
	        }
	    };
	    /**
	     * Validates that limit* has been called with the correct combination of parameters
	     * @param {!QueryParams} params
	     * @private
	     */
	    Query.validateLimit_ = function (params) {
	        if (params.hasStart() &&
	            params.hasEnd() &&
	            params.hasLimit() &&
	            !params.hasAnchoredLimit()) {
	            throw new Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.");
	        }
	    };
	    /**
	     * Validates that no other order by call has been made
	     * @param {!string} fnName
	     * @private
	     */
	    Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {
	        if (this.orderByCalled_ === true) {
	            throw new Error(fnName + ": You can't combine multiple orderBy calls.");
	        }
	    };
	    /**
	     * @return {!QueryParams}
	     */
	    Query.prototype.getQueryParams = function () {
	        return this.queryParams_;
	    };
	    /**
	     * @return {!Reference}
	     */
	    Query.prototype.getRef = function () {
	        index_cjs.validateArgCount('Query.ref', 0, 0, arguments.length);
	        // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.
	        // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this
	        // method gets called.
	        return new Query.__referenceConstructor(this.repo, this.path);
	    };
	    /**
	     * @param {!string} eventType
	     * @param {!function(DataSnapshot, string=)} callback
	     * @param {(function(Error)|Object)=} cancelCallbackOrContext
	     * @param {Object=} context
	     * @return {!function(DataSnapshot, string=)}
	     */
	    Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {
	        index_cjs.validateArgCount('Query.on', 2, 4, arguments.length);
	        validateEventType('Query.on', 1, eventType, false);
	        index_cjs.validateCallback('Query.on', 2, callback, false);
	        var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);
	        if (eventType === 'value') {
	            this.onValueEvent(callback, ret.cancel, ret.context);
	        }
	        else {
	            var callbacks = {};
	            callbacks[eventType] = callback;
	            this.onChildEvent(callbacks, ret.cancel, ret.context);
	        }
	        return callback;
	    };
	    /**
	     * @param {!function(!DataSnapshot)} callback
	     * @param {?function(Error)} cancelCallback
	     * @param {?Object} context
	     * @protected
	     */
	    Query.prototype.onValueEvent = function (callback, cancelCallback, context) {
	        var container = new ValueEventRegistration(callback, cancelCallback || null, context || null);
	        this.repo.addEventCallbackForQuery(this, container);
	    };
	    /**
	     * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks
	     * @param {?function(Error)} cancelCallback
	     * @param {?Object} context
	     * @protected
	     */
	    Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {
	        var container = new ChildEventRegistration(callbacks, cancelCallback, context);
	        this.repo.addEventCallbackForQuery(this, container);
	    };
	    /**
	     * @param {string=} eventType
	     * @param {(function(!DataSnapshot, ?string=))=} callback
	     * @param {Object=} context
	     */
	    Query.prototype.off = function (eventType, callback, context) {
	        index_cjs.validateArgCount('Query.off', 0, 3, arguments.length);
	        validateEventType('Query.off', 1, eventType, true);
	        index_cjs.validateCallback('Query.off', 2, callback, true);
	        index_cjs.validateContextObject('Query.off', 3, context, true);
	        var container = null;
	        var callbacks = null;
	        if (eventType === 'value') {
	            var valueCallback = callback || null;
	            container = new ValueEventRegistration(valueCallback, null, context || null);
	        }
	        else if (eventType) {
	            if (callback) {
	                callbacks = {};
	                callbacks[eventType] = callback;
	            }
	            container = new ChildEventRegistration(callbacks, null, context || null);
	        }
	        this.repo.removeEventCallbackForQuery(this, container);
	    };
	    /**
	     * Attaches a listener, waits for the first event, and then removes the listener
	     * @param {!string} eventType
	     * @param {!function(!DataSnapshot, string=)} userCallback
	     * @param failureCallbackOrContext
	     * @param context
	     * @return {!firebase.Promise}
	     */
	    Query.prototype.once = function (eventType, userCallback, failureCallbackOrContext, context) {
	        var _this = this;
	        index_cjs.validateArgCount('Query.once', 1, 4, arguments.length);
	        validateEventType('Query.once', 1, eventType, false);
	        index_cjs.validateCallback('Query.once', 2, userCallback, true);
	        var ret = Query.getCancelAndContextArgs_('Query.once', failureCallbackOrContext, context);
	        // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)
	        // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change
	        // because the API currently expects callbacks will be called synchronously if the data is cached, but this is
	        // against the Promise specification.
	        var firstCall = true;
	        var deferred = new index_cjs.Deferred();
	        // A dummy error handler in case a user wasn't expecting promises
	        deferred.promise.catch(function () { });
	        var onceCallback = function (snapshot) {
	            // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)
	            // triggers multiple events (e.g. child_added or child_changed).
	            if (firstCall) {
	                firstCall = false;
	                _this.off(eventType, onceCallback);
	                if (userCallback) {
	                    userCallback.bind(ret.context)(snapshot);
	                }
	                deferred.resolve(snapshot);
	            }
	        };
	        this.on(eventType, onceCallback, 
	        /*cancel=*/ function (err) {
	            _this.off(eventType, onceCallback);
	            if (ret.cancel) {
	                ret.cancel.bind(ret.context)(err);
	            }
	            deferred.reject(err);
	        });
	        return deferred.promise;
	    };
	    /**
	     * Set a limit and anchor it to the start of the window.
	     * @param {!number} limit
	     * @return {!Query}
	     */
	    Query.prototype.limitToFirst = function (limit) {
	        index_cjs.validateArgCount('Query.limitToFirst', 1, 1, arguments.length);
	        if (typeof limit !== 'number' ||
	            Math.floor(limit) !== limit ||
	            limit <= 0) {
	            throw new Error('Query.limitToFirst: First argument must be a positive integer.');
	        }
	        if (this.queryParams_.hasLimit()) {
	            throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' +
	                'limitToFirst, or limitToLast).');
	        }
	        return new Query(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);
	    };
	    /**
	     * Set a limit and anchor it to the end of the window.
	     * @param {!number} limit
	     * @return {!Query}
	     */
	    Query.prototype.limitToLast = function (limit) {
	        index_cjs.validateArgCount('Query.limitToLast', 1, 1, arguments.length);
	        if (typeof limit !== 'number' ||
	            Math.floor(limit) !== limit ||
	            limit <= 0) {
	            throw new Error('Query.limitToLast: First argument must be a positive integer.');
	        }
	        if (this.queryParams_.hasLimit()) {
	            throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' +
	                'limitToFirst, or limitToLast).');
	        }
	        return new Query(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);
	    };
	    /**
	     * Given a child path, return a new query ordered by the specified grandchild path.
	     * @param {!string} path
	     * @return {!Query}
	     */
	    Query.prototype.orderByChild = function (path) {
	        index_cjs.validateArgCount('Query.orderByChild', 1, 1, arguments.length);
	        if (path === '$key') {
	            throw new Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');
	        }
	        else if (path === '$priority') {
	            throw new Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');
	        }
	        else if (path === '$value') {
	            throw new Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');
	        }
	        validatePathString('Query.orderByChild', 1, path, false);
	        this.validateNoPreviousOrderByCall_('Query.orderByChild');
	        var parsedPath = new Path(path);
	        if (parsedPath.isEmpty()) {
	            throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');
	        }
	        var index = new PathIndex(parsedPath);
	        var newParams = this.queryParams_.orderBy(index);
	        Query.validateQueryEndpoints_(newParams);
	        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
	    };
	    /**
	     * Return a new query ordered by the KeyIndex
	     * @return {!Query}
	     */
	    Query.prototype.orderByKey = function () {
	        index_cjs.validateArgCount('Query.orderByKey', 0, 0, arguments.length);
	        this.validateNoPreviousOrderByCall_('Query.orderByKey');
	        var newParams = this.queryParams_.orderBy(KEY_INDEX);
	        Query.validateQueryEndpoints_(newParams);
	        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
	    };
	    /**
	     * Return a new query ordered by the PriorityIndex
	     * @return {!Query}
	     */
	    Query.prototype.orderByPriority = function () {
	        index_cjs.validateArgCount('Query.orderByPriority', 0, 0, arguments.length);
	        this.validateNoPreviousOrderByCall_('Query.orderByPriority');
	        var newParams = this.queryParams_.orderBy(PRIORITY_INDEX);
	        Query.validateQueryEndpoints_(newParams);
	        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
	    };
	    /**
	     * Return a new query ordered by the ValueIndex
	     * @return {!Query}
	     */
	    Query.prototype.orderByValue = function () {
	        index_cjs.validateArgCount('Query.orderByValue', 0, 0, arguments.length);
	        this.validateNoPreviousOrderByCall_('Query.orderByValue');
	        var newParams = this.queryParams_.orderBy(VALUE_INDEX);
	        Query.validateQueryEndpoints_(newParams);
	        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
	    };
	    /**
	     * @param {number|string|boolean|null} value
	     * @param {?string=} name
	     * @return {!Query}
	     */
	    Query.prototype.startAt = function (value, name) {
	        if (value === void 0) { value = null; }
	        index_cjs.validateArgCount('Query.startAt', 0, 2, arguments.length);
	        validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);
	        validateKey('Query.startAt', 2, name, true);
	        var newParams = this.queryParams_.startAt(value, name);
	        Query.validateLimit_(newParams);
	        Query.validateQueryEndpoints_(newParams);
	        if (this.queryParams_.hasStart()) {
	            throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' +
	                'or equalTo).');
	        }
	        // Calling with no params tells us to start at the beginning.
	        if (value === undefined) {
	            value = null;
	            name = null;
	        }
	        return new Query(this.repo, this.path, newParams, this.orderByCalled_);
	    };
	    /**
	     * @param {number|string|boolean|null} value
	     * @param {?string=} name
	     * @return {!Query}
	     */
	    Query.prototype.endAt = function (value, name) {
	        if (value === void 0) { value = null; }
	        index_cjs.validateArgCount('Query.endAt', 0, 2, arguments.length);
	        validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);
	        validateKey('Query.endAt', 2, name, true);
	        var newParams = this.queryParams_.endAt(value, name);
	        Query.validateLimit_(newParams);
	        Query.validateQueryEndpoints_(newParams);
	        if (this.queryParams_.hasEnd()) {
	            throw new Error('Query.endAt: Ending point was already set (by another call to endAt or ' +
	                'equalTo).');
	        }
	        return new Query(this.repo, this.path, newParams, this.orderByCalled_);
	    };
	    /**
	     * Load the selection of children with exactly the specified value, and, optionally,
	     * the specified name.
	     * @param {number|string|boolean|null} value
	     * @param {string=} name
	     * @return {!Query}
	     */
	    Query.prototype.equalTo = function (value, name) {
	        index_cjs.validateArgCount('Query.equalTo', 1, 2, arguments.length);
	        validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);
	        validateKey('Query.equalTo', 2, name, true);
	        if (this.queryParams_.hasStart()) {
	            throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or ' +
	                'equalTo).');
	        }
	        if (this.queryParams_.hasEnd()) {
	            throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or ' +
	                'equalTo).');
	        }
	        return this.startAt(value, name).endAt(value, name);
	    };
	    /**
	     * @return {!string} URL for this location.
	     */
	    Query.prototype.toString = function () {
	        index_cjs.validateArgCount('Query.toString', 0, 0, arguments.length);
	        return this.repo.toString() + this.path.toUrlEncodedString();
	    };
	    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
	    // for end-users.
	    Query.prototype.toJSON = function () {
	        // An optional spacer argument is unnecessary for a string.
	        index_cjs.validateArgCount('Query.toJSON', 0, 1, arguments.length);
	        return this.toString();
	    };
	    /**
	     * An object representation of the query parameters used by this Query.
	     * @return {!Object}
	     */
	    Query.prototype.queryObject = function () {
	        return this.queryParams_.getQueryObject();
	    };
	    /**
	     * @return {!string}
	     */
	    Query.prototype.queryIdentifier = function () {
	        var obj = this.queryObject();
	        var id = ObjectToUniqueKey(obj);
	        return id === '{}' ? 'default' : id;
	    };
	    /**
	     * Return true if this query and the provided query are equivalent; otherwise, return false.
	     * @param {Query} other
	     * @return {boolean}
	     */
	    Query.prototype.isEqual = function (other) {
	        index_cjs.validateArgCount('Query.isEqual', 1, 1, arguments.length);
	        if (!(other instanceof Query)) {
	            var error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';
	            throw new Error(error);
	        }
	        var sameRepo = this.repo === other.repo;
	        var samePath = this.path.equals(other.path);
	        var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();
	        return sameRepo && samePath && sameQueryIdentifier;
	    };
	    /**
	     * Helper used by .on and .once to extract the context and or cancel arguments.
	     * @param {!string} fnName The function name (on or once)
	     * @param {(function(Error)|Object)=} cancelOrContext
	     * @param {Object=} context
	     * @return {{cancel: ?function(Error), context: ?Object}}
	     * @private
	     */
	    Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {
	        var ret = { cancel: null, context: null };
	        if (cancelOrContext && context) {
	            ret.cancel = cancelOrContext;
	            index_cjs.validateCallback(fnName, 3, ret.cancel, true);
	            ret.context = context;
	            index_cjs.validateContextObject(fnName, 4, ret.context, true);
	        }
	        else if (cancelOrContext) {
	            // we have either a cancel callback or a context.
	            if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {
	                // it's a context!
	                ret.context = cancelOrContext;
	            }
	            else if (typeof cancelOrContext === 'function') {
	                ret.cancel = cancelOrContext;
	            }
	            else {
	                throw new Error(index_cjs.errorPrefix(fnName, 3, true) +
	                    ' must either be a cancel callback or a context object.');
	            }
	        }
	        return ret;
	    };
	    Object.defineProperty(Query.prototype, "ref", {
	        get: function () {
	            return this.getRef();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    return Query;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var ExistingValueProvider = /** @class */ (function () {
	    function ExistingValueProvider(node_) {
	        this.node_ = node_;
	    }
	    ExistingValueProvider.prototype.getImmediateChild = function (childName) {
	        var child = this.node_.getImmediateChild(childName);
	        return new ExistingValueProvider(child);
	    };
	    ExistingValueProvider.prototype.node = function () {
	        return this.node_;
	    };
	    return ExistingValueProvider;
	}());
	var DeferredValueProvider = /** @class */ (function () {
	    function DeferredValueProvider(syncTree, path) {
	        this.syncTree_ = syncTree;
	        this.path_ = path;
	    }
	    DeferredValueProvider.prototype.getImmediateChild = function (childName) {
	        var childPath = this.path_.child(childName);
	        return new DeferredValueProvider(this.syncTree_, childPath);
	    };
	    DeferredValueProvider.prototype.node = function () {
	        return this.syncTree_.calcCompleteEventCache(this.path_);
	    };
	    return DeferredValueProvider;
	}());
	/**
	 * Generate placeholders for deferred values.
	 * @param {?Object} values
	 * @return {!Object}
	 */
	var generateWithValues = function (values) {
	    values = values || {};
	    values['timestamp'] = values['timestamp'] || new Date().getTime();
	    return values;
	};
	/**
	 * Value to use when firing local events. When writing server values, fire
	 * local events with an approximate value, otherwise return value as-is.
	 * @param {(Object|string|number|boolean)} value
	 * @param {!Object} serverValues
	 * @return {!(string|number|boolean)}
	 */
	var resolveDeferredLeafValue = function (value, existingVal, serverValues) {
	    if (!value || typeof value !== 'object') {
	        return value;
	    }
	    index_cjs.assert('.sv' in value, 'Unexpected leaf node or priority contents');
	    if (typeof value['.sv'] === 'string') {
	        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);
	    }
	    else if (typeof value['.sv'] === 'object') {
	        return resolveComplexDeferredValue(value['.sv'], existingVal);
	    }
	    else {
	        index_cjs.assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));
	    }
	};
	var resolveScalarDeferredValue = function (op, existing, serverValues) {
	    switch (op) {
	        case 'timestamp':
	            return serverValues['timestamp'];
	        default:
	            index_cjs.assert(false, 'Unexpected server value: ' + op);
	    }
	};
	var resolveComplexDeferredValue = function (op, existing, unused) {
	    if (!op.hasOwnProperty('increment')) {
	        index_cjs.assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));
	    }
	    var delta = op['increment'];
	    if (typeof delta !== 'number') {
	        index_cjs.assert(false, 'Unexpected increment value: ' + delta);
	    }
	    var existingNode = existing.node();
	    index_cjs.assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');
	    // Incrementing a non-number sets the value to the incremented amount
	    if (!existingNode.isLeafNode()) {
	        return delta;
	    }
	    var leaf = existingNode;
	    var existingVal = leaf.getValue();
	    if (typeof existingVal !== 'number') {
	        return delta;
	    }
	    // No need to do over/underflow arithmetic here because JS only handles floats under the covers
	    return existingVal + delta;
	};
	/**
	 * Recursively replace all deferred values and priorities in the tree with the
	 * specified generated replacement values.
	 * @param {!Path} path path to which write is relative
	 * @param {!Node} node new data written at path
	 * @param {!SyncTree} syncTree current data
	 * @param {!Object} serverValues
	 * @return {!SparseSnapshotTree}
	 */
	var resolveDeferredValueTree = function (path, node, syncTree, serverValues) {
	    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);
	};
	/**
	 * Recursively replace all deferred values and priorities in the node with the
	 * specified generated replacement values.  If there are no server values in the node,
	 * it'll be returned as-is.
	 * @param {!Node} node
	 * @param {!Object} serverValues
	 * @return {!Node}
	 */
	var resolveDeferredValueSnapshot = function (node, existing, serverValues) {
	    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);
	};
	function resolveDeferredValue(node, existingVal, serverValues) {
	    var rawPri = node.getPriority().val();
	    var priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);
	    var newNode;
	    if (node.isLeafNode()) {
	        var leafNode = node;
	        var value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);
	        if (value !== leafNode.getValue() ||
	            priority !== leafNode.getPriority().val()) {
	            return new LeafNode(value, nodeFromJSON$1(priority));
	        }
	        else {
	            return node;
	        }
	    }
	    else {
	        var childrenNode = node;
	        newNode = childrenNode;
	        if (priority !== childrenNode.getPriority().val()) {
	            newNode = newNode.updatePriority(new LeafNode(priority));
	        }
	        childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {
	            var newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);
	            if (newChildNode !== childNode) {
	                newNode = newNode.updateImmediateChild(childName, newChildNode);
	            }
	        });
	        return newNode;
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Helper class to store a sparse set of snapshots.
	 */
	var SparseSnapshotTree = /** @class */ (function () {
	    function SparseSnapshotTree() {
	        this.value = null;
	        this.children = new Map();
	    }
	    /**
	     * Gets the node stored at the given path if one exists.
	     *
	     * @param path Path to look up snapshot for.
	     * @return The retrieved node, or null.
	     */
	    SparseSnapshotTree.prototype.find = function (path) {
	        if (this.value != null) {
	            return this.value.getChild(path);
	        }
	        else if (!path.isEmpty() && this.children.size > 0) {
	            var childKey = path.getFront();
	            path = path.popFront();
	            if (this.children.has(childKey)) {
	                var childTree = this.children.get(childKey);
	                return childTree.find(path);
	            }
	            else {
	                return null;
	            }
	        }
	        else {
	            return null;
	        }
	    };
	    /**
	     * Stores the given node at the specified path. If there is already a node
	     * at a shallower path, it merges the new data into that snapshot node.
	     *
	     * @param path Path to look up snapshot for.
	     * @param data The new data, or null.
	     */
	    SparseSnapshotTree.prototype.remember = function (path, data) {
	        if (path.isEmpty()) {
	            this.value = data;
	            this.children.clear();
	        }
	        else if (this.value !== null) {
	            this.value = this.value.updateChild(path, data);
	        }
	        else {
	            var childKey = path.getFront();
	            if (!this.children.has(childKey)) {
	                this.children.set(childKey, new SparseSnapshotTree());
	            }
	            var child = this.children.get(childKey);
	            path = path.popFront();
	            child.remember(path, data);
	        }
	    };
	    /**
	     * Purge the data at path from the cache.
	     *
	     * @param path Path to look up snapshot for.
	     * @return True if this node should now be removed.
	     */
	    SparseSnapshotTree.prototype.forget = function (path) {
	        if (path.isEmpty()) {
	            this.value = null;
	            this.children.clear();
	            return true;
	        }
	        else {
	            if (this.value !== null) {
	                if (this.value.isLeafNode()) {
	                    // We're trying to forget a node that doesn't exist
	                    return false;
	                }
	                else {
	                    var value = this.value;
	                    this.value = null;
	                    var self_1 = this;
	                    value.forEachChild(PRIORITY_INDEX, function (key, tree) {
	                        self_1.remember(new Path(key), tree);
	                    });
	                    return this.forget(path);
	                }
	            }
	            else if (this.children.size > 0) {
	                var childKey = path.getFront();
	                path = path.popFront();
	                if (this.children.has(childKey)) {
	                    var safeToRemove = this.children.get(childKey).forget(path);
	                    if (safeToRemove) {
	                        this.children.delete(childKey);
	                    }
	                }
	                return this.children.size === 0;
	            }
	            else {
	                return true;
	            }
	        }
	    };
	    /**
	     * Recursively iterates through all of the stored tree and calls the
	     * callback on each one.
	     *
	     * @param prefixPath Path to look up node for.
	     * @param func The function to invoke for each tree.
	     */
	    SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {
	        if (this.value !== null) {
	            func(prefixPath, this.value);
	        }
	        else {
	            this.forEachChild(function (key, tree) {
	                var path = new Path(prefixPath.toString() + '/' + key);
	                tree.forEachTree(path, func);
	            });
	        }
	    };
	    /**
	     * Iterates through each immediate child and triggers the callback.
	     *
	     * @param func The function to invoke for each child.
	     */
	    SparseSnapshotTree.prototype.forEachChild = function (func) {
	        this.children.forEach(function (tree, key) {
	            func(key, tree);
	        });
	    };
	    return SparseSnapshotTree;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 *
	 * @enum
	 */
	var OperationType;
	(function (OperationType) {
	    OperationType[OperationType["OVERWRITE"] = 0] = "OVERWRITE";
	    OperationType[OperationType["MERGE"] = 1] = "MERGE";
	    OperationType[OperationType["ACK_USER_WRITE"] = 2] = "ACK_USER_WRITE";
	    OperationType[OperationType["LISTEN_COMPLETE"] = 3] = "LISTEN_COMPLETE";
	})(OperationType || (OperationType = {}));
	/**
	 * @param {boolean} fromUser
	 * @param {boolean} fromServer
	 * @param {?string} queryId
	 * @param {boolean} tagged
	 * @constructor
	 */
	var OperationSource = /** @class */ (function () {
	    function OperationSource(fromUser, fromServer, queryId, tagged) {
	        this.fromUser = fromUser;
	        this.fromServer = fromServer;
	        this.queryId = queryId;
	        this.tagged = tagged;
	        index_cjs.assert(!tagged || fromServer, 'Tagged queries must be from server.');
	    }
	    /**
	     * @const
	     * @type {!OperationSource}
	     */
	    OperationSource.User = new OperationSource(
	    /*fromUser=*/ true, false, null, 
	    /*tagged=*/ false);
	    /**
	     * @const
	     * @type {!OperationSource}
	     */
	    OperationSource.Server = new OperationSource(false, 
	    /*fromServer=*/ true, null, 
	    /*tagged=*/ false);
	    /**
	     * @param {string} queryId
	     * @return {!OperationSource}
	     */
	    OperationSource.forServerTaggedQuery = function (queryId) {
	        return new OperationSource(false, 
	        /*fromServer=*/ true, queryId, 
	        /*tagged=*/ true);
	    };
	    return OperationSource;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var AckUserWrite = /** @class */ (function () {
	    /**
	     *
	     * @param {!Path} path
	     * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.
	     * @param {!boolean} revert
	     */
	    function AckUserWrite(
	    /** @inheritDoc */ path, 
	    /** @inheritDoc */ affectedTree, 
	    /** @inheritDoc */ revert) {
	        this.path = path;
	        this.affectedTree = affectedTree;
	        this.revert = revert;
	        /** @inheritDoc */
	        this.type = OperationType.ACK_USER_WRITE;
	        /** @inheritDoc */
	        this.source = OperationSource.User;
	    }
	    /**
	     * @inheritDoc
	     */
	    AckUserWrite.prototype.operationForChild = function (childName) {
	        if (!this.path.isEmpty()) {
	            index_cjs.assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');
	            return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);
	        }
	        else if (this.affectedTree.value != null) {
	            index_cjs.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');
	            // All child locations are affected as well; just return same operation.
	            return this;
	        }
	        else {
	            var childTree = this.affectedTree.subtree(new Path(childName));
	            return new AckUserWrite(Path.Empty, childTree, this.revert);
	        }
	    };
	    return AckUserWrite;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var emptyChildrenSingleton;
	/**
	 * Singleton empty children collection.
	 *
	 * @const
	 * @type {!SortedMap.<string, !ImmutableTree.<?>>}
	 */
	var EmptyChildren = function () {
	    if (!emptyChildrenSingleton) {
	        emptyChildrenSingleton = new SortedMap(stringCompare);
	    }
	    return emptyChildrenSingleton;
	};
	/**
	 * A tree with immutable elements.
	 */
	var ImmutableTree = /** @class */ (function () {
	    /**
	     * @template T
	     * @param {?T} value
	     * @param {SortedMap.<string, !ImmutableTree.<T>>=} children
	     */
	    function ImmutableTree(value, children) {
	        if (children === void 0) { children = EmptyChildren(); }
	        this.value = value;
	        this.children = children;
	    }
	    /**
	     * @template T
	     * @param {!Object.<string, !T>} obj
	     * @return {!ImmutableTree.<!T>}
	     */
	    ImmutableTree.fromObject = function (obj) {
	        var tree = ImmutableTree.Empty;
	        each(obj, function (childPath, childSnap) {
	            tree = tree.set(new Path(childPath), childSnap);
	        });
	        return tree;
	    };
	    /**
	     * True if the value is empty and there are no children
	     * @return {boolean}
	     */
	    ImmutableTree.prototype.isEmpty = function () {
	        return this.value === null && this.children.isEmpty();
	    };
	    /**
	     * Given a path and predicate, return the first node and the path to that node
	     * where the predicate returns true.
	     *
	     * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects
	     * on the way back out, it may be better to pass down a pathSoFar obj.
	     *
	     * @param {!Path} relativePath The remainder of the path
	     * @param {function(T):boolean} predicate The predicate to satisfy to return a
	     *   node
	     * @return {?{path:!Path, value:!T}}
	     */
	    ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {
	        if (this.value != null && predicate(this.value)) {
	            return { path: Path.Empty, value: this.value };
	        }
	        else {
	            if (relativePath.isEmpty()) {
	                return null;
	            }
	            else {
	                var front = relativePath.getFront();
	                var child = this.children.get(front);
	                if (child !== null) {
	                    var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);
	                    if (childExistingPathAndValue != null) {
	                        var fullPath = new Path(front).child(childExistingPathAndValue.path);
	                        return { path: fullPath, value: childExistingPathAndValue.value };
	                    }
	                    else {
	                        return null;
	                    }
	                }
	                else {
	                    return null;
	                }
	            }
	        }
	    };
	    /**
	     * Find, if it exists, the shortest subpath of the given path that points a defined
	     * value in the tree
	     * @param {!Path} relativePath
	     * @return {?{path: !Path, value: !T}}
	     */
	    ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {
	        return this.findRootMostMatchingPathAndValue(relativePath, function () { return true; });
	    };
	    /**
	     * @param {!Path} relativePath
	     * @return {!ImmutableTree.<T>} The subtree at the given path
	     */
	    ImmutableTree.prototype.subtree = function (relativePath) {
	        if (relativePath.isEmpty()) {
	            return this;
	        }
	        else {
	            var front = relativePath.getFront();
	            var childTree = this.children.get(front);
	            if (childTree !== null) {
	                return childTree.subtree(relativePath.popFront());
	            }
	            else {
	                return ImmutableTree.Empty;
	            }
	        }
	    };
	    /**
	     * Sets a value at the specified path.
	     *
	     * @param {!Path} relativePath Path to set value at.
	     * @param {?T} toSet Value to set.
	     * @return {!ImmutableTree.<T>} Resulting tree.
	     */
	    ImmutableTree.prototype.set = function (relativePath, toSet) {
	        if (relativePath.isEmpty()) {
	            return new ImmutableTree(toSet, this.children);
	        }
	        else {
	            var front = relativePath.getFront();
	            var child = this.children.get(front) || ImmutableTree.Empty;
	            var newChild = child.set(relativePath.popFront(), toSet);
	            var newChildren = this.children.insert(front, newChild);
	            return new ImmutableTree(this.value, newChildren);
	        }
	    };
	    /**
	     * Removes the value at the specified path.
	     *
	     * @param {!Path} relativePath Path to value to remove.
	     * @return {!ImmutableTree.<T>} Resulting tree.
	     */
	    ImmutableTree.prototype.remove = function (relativePath) {
	        if (relativePath.isEmpty()) {
	            if (this.children.isEmpty()) {
	                return ImmutableTree.Empty;
	            }
	            else {
	                return new ImmutableTree(null, this.children);
	            }
	        }
	        else {
	            var front = relativePath.getFront();
	            var child = this.children.get(front);
	            if (child) {
	                var newChild = child.remove(relativePath.popFront());
	                var newChildren = void 0;
	                if (newChild.isEmpty()) {
	                    newChildren = this.children.remove(front);
	                }
	                else {
	                    newChildren = this.children.insert(front, newChild);
	                }
	                if (this.value === null && newChildren.isEmpty()) {
	                    return ImmutableTree.Empty;
	                }
	                else {
	                    return new ImmutableTree(this.value, newChildren);
	                }
	            }
	            else {
	                return this;
	            }
	        }
	    };
	    /**
	     * Gets a value from the tree.
	     *
	     * @param {!Path} relativePath Path to get value for.
	     * @return {?T} Value at path, or null.
	     */
	    ImmutableTree.prototype.get = function (relativePath) {
	        if (relativePath.isEmpty()) {
	            return this.value;
	        }
	        else {
	            var front = relativePath.getFront();
	            var child = this.children.get(front);
	            if (child) {
	                return child.get(relativePath.popFront());
	            }
	            else {
	                return null;
	            }
	        }
	    };
	    /**
	     * Replace the subtree at the specified path with the given new tree.
	     *
	     * @param {!Path} relativePath Path to replace subtree for.
	     * @param {!ImmutableTree} newTree New tree.
	     * @return {!ImmutableTree} Resulting tree.
	     */
	    ImmutableTree.prototype.setTree = function (relativePath, newTree) {
	        if (relativePath.isEmpty()) {
	            return newTree;
	        }
	        else {
	            var front = relativePath.getFront();
	            var child = this.children.get(front) || ImmutableTree.Empty;
	            var newChild = child.setTree(relativePath.popFront(), newTree);
	            var newChildren = void 0;
	            if (newChild.isEmpty()) {
	                newChildren = this.children.remove(front);
	            }
	            else {
	                newChildren = this.children.insert(front, newChild);
	            }
	            return new ImmutableTree(this.value, newChildren);
	        }
	    };
	    /**
	     * Performs a depth first fold on this tree. Transforms a tree into a single
	     * value, given a function that operates on the path to a node, an optional
	     * current value, and a map of child names to folded subtrees
	     * @template V
	     * @param {function(Path, ?T, Object.<string, V>):V} fn
	     * @return {V}
	     */
	    ImmutableTree.prototype.fold = function (fn) {
	        return this.fold_(Path.Empty, fn);
	    };
	    /**
	     * Recursive helper for public-facing fold() method
	     * @template V
	     * @param {!Path} pathSoFar
	     * @param {function(Path, ?T, Object.<string, V>):V} fn
	     * @return {V}
	     * @private
	     */
	    ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {
	        var accum = {};
	        this.children.inorderTraversal(function (childKey, childTree) {
	            accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);
	        });
	        return fn(pathSoFar, this.value, accum);
	    };
	    /**
	     * Find the first matching value on the given path. Return the result of applying f to it.
	     * @template V
	     * @param {!Path} path
	     * @param {!function(!Path, !T):?V} f
	     * @return {?V}
	     */
	    ImmutableTree.prototype.findOnPath = function (path, f) {
	        return this.findOnPath_(path, Path.Empty, f);
	    };
	    ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {
	        var result = this.value ? f(pathSoFar, this.value) : false;
	        if (result) {
	            return result;
	        }
	        else {
	            if (pathToFollow.isEmpty()) {
	                return null;
	            }
	            else {
	                var front = pathToFollow.getFront();
	                var nextChild = this.children.get(front);
	                if (nextChild) {
	                    return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);
	                }
	                else {
	                    return null;
	                }
	            }
	        }
	    };
	    /**
	     *
	     * @param {!Path} path
	     * @param {!function(!Path, !T)} f
	     * @returns {!ImmutableTree.<T>}
	     */
	    ImmutableTree.prototype.foreachOnPath = function (path, f) {
	        return this.foreachOnPath_(path, Path.Empty, f);
	    };
	    ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {
	        if (pathToFollow.isEmpty()) {
	            return this;
	        }
	        else {
	            if (this.value) {
	                f(currentRelativePath, this.value);
	            }
	            var front = pathToFollow.getFront();
	            var nextChild = this.children.get(front);
	            if (nextChild) {
	                return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);
	            }
	            else {
	                return ImmutableTree.Empty;
	            }
	        }
	    };
	    /**
	     * Calls the given function for each node in the tree that has a value.
	     *
	     * @param {function(!Path, !T)} f A function to be called with
	     *   the path from the root of the tree to a node, and the value at that node.
	     *   Called in depth-first order.
	     */
	    ImmutableTree.prototype.foreach = function (f) {
	        this.foreach_(Path.Empty, f);
	    };
	    ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {
	        this.children.inorderTraversal(function (childName, childTree) {
	            childTree.foreach_(currentRelativePath.child(childName), f);
	        });
	        if (this.value) {
	            f(currentRelativePath, this.value);
	        }
	    };
	    /**
	     *
	     * @param {function(string, !T)} f
	     */
	    ImmutableTree.prototype.foreachChild = function (f) {
	        this.children.inorderTraversal(function (childName, childTree) {
	            if (childTree.value) {
	                f(childName, childTree.value);
	            }
	        });
	    };
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    ImmutableTree.Empty = new ImmutableTree(null);
	    return ImmutableTree;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @param {!OperationSource} source
	 * @param {!Path} path
	 * @constructor
	 * @implements {Operation}
	 */
	var ListenComplete = /** @class */ (function () {
	    function ListenComplete(source, path) {
	        this.source = source;
	        this.path = path;
	        /** @inheritDoc */
	        this.type = OperationType.LISTEN_COMPLETE;
	    }
	    ListenComplete.prototype.operationForChild = function (childName) {
	        if (this.path.isEmpty()) {
	            return new ListenComplete(this.source, Path.Empty);
	        }
	        else {
	            return new ListenComplete(this.source, this.path.popFront());
	        }
	    };
	    return ListenComplete;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @param {!OperationSource} source
	 * @param {!Path} path
	 * @param {!Node} snap
	 * @constructor
	 * @implements {Operation}
	 */
	var Overwrite = /** @class */ (function () {
	    function Overwrite(source, path, snap) {
	        this.source = source;
	        this.path = path;
	        this.snap = snap;
	        /** @inheritDoc */
	        this.type = OperationType.OVERWRITE;
	    }
	    Overwrite.prototype.operationForChild = function (childName) {
	        if (this.path.isEmpty()) {
	            return new Overwrite(this.source, Path.Empty, this.snap.getImmediateChild(childName));
	        }
	        else {
	            return new Overwrite(this.source, this.path.popFront(), this.snap);
	        }
	    };
	    return Overwrite;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @param {!OperationSource} source
	 * @param {!Path} path
	 * @param {!ImmutableTree.<!Node>} children
	 * @constructor
	 * @implements {Operation}
	 */
	var Merge = /** @class */ (function () {
	    function Merge(
	    /** @inheritDoc */ source, 
	    /** @inheritDoc */ path, 
	    /** @inheritDoc */ children) {
	        this.source = source;
	        this.path = path;
	        this.children = children;
	        /** @inheritDoc */
	        this.type = OperationType.MERGE;
	    }
	    /**
	     * @inheritDoc
	     */
	    Merge.prototype.operationForChild = function (childName) {
	        if (this.path.isEmpty()) {
	            var childTree = this.children.subtree(new Path(childName));
	            if (childTree.isEmpty()) {
	                // This child is unaffected
	                return null;
	            }
	            else if (childTree.value) {
	                // We have a snapshot for the child in question.  This becomes an overwrite of the child.
	                return new Overwrite(this.source, Path.Empty, childTree.value);
	            }
	            else {
	                // This is a merge at a deeper level
	                return new Merge(this.source, Path.Empty, childTree);
	            }
	        }
	        else {
	            index_cjs.assert(this.path.getFront() === childName, "Can't get a merge for a child not on the path of the operation");
	            return new Merge(this.source, this.path.popFront(), this.children);
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    Merge.prototype.toString = function () {
	        return ('Operation(' +
	            this.path +
	            ': ' +
	            this.source.toString() +
	            ' merge: ' +
	            this.children.toString() +
	            ')');
	    };
	    return Merge;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully
	 * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.
	 * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks
	 * whether a node potentially had children removed due to a filter.
	 */
	var CacheNode = /** @class */ (function () {
	    /**
	     * @param {!Node} node_
	     * @param {boolean} fullyInitialized_
	     * @param {boolean} filtered_
	     */
	    function CacheNode(node_, fullyInitialized_, filtered_) {
	        this.node_ = node_;
	        this.fullyInitialized_ = fullyInitialized_;
	        this.filtered_ = filtered_;
	    }
	    /**
	     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client
	     * @return {boolean}
	     */
	    CacheNode.prototype.isFullyInitialized = function () {
	        return this.fullyInitialized_;
	    };
	    /**
	     * Returns whether this node is potentially missing children due to a filter applied to the node
	     * @return {boolean}
	     */
	    CacheNode.prototype.isFiltered = function () {
	        return this.filtered_;
	    };
	    /**
	     * @param {!Path} path
	     * @return {boolean}
	     */
	    CacheNode.prototype.isCompleteForPath = function (path) {
	        if (path.isEmpty()) {
	            return this.isFullyInitialized() && !this.filtered_;
	        }
	        var childKey = path.getFront();
	        return this.isCompleteForChild(childKey);
	    };
	    /**
	     * @param {!string} key
	     * @return {boolean}
	     */
	    CacheNode.prototype.isCompleteForChild = function (key) {
	        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));
	    };
	    /**
	     * @return {!Node}
	     */
	    CacheNode.prototype.getNode = function () {
	        return this.node_;
	    };
	    return CacheNode;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Stores the data we have cached for a view.
	 *
	 * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).
	 *
	 * @constructor
	 */
	var ViewCache = /** @class */ (function () {
	    /**
	     *
	     * @param {!CacheNode} eventCache_
	     * @param {!CacheNode} serverCache_
	     */
	    function ViewCache(eventCache_, serverCache_) {
	        this.eventCache_ = eventCache_;
	        this.serverCache_ = serverCache_;
	    }
	    /**
	     * @param {!Node} eventSnap
	     * @param {boolean} complete
	     * @param {boolean} filtered
	     * @return {!ViewCache}
	     */
	    ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {
	        return new ViewCache(new CacheNode(eventSnap, complete, filtered), this.serverCache_);
	    };
	    /**
	     * @param {!Node} serverSnap
	     * @param {boolean} complete
	     * @param {boolean} filtered
	     * @return {!ViewCache}
	     */
	    ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {
	        return new ViewCache(this.eventCache_, new CacheNode(serverSnap, complete, filtered));
	    };
	    /**
	     * @return {!CacheNode}
	     */
	    ViewCache.prototype.getEventCache = function () {
	        return this.eventCache_;
	    };
	    /**
	     * @return {?Node}
	     */
	    ViewCache.prototype.getCompleteEventSnap = function () {
	        return this.eventCache_.isFullyInitialized()
	            ? this.eventCache_.getNode()
	            : null;
	    };
	    /**
	     * @return {!CacheNode}
	     */
	    ViewCache.prototype.getServerCache = function () {
	        return this.serverCache_;
	    };
	    /**
	     * @return {?Node}
	     */
	    ViewCache.prototype.getCompleteServerSnap = function () {
	        return this.serverCache_.isFullyInitialized()
	            ? this.serverCache_.getNode()
	            : null;
	    };
	    /**
	     * @const
	     * @type {ViewCache}
	     */
	    ViewCache.Empty = new ViewCache(new CacheNode(ChildrenNode.EMPTY_NODE, 
	    /*fullyInitialized=*/ false, 
	    /*filtered=*/ false), new CacheNode(ChildrenNode.EMPTY_NODE, 
	    /*fullyInitialized=*/ false, 
	    /*filtered=*/ false));
	    return ViewCache;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @constructor
	 * @struct
	 * @param {!string} type The event type
	 * @param {!Node} snapshotNode The data
	 * @param {string=} childName The name for this child, if it's a child event
	 * @param {Node=} oldSnap Used for intermediate processing of child changed events
	 * @param {string=} prevName The name for the previous child, if applicable
	 */
	var Change = /** @class */ (function () {
	    function Change(type, snapshotNode, childName, oldSnap, prevName) {
	        this.type = type;
	        this.snapshotNode = snapshotNode;
	        this.childName = childName;
	        this.oldSnap = oldSnap;
	        this.prevName = prevName;
	    }
	    /**
	     * @param {!Node} snapshot
	     * @return {!Change}
	     */
	    Change.valueChange = function (snapshot) {
	        return new Change(Change.VALUE, snapshot);
	    };
	    /**
	     * @param {string} childKey
	     * @param {!Node} snapshot
	     * @return {!Change}
	     */
	    Change.childAddedChange = function (childKey, snapshot) {
	        return new Change(Change.CHILD_ADDED, snapshot, childKey);
	    };
	    /**
	     * @param {string} childKey
	     * @param {!Node} snapshot
	     * @return {!Change}
	     */
	    Change.childRemovedChange = function (childKey, snapshot) {
	        return new Change(Change.CHILD_REMOVED, snapshot, childKey);
	    };
	    /**
	     * @param {string} childKey
	     * @param {!Node} newSnapshot
	     * @param {!Node} oldSnapshot
	     * @return {!Change}
	     */
	    Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {
	        return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);
	    };
	    /**
	     * @param {string} childKey
	     * @param {!Node} snapshot
	     * @return {!Change}
	     */
	    Change.childMovedChange = function (childKey, snapshot) {
	        return new Change(Change.CHILD_MOVED, snapshot, childKey);
	    };
	    //event types
	    /** Event type for a child added */
	    Change.CHILD_ADDED = 'child_added';
	    /** Event type for a child removed */
	    Change.CHILD_REMOVED = 'child_removed';
	    /** Event type for a child changed */
	    Change.CHILD_CHANGED = 'child_changed';
	    /** Event type for a child moved */
	    Change.CHILD_MOVED = 'child_moved';
	    /** Event type for a value change */
	    Change.VALUE = 'value';
	    return Change;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Doesn't really filter nodes but applies an index to the node and keeps track of any changes
	 *
	 * @constructor
	 * @implements {NodeFilter}
	 * @param {!Index} index
	 */
	var IndexedFilter = /** @class */ (function () {
	    function IndexedFilter(index_) {
	        this.index_ = index_;
	    }
	    IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
	        index_cjs.assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');
	        var oldChild = snap.getImmediateChild(key);
	        // Check if anything actually changed.
	        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {
	            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.
	            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need
	            // to avoid treating these cases as "nothing changed."
	            if (oldChild.isEmpty() === newChild.isEmpty()) {
	                // Nothing changed.
	                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.
	                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');
	                return snap;
	            }
	        }
	        if (optChangeAccumulator != null) {
	            if (newChild.isEmpty()) {
	                if (snap.hasChild(key)) {
	                    optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, oldChild));
	                }
	                else {
	                    index_cjs.assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');
	                }
	            }
	            else if (oldChild.isEmpty()) {
	                optChangeAccumulator.trackChildChange(Change.childAddedChange(key, newChild));
	            }
	            else {
	                optChangeAccumulator.trackChildChange(Change.childChangedChange(key, newChild, oldChild));
	            }
	        }
	        if (snap.isLeafNode() && newChild.isEmpty()) {
	            return snap;
	        }
	        else {
	            // Make sure the node is indexed
	            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
	        if (optChangeAccumulator != null) {
	            if (!oldSnap.isLeafNode()) {
	                oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {
	                    if (!newSnap.hasChild(key)) {
	                        optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, childNode));
	                    }
	                });
	            }
	            if (!newSnap.isLeafNode()) {
	                newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {
	                    if (oldSnap.hasChild(key)) {
	                        var oldChild = oldSnap.getImmediateChild(key);
	                        if (!oldChild.equals(childNode)) {
	                            optChangeAccumulator.trackChildChange(Change.childChangedChange(key, childNode, oldChild));
	                        }
	                    }
	                    else {
	                        optChangeAccumulator.trackChildChange(Change.childAddedChange(key, childNode));
	                    }
	                });
	            }
	        }
	        return newSnap.withIndex(this.index_);
	    };
	    /**
	     * @inheritDoc
	     */
	    IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
	        if (oldSnap.isEmpty()) {
	            return ChildrenNode.EMPTY_NODE;
	        }
	        else {
	            return oldSnap.updatePriority(newPriority);
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    IndexedFilter.prototype.filtersNodes = function () {
	        return false;
	    };
	    /**
	     * @inheritDoc
	     */
	    IndexedFilter.prototype.getIndexedFilter = function () {
	        return this;
	    };
	    /**
	     * @inheritDoc
	     */
	    IndexedFilter.prototype.getIndex = function () {
	        return this.index_;
	    };
	    return IndexedFilter;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var ChildChangeAccumulator = /** @class */ (function () {
	    function ChildChangeAccumulator() {
	        this.changeMap = new Map();
	    }
	    ChildChangeAccumulator.prototype.trackChildChange = function (change) {
	        var type = change.type;
	        var childKey = change.childName;
	        index_cjs.assert(type === Change.CHILD_ADDED ||
	            type === Change.CHILD_CHANGED ||
	            type === Change.CHILD_REMOVED, 'Only child changes supported for tracking');
	        index_cjs.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');
	        var oldChange = this.changeMap.get(childKey);
	        if (oldChange) {
	            var oldType = oldChange.type;
	            if (type === Change.CHILD_ADDED && oldType === Change.CHILD_REMOVED) {
	                this.changeMap.set(childKey, Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode));
	            }
	            else if (type === Change.CHILD_REMOVED &&
	                oldType === Change.CHILD_ADDED) {
	                this.changeMap.delete(childKey);
	            }
	            else if (type === Change.CHILD_REMOVED &&
	                oldType === Change.CHILD_CHANGED) {
	                this.changeMap.set(childKey, Change.childRemovedChange(childKey, oldChange.oldSnap));
	            }
	            else if (type === Change.CHILD_CHANGED &&
	                oldType === Change.CHILD_ADDED) {
	                this.changeMap.set(childKey, Change.childAddedChange(childKey, change.snapshotNode));
	            }
	            else if (type === Change.CHILD_CHANGED &&
	                oldType === Change.CHILD_CHANGED) {
	                this.changeMap.set(childKey, Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap));
	            }
	            else {
	                throw index_cjs.assertionError('Illegal combination of changes: ' +
	                    change +
	                    ' occurred after ' +
	                    oldChange);
	            }
	        }
	        else {
	            this.changeMap.set(childKey, change);
	        }
	    };
	    ChildChangeAccumulator.prototype.getChanges = function () {
	        return Array.from(this.changeMap.values());
	    };
	    return ChildChangeAccumulator;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An implementation of CompleteChildSource that never returns any additional children
	 *
	 * @private
	 * @constructor
	 * @implements CompleteChildSource
	 */
	// eslint-disable-next-line @typescript-eslint/class-name-casing
	var NoCompleteChildSource_ = /** @class */ (function () {
	    function NoCompleteChildSource_() {
	    }
	    /**
	     * @inheritDoc
	     */
	    NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {
	        return null;
	    };
	    /**
	     * @inheritDoc
	     */
	    NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {
	        return null;
	    };
	    return NoCompleteChildSource_;
	}());
	/**
	 * Singleton instance.
	 * @const
	 * @type {!CompleteChildSource}
	 */
	var NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();
	/**
	 * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or
	 * old event caches available to calculate complete children.
	 *
	 *
	 * @implements CompleteChildSource
	 */
	var WriteTreeCompleteChildSource = /** @class */ (function () {
	    /**
	     * @param {!WriteTreeRef} writes_
	     * @param {!ViewCache} viewCache_
	     * @param {?Node} optCompleteServerCache_
	     */
	    function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {
	        if (optCompleteServerCache_ === void 0) { optCompleteServerCache_ = null; }
	        this.writes_ = writes_;
	        this.viewCache_ = viewCache_;
	        this.optCompleteServerCache_ = optCompleteServerCache_;
	    }
	    /**
	     * @inheritDoc
	     */
	    WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {
	        var node = this.viewCache_.getEventCache();
	        if (node.isCompleteForChild(childKey)) {
	            return node.getNode().getImmediateChild(childKey);
	        }
	        else {
	            var serverNode = this.optCompleteServerCache_ != null
	                ? new CacheNode(this.optCompleteServerCache_, true, false)
	                : this.viewCache_.getServerCache();
	            return this.writes_.calcCompleteChild(childKey, serverNode);
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {
	        var completeServerData = this.optCompleteServerCache_ != null
	            ? this.optCompleteServerCache_
	            : this.viewCache_.getCompleteServerSnap();
	        var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);
	        if (nodes.length === 0) {
	            return null;
	        }
	        else {
	            return nodes[0];
	        }
	    };
	    return WriteTreeCompleteChildSource;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @constructor
	 * @struct
	 */
	var ProcessorResult = /** @class */ (function () {
	    /**
	     * @param {!ViewCache} viewCache
	     * @param {!Array.<!Change>} changes
	     */
	    function ProcessorResult(viewCache, changes) {
	        this.viewCache = viewCache;
	        this.changes = changes;
	    }
	    return ProcessorResult;
	}());
	/**
	 * @constructor
	 */
	var ViewProcessor = /** @class */ (function () {
	    /**
	     * @param {!NodeFilter} filter_
	     */
	    function ViewProcessor(filter_) {
	        this.filter_ = filter_;
	    }
	    /**
	     * @param {!ViewCache} viewCache
	     */
	    ViewProcessor.prototype.assertIndexed = function (viewCache) {
	        index_cjs.assert(viewCache.getEventCache().getNode().isIndexed(this.filter_.getIndex()), 'Event snap not indexed');
	        index_cjs.assert(viewCache.getServerCache().getNode().isIndexed(this.filter_.getIndex()), 'Server snap not indexed');
	    };
	    /**
	     * @param {!ViewCache} oldViewCache
	     * @param {!Operation} operation
	     * @param {!WriteTreeRef} writesCache
	     * @param {?Node} completeCache
	     * @return {!ProcessorResult}
	     */
	    ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {
	        var accumulator = new ChildChangeAccumulator();
	        var newViewCache, filterServerNode;
	        if (operation.type === OperationType.OVERWRITE) {
	            var overwrite = operation;
	            if (overwrite.source.fromUser) {
	                newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);
	            }
	            else {
	                index_cjs.assert(overwrite.source.fromServer, 'Unknown source.');
	                // We filter the node if it's a tagged update or the node has been previously filtered  and the
	                // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered
	                // again
	                filterServerNode =
	                    overwrite.source.tagged ||
	                        (oldViewCache.getServerCache().isFiltered() &&
	                            !overwrite.path.isEmpty());
	                newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);
	            }
	        }
	        else if (operation.type === OperationType.MERGE) {
	            var merge = operation;
	            if (merge.source.fromUser) {
	                newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);
	            }
	            else {
	                index_cjs.assert(merge.source.fromServer, 'Unknown source.');
	                // We filter the node if it's a tagged update or the node has been previously filtered
	                filterServerNode =
	                    merge.source.tagged || oldViewCache.getServerCache().isFiltered();
	                newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);
	            }
	        }
	        else if (operation.type === OperationType.ACK_USER_WRITE) {
	            var ackUserWrite = operation;
	            if (!ackUserWrite.revert) {
	                newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);
	            }
	            else {
	                newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);
	            }
	        }
	        else if (operation.type === OperationType.LISTEN_COMPLETE) {
	            newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);
	        }
	        else {
	            throw index_cjs.assertionError('Unknown operation type: ' + operation.type);
	        }
	        var changes = accumulator.getChanges();
	        ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);
	        return new ProcessorResult(newViewCache, changes);
	    };
	    /**
	     * @param {!ViewCache} oldViewCache
	     * @param {!ViewCache} newViewCache
	     * @param {!Array.<!Change>} accumulator
	     * @private
	     */
	    ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {
	        var eventSnap = newViewCache.getEventCache();
	        if (eventSnap.isFullyInitialized()) {
	            var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();
	            var oldCompleteSnap = oldViewCache.getCompleteEventSnap();
	            if (accumulator.length > 0 ||
	                !oldViewCache.getEventCache().isFullyInitialized() ||
	                (isLeafOrEmpty &&
	                    !eventSnap.getNode().equals(/** @type {!Node} */ oldCompleteSnap)) ||
	                !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {
	                accumulator.push(Change.valueChange(
	                /** @type {!Node} */ newViewCache.getCompleteEventSnap()));
	            }
	        }
	    };
	    /**
	     * @param {!ViewCache} viewCache
	     * @param {!Path} changePath
	     * @param {!WriteTreeRef} writesCache
	     * @param {!CompleteChildSource} source
	     * @param {!ChildChangeAccumulator} accumulator
	     * @return {!ViewCache}
	     * @private
	     */
	    ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {
	        var oldEventSnap = viewCache.getEventCache();
	        if (writesCache.shadowingWrite(changePath) != null) {
	            // we have a shadowing write, ignore changes
	            return viewCache;
	        }
	        else {
	            var newEventCache = void 0, serverNode = void 0;
	            if (changePath.isEmpty()) {
	                // TODO: figure out how this plays with "sliding ack windows"
	                index_cjs.assert(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');
	                if (viewCache.getServerCache().isFiltered()) {
	                    // We need to special case this, because we need to only apply writes to complete children, or
	                    // we might end up raising events for incomplete children. If the server data is filtered deep
	                    // writes cannot be guaranteed to be complete
	                    var serverCache = viewCache.getCompleteServerSnap();
	                    var completeChildren = serverCache instanceof ChildrenNode
	                        ? serverCache
	                        : ChildrenNode.EMPTY_NODE;
	                    var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);
	                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);
	                }
	                else {
	                    var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
	                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);
	                }
	            }
	            else {
	                var childKey = changePath.getFront();
	                if (childKey === '.priority') {
	                    index_cjs.assert(changePath.getLength() === 1, "Can't have a priority with additional path components");
	                    var oldEventNode = oldEventSnap.getNode();
	                    serverNode = viewCache.getServerCache().getNode();
	                    // we might have overwrites for this priority
	                    var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);
	                    if (updatedPriority != null) {
	                        newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);
	                    }
	                    else {
	                        // priority didn't change, keep old node
	                        newEventCache = oldEventSnap.getNode();
	                    }
	                }
	                else {
	                    var childChangePath = changePath.popFront();
	                    // update child
	                    var newEventChild = void 0;
	                    if (oldEventSnap.isCompleteForChild(childKey)) {
	                        serverNode = viewCache.getServerCache().getNode();
	                        var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);
	                        if (eventChildUpdate != null) {
	                            newEventChild = oldEventSnap
	                                .getNode()
	                                .getImmediateChild(childKey)
	                                .updateChild(childChangePath, eventChildUpdate);
	                        }
	                        else {
	                            // Nothing changed, just keep the old child
	                            newEventChild = oldEventSnap
	                                .getNode()
	                                .getImmediateChild(childKey);
	                        }
	                    }
	                    else {
	                        newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());
	                    }
	                    if (newEventChild != null) {
	                        newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);
	                    }
	                    else {
	                        // no complete child available or no change
	                        newEventCache = oldEventSnap.getNode();
	                    }
	                }
	            }
	            return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());
	        }
	    };
	    /**
	     * @param {!ViewCache} oldViewCache
	     * @param {!Path} changePath
	     * @param {!Node} changedSnap
	     * @param {!WriteTreeRef} writesCache
	     * @param {?Node} completeCache
	     * @param {boolean} filterServerNode
	     * @param {!ChildChangeAccumulator} accumulator
	     * @return {!ViewCache}
	     * @private
	     */
	    ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {
	        var oldServerSnap = oldViewCache.getServerCache();
	        var newServerCache;
	        var serverFilter = filterServerNode
	            ? this.filter_
	            : this.filter_.getIndexedFilter();
	        if (changePath.isEmpty()) {
	            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);
	        }
	        else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {
	            // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update
	            var newServerNode = oldServerSnap
	                .getNode()
	                .updateChild(changePath, changedSnap);
	            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);
	        }
	        else {
	            var childKey = changePath.getFront();
	            if (!oldServerSnap.isCompleteForPath(changePath) &&
	                changePath.getLength() > 1) {
	                // We don't update incomplete nodes with updates intended for other listeners
	                return oldViewCache;
	            }
	            var childChangePath = changePath.popFront();
	            var childNode = oldServerSnap.getNode().getImmediateChild(childKey);
	            var newChildNode = childNode.updateChild(childChangePath, changedSnap);
	            if (childKey === '.priority') {
	                newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);
	            }
	            else {
	                newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);
	            }
	        }
	        var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());
	        var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);
	        return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);
	    };
	    /**
	     * @param {!ViewCache} oldViewCache
	     * @param {!Path} changePath
	     * @param {!Node} changedSnap
	     * @param {!WriteTreeRef} writesCache
	     * @param {?Node} completeCache
	     * @param {!ChildChangeAccumulator} accumulator
	     * @return {!ViewCache}
	     * @private
	     */
	    ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {
	        var oldEventSnap = oldViewCache.getEventCache();
	        var newViewCache, newEventCache;
	        var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);
	        if (changePath.isEmpty()) {
	            newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);
	            newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());
	        }
	        else {
	            var childKey = changePath.getFront();
	            if (childKey === '.priority') {
	                newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);
	                newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());
	            }
	            else {
	                var childChangePath = changePath.popFront();
	                var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);
	                var newChild = void 0;
	                if (childChangePath.isEmpty()) {
	                    // Child overwrite, we can replace the child
	                    newChild = changedSnap;
	                }
	                else {
	                    var childNode = source.getCompleteChild(childKey);
	                    if (childNode != null) {
	                        if (childChangePath.getBack() === '.priority' &&
	                            childNode.getChild(childChangePath.parent()).isEmpty()) {
	                            // This is a priority update on an empty node. If this node exists on the server, the
	                            // server will send down the priority in the update, so ignore for now
	                            newChild = childNode;
	                        }
	                        else {
	                            newChild = childNode.updateChild(childChangePath, changedSnap);
	                        }
	                    }
	                    else {
	                        // There is no complete child node available
	                        newChild = ChildrenNode.EMPTY_NODE;
	                    }
	                }
	                if (!oldChild.equals(newChild)) {
	                    var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);
	                    newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());
	                }
	                else {
	                    newViewCache = oldViewCache;
	                }
	            }
	        }
	        return newViewCache;
	    };
	    /**
	     * @param {!ViewCache} viewCache
	     * @param {string} childKey
	     * @return {boolean}
	     * @private
	     */
	    ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {
	        return viewCache.getEventCache().isCompleteForChild(childKey);
	    };
	    /**
	     * @param {!ViewCache} viewCache
	     * @param {!Path} path
	     * @param {ImmutableTree.<!Node>} changedChildren
	     * @param {!WriteTreeRef} writesCache
	     * @param {?Node} serverCache
	     * @param {!ChildChangeAccumulator} accumulator
	     * @return {!ViewCache}
	     * @private
	     */
	    ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {
	        var _this = this;
	        // HACK: In the case of a limit query, there may be some changes that bump things out of the
	        // window leaving room for new items.  It's important we process these changes first, so we
	        // iterate the changes twice, first processing any that affect items currently in view.
	        // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
	        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
	        // not the other.
	        var curViewCache = viewCache;
	        changedChildren.foreach(function (relativePath, childNode) {
	            var writePath = path.child(relativePath);
	            if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {
	                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
	            }
	        });
	        changedChildren.foreach(function (relativePath, childNode) {
	            var writePath = path.child(relativePath);
	            if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {
	                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
	            }
	        });
	        return curViewCache;
	    };
	    /**
	     * @param {!Node} node
	     * @param {ImmutableTree.<!Node>} merge
	     * @return {!Node}
	     * @private
	     */
	    ViewProcessor.prototype.applyMerge_ = function (node, merge) {
	        merge.foreach(function (relativePath, childNode) {
	            node = node.updateChild(relativePath, childNode);
	        });
	        return node;
	    };
	    /**
	     * @param {!ViewCache} viewCache
	     * @param {!Path} path
	     * @param {!ImmutableTree.<!Node>} changedChildren
	     * @param {!WriteTreeRef} writesCache
	     * @param {?Node} serverCache
	     * @param {boolean} filterServerNode
	     * @param {!ChildChangeAccumulator} accumulator
	     * @return {!ViewCache}
	     * @private
	     */
	    ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {
	        var _this = this;
	        // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and
	        // wait for the complete data update coming soon.
	        if (viewCache.getServerCache().getNode().isEmpty() &&
	            !viewCache.getServerCache().isFullyInitialized()) {
	            return viewCache;
	        }
	        // HACK: In the case of a limit query, there may be some changes that bump things out of the
	        // window leaving room for new items.  It's important we process these changes first, so we
	        // iterate the changes twice, first processing any that affect items currently in view.
	        // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
	        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
	        // not the other.
	        var curViewCache = viewCache;
	        var viewMergeTree;
	        if (path.isEmpty()) {
	            viewMergeTree = changedChildren;
	        }
	        else {
	            viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);
	        }
	        var serverNode = viewCache.getServerCache().getNode();
	        viewMergeTree.children.inorderTraversal(function (childKey, childTree) {
	            if (serverNode.hasChild(childKey)) {
	                var serverChild = viewCache
	                    .getServerCache()
	                    .getNode()
	                    .getImmediateChild(childKey);
	                var newChild = _this.applyMerge_(serverChild, childTree);
	                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
	            }
	        });
	        viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {
	            var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) &&
	                childMergeTree.value == null;
	            if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {
	                var serverChild = viewCache
	                    .getServerCache()
	                    .getNode()
	                    .getImmediateChild(childKey);
	                var newChild = _this.applyMerge_(serverChild, childMergeTree);
	                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
	            }
	        });
	        return curViewCache;
	    };
	    /**
	     * @param {!ViewCache} viewCache
	     * @param {!Path} ackPath
	     * @param {!ImmutableTree<!boolean>} affectedTree
	     * @param {!WriteTreeRef} writesCache
	     * @param {?Node} completeCache
	     * @param {!ChildChangeAccumulator} accumulator
	     * @return {!ViewCache}
	     * @private
	     */
	    ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {
	        if (writesCache.shadowingWrite(ackPath) != null) {
	            return viewCache;
	        }
	        // Only filter server node if it is currently filtered
	        var filterServerNode = viewCache.getServerCache().isFiltered();
	        // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update
	        // now that it won't be shadowed.
	        var serverCache = viewCache.getServerCache();
	        if (affectedTree.value != null) {
	            // This is an overwrite.
	            if ((ackPath.isEmpty() && serverCache.isFullyInitialized()) ||
	                serverCache.isCompleteForPath(ackPath)) {
	                return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);
	            }
	            else if (ackPath.isEmpty()) {
	                // This is a goofy edge case where we are acking data at this location but don't have full data.  We
	                // should just re-apply whatever we have in our cache as a merge.
	                var changedChildren_1 = ImmutableTree.Empty;
	                serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {
	                    changedChildren_1 = changedChildren_1.set(new Path(name), node);
	                });
	                return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);
	            }
	            else {
	                return viewCache;
	            }
	        }
	        else {
	            // This is a merge.
	            var changedChildren_2 = ImmutableTree.Empty;
	            affectedTree.foreach(function (mergePath, value) {
	                var serverCachePath = ackPath.child(mergePath);
	                if (serverCache.isCompleteForPath(serverCachePath)) {
	                    changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));
	                }
	            });
	            return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);
	        }
	    };
	    /**
	     * @param {!ViewCache} viewCache
	     * @param {!Path} path
	     * @param {!WriteTreeRef} writesCache
	     * @param {!ChildChangeAccumulator} accumulator
	     * @return {!ViewCache}
	     * @private
	     */
	    ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {
	        var oldServerNode = viewCache.getServerCache();
	        var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());
	        return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);
	    };
	    /**
	     * @param {!ViewCache} viewCache
	     * @param {!Path} path
	     * @param {!WriteTreeRef} writesCache
	     * @param {?Node} completeServerCache
	     * @param {!ChildChangeAccumulator} accumulator
	     * @return {!ViewCache}
	     * @private
	     */
	    ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {
	        var complete;
	        if (writesCache.shadowingWrite(path) != null) {
	            return viewCache;
	        }
	        else {
	            var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);
	            var oldEventCache = viewCache.getEventCache().getNode();
	            var newEventCache = void 0;
	            if (path.isEmpty() || path.getFront() === '.priority') {
	                var newNode = void 0;
	                if (viewCache.getServerCache().isFullyInitialized()) {
	                    newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
	                }
	                else {
	                    var serverChildren = viewCache.getServerCache().getNode();
	                    index_cjs.assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');
	                    newNode = writesCache.calcCompleteEventChildren(serverChildren);
	                }
	                newNode = newNode;
	                newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);
	            }
	            else {
	                var childKey = path.getFront();
	                var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());
	                if (newChild == null &&
	                    viewCache.getServerCache().isCompleteForChild(childKey)) {
	                    newChild = oldEventCache.getImmediateChild(childKey);
	                }
	                if (newChild != null) {
	                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);
	                }
	                else if (viewCache.getEventCache().getNode().hasChild(childKey)) {
	                    // No complete child available, delete the existing one, if any
	                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);
	                }
	                else {
	                    newEventCache = oldEventCache;
	                }
	                if (newEventCache.isEmpty() &&
	                    viewCache.getServerCache().isFullyInitialized()) {
	                    // We might have reverted all child writes. Maybe the old event was a leaf node
	                    complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
	                    if (complete.isLeafNode()) {
	                        newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);
	                    }
	                }
	            }
	            complete =
	                viewCache.getServerCache().isFullyInitialized() ||
	                    writesCache.shadowingWrite(Path.Empty) != null;
	            return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());
	        }
	    };
	    return ViewProcessor;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An EventGenerator is used to convert "raw" changes (Change) as computed by the
	 * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()
	 * for details.
	 *
	 * @constructor
	 */
	var EventGenerator = /** @class */ (function () {
	    /**
	     *
	     * @param {!Query} query_
	     */
	    function EventGenerator(query_) {
	        this.query_ = query_;
	        /**
	         * @private
	         * @type {!Index}
	         */
	        this.index_ = this.query_.getQueryParams().getIndex();
	    }
	    /**
	     * Given a set of raw changes (no moved events and prevName not specified yet), and a set of
	     * EventRegistrations that should be notified of these changes, generate the actual events to be raised.
	     *
	     * Notes:
	     *  - child_moved events will be synthesized at this time for any child_changed events that affect
	     *    our index.
	     *  - prevName will be calculated based on the index ordering.
	     *
	     * @param {!Array.<!Change>} changes
	     * @param {!Node} eventCache
	     * @param {!Array.<!EventRegistration>} eventRegistrations
	     * @return {!Array.<!Event>}
	     */
	    EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {
	        var _this = this;
	        var events = [];
	        var moves = [];
	        changes.forEach(function (change) {
	            if (change.type === Change.CHILD_CHANGED &&
	                _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {
	                moves.push(Change.childMovedChange(change.childName, change.snapshotNode));
	            }
	        });
	        this.generateEventsForType_(events, Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);
	        this.generateEventsForType_(events, Change.CHILD_ADDED, changes, eventRegistrations, eventCache);
	        this.generateEventsForType_(events, Change.CHILD_MOVED, moves, eventRegistrations, eventCache);
	        this.generateEventsForType_(events, Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);
	        this.generateEventsForType_(events, Change.VALUE, changes, eventRegistrations, eventCache);
	        return events;
	    };
	    /**
	     * Given changes of a single change type, generate the corresponding events.
	     *
	     * @param {!Array.<!Event>} events
	     * @param {!string} eventType
	     * @param {!Array.<!Change>} changes
	     * @param {!Array.<!EventRegistration>} registrations
	     * @param {!Node} eventCache
	     * @private
	     */
	    EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {
	        var _this = this;
	        var filteredChanges = changes.filter(function (change) { return change.type === eventType; });
	        filteredChanges.sort(this.compareChanges_.bind(this));
	        filteredChanges.forEach(function (change) {
	            var materializedChange = _this.materializeSingleChange_(change, eventCache);
	            registrations.forEach(function (registration) {
	                if (registration.respondsTo(change.type)) {
	                    events.push(registration.createEvent(materializedChange, _this.query_));
	                }
	            });
	        });
	    };
	    /**
	     * @param {!Change} change
	     * @param {!Node} eventCache
	     * @return {!Change}
	     * @private
	     */
	    EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {
	        if (change.type === 'value' || change.type === 'child_removed') {
	            return change;
	        }
	        else {
	            change.prevName = eventCache.getPredecessorChildName(
	            /** @type {!string} */
	            change.childName, change.snapshotNode, this.index_);
	            return change;
	        }
	    };
	    /**
	     * @param {!Change} a
	     * @param {!Change} b
	     * @return {number}
	     * @private
	     */
	    EventGenerator.prototype.compareChanges_ = function (a, b) {
	        if (a.childName == null || b.childName == null) {
	            throw index_cjs.assertionError('Should only compare child_ events.');
	        }
	        var aWrapped = new NamedNode(a.childName, a.snapshotNode);
	        var bWrapped = new NamedNode(b.childName, b.snapshotNode);
	        return this.index_.compare(aWrapped, bWrapped);
	    };
	    return EventGenerator;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A view represents a specific location and query that has 1 or more event registrations.
	 *
	 * It does several things:
	 *  - Maintains the list of event registrations for this location/query.
	 *  - Maintains a cache of the data visible for this location/query.
	 *  - Applies new operations (via applyOperation), updates the cache, and based on the event
	 *    registrations returns the set of events to be raised.
	 * @constructor
	 */
	var View = /** @class */ (function () {
	    /**
	     *
	     * @param {!Query} query_
	     * @param {!ViewCache} initialViewCache
	     */
	    function View(query_, initialViewCache) {
	        this.query_ = query_;
	        this.eventRegistrations_ = [];
	        var params = this.query_.getQueryParams();
	        var indexFilter = new IndexedFilter(params.getIndex());
	        var filter = params.getNodeFilter();
	        /**
	         * @type {ViewProcessor}
	         * @private
	         */
	        this.processor_ = new ViewProcessor(filter);
	        var initialServerCache = initialViewCache.getServerCache();
	        var initialEventCache = initialViewCache.getEventCache();
	        // Don't filter server node with other filter than index, wait for tagged listen
	        var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);
	        var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);
	        var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());
	        var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());
	        /**
	         * @type {!ViewCache}
	         * @private
	         */
	        this.viewCache_ = new ViewCache(newEventCache, newServerCache);
	        /**
	         * @type {!EventGenerator}
	         * @private
	         */
	        this.eventGenerator_ = new EventGenerator(this.query_);
	    }
	    /**
	     * @return {!Query}
	     */
	    View.prototype.getQuery = function () {
	        return this.query_;
	    };
	    /**
	     * @return {?Node}
	     */
	    View.prototype.getServerCache = function () {
	        return this.viewCache_.getServerCache().getNode();
	    };
	    /**
	     * @param {!Path} path
	     * @return {?Node}
	     */
	    View.prototype.getCompleteServerCache = function (path) {
	        var cache = this.viewCache_.getCompleteServerSnap();
	        if (cache) {
	            // If this isn't a "loadsAllData" view, then cache isn't actually a complete cache and
	            // we need to see if it contains the child we're interested in.
	            if (this.query_.getQueryParams().loadsAllData() ||
	                (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())) {
	                return cache.getChild(path);
	            }
	        }
	        return null;
	    };
	    /**
	     * @return {boolean}
	     */
	    View.prototype.isEmpty = function () {
	        return this.eventRegistrations_.length === 0;
	    };
	    /**
	     * @param {!EventRegistration} eventRegistration
	     */
	    View.prototype.addEventRegistration = function (eventRegistration) {
	        this.eventRegistrations_.push(eventRegistration);
	    };
	    /**
	     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.
	     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.
	     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.
	     */
	    View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {
	        var cancelEvents = [];
	        if (cancelError) {
	            index_cjs.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');
	            var path_1 = this.query_.path;
	            this.eventRegistrations_.forEach(function (registration) {
	                cancelError /** @type {!Error} */ = cancelError;
	                var maybeEvent = registration.createCancelEvent(cancelError, path_1);
	                if (maybeEvent) {
	                    cancelEvents.push(maybeEvent);
	                }
	            });
	        }
	        if (eventRegistration) {
	            var remaining = [];
	            for (var i = 0; i < this.eventRegistrations_.length; ++i) {
	                var existing = this.eventRegistrations_[i];
	                if (!existing.matches(eventRegistration)) {
	                    remaining.push(existing);
	                }
	                else if (eventRegistration.hasAnyCallback()) {
	                    // We're removing just this one
	                    remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));
	                    break;
	                }
	            }
	            this.eventRegistrations_ = remaining;
	        }
	        else {
	            this.eventRegistrations_ = [];
	        }
	        return cancelEvents;
	    };
	    /**
	     * Applies the given Operation, updates our cache, and returns the appropriate events.
	     *
	     * @param {!Operation} operation
	     * @param {!WriteTreeRef} writesCache
	     * @param {?Node} completeServerCache
	     * @return {!Array.<!Event>}
	     */
	    View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {
	        if (operation.type === OperationType.MERGE &&
	            operation.source.queryId !== null) {
	            index_cjs.assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');
	            index_cjs.assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');
	        }
	        var oldViewCache = this.viewCache_;
	        var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);
	        this.processor_.assertIndexed(result.viewCache);
	        index_cjs.assert(result.viewCache.getServerCache().isFullyInitialized() ||
	            !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');
	        this.viewCache_ = result.viewCache;
	        return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);
	    };
	    /**
	     * @param {!EventRegistration} registration
	     * @return {!Array.<!Event>}
	     */
	    View.prototype.getInitialEvents = function (registration) {
	        var eventSnap = this.viewCache_.getEventCache();
	        var initialChanges = [];
	        if (!eventSnap.getNode().isLeafNode()) {
	            var eventNode = eventSnap.getNode();
	            eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {
	                initialChanges.push(Change.childAddedChange(key, childNode));
	            });
	        }
	        if (eventSnap.isFullyInitialized()) {
	            initialChanges.push(Change.valueChange(eventSnap.getNode()));
	        }
	        return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);
	    };
	    /**
	     * @private
	     * @param {!Array.<!Change>} changes
	     * @param {!Node} eventCache
	     * @param {EventRegistration=} eventRegistration
	     * @return {!Array.<!Event>}
	     */
	    View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {
	        var registrations = eventRegistration
	            ? [eventRegistration]
	            : this.eventRegistrations_;
	        return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);
	    };
	    return View;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __referenceConstructor$1;
	/**
	 * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to
	 * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes
	 * and user writes (set, transaction, update).
	 *
	 * It's responsible for:
	 *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).
	 *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,
	 *    applyUserOverwrite, etc.)
	 */
	var SyncPoint = /** @class */ (function () {
	    function SyncPoint() {
	        /**
	         * The Views being tracked at this location in the tree, stored as a map where the key is a
	         * queryId and the value is the View for that query.
	         *
	         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).
	         */
	        this.views = new Map();
	    }
	    Object.defineProperty(SyncPoint, "__referenceConstructor", {
	        get: function () {
	            index_cjs.assert(__referenceConstructor$1, 'Reference.ts has not been loaded');
	            return __referenceConstructor$1;
	        },
	        set: function (val) {
	            index_cjs.assert(!__referenceConstructor$1, '__referenceConstructor has already been defined');
	            __referenceConstructor$1 = val;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    SyncPoint.prototype.isEmpty = function () {
	        return this.views.size === 0;
	    };
	    SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {
	        var e_1, _a;
	        var queryId = operation.source.queryId;
	        if (queryId !== null) {
	            var view = this.views.get(queryId);
	            index_cjs.assert(view != null, 'SyncTree gave us an op for an invalid query.');
	            return view.applyOperation(operation, writesCache, optCompleteServerCache);
	        }
	        else {
	            var events = [];
	            try {
	                for (var _b = tslib.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
	                    var view = _c.value;
	                    events = events.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	            return events;
	        }
	    };
	    /**
	     * Add an event callback for the specified query.
	     *
	     * @param {!Query} query
	     * @param {!EventRegistration} eventRegistration
	     * @param {!WriteTreeRef} writesCache
	     * @param {?Node} serverCache Complete server cache, if we have it.
	     * @param {boolean} serverCacheComplete
	     * @return {!Array.<!Event>} Events to raise.
	     */
	    SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {
	        var queryId = query.queryIdentifier();
	        var view = this.views.get(queryId);
	        if (!view) {
	            // TODO: make writesCache take flag for complete server node
	            var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);
	            var eventCacheComplete = false;
	            if (eventCache) {
	                eventCacheComplete = true;
	            }
	            else if (serverCache instanceof ChildrenNode) {
	                eventCache = writesCache.calcCompleteEventChildren(serverCache);
	                eventCacheComplete = false;
	            }
	            else {
	                eventCache = ChildrenNode.EMPTY_NODE;
	                eventCacheComplete = false;
	            }
	            var viewCache = new ViewCache(new CacheNode(
	            /** @type {!Node} */ eventCache, eventCacheComplete, false), new CacheNode(
	            /** @type {!Node} */ serverCache, serverCacheComplete, false));
	            view = new View(query, viewCache);
	            this.views.set(queryId, view);
	        }
	        // This is guaranteed to exist now, we just created anything that was missing
	        view.addEventRegistration(eventRegistration);
	        return view.getInitialEvents(eventRegistration);
	    };
	    /**
	     * Remove event callback(s).  Return cancelEvents if a cancelError is specified.
	     *
	     * If query is the default query, we'll check all views for the specified eventRegistration.
	     * If eventRegistration is null, we'll remove all callbacks for the specified view(s).
	     *
	     * @param {!Query} query
	     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.
	     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.
	     * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events
	     */
	    SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {
	        var e_2, _a;
	        var queryId = query.queryIdentifier();
	        var removed = [];
	        var cancelEvents = [];
	        var hadCompleteView = this.hasCompleteView();
	        if (queryId === 'default') {
	            try {
	                // When you do ref.off(...), we search all views for the registration to remove.
	                for (var _b = tslib.__values(this.views.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
	                    var _d = tslib.__read(_c.value, 2), viewQueryId = _d[0], view = _d[1];
	                    cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));
	                    if (view.isEmpty()) {
	                        this.views.delete(viewQueryId);
	                        // We'll deal with complete views later.
	                        if (!view.getQuery().getQueryParams().loadsAllData()) {
	                            removed.push(view.getQuery());
	                        }
	                    }
	                }
	            }
	            catch (e_2_1) { e_2 = { error: e_2_1 }; }
	            finally {
	                try {
	                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	                }
	                finally { if (e_2) throw e_2.error; }
	            }
	        }
	        else {
	            // remove the callback from the specific view.
	            var view = this.views.get(queryId);
	            if (view) {
	                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));
	                if (view.isEmpty()) {
	                    this.views.delete(queryId);
	                    // We'll deal with complete views later.
	                    if (!view.getQuery().getQueryParams().loadsAllData()) {
	                        removed.push(view.getQuery());
	                    }
	                }
	            }
	        }
	        if (hadCompleteView && !this.hasCompleteView()) {
	            // We removed our last complete view.
	            removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));
	        }
	        return { removed: removed, events: cancelEvents };
	    };
	    SyncPoint.prototype.getQueryViews = function () {
	        var e_3, _a;
	        var result = [];
	        try {
	            for (var _b = tslib.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var view = _c.value;
	                if (!view.getQuery().getQueryParams().loadsAllData()) {
	                    result.push(view);
	                }
	            }
	        }
	        catch (e_3_1) { e_3 = { error: e_3_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_3) throw e_3.error; }
	        }
	        return result;
	    };
	    /**
	     * @param path The path to the desired complete snapshot
	     * @return A complete cache, if it exists
	     */
	    SyncPoint.prototype.getCompleteServerCache = function (path) {
	        var e_4, _a;
	        var serverCache = null;
	        try {
	            for (var _b = tslib.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var view = _c.value;
	                serverCache = serverCache || view.getCompleteServerCache(path);
	            }
	        }
	        catch (e_4_1) { e_4 = { error: e_4_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_4) throw e_4.error; }
	        }
	        return serverCache;
	    };
	    SyncPoint.prototype.viewForQuery = function (query) {
	        var params = query.getQueryParams();
	        if (params.loadsAllData()) {
	            return this.getCompleteView();
	        }
	        else {
	            var queryId = query.queryIdentifier();
	            return this.views.get(queryId);
	        }
	    };
	    SyncPoint.prototype.viewExistsForQuery = function (query) {
	        return this.viewForQuery(query) != null;
	    };
	    SyncPoint.prototype.hasCompleteView = function () {
	        return this.getCompleteView() != null;
	    };
	    SyncPoint.prototype.getCompleteView = function () {
	        var e_5, _a;
	        try {
	            for (var _b = tslib.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var view = _c.value;
	                if (view.getQuery().getQueryParams().loadsAllData()) {
	                    return view;
	                }
	            }
	        }
	        catch (e_5_1) { e_5 = { error: e_5_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_5) throw e_5.error; }
	        }
	        return null;
	    };
	    return SyncPoint;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with
	 * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write
	 * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write
	 * to reflect the write added.
	 */
	var CompoundWrite = /** @class */ (function () {
	    function CompoundWrite(writeTree_) {
	        this.writeTree_ = writeTree_;
	    }
	    CompoundWrite.prototype.addWrite = function (path, node) {
	        if (path.isEmpty()) {
	            return new CompoundWrite(new ImmutableTree(node));
	        }
	        else {
	            var rootmost = this.writeTree_.findRootMostValueAndPath(path);
	            if (rootmost != null) {
	                var rootMostPath = rootmost.path;
	                var value = rootmost.value;
	                var relativePath = Path.relativePath(rootMostPath, path);
	                value = value.updateChild(relativePath, node);
	                return new CompoundWrite(this.writeTree_.set(rootMostPath, value));
	            }
	            else {
	                var subtree = new ImmutableTree(node);
	                var newWriteTree = this.writeTree_.setTree(path, subtree);
	                return new CompoundWrite(newWriteTree);
	            }
	        }
	    };
	    CompoundWrite.prototype.addWrites = function (path, updates) {
	        var newWrite = this;
	        each(updates, function (childKey, node) {
	            newWrite = newWrite.addWrite(path.child(childKey), node);
	        });
	        return newWrite;
	    };
	    /**
	     * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher
	     * location, which must be removed by calling this method with that path.
	     *
	     * @param path The path at which a write and all deeper writes should be removed
	     * @return {!CompoundWrite} The new CompoundWrite with the removed path
	     */
	    CompoundWrite.prototype.removeWrite = function (path) {
	        if (path.isEmpty()) {
	            return CompoundWrite.Empty;
	        }
	        else {
	            var newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);
	            return new CompoundWrite(newWriteTree);
	        }
	    };
	    /**
	     * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be
	     * considered "complete".
	     *
	     * @param path The path to check for
	     * @return Whether there is a complete write at that path
	     */
	    CompoundWrite.prototype.hasCompleteWrite = function (path) {
	        return this.getCompleteNode(path) != null;
	    };
	    /**
	     * Returns a node for a path if and only if the node is a "complete" overwrite at that path. This will not aggregate
	     * writes from deeper paths, but will return child nodes from a more shallow path.
	     *
	     * @param path The path to get a complete write
	     * @return The node if complete at that path, or null otherwise.
	     */
	    CompoundWrite.prototype.getCompleteNode = function (path) {
	        var rootmost = this.writeTree_.findRootMostValueAndPath(path);
	        if (rootmost != null) {
	            return this.writeTree_
	                .get(rootmost.path)
	                .getChild(Path.relativePath(rootmost.path, path));
	        }
	        else {
	            return null;
	        }
	    };
	    /**
	     * Returns all children that are guaranteed to be a complete overwrite.
	     *
	     * @return A list of all complete children.
	     */
	    CompoundWrite.prototype.getCompleteChildren = function () {
	        var children = [];
	        var node = this.writeTree_.value;
	        if (node != null) {
	            // If it's a leaf node, it has no children; so nothing to do.
	            if (!node.isLeafNode()) {
	                node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {
	                    children.push(new NamedNode(childName, childNode));
	                });
	            }
	        }
	        else {
	            this.writeTree_.children.inorderTraversal(function (childName, childTree) {
	                if (childTree.value != null) {
	                    children.push(new NamedNode(childName, childTree.value));
	                }
	            });
	        }
	        return children;
	    };
	    CompoundWrite.prototype.childCompoundWrite = function (path) {
	        if (path.isEmpty()) {
	            return this;
	        }
	        else {
	            var shadowingNode = this.getCompleteNode(path);
	            if (shadowingNode != null) {
	                return new CompoundWrite(new ImmutableTree(shadowingNode));
	            }
	            else {
	                return new CompoundWrite(this.writeTree_.subtree(path));
	            }
	        }
	    };
	    /**
	     * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.
	     * @return Whether this CompoundWrite is empty
	     */
	    CompoundWrite.prototype.isEmpty = function () {
	        return this.writeTree_.isEmpty();
	    };
	    /**
	     * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the
	     * node
	     * @param node The node to apply this CompoundWrite to
	     * @return The node with all writes applied
	     */
	    CompoundWrite.prototype.apply = function (node) {
	        return applySubtreeWrite(Path.Empty, this.writeTree_, node);
	    };
	    CompoundWrite.Empty = new CompoundWrite(new ImmutableTree(null));
	    return CompoundWrite;
	}());
	function applySubtreeWrite(relativePath, writeTree, node) {
	    if (writeTree.value != null) {
	        // Since there a write is always a leaf, we're done here
	        return node.updateChild(relativePath, writeTree.value);
	    }
	    else {
	        var priorityWrite_1 = null;
	        writeTree.children.inorderTraversal(function (childKey, childTree) {
	            if (childKey === '.priority') {
	                // Apply priorities at the end so we don't update priorities for either empty nodes or forget
	                // to apply priorities to empty nodes that are later filled
	                index_cjs.assert(childTree.value !== null, 'Priority writes must always be leaf nodes');
	                priorityWrite_1 = childTree.value;
	            }
	            else {
	                node = applySubtreeWrite(relativePath.child(childKey), childTree, node);
	            }
	        });
	        // If there was a priority write, we only apply it if the node is not empty
	        if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {
	            node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);
	        }
	        return node;
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them
	 * with underlying server data (to create "event cache" data).  Pending writes are added with addOverwrite()
	 * and addMerge(), and removed with removeWrite().
	 *
	 * @constructor
	 */
	var WriteTree = /** @class */ (function () {
	    function WriteTree() {
	        /**
	         * A tree tracking the result of applying all visible writes.  This does not include transactions with
	         * applyLocally=false or writes that are completely shadowed by other writes.
	         *
	         * @type {!CompoundWrite}
	         * @private
	         */
	        this.visibleWrites_ = CompoundWrite.Empty;
	        /**
	         * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary
	         * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also
	         * used by transactions).
	         *
	         * @type {!Array.<!WriteRecord>}
	         * @private
	         */
	        this.allWrites_ = [];
	        this.lastWriteId_ = -1;
	    }
	    /**
	     * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.
	     *
	     * @param {!Path} path
	     * @return {!WriteTreeRef}
	     */
	    WriteTree.prototype.childWrites = function (path) {
	        return new WriteTreeRef(path, this);
	    };
	    /**
	     * Record a new overwrite from user code.
	     *
	     * @param {!Path} path
	     * @param {!Node} snap
	     * @param {!number} writeId
	     * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches
	     */
	    WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {
	        index_cjs.assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');
	        if (visible === undefined) {
	            visible = true;
	        }
	        this.allWrites_.push({
	            path: path,
	            snap: snap,
	            writeId: writeId,
	            visible: visible
	        });
	        if (visible) {
	            this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);
	        }
	        this.lastWriteId_ = writeId;
	    };
	    /**
	     * Record a new merge from user code.
	     *
	     * @param {!Path} path
	     * @param {!Object.<string, !Node>} changedChildren
	     * @param {!number} writeId
	     */
	    WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {
	        index_cjs.assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');
	        this.allWrites_.push({
	            path: path,
	            children: changedChildren,
	            writeId: writeId,
	            visible: true
	        });
	        this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);
	        this.lastWriteId_ = writeId;
	    };
	    /**
	     * @param {!number} writeId
	     * @return {?WriteRecord}
	     */
	    WriteTree.prototype.getWrite = function (writeId) {
	        for (var i = 0; i < this.allWrites_.length; i++) {
	            var record = this.allWrites_[i];
	            if (record.writeId === writeId) {
	                return record;
	            }
	        }
	        return null;
	    };
	    /**
	     * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates
	     * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.
	     *
	     * @param {!number} writeId
	     * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise
	     * events as a result).
	     */
	    WriteTree.prototype.removeWrite = function (writeId) {
	        // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied
	        // out of order.
	        //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;
	        //assert(validClear, "Either we don't have this write, or it's the first one in the queue");
	        var _this = this;
	        var idx = this.allWrites_.findIndex(function (s) {
	            return s.writeId === writeId;
	        });
	        index_cjs.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');
	        var writeToRemove = this.allWrites_[idx];
	        this.allWrites_.splice(idx, 1);
	        var removedWriteWasVisible = writeToRemove.visible;
	        var removedWriteOverlapsWithOtherWrites = false;
	        var i = this.allWrites_.length - 1;
	        while (removedWriteWasVisible && i >= 0) {
	            var currentWrite = this.allWrites_[i];
	            if (currentWrite.visible) {
	                if (i >= idx &&
	                    this.recordContainsPath_(currentWrite, writeToRemove.path)) {
	                    // The removed write was completely shadowed by a subsequent write.
	                    removedWriteWasVisible = false;
	                }
	                else if (writeToRemove.path.contains(currentWrite.path)) {
	                    // Either we're covering some writes or they're covering part of us (depending on which came first).
	                    removedWriteOverlapsWithOtherWrites = true;
	                }
	            }
	            i--;
	        }
	        if (!removedWriteWasVisible) {
	            return false;
	        }
	        else if (removedWriteOverlapsWithOtherWrites) {
	            // There's some shadowing going on. Just rebuild the visible writes from scratch.
	            this.resetTree_();
	            return true;
	        }
	        else {
	            // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.
	            if (writeToRemove.snap) {
	                this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);
	            }
	            else {
	                var children = writeToRemove.children;
	                each(children, function (childName) {
	                    _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));
	                });
	            }
	            return true;
	        }
	    };
	    /**
	     * Return a complete snapshot for the given path if there's visible write data at that path, else null.
	     * No server data is considered.
	     *
	     * @param {!Path} path
	     * @return {?Node}
	     */
	    WriteTree.prototype.getCompleteWriteData = function (path) {
	        return this.visibleWrites_.getCompleteNode(path);
	    };
	    /**
	     * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden
	     * writes), attempt to calculate a complete snapshot for the given path
	     *
	     * @param {!Path} treePath
	     * @param {?Node} completeServerCache
	     * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded
	     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false
	     * @return {?Node}
	     */
	    WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
	        if (!writeIdsToExclude && !includeHiddenWrites) {
	            var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);
	            if (shadowingNode != null) {
	                return shadowingNode;
	            }
	            else {
	                var subMerge = this.visibleWrites_.childCompoundWrite(treePath);
	                if (subMerge.isEmpty()) {
	                    return completeServerCache;
	                }
	                else if (completeServerCache == null &&
	                    !subMerge.hasCompleteWrite(Path.Empty)) {
	                    // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow
	                    return null;
	                }
	                else {
	                    var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
	                    return subMerge.apply(layeredCache);
	                }
	            }
	        }
	        else {
	            var merge = this.visibleWrites_.childCompoundWrite(treePath);
	            if (!includeHiddenWrites && merge.isEmpty()) {
	                return completeServerCache;
	            }
	            else {
	                // If the server cache is null, and we don't have a complete cache, we need to return null
	                if (!includeHiddenWrites &&
	                    completeServerCache == null &&
	                    !merge.hasCompleteWrite(Path.Empty)) {
	                    return null;
	                }
	                else {
	                    var filter = function (write) {
	                        return ((write.visible || includeHiddenWrites) &&
	                            (!writeIdsToExclude ||
	                                !~writeIdsToExclude.indexOf(write.writeId)) &&
	                            (write.path.contains(treePath) || treePath.contains(write.path)));
	                    };
	                    var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);
	                    var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
	                    return mergeAtPath.apply(layeredCache);
	                }
	            }
	        }
	    };
	    /**
	     * With optional, underlying server data, attempt to return a children node of children that we have complete data for.
	     * Used when creating new views, to pre-fill their complete event children snapshot.
	     *
	     * @param {!Path} treePath
	     * @param {?ChildrenNode} completeServerChildren
	     * @return {!ChildrenNode}
	     */
	    WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {
	        var completeChildren = ChildrenNode.EMPTY_NODE;
	        var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);
	        if (topLevelSet) {
	            if (!topLevelSet.isLeafNode()) {
	                // we're shadowing everything. Return the children.
	                topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {
	                    completeChildren = completeChildren.updateImmediateChild(childName, childSnap);
	                });
	            }
	            return completeChildren;
	        }
	        else if (completeServerChildren) {
	            // Layer any children we have on top of this
	            // We know we don't have a top-level set, so just enumerate existing children
	            var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);
	            completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {
	                var node = merge_1
	                    .childCompoundWrite(new Path(childName))
	                    .apply(childNode);
	                completeChildren = completeChildren.updateImmediateChild(childName, node);
	            });
	            // Add any complete children we have from the set
	            merge_1.getCompleteChildren().forEach(function (namedNode) {
	                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
	            });
	            return completeChildren;
	        }
	        else {
	            // We don't have anything to layer on top of. Layer on any children we have
	            // Note that we can return an empty snap if we have a defined delete
	            var merge = this.visibleWrites_.childCompoundWrite(treePath);
	            merge.getCompleteChildren().forEach(function (namedNode) {
	                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
	            });
	            return completeChildren;
	        }
	    };
	    /**
	     * Given that the underlying server data has updated, determine what, if anything, needs to be
	     * applied to the event cache.
	     *
	     * Possibilities:
	     *
	     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
	     *
	     * 2. Some write is completely shadowing. No events to be raised
	     *
	     * 3. Is partially shadowed. Events
	     *
	     * Either existingEventSnap or existingServerSnap must exist
	     *
	     * @param {!Path} treePath
	     * @param {!Path} childPath
	     * @param {?Node} existingEventSnap
	     * @param {?Node} existingServerSnap
	     * @return {?Node}
	     */
	    WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {
	        index_cjs.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');
	        var path = treePath.child(childPath);
	        if (this.visibleWrites_.hasCompleteWrite(path)) {
	            // At this point we can probably guarantee that we're in case 2, meaning no events
	            // May need to check visibility while doing the findRootMostValueAndPath call
	            return null;
	        }
	        else {
	            // No complete shadowing. We're either partially shadowing or not shadowing at all.
	            var childMerge = this.visibleWrites_.childCompoundWrite(path);
	            if (childMerge.isEmpty()) {
	                // We're not shadowing at all. Case 1
	                return existingServerSnap.getChild(childPath);
	            }
	            else {
	                // This could be more efficient if the serverNode + updates doesn't change the eventSnap
	                // However this is tricky to find out, since user updates don't necessary change the server
	                // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server
	                // adds nodes, but doesn't change any existing writes. It is therefore not enough to
	                // only check if the updates change the serverNode.
	                // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?
	                return childMerge.apply(existingServerSnap.getChild(childPath));
	            }
	        }
	    };
	    /**
	     * Returns a complete child for a given server snap after applying all user writes or null if there is no
	     * complete child for this ChildKey.
	     *
	     * @param {!Path} treePath
	     * @param {!string} childKey
	     * @param {!CacheNode} existingServerSnap
	     * @return {?Node}
	     */
	    WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {
	        var path = treePath.child(childKey);
	        var shadowingNode = this.visibleWrites_.getCompleteNode(path);
	        if (shadowingNode != null) {
	            return shadowingNode;
	        }
	        else {
	            if (existingServerSnap.isCompleteForChild(childKey)) {
	                var childMerge = this.visibleWrites_.childCompoundWrite(path);
	                return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));
	            }
	            else {
	                return null;
	            }
	        }
	    };
	    /**
	     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
	     * a higher path, this will return the child of that write relative to the write and this path.
	     * Returns null if there is no write at this path.
	     */
	    WriteTree.prototype.shadowingWrite = function (path) {
	        return this.visibleWrites_.getCompleteNode(path);
	    };
	    /**
	     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
	     * the window, but may now be in the window.
	     */
	    WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {
	        var toIterate;
	        var merge = this.visibleWrites_.childCompoundWrite(treePath);
	        var shadowingNode = merge.getCompleteNode(Path.Empty);
	        if (shadowingNode != null) {
	            toIterate = shadowingNode;
	        }
	        else if (completeServerData != null) {
	            toIterate = merge.apply(completeServerData);
	        }
	        else {
	            // no children to iterate on
	            return [];
	        }
	        toIterate = toIterate.withIndex(index);
	        if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {
	            var nodes = [];
	            var cmp = index.getCompare();
	            var iter = reverse
	                ? toIterate.getReverseIteratorFrom(startPost, index)
	                : toIterate.getIteratorFrom(startPost, index);
	            var next = iter.getNext();
	            while (next && nodes.length < count) {
	                if (cmp(next, startPost) !== 0) {
	                    nodes.push(next);
	                }
	                next = iter.getNext();
	            }
	            return nodes;
	        }
	        else {
	            return [];
	        }
	    };
	    WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {
	        if (writeRecord.snap) {
	            return writeRecord.path.contains(path);
	        }
	        else {
	            for (var childName in writeRecord.children) {
	                if (writeRecord.children.hasOwnProperty(childName) &&
	                    writeRecord.path.child(childName).contains(path)) {
	                    return true;
	                }
	            }
	            return false;
	        }
	    };
	    /**
	     * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots
	     */
	    WriteTree.prototype.resetTree_ = function () {
	        this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path.Empty);
	        if (this.allWrites_.length > 0) {
	            this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;
	        }
	        else {
	            this.lastWriteId_ = -1;
	        }
	    };
	    /**
	     * The default filter used when constructing the tree. Keep everything that's visible.
	     */
	    WriteTree.DefaultFilter_ = function (write) {
	        return write.visible;
	    };
	    /**
	     * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of
	     * event data at that path.
	     */
	    WriteTree.layerTree_ = function (writes, filter, treeRoot) {
	        var compoundWrite = CompoundWrite.Empty;
	        for (var i = 0; i < writes.length; ++i) {
	            var write = writes[i];
	            // Theory, a later set will either:
	            // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction
	            // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction
	            if (filter(write)) {
	                var writePath = write.path;
	                var relativePath = void 0;
	                if (write.snap) {
	                    if (treeRoot.contains(writePath)) {
	                        relativePath = Path.relativePath(treeRoot, writePath);
	                        compoundWrite = compoundWrite.addWrite(relativePath, write.snap);
	                    }
	                    else if (writePath.contains(treeRoot)) {
	                        relativePath = Path.relativePath(writePath, treeRoot);
	                        compoundWrite = compoundWrite.addWrite(Path.Empty, write.snap.getChild(relativePath));
	                    }
	                }
	                else if (write.children) {
	                    if (treeRoot.contains(writePath)) {
	                        relativePath = Path.relativePath(treeRoot, writePath);
	                        compoundWrite = compoundWrite.addWrites(relativePath, write.children);
	                    }
	                    else if (writePath.contains(treeRoot)) {
	                        relativePath = Path.relativePath(writePath, treeRoot);
	                        if (relativePath.isEmpty()) {
	                            compoundWrite = compoundWrite.addWrites(Path.Empty, write.children);
	                        }
	                        else {
	                            var child = index_cjs.safeGet(write.children, relativePath.getFront());
	                            if (child) {
	                                // There exists a child in this node that matches the root path
	                                var deepNode = child.getChild(relativePath.popFront());
	                                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);
	                            }
	                        }
	                    }
	                }
	                else {
	                    throw index_cjs.assertionError('WriteRecord should have .snap or .children');
	                }
	            }
	        }
	        return compoundWrite;
	    };
	    return WriteTree;
	}());
	/**
	 * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods
	 * just proxy to the underlying WriteTree.
	 *
	 * @constructor
	 */
	var WriteTreeRef = /** @class */ (function () {
	    /**
	     * @param {!Path} path
	     * @param {!WriteTree} writeTree
	     */
	    function WriteTreeRef(path, writeTree) {
	        this.treePath_ = path;
	        this.writeTree_ = writeTree;
	    }
	    /**
	     * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used
	     * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node
	     * can lead to a more expensive calculation.
	     *
	     * @param {?Node} completeServerCache
	     * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.
	     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false
	     * @return {?Node}
	     */
	    WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {
	        return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);
	    };
	    /**
	     * If possible, returns a children node containing all of the complete children we have data for. The returned data is a
	     * mix of the given server data and write data.
	     *
	     * @param {?ChildrenNode} completeServerChildren
	     * @return {!ChildrenNode}
	     */
	    WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {
	        return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);
	    };
	    /**
	     * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,
	     * if anything, needs to be applied to the event cache.
	     *
	     * Possibilities:
	     *
	     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
	     *
	     * 2. Some write is completely shadowing. No events to be raised
	     *
	     * 3. Is partially shadowed. Events should be raised
	     *
	     * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert
	     *
	     * @param {!Path} path
	     * @param {?Node} existingEventSnap
	     * @param {?Node} existingServerSnap
	     * @return {?Node}
	     */
	    WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {
	        return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);
	    };
	    /**
	     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
	     * a higher path, this will return the child of that write relative to the write and this path.
	     * Returns null if there is no write at this path.
	     *
	     * @param {!Path} path
	     * @return {?Node}
	     */
	    WriteTreeRef.prototype.shadowingWrite = function (path) {
	        return this.writeTree_.shadowingWrite(this.treePath_.child(path));
	    };
	    /**
	     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
	     * the window, but may now be in the window
	     *
	     * @param {?Node} completeServerData
	     * @param {!NamedNode} startPost
	     * @param {!number} count
	     * @param {boolean} reverse
	     * @param {!Index} index
	     * @return {!Array.<!NamedNode>}
	     */
	    WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {
	        return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);
	    };
	    /**
	     * Returns a complete child for a given server snap after applying all user writes or null if there is no
	     * complete child for this ChildKey.
	     *
	     * @param {!string} childKey
	     * @param {!CacheNode} existingServerCache
	     * @return {?Node}
	     */
	    WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {
	        return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);
	    };
	    /**
	     * Return a WriteTreeRef for a child.
	     *
	     * @param {string} childName
	     * @return {!WriteTreeRef}
	     */
	    WriteTreeRef.prototype.child = function (childName) {
	        return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);
	    };
	    return WriteTreeRef;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * SyncTree is the central class for managing event callback registration, data caching, views
	 * (query processing), and event generation.  There are typically two SyncTree instances for
	 * each Repo, one for the normal Firebase data, and one for the .info data.
	 *
	 * It has a number of responsibilities, including:
	 *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).
	 *  - Applying and caching data changes for user set(), transaction(), and update() calls
	 *    (applyUserOverwrite(), applyUserMerge()).
	 *  - Applying and caching data changes for server data changes (applyServerOverwrite(),
	 *    applyServerMerge()).
	 *  - Generating user-facing events for server and user changes (all of the apply* methods
	 *    return the set of events that need to be raised as a result).
	 *  - Maintaining the appropriate set of server listens to ensure we are always subscribed
	 *    to the correct set of paths and queries to satisfy the current set of user event
	 *    callbacks (listens are started/stopped using the provided listenProvider).
	 *
	 * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual
	 * events are returned to the caller rather than raised synchronously.
	 *
	 * @constructor
	 */
	var SyncTree = /** @class */ (function () {
	    /**
	     * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening
	     *   to server data.
	     */
	    function SyncTree(listenProvider_) {
	        this.listenProvider_ = listenProvider_;
	        /**
	         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.
	         */
	        this.syncPointTree_ = ImmutableTree.Empty;
	        /**
	         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).
	         */
	        this.pendingWriteTree_ = new WriteTree();
	        this.tagToQueryMap = new Map();
	        this.queryToTagMap = new Map();
	    }
	    /**
	     * Apply the data changes for a user-generated set() or transaction() call.
	     *
	     * @return Events to raise.
	     */
	    SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {
	        // Record pending write.
	        this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);
	        if (!visible) {
	            return [];
	        }
	        else {
	            return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.User, path, newData));
	        }
	    };
	    /**
	     * Apply the data from a user-generated update() call
	     *
	     * @return Events to raise.
	     */
	    SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {
	        // Record pending merge.
	        this.pendingWriteTree_.addMerge(path, changedChildren, writeId);
	        var changeTree = ImmutableTree.fromObject(changedChildren);
	        return this.applyOperationToSyncPoints_(new Merge(OperationSource.User, path, changeTree));
	    };
	    /**
	     * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().
	     *
	     * @param revert True if the given write failed and needs to be reverted
	     * @return Events to raise.
	     */
	    SyncTree.prototype.ackUserWrite = function (writeId, revert) {
	        if (revert === void 0) { revert = false; }
	        var write = this.pendingWriteTree_.getWrite(writeId);
	        var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);
	        if (!needToReevaluate) {
	            return [];
	        }
	        else {
	            var affectedTree_1 = ImmutableTree.Empty;
	            if (write.snap != null) {
	                // overwrite
	                affectedTree_1 = affectedTree_1.set(Path.Empty, true);
	            }
	            else {
	                each(write.children, function (pathString, node) {
	                    affectedTree_1 = affectedTree_1.set(new Path(pathString), node);
	                });
	            }
	            return this.applyOperationToSyncPoints_(new AckUserWrite(write.path, affectedTree_1, revert));
	        }
	    };
	    /**
	     * Apply new server data for the specified path..
	     *
	     * @return Events to raise.
	     */
	    SyncTree.prototype.applyServerOverwrite = function (path, newData) {
	        return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.Server, path, newData));
	    };
	    /**
	     * Apply new server data to be merged in at the specified path.
	     *
	     * @return Events to raise.
	     */
	    SyncTree.prototype.applyServerMerge = function (path, changedChildren) {
	        var changeTree = ImmutableTree.fromObject(changedChildren);
	        return this.applyOperationToSyncPoints_(new Merge(OperationSource.Server, path, changeTree));
	    };
	    /**
	     * Apply a listen complete for a query
	     *
	     * @return Events to raise.
	     */
	    SyncTree.prototype.applyListenComplete = function (path) {
	        return this.applyOperationToSyncPoints_(new ListenComplete(OperationSource.Server, path));
	    };
	    /**
	     * Apply new server data for the specified tagged query.
	     *
	     * @return Events to raise.
	     */
	    SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {
	        var queryKey = this.queryKeyForTag_(tag);
	        if (queryKey != null) {
	            var r = SyncTree.parseQueryKey_(queryKey);
	            var queryPath = r.path, queryId = r.queryId;
	            var relativePath = Path.relativePath(queryPath, path);
	            var op = new Overwrite(OperationSource.forServerTaggedQuery(queryId), relativePath, snap);
	            return this.applyTaggedOperation_(queryPath, op);
	        }
	        else {
	            // Query must have been removed already
	            return [];
	        }
	    };
	    /**
	     * Apply server data to be merged in for the specified tagged query.
	     *
	     * @return Events to raise.
	     */
	    SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {
	        var queryKey = this.queryKeyForTag_(tag);
	        if (queryKey) {
	            var r = SyncTree.parseQueryKey_(queryKey);
	            var queryPath = r.path, queryId = r.queryId;
	            var relativePath = Path.relativePath(queryPath, path);
	            var changeTree = ImmutableTree.fromObject(changedChildren);
	            var op = new Merge(OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);
	            return this.applyTaggedOperation_(queryPath, op);
	        }
	        else {
	            // We've already removed the query. No big deal, ignore the update
	            return [];
	        }
	    };
	    /**
	     * Apply a listen complete for a tagged query
	     *
	     * @return Events to raise.
	     */
	    SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {
	        var queryKey = this.queryKeyForTag_(tag);
	        if (queryKey) {
	            var r = SyncTree.parseQueryKey_(queryKey);
	            var queryPath = r.path, queryId = r.queryId;
	            var relativePath = Path.relativePath(queryPath, path);
	            var op = new ListenComplete(OperationSource.forServerTaggedQuery(queryId), relativePath);
	            return this.applyTaggedOperation_(queryPath, op);
	        }
	        else {
	            // We've already removed the query. No big deal, ignore the update
	            return [];
	        }
	    };
	    /**
	     * Add an event callback for the specified query.
	     *
	     * @return Events to raise.
	     */
	    SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {
	        var path = query.path;
	        var serverCache = null;
	        var foundAncestorDefaultView = false;
	        // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.
	        // Consider optimizing this once there's a better understanding of what actual behavior will be.
	        this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {
	            var relativePath = Path.relativePath(pathToSyncPoint, path);
	            serverCache = serverCache || sp.getCompleteServerCache(relativePath);
	            foundAncestorDefaultView =
	                foundAncestorDefaultView || sp.hasCompleteView();
	        });
	        var syncPoint = this.syncPointTree_.get(path);
	        if (!syncPoint) {
	            syncPoint = new SyncPoint();
	            this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);
	        }
	        else {
	            foundAncestorDefaultView =
	                foundAncestorDefaultView || syncPoint.hasCompleteView();
	            serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);
	        }
	        var serverCacheComplete;
	        if (serverCache != null) {
	            serverCacheComplete = true;
	        }
	        else {
	            serverCacheComplete = false;
	            serverCache = ChildrenNode.EMPTY_NODE;
	            var subtree = this.syncPointTree_.subtree(path);
	            subtree.foreachChild(function (childName, childSyncPoint) {
	                var completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);
	                if (completeCache) {
	                    serverCache = serverCache.updateImmediateChild(childName, completeCache);
	                }
	            });
	        }
	        var viewAlreadyExists = syncPoint.viewExistsForQuery(query);
	        if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {
	            // We need to track a tag for this query
	            var queryKey = SyncTree.makeQueryKey_(query);
	            index_cjs.assert(!this.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');
	            var tag = SyncTree.getNextQueryTag_();
	            this.queryToTagMap.set(queryKey, tag);
	            this.tagToQueryMap.set(tag, queryKey);
	        }
	        var writesCache = this.pendingWriteTree_.childWrites(path);
	        var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);
	        if (!viewAlreadyExists && !foundAncestorDefaultView) {
	            var view /** @type !View */ = syncPoint.viewForQuery(query);
	            events = events.concat(this.setupListener_(query, view));
	        }
	        return events;
	    };
	    /**
	     * Remove event callback(s).
	     *
	     * If query is the default query, we'll check all queries for the specified eventRegistration.
	     * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.
	     *
	     * @param eventRegistration If null, all callbacks are removed.
	     * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.
	     * @return Cancel events, if cancelError was provided.
	     */
	    SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {
	        var _this = this;
	        // Find the syncPoint first. Then deal with whether or not it has matching listeners
	        var path = query.path;
	        var maybeSyncPoint = this.syncPointTree_.get(path);
	        var cancelEvents = [];
	        // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without
	        // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and
	        // not loadsAllData().
	        if (maybeSyncPoint &&
	            (query.queryIdentifier() === 'default' ||
	                maybeSyncPoint.viewExistsForQuery(query))) {
	            /**
	             * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}
	             */
	            var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);
	            if (maybeSyncPoint.isEmpty()) {
	                this.syncPointTree_ = this.syncPointTree_.remove(path);
	            }
	            var removed = removedAndEvents.removed;
	            cancelEvents = removedAndEvents.events;
	            // We may have just removed one of many listeners and can short-circuit this whole process
	            // We may also not have removed a default listener, in which case all of the descendant listeners should already be
	            // properly set up.
	            //
	            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of
	            // queryId === 'default'
	            var removingDefault = -1 !==
	                removed.findIndex(function (query) {
	                    return query.getQueryParams().loadsAllData();
	                });
	            var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {
	                return parentSyncPoint.hasCompleteView();
	            });
	            if (removingDefault && !covered) {
	                var subtree = this.syncPointTree_.subtree(path);
	                // There are potentially child listeners. Determine what if any listens we need to send before executing the
	                // removal
	                if (!subtree.isEmpty()) {
	                    // We need to fold over our subtree and collect the listeners to send
	                    var newViews = this.collectDistinctViewsForSubTree_(subtree);
	                    // Ok, we've collected all the listens we need. Set them up.
	                    for (var i = 0; i < newViews.length; ++i) {
	                        var view = newViews[i], newQuery = view.getQuery();
	                        var listener = this.createListenerForView_(view);
	                        this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);
	                    }
	                }
	            }
	            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query
	            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.
	            // Also, note that if we have a cancelError, it's already been removed at the provider level.
	            if (!covered && removed.length > 0 && !cancelError) {
	                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one
	                // default. Otherwise, we need to iterate through and cancel each individual query
	                if (removingDefault) {
	                    // We don't tag default listeners
	                    var defaultTag = null;
	                    this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);
	                }
	                else {
	                    removed.forEach(function (queryToRemove) {
	                        var tagToRemove = _this.queryToTagMap.get(SyncTree.makeQueryKey_(queryToRemove));
	                        _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);
	                    });
	                }
	            }
	            // Now, clear all of the tags we're tracking for the removed listens
	            this.removeTags_(removed);
	        }
	        return cancelEvents;
	    };
	    /**
	     * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a
	     * listener above it, we will get a false "null". This shouldn't be a problem because transactions will always
	     * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->
	     *     <incremented total> as the write is applied locally and then acknowledged at the server.
	     *
	     * Note: this method will *include* hidden writes from transaction with applyLocally set to false.
	     *
	     * @param path The path to the data we want
	     * @param writeIdsToExclude A specific set to be excluded
	     */
	    SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {
	        var includeHiddenSets = true;
	        var writeTree = this.pendingWriteTree_;
	        var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {
	            var relativePath = Path.relativePath(pathSoFar, path);
	            var serverCache = syncPoint.getCompleteServerCache(relativePath);
	            if (serverCache) {
	                return serverCache;
	            }
	        });
	        return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);
	    };
	    /**
	     * This collapses multiple unfiltered views into a single view, since we only need a single
	     * listener for them.
	     */
	    SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {
	        return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {
	            if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {
	                var completeView = maybeChildSyncPoint.getCompleteView();
	                return [completeView];
	            }
	            else {
	                // No complete view here, flatten any deeper listens into an array
	                var views_1 = [];
	                if (maybeChildSyncPoint) {
	                    views_1 = maybeChildSyncPoint.getQueryViews();
	                }
	                each(childMap, function (_key, childViews) {
	                    views_1 = views_1.concat(childViews);
	                });
	                return views_1;
	            }
	        });
	    };
	    SyncTree.prototype.removeTags_ = function (queries) {
	        for (var j = 0; j < queries.length; ++j) {
	            var removedQuery = queries[j];
	            if (!removedQuery.getQueryParams().loadsAllData()) {
	                // We should have a tag for this
	                var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);
	                var removedQueryTag = this.queryToTagMap.get(removedQueryKey);
	                this.queryToTagMap.delete(removedQueryKey);
	                this.tagToQueryMap.delete(removedQueryTag);
	            }
	        }
	    };
	    /**
	     * Normalizes a query to a query we send the server for listening
	     *
	     * @return The normalized query
	     */
	    SyncTree.queryForListening_ = function (query) {
	        if (query.getQueryParams().loadsAllData() &&
	            !query.getQueryParams().isDefault()) {
	            // We treat queries that load all data as default queries
	            // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits
	            // from Query
	            return query.getRef();
	        }
	        else {
	            return query;
	        }
	    };
	    /**
	     * For a given new listen, manage the de-duplication of outstanding subscriptions.
	     *
	     * @return This method can return events to support synchronous data sources
	     */
	    SyncTree.prototype.setupListener_ = function (query, view) {
	        var path = query.path;
	        var tag = this.tagForQuery_(query);
	        var listener = this.createListenerForView_(view);
	        var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);
	        var subtree = this.syncPointTree_.subtree(path);
	        // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we
	        // may need to shadow other listens as well.
	        if (tag) {
	            index_cjs.assert(!subtree.value.hasCompleteView(), "If we're adding a query, it shouldn't be shadowed");
	        }
	        else {
	            // Shadow everything at or below this location, this is a default listener.
	            var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {
	                if (!relativePath.isEmpty() &&
	                    maybeChildSyncPoint &&
	                    maybeChildSyncPoint.hasCompleteView()) {
	                    return [maybeChildSyncPoint.getCompleteView().getQuery()];
	                }
	                else {
	                    // No default listener here, flatten any deeper queries into an array
	                    var queries_1 = [];
	                    if (maybeChildSyncPoint) {
	                        queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) { return view.getQuery(); }));
	                    }
	                    each(childMap, function (_key, childQueries) {
	                        queries_1 = queries_1.concat(childQueries);
	                    });
	                    return queries_1;
	                }
	            });
	            for (var i = 0; i < queriesToStop.length; ++i) {
	                var queryToStop = queriesToStop[i];
	                this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));
	            }
	        }
	        return events;
	    };
	    SyncTree.prototype.createListenerForView_ = function (view) {
	        var _this = this;
	        var query = view.getQuery();
	        var tag = this.tagForQuery_(query);
	        return {
	            hashFn: function () {
	                var cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;
	                return cache.hash();
	            },
	            onComplete: function (status) {
	                if (status === 'ok') {
	                    if (tag) {
	                        return _this.applyTaggedListenComplete(query.path, tag);
	                    }
	                    else {
	                        return _this.applyListenComplete(query.path);
	                    }
	                }
	                else {
	                    // If a listen failed, kill all of the listeners here, not just the one that triggered the error.
	                    // Note that this may need to be scoped to just this listener if we change permissions on filtered children
	                    var error = errorForServerCode(status, query);
	                    return _this.removeEventRegistration(query, 
	                    /*eventRegistration*/ null, error);
	                }
	            }
	        };
	    };
	    /**
	     * Given a query, computes a "queryKey" suitable for use in our queryToTagMap_.
	     */
	    SyncTree.makeQueryKey_ = function (query) {
	        return query.path.toString() + '$' + query.queryIdentifier();
	    };
	    /**
	     * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.
	     */
	    SyncTree.parseQueryKey_ = function (queryKey) {
	        var splitIndex = queryKey.indexOf('$');
	        index_cjs.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');
	        return {
	            queryId: queryKey.substr(splitIndex + 1),
	            path: new Path(queryKey.substr(0, splitIndex))
	        };
	    };
	    /**
	     * Return the query associated with the given tag, if we have one
	     */
	    SyncTree.prototype.queryKeyForTag_ = function (tag) {
	        return this.tagToQueryMap.get(tag);
	    };
	    /**
	     * Return the tag associated with the given query.
	     */
	    SyncTree.prototype.tagForQuery_ = function (query) {
	        var queryKey = SyncTree.makeQueryKey_(query);
	        return this.queryToTagMap.get(queryKey);
	    };
	    /**
	     * Static accessor for query tags.
	     */
	    SyncTree.getNextQueryTag_ = function () {
	        return SyncTree.nextQueryTag_++;
	    };
	    /**
	     * A helper method to apply tagged operations
	     */
	    SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {
	        var syncPoint = this.syncPointTree_.get(queryPath);
	        index_cjs.assert(syncPoint, "Missing sync point for query tag that we're tracking");
	        var writesCache = this.pendingWriteTree_.childWrites(queryPath);
	        return syncPoint.applyOperation(operation, writesCache, 
	        /*serverCache=*/ null);
	    };
	    /**
	     * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.
	     *
	     * NOTES:
	     * - Descendant SyncPoints will be visited first (since we raise events depth-first).
	     *
	     * - We call applyOperation() on each SyncPoint passing three things:
	     *   1. A version of the Operation that has been made relative to the SyncPoint location.
	     *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.
	     *   3. A snapshot Node with cached server data, if we have it.
	     *
	     * - We concatenate all of the events returned by each SyncPoint and return the result.
	     */
	    SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {
	        return this.applyOperationHelper_(operation, this.syncPointTree_, 
	        /*serverCache=*/ null, this.pendingWriteTree_.childWrites(Path.Empty));
	    };
	    /**
	     * Recursive helper for applyOperationToSyncPoints_
	     */
	    SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {
	        if (operation.path.isEmpty()) {
	            return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);
	        }
	        else {
	            var syncPoint = syncPointTree.get(Path.Empty);
	            // If we don't have cached server data, see if we can get it from this SyncPoint.
	            if (serverCache == null && syncPoint != null) {
	                serverCache = syncPoint.getCompleteServerCache(Path.Empty);
	            }
	            var events = [];
	            var childName = operation.path.getFront();
	            var childOperation = operation.operationForChild(childName);
	            var childTree = syncPointTree.children.get(childName);
	            if (childTree && childOperation) {
	                var childServerCache = serverCache
	                    ? serverCache.getImmediateChild(childName)
	                    : null;
	                var childWritesCache = writesCache.child(childName);
	                events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));
	            }
	            if (syncPoint) {
	                events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));
	            }
	            return events;
	        }
	    };
	    /**
	     * Recursive helper for applyOperationToSyncPoints_
	     */
	    SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {
	        var _this = this;
	        var syncPoint = syncPointTree.get(Path.Empty);
	        // If we don't have cached server data, see if we can get it from this SyncPoint.
	        if (serverCache == null && syncPoint != null) {
	            serverCache = syncPoint.getCompleteServerCache(Path.Empty);
	        }
	        var events = [];
	        syncPointTree.children.inorderTraversal(function (childName, childTree) {
	            var childServerCache = serverCache
	                ? serverCache.getImmediateChild(childName)
	                : null;
	            var childWritesCache = writesCache.child(childName);
	            var childOperation = operation.operationForChild(childName);
	            if (childOperation) {
	                events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));
	            }
	        });
	        if (syncPoint) {
	            events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));
	        }
	        return events;
	    };
	    /**
	     * Static tracker for next query tag.
	     */
	    SyncTree.nextQueryTag_ = 1;
	    return SyncTree;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Mutable object which basically just stores a reference to the "latest" immutable snapshot.
	 *
	 * @constructor
	 */
	var SnapshotHolder = /** @class */ (function () {
	    function SnapshotHolder() {
	        this.rootNode_ = ChildrenNode.EMPTY_NODE;
	    }
	    SnapshotHolder.prototype.getNode = function (path) {
	        return this.rootNode_.getChild(path);
	    };
	    SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {
	        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);
	    };
	    return SnapshotHolder;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Tracks a collection of stats.
	 *
	 * @constructor
	 */
	var StatsCollection = /** @class */ (function () {
	    function StatsCollection() {
	        this.counters_ = {};
	    }
	    StatsCollection.prototype.incrementCounter = function (name, amount) {
	        if (amount === void 0) { amount = 1; }
	        if (!index_cjs.contains(this.counters_, name)) {
	            this.counters_[name] = 0;
	        }
	        this.counters_[name] += amount;
	    };
	    StatsCollection.prototype.get = function () {
	        return index_cjs.deepCopy(this.counters_);
	    };
	    return StatsCollection;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var StatsManager = /** @class */ (function () {
	    function StatsManager() {
	    }
	    StatsManager.getCollection = function (repoInfo) {
	        var hashString = repoInfo.toString();
	        if (!this.collections_[hashString]) {
	            this.collections_[hashString] = new StatsCollection();
	        }
	        return this.collections_[hashString];
	    };
	    StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {
	        var hashString = repoInfo.toString();
	        if (!this.reporters_[hashString]) {
	            this.reporters_[hashString] = creatorFunction();
	        }
	        return this.reporters_[hashString];
	    };
	    StatsManager.collections_ = {};
	    StatsManager.reporters_ = {};
	    return StatsManager;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Returns the delta from the previous call to get stats.
	 *
	 * @param collection_ The collection to "listen" to.
	 * @constructor
	 */
	var StatsListener = /** @class */ (function () {
	    function StatsListener(collection_) {
	        this.collection_ = collection_;
	        this.last_ = null;
	    }
	    StatsListener.prototype.get = function () {
	        var newStats = this.collection_.get();
	        var delta = tslib.__assign({}, newStats);
	        if (this.last_) {
	            each(this.last_, function (stat, value) {
	                delta[stat] = delta[stat] - value;
	            });
	        }
	        this.last_ = newStats;
	        return delta;
	    };
	    return StatsListener;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably
	// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10
	// seconds to try to ensure the Firebase connection is established / settled.
	var FIRST_STATS_MIN_TIME = 10 * 1000;
	var FIRST_STATS_MAX_TIME = 30 * 1000;
	// We'll continue to report stats on average every 5 minutes.
	var REPORT_STATS_INTERVAL = 5 * 60 * 1000;
	/**
	 * @constructor
	 */
	var StatsReporter = /** @class */ (function () {
	    /**
	     * @param collection
	     * @param server_
	     */
	    function StatsReporter(collection, server_) {
	        this.server_ = server_;
	        this.statsToReport_ = {};
	        this.statsListener_ = new StatsListener(collection);
	        var timeout = FIRST_STATS_MIN_TIME +
	            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();
	        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));
	    }
	    StatsReporter.prototype.includeStat = function (stat) {
	        this.statsToReport_[stat] = true;
	    };
	    StatsReporter.prototype.reportStats_ = function () {
	        var _this = this;
	        var stats = this.statsListener_.get();
	        var reportedStats = {};
	        var haveStatsToReport = false;
	        each(stats, function (stat, value) {
	            if (value > 0 && index_cjs.contains(_this.statsToReport_, stat)) {
	                reportedStats[stat] = value;
	                haveStatsToReport = true;
	            }
	        });
	        if (haveStatsToReport) {
	            this.server_.reportStats(reportedStats);
	        }
	        // queue our next run.
	        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));
	    };
	    return StatsReporter;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * The event queue serves a few purposes:
	 * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more
	 *    events being queued.
	 * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,
	 *    raiseQueuedEvents() is called again, the "inner" call will pick up raising events where the "outer" call
	 *    left off, ensuring that the events are still raised synchronously and in order.
	 * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued
	 *    events are raised synchronously.
	 *
	 * NOTE: This can all go away if/when we move to async events.
	 *
	 * @constructor
	 */
	var EventQueue = /** @class */ (function () {
	    function EventQueue() {
	        /**
	         * @private
	         * @type {!Array.<EventList>}
	         */
	        this.eventLists_ = [];
	        /**
	         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.
	         * @private
	         * @type {!number}
	         */
	        this.recursionDepth_ = 0;
	    }
	    /**
	     * @param {!Array.<Event>} eventDataList The new events to queue.
	     */
	    EventQueue.prototype.queueEvents = function (eventDataList) {
	        // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.
	        var currList = null;
	        for (var i = 0; i < eventDataList.length; i++) {
	            var eventData = eventDataList[i];
	            var eventPath = eventData.getPath();
	            if (currList !== null && !eventPath.equals(currList.getPath())) {
	                this.eventLists_.push(currList);
	                currList = null;
	            }
	            if (currList === null) {
	                currList = new EventList(eventPath);
	            }
	            currList.add(eventData);
	        }
	        if (currList) {
	            this.eventLists_.push(currList);
	        }
	    };
	    /**
	     * Queues the specified events and synchronously raises all events (including previously queued ones)
	     * for the specified path.
	     *
	     * It is assumed that the new events are all for the specified path.
	     *
	     * @param {!Path} path The path to raise events for.
	     * @param {!Array.<Event>} eventDataList The new events to raise.
	     */
	    EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) {
	        this.queueEvents(eventDataList);
	        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {
	            return eventPath.equals(path);
	        });
	    };
	    /**
	     * Queues the specified events and synchronously raises all events (including previously queued ones) for
	     * locations related to the specified change path (i.e. all ancestors and descendants).
	     *
	     * It is assumed that the new events are all related (ancestor or descendant) to the specified path.
	     *
	     * @param {!Path} changedPath The path to raise events for.
	     * @param {!Array.<!Event>} eventDataList The events to raise
	     */
	    EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) {
	        this.queueEvents(eventDataList);
	        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {
	            return eventPath.contains(changedPath) || changedPath.contains(eventPath);
	        });
	    };
	    /**
	     * @param {!function(!Path):boolean} predicate
	     * @private
	     */
	    EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) {
	        this.recursionDepth_++;
	        var sentAll = true;
	        for (var i = 0; i < this.eventLists_.length; i++) {
	            var eventList = this.eventLists_[i];
	            if (eventList) {
	                var eventPath = eventList.getPath();
	                if (predicate(eventPath)) {
	                    this.eventLists_[i].raise();
	                    this.eventLists_[i] = null;
	                }
	                else {
	                    sentAll = false;
	                }
	            }
	        }
	        if (sentAll) {
	            this.eventLists_ = [];
	        }
	        this.recursionDepth_--;
	    };
	    return EventQueue;
	}());
	/**
	 * @param {!Path} path
	 * @constructor
	 */
	var EventList = /** @class */ (function () {
	    function EventList(path_) {
	        this.path_ = path_;
	        /**
	         * @type {!Array.<Event>}
	         * @private
	         */
	        this.events_ = [];
	    }
	    /**
	     * @param {!Event} eventData
	     */
	    EventList.prototype.add = function (eventData) {
	        this.events_.push(eventData);
	    };
	    /**
	     * Iterates through the list and raises each event
	     */
	    EventList.prototype.raise = function () {
	        for (var i = 0; i < this.events_.length; i++) {
	            var eventData = this.events_[i];
	            if (eventData !== null) {
	                this.events_[i] = null;
	                var eventFn = eventData.getEventRunner();
	                if (logger) {
	                    log('event: ' + eventData.toString());
	                }
	                exceptionGuard(eventFn);
	            }
	        }
	    };
	    /**
	     * @return {!Path}
	     */
	    EventList.prototype.getPath = function () {
	        return this.path_;
	    };
	    return EventList;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Base class to be used if you want to emit events. Call the constructor with
	 * the set of allowed event names.
	 */
	var EventEmitter = /** @class */ (function () {
	    /**
	     * @param {!Array.<string>} allowedEvents_
	     */
	    function EventEmitter(allowedEvents_) {
	        this.allowedEvents_ = allowedEvents_;
	        this.listeners_ = {};
	        index_cjs.assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');
	    }
	    /**
	     * To be called by derived classes to trigger events.
	     * @param {!string} eventType
	     * @param {...*} varArgs
	     */
	    EventEmitter.prototype.trigger = function (eventType) {
	        var varArgs = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            varArgs[_i - 1] = arguments[_i];
	        }
	        if (Array.isArray(this.listeners_[eventType])) {
	            // Clone the list, since callbacks could add/remove listeners.
	            var listeners = tslib.__spread(this.listeners_[eventType]);
	            for (var i = 0; i < listeners.length; i++) {
	                listeners[i].callback.apply(listeners[i].context, varArgs);
	            }
	        }
	    };
	    EventEmitter.prototype.on = function (eventType, callback, context) {
	        this.validateEventType_(eventType);
	        this.listeners_[eventType] = this.listeners_[eventType] || [];
	        this.listeners_[eventType].push({ callback: callback, context: context });
	        var eventData = this.getInitialEvent(eventType);
	        if (eventData) {
	            callback.apply(context, eventData);
	        }
	    };
	    EventEmitter.prototype.off = function (eventType, callback, context) {
	        this.validateEventType_(eventType);
	        var listeners = this.listeners_[eventType] || [];
	        for (var i = 0; i < listeners.length; i++) {
	            if (listeners[i].callback === callback &&
	                (!context || context === listeners[i].context)) {
	                listeners.splice(i, 1);
	                return;
	            }
	        }
	    };
	    EventEmitter.prototype.validateEventType_ = function (eventType) {
	        index_cjs.assert(this.allowedEvents_.find(function (et) {
	            return et === eventType;
	        }), 'Unknown event: ' + eventType);
	    };
	    return EventEmitter;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @extends {EventEmitter}
	 */
	var VisibilityMonitor = /** @class */ (function (_super) {
	    tslib.__extends(VisibilityMonitor, _super);
	    function VisibilityMonitor() {
	        var _this = _super.call(this, ['visible']) || this;
	        var hidden;
	        var visibilityChange;
	        if (typeof document !== 'undefined' &&
	            typeof document.addEventListener !== 'undefined') {
	            if (typeof document['hidden'] !== 'undefined') {
	                // Opera 12.10 and Firefox 18 and later support
	                visibilityChange = 'visibilitychange';
	                hidden = 'hidden';
	            }
	            else if (typeof document['mozHidden'] !== 'undefined') {
	                visibilityChange = 'mozvisibilitychange';
	                hidden = 'mozHidden';
	            }
	            else if (typeof document['msHidden'] !== 'undefined') {
	                visibilityChange = 'msvisibilitychange';
	                hidden = 'msHidden';
	            }
	            else if (typeof document['webkitHidden'] !== 'undefined') {
	                visibilityChange = 'webkitvisibilitychange';
	                hidden = 'webkitHidden';
	            }
	        }
	        // Initially, we always assume we are visible. This ensures that in browsers
	        // without page visibility support or in cases where we are never visible
	        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay
	        // reconnects
	        _this.visible_ = true;
	        if (visibilityChange) {
	            document.addEventListener(visibilityChange, function () {
	                var visible = !document[hidden];
	                if (visible !== _this.visible_) {
	                    _this.visible_ = visible;
	                    _this.trigger('visible', visible);
	                }
	            }, false);
	        }
	        return _this;
	    }
	    VisibilityMonitor.getInstance = function () {
	        return new VisibilityMonitor();
	    };
	    /**
	     * @param {!string} eventType
	     * @return {Array.<boolean>}
	     */
	    VisibilityMonitor.prototype.getInitialEvent = function (eventType) {
	        index_cjs.assert(eventType === 'visible', 'Unknown event type: ' + eventType);
	        return [this.visible_];
	    };
	    return VisibilityMonitor;
	}(EventEmitter));

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Monitors online state (as reported by window.online/offline events).
	 *
	 * The expectation is that this could have many false positives (thinks we are online
	 * when we're not), but no false negatives.  So we can safely use it to determine when
	 * we definitely cannot reach the internet.
	 *
	 * @extends {EventEmitter}
	 */
	var OnlineMonitor = /** @class */ (function (_super) {
	    tslib.__extends(OnlineMonitor, _super);
	    function OnlineMonitor() {
	        var _this = _super.call(this, ['online']) || this;
	        _this.online_ = true;
	        // We've had repeated complaints that Cordova apps can get stuck "offline", e.g.
	        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810
	        // It would seem that the 'online' event does not always fire consistently. So we disable it
	        // for Cordova.
	        if (typeof window !== 'undefined' &&
	            typeof window.addEventListener !== 'undefined' &&
	            !index_cjs.isMobileCordova()) {
	            window.addEventListener('online', function () {
	                if (!_this.online_) {
	                    _this.online_ = true;
	                    _this.trigger('online', true);
	                }
	            }, false);
	            window.addEventListener('offline', function () {
	                if (_this.online_) {
	                    _this.online_ = false;
	                    _this.trigger('online', false);
	                }
	            }, false);
	        }
	        return _this;
	    }
	    OnlineMonitor.getInstance = function () {
	        return new OnlineMonitor();
	    };
	    /**
	     * @param {!string} eventType
	     * @return {Array.<boolean>}
	     */
	    OnlineMonitor.prototype.getInitialEvent = function (eventType) {
	        index_cjs.assert(eventType === 'online', 'Unknown event type: ' + eventType);
	        return [this.online_];
	    };
	    /**
	     * @return {boolean}
	     */
	    OnlineMonitor.prototype.currentlyOnline = function () {
	        return this.online_;
	    };
	    return OnlineMonitor;
	}(EventEmitter));

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * This class ensures the packets from the server arrive in order
	 * This class takes data from the server and ensures it gets passed into the callbacks in order.
	 * @constructor
	 */
	var PacketReceiver = /** @class */ (function () {
	    /**
	     * @param onMessage_
	     */
	    function PacketReceiver(onMessage_) {
	        this.onMessage_ = onMessage_;
	        this.pendingResponses = [];
	        this.currentResponseNum = 0;
	        this.closeAfterResponse = -1;
	        this.onClose = null;
	    }
	    PacketReceiver.prototype.closeAfter = function (responseNum, callback) {
	        this.closeAfterResponse = responseNum;
	        this.onClose = callback;
	        if (this.closeAfterResponse < this.currentResponseNum) {
	            this.onClose();
	            this.onClose = null;
	        }
	    };
	    /**
	     * Each message from the server comes with a response number, and an array of data. The responseNumber
	     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all
	     * browsers will respond in the same order as the requests we sent
	     * @param {number} requestNum
	     * @param {Array} data
	     */
	    PacketReceiver.prototype.handleResponse = function (requestNum, data) {
	        var _this = this;
	        this.pendingResponses[requestNum] = data;
	        var _loop_1 = function () {
	            var toProcess = this_1.pendingResponses[this_1.currentResponseNum];
	            delete this_1.pendingResponses[this_1.currentResponseNum];
	            var _loop_2 = function (i) {
	                if (toProcess[i]) {
	                    exceptionGuard(function () {
	                        _this.onMessage_(toProcess[i]);
	                    });
	                }
	            };
	            for (var i = 0; i < toProcess.length; ++i) {
	                _loop_2(i);
	            }
	            if (this_1.currentResponseNum === this_1.closeAfterResponse) {
	                if (this_1.onClose) {
	                    this_1.onClose();
	                    this_1.onClose = null;
	                }
	                return "break";
	            }
	            this_1.currentResponseNum++;
	        };
	        var this_1 = this;
	        while (this.pendingResponses[this.currentResponseNum]) {
	            var state_1 = _loop_1();
	            if (state_1 === "break")
	                break;
	        }
	    };
	    return PacketReceiver;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// URL query parameters associated with longpolling
	var FIREBASE_LONGPOLL_START_PARAM = 'start';
	var FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';
	var FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';
	var FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';
	var FIREBASE_LONGPOLL_ID_PARAM = 'id';
	var FIREBASE_LONGPOLL_PW_PARAM = 'pw';
	var FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';
	var FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';
	var FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';
	var FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';
	var FIREBASE_LONGPOLL_DATA_PARAM = 'd';
	var FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';
	//Data size constants.
	//TODO: Perf: the maximum length actually differs from browser to browser.
	// We should check what browser we're on and set accordingly.
	var MAX_URL_DATA_SIZE = 1870;
	var SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=
	var MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;
	/**
	 * Keepalive period
	 * send a fresh request at minimum every 25 seconds. Opera has a maximum request
	 * length of 30 seconds that we can't exceed.
	 * @const
	 * @type {number}
	 */
	var KEEPALIVE_REQUEST_INTERVAL = 25000;
	/**
	 * How long to wait before aborting a long-polling connection attempt.
	 * @const
	 * @type {number}
	 */
	var LP_CONNECT_TIMEOUT = 30000;
	/**
	 * This class manages a single long-polling connection.
	 *
	 * @constructor
	 * @implements {Transport}
	 */
	var BrowserPollConnection = /** @class */ (function () {
	    /**
	     * @param connId An identifier for this connection, used for logging
	     * @param repoInfo The info for the endpoint to send data to.
	     * @param applicationId The Firebase App ID for this project.
	     * @param transportSessionId Optional transportSessionid if we are reconnecting for an existing
	     *                                         transport session
	     * @param lastSessionId Optional lastSessionId if the PersistentConnection has already created a
	     *                                     connection previously
	     */
	    function BrowserPollConnection(connId, repoInfo, applicationId, transportSessionId, lastSessionId) {
	        this.connId = connId;
	        this.repoInfo = repoInfo;
	        this.applicationId = applicationId;
	        this.transportSessionId = transportSessionId;
	        this.lastSessionId = lastSessionId;
	        this.bytesSent = 0;
	        this.bytesReceived = 0;
	        this.everConnected_ = false;
	        this.log_ = logWrapper(connId);
	        this.stats_ = StatsManager.getCollection(repoInfo);
	        this.urlFn = function (params) {
	            return repoInfo.connectionURL(LONG_POLLING, params);
	        };
	    }
	    /**
	     *
	     * @param {function(Object)} onMessage Callback when messages arrive
	     * @param {function()} onDisconnect Callback with connection lost.
	     */
	    BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {
	        var _this = this;
	        this.curSegmentNum = 0;
	        this.onDisconnect_ = onDisconnect;
	        this.myPacketOrderer = new PacketReceiver(onMessage);
	        this.isClosed_ = false;
	        this.connectTimeoutTimer_ = setTimeout(function () {
	            _this.log_('Timed out trying to connect.');
	            // Make sure we clear the host cache
	            _this.onClosed_();
	            _this.connectTimeoutTimer_ = null;
	            // eslint-disable-next-line @typescript-eslint/no-explicit-any
	        }, Math.floor(LP_CONNECT_TIMEOUT));
	        // Ensure we delay the creation of the iframe until the DOM is loaded.
	        executeWhenDOMReady(function () {
	            if (_this.isClosed_) {
	                return;
	            }
	            //Set up a callback that gets triggered once a connection is set up.
	            _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i] = arguments[_i];
	                }
	                var _a = tslib.__read(args, 5), command = _a[0], arg1 = _a[1], arg2 = _a[2], arg3 = _a[3], arg4 = _a[4];
	                _this.incrementIncomingBytes_(args);
	                if (!_this.scriptTagHolder) {
	                    return; // we closed the connection.
	                }
	                if (_this.connectTimeoutTimer_) {
	                    clearTimeout(_this.connectTimeoutTimer_);
	                    _this.connectTimeoutTimer_ = null;
	                }
	                _this.everConnected_ = true;
	                if (command === FIREBASE_LONGPOLL_START_PARAM) {
	                    _this.id = arg1;
	                    _this.password = arg2;
	                }
	                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {
	                    // Don't clear the host cache. We got a response from the server, so we know it's reachable
	                    if (arg1) {
	                        // We aren't expecting any more data (other than what the server's already in the process of sending us
	                        // through our already open polls), so don't send any more.
	                        _this.scriptTagHolder.sendNewPolls = false;
	                        // arg1 in this case is the last response number sent by the server. We should try to receive
	                        // all of the responses up to this one before closing
	                        _this.myPacketOrderer.closeAfter(arg1, function () {
	                            _this.onClosed_();
	                        });
	                    }
	                    else {
	                        _this.onClosed_();
	                    }
	                }
	                else {
	                    throw new Error('Unrecognized command received: ' + command);
	                }
	            }, function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i] = arguments[_i];
	                }
	                var _a = tslib.__read(args, 2), pN = _a[0], data = _a[1];
	                _this.incrementIncomingBytes_(args);
	                _this.myPacketOrderer.handleResponse(pN, data);
	            }, function () {
	                _this.onClosed_();
	            }, _this.urlFn);
	            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results
	            //from cache.
	            var urlParams = {};
	            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';
	            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);
	            if (_this.scriptTagHolder.uniqueCallbackIdentifier) {
	                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;
	            }
	            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
	            if (_this.transportSessionId) {
	                urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;
	            }
	            if (_this.lastSessionId) {
	                urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;
	            }
	            if (_this.applicationId) {
	                urlParams[APPLICATION_ID_PARAM] = _this.applicationId;
	            }
	            if (typeof location !== 'undefined' &&
	                location.href &&
	                location.href.indexOf(FORGE_DOMAIN) !== -1) {
	                urlParams[REFERER_PARAM] = FORGE_REF;
	            }
	            var connectURL = _this.urlFn(urlParams);
	            _this.log_('Connecting via long-poll to ' + connectURL);
	            _this.scriptTagHolder.addTag(connectURL, function () {
	                /* do nothing */
	            });
	        });
	    };
	    /**
	     * Call this when a handshake has completed successfully and we want to consider the connection established
	     */
	    BrowserPollConnection.prototype.start = function () {
	        this.scriptTagHolder.startLongPoll(this.id, this.password);
	        this.addDisconnectPingFrame(this.id, this.password);
	    };
	    /**
	     * Forces long polling to be considered as a potential transport
	     */
	    BrowserPollConnection.forceAllow = function () {
	        BrowserPollConnection.forceAllow_ = true;
	    };
	    /**
	     * Forces longpolling to not be considered as a potential transport
	     */
	    BrowserPollConnection.forceDisallow = function () {
	        BrowserPollConnection.forceDisallow_ = true;
	    };
	    // Static method, use string literal so it can be accessed in a generic way
	    BrowserPollConnection.isAvailable = function () {
	        if (index_cjs.isNodeSdk()) {
	            return false;
	        }
	        else if (BrowserPollConnection.forceAllow_) {
	            return true;
	        }
	        else {
	            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in
	            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).
	            return (!BrowserPollConnection.forceDisallow_ &&
	                typeof document !== 'undefined' &&
	                document.createElement != null &&
	                !isChromeExtensionContentScript() &&
	                !isWindowsStoreApp());
	        }
	    };
	    /**
	     * No-op for polling
	     */
	    BrowserPollConnection.prototype.markConnectionHealthy = function () { };
	    /**
	     * Stops polling and cleans up the iframe
	     * @private
	     */
	    BrowserPollConnection.prototype.shutdown_ = function () {
	        this.isClosed_ = true;
	        if (this.scriptTagHolder) {
	            this.scriptTagHolder.close();
	            this.scriptTagHolder = null;
	        }
	        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.
	        if (this.myDisconnFrame) {
	            document.body.removeChild(this.myDisconnFrame);
	            this.myDisconnFrame = null;
	        }
	        if (this.connectTimeoutTimer_) {
	            clearTimeout(this.connectTimeoutTimer_);
	            this.connectTimeoutTimer_ = null;
	        }
	    };
	    /**
	     * Triggered when this transport is closed
	     * @private
	     */
	    BrowserPollConnection.prototype.onClosed_ = function () {
	        if (!this.isClosed_) {
	            this.log_('Longpoll is closing itself');
	            this.shutdown_();
	            if (this.onDisconnect_) {
	                this.onDisconnect_(this.everConnected_);
	                this.onDisconnect_ = null;
	            }
	        }
	    };
	    /**
	     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server
	     * that we've left.
	     */
	    BrowserPollConnection.prototype.close = function () {
	        if (!this.isClosed_) {
	            this.log_('Longpoll is being closed.');
	            this.shutdown_();
	        }
	    };
	    /**
	     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then
	     * broken into chunks (since URLs have a small maximum length).
	     * @param {!Object} data The JSON data to transmit.
	     */
	    BrowserPollConnection.prototype.send = function (data) {
	        var dataStr = index_cjs.stringify(data);
	        this.bytesSent += dataStr.length;
	        this.stats_.incrementCounter('bytes_sent', dataStr.length);
	        //first, lets get the base64-encoded data
	        var base64data = index_cjs.base64Encode(dataStr);
	        //We can only fit a certain amount in each URL, so we need to split this request
	        //up into multiple pieces if it doesn't fit in one request.
	        var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);
	        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number
	        //of segments so that we can reassemble the packet on the server.
	        for (var i = 0; i < dataSegs.length; i++) {
	            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);
	            this.curSegmentNum++;
	        }
	    };
	    /**
	     * This is how we notify the server that we're leaving.
	     * We aren't able to send requests with DHTML on a window close event, but we can
	     * trigger XHR requests in some browsers (everything but Opera basically).
	     * @param {!string} id
	     * @param {!string} pw
	     */
	    BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {
	        if (index_cjs.isNodeSdk()) {
	            return;
	        }
	        this.myDisconnFrame = document.createElement('iframe');
	        var urlParams = {};
	        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';
	        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;
	        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;
	        this.myDisconnFrame.src = this.urlFn(urlParams);
	        this.myDisconnFrame.style.display = 'none';
	        document.body.appendChild(this.myDisconnFrame);
	    };
	    /**
	     * Used to track the bytes received by this client
	     * @param {*} args
	     * @private
	     */
	    BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {
	        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.
	        var bytesReceived = index_cjs.stringify(args).length;
	        this.bytesReceived += bytesReceived;
	        this.stats_.incrementCounter('bytes_received', bytesReceived);
	    };
	    return BrowserPollConnection;
	}());
	/*********************************************************************************************
	 * A wrapper around an iframe that is used as a long-polling script holder.
	 * @constructor
	 *********************************************************************************************/
	var FirebaseIFrameScriptHolder = /** @class */ (function () {
	    /**
	     * @param commandCB - The callback to be called when control commands are recevied from the server.
	     * @param onMessageCB - The callback to be triggered when responses arrive from the server.
	     * @param onDisconnect - The callback to be triggered when this tag holder is closed
	     * @param urlFn - A function that provides the URL of the endpoint to send data to.
	     */
	    function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {
	        this.onDisconnect = onDisconnect;
	        this.urlFn = urlFn;
	        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause
	        //problems in some browsers.
	        this.outstandingRequests = new Set();
	        //A queue of the pending segments waiting for transmission to the server.
	        this.pendingSegs = [];
	        //A serial number. We use this for two things:
	        // 1) A way to ensure the browser doesn't cache responses to polls
	        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The
	        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute
	        //    JSONP code in the order it was added to the iframe.
	        this.currentSerial = Math.floor(Math.random() * 100000000);
	        // This gets set to false when we're "closing down" the connection (e.g. we're switching transports but there's still
	        // incoming data from the server that we're waiting for).
	        this.sendNewPolls = true;
	        if (!index_cjs.isNodeSdk()) {
	            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the
	            //iframes where we put the long-polling script tags. We have two callbacks:
	            //   1) Command Callback - Triggered for control issues, like starting a connection.
	            //   2) Message Callback - Triggered when new data arrives.
	            this.uniqueCallbackIdentifier = LUIDGenerator();
	            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;
	            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;
	            //Create an iframe for us to add script tags to.
	            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();
	            // Set the iframe's contents.
	            var script = '';
	            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient
	            // for ie9, but ie8 needs to do it again in the document itself.
	            if (this.myIFrame.src &&
	                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {
	                var currentDomain = document.domain;
	                script = '<script>document.domain="' + currentDomain + '";</script>';
	            }
	            var iframeContents = '<html><body>' + script + '</body></html>';
	            try {
	                this.myIFrame.doc.open();
	                this.myIFrame.doc.write(iframeContents);
	                this.myIFrame.doc.close();
	            }
	            catch (e) {
	                log('frame writing exception');
	                if (e.stack) {
	                    log(e.stack);
	                }
	                log(e);
	            }
	        }
	        else {
	            this.commandCB = commandCB;
	            this.onMessageCB = onMessageCB;
	        }
	    }
	    /**
	     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can
	     * actually use.
	     * @private
	     * @return {Element}
	     */
	    FirebaseIFrameScriptHolder.createIFrame_ = function () {
	        var iframe = document.createElement('iframe');
	        iframe.style.display = 'none';
	        // This is necessary in order to initialize the document inside the iframe
	        if (document.body) {
	            document.body.appendChild(iframe);
	            try {
	                // If document.domain has been modified in IE, this will throw an error, and we need to set the
	                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute
	                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.
	                var a = iframe.contentWindow.document;
	                if (!a) {
	                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.
	                    log('No IE domain setting required');
	                }
	            }
	            catch (e) {
	                var domain = document.domain;
	                iframe.src =
	                    "javascript:void((function(){document.open();document.domain='" +
	                        domain +
	                        "';document.close();})())";
	            }
	        }
	        else {
	            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this
	            // never gets hit.
	            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';
	        }
	        // Get the document of the iframe in a browser-specific way.
	        if (iframe.contentDocument) {
	            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari
	        }
	        else if (iframe.contentWindow) {
	            iframe.doc = iframe.contentWindow.document; // Internet Explorer
	            // eslint-disable-next-line @typescript-eslint/no-explicit-any
	        }
	        else if (iframe.document) {
	            // eslint-disable-next-line @typescript-eslint/no-explicit-any
	            iframe.doc = iframe.document; //others?
	        }
	        return iframe;
	    };
	    /**
	     * Cancel all outstanding queries and remove the frame.
	     */
	    FirebaseIFrameScriptHolder.prototype.close = function () {
	        var _this = this;
	        //Mark this iframe as dead, so no new requests are sent.
	        this.alive = false;
	        if (this.myIFrame) {
	            //We have to actually remove all of the html inside this iframe before removing it from the
	            //window, or IE will continue loading and executing the script tags we've already added, which
	            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.
	            this.myIFrame.doc.body.innerHTML = '';
	            setTimeout(function () {
	                if (_this.myIFrame !== null) {
	                    document.body.removeChild(_this.myIFrame);
	                    _this.myIFrame = null;
	                }
	            }, Math.floor(0));
	        }
	        // Protect from being called recursively.
	        var onDisconnect = this.onDisconnect;
	        if (onDisconnect) {
	            this.onDisconnect = null;
	            onDisconnect();
	        }
	    };
	    /**
	     * Actually start the long-polling session by adding the first script tag(s) to the iframe.
	     * @param {!string} id - The ID of this connection
	     * @param {!string} pw - The password for this connection
	     */
	    FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {
	        this.myID = id;
	        this.myPW = pw;
	        this.alive = true;
	        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.
	        while (this.newRequest_()) { }
	    };
	    /**
	     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't
	     * too many outstanding requests and we are still alive.
	     *
	     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if
	     * needed.
	     */
	    FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {
	        // We keep one outstanding request open all the time to receive data, but if we need to send data
	        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically
	        // close the old request.
	        if (this.alive &&
	            this.sendNewPolls &&
	            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {
	            //construct our url
	            this.currentSerial++;
	            var urlParams = {};
	            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;
	            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;
	            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;
	            var theURL = this.urlFn(urlParams);
	            //Now add as much data as we can.
	            var curDataString = '';
	            var i = 0;
	            while (this.pendingSegs.length > 0) {
	                //first, lets see if the next segment will fit.
	                var nextSeg = this.pendingSegs[0];
	                if (nextSeg.d.length +
	                    SEG_HEADER_SIZE +
	                    curDataString.length <=
	                    MAX_URL_DATA_SIZE) {
	                    //great, the segment will fit. Lets append it.
	                    var theSeg = this.pendingSegs.shift();
	                    curDataString =
	                        curDataString +
	                            '&' +
	                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +
	                            i +
	                            '=' +
	                            theSeg.seg +
	                            '&' +
	                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +
	                            i +
	                            '=' +
	                            theSeg.ts +
	                            '&' +
	                            FIREBASE_LONGPOLL_DATA_PARAM +
	                            i +
	                            '=' +
	                            theSeg.d;
	                    i++;
	                }
	                else {
	                    break;
	                }
	            }
	            theURL = theURL + curDataString;
	            this.addLongPollTag_(theURL, this.currentSerial);
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    /**
	     * Queue a packet for transmission to the server.
	     * @param segnum - A sequential id for this packet segment used for reassembly
	     * @param totalsegs - The total number of segments in this packet
	     * @param data - The data for this segment.
	     */
	    FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {
	        //add this to the queue of segments to send.
	        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });
	        //send the data immediately if there isn't already data being transmitted, unless
	        //startLongPoll hasn't been called yet.
	        if (this.alive) {
	            this.newRequest_();
	        }
	    };
	    /**
	     * Add a script tag for a regular long-poll request.
	     * @param {!string} url - The URL of the script tag.
	     * @param {!number} serial - The serial number of the request.
	     * @private
	     */
	    FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {
	        var _this = this;
	        //remember that we sent this request.
	        this.outstandingRequests.add(serial);
	        var doNewRequest = function () {
	            _this.outstandingRequests.delete(serial);
	            _this.newRequest_();
	        };
	        // If this request doesn't return on its own accord (by the server sending us some data), we'll
	        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.
	        var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));
	        var readyStateCB = function () {
	            // Request completed.  Cancel the keepalive.
	            clearTimeout(keepaliveTimeout);
	            // Trigger a new request so we can continue receiving data.
	            doNewRequest();
	        };
	        this.addTag(url, readyStateCB);
	    };
	    /**
	     * Add an arbitrary script tag to the iframe.
	     * @param {!string} url - The URL for the script tag source.
	     * @param {!function()} loadCB - A callback to be triggered once the script has loaded.
	     */
	    FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {
	        var _this = this;
	        if (index_cjs.isNodeSdk()) {
	            // eslint-disable-next-line @typescript-eslint/no-explicit-any
	            this.doNodeLongPoll(url, loadCB);
	        }
	        else {
	            setTimeout(function () {
	                try {
	                    // if we're already closed, don't add this poll
	                    if (!_this.sendNewPolls) {
	                        return;
	                    }
	                    var newScript_1 = _this.myIFrame.doc.createElement('script');
	                    newScript_1.type = 'text/javascript';
	                    newScript_1.async = true;
	                    newScript_1.src = url;
	                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	                    newScript_1.onload = newScript_1.onreadystatechange = function () {
	                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
	                        var rstate = newScript_1.readyState;
	                        if (!rstate || rstate === 'loaded' || rstate === 'complete') {
	                            // eslint-disable-next-line @typescript-eslint/no-explicit-any
	                            newScript_1.onload = newScript_1.onreadystatechange = null;
	                            if (newScript_1.parentNode) {
	                                newScript_1.parentNode.removeChild(newScript_1);
	                            }
	                            loadCB();
	                        }
	                    };
	                    newScript_1.onerror = function () {
	                        log('Long-poll script failed to load: ' + url);
	                        _this.sendNewPolls = false;
	                        _this.close();
	                    };
	                    _this.myIFrame.doc.body.appendChild(newScript_1);
	                }
	                catch (e) {
	                    // TODO: we should make this error visible somehow
	                }
	            }, Math.floor(1));
	        }
	    };
	    return FirebaseIFrameScriptHolder;
	}());

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** The semver (www.semver.org) version of the SDK. */
	var SDK_VERSION = '';
	// SDK_VERSION should be set before any database instance is created
	function setSDKVersion(version) {
	    SDK_VERSION = version;
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var WEBSOCKET_MAX_FRAME_SIZE = 16384;
	var WEBSOCKET_KEEPALIVE_INTERVAL = 45000;
	var WebSocketImpl = null;
	if (typeof MozWebSocket !== 'undefined') {
	    WebSocketImpl = MozWebSocket;
	}
	else if (typeof WebSocket !== 'undefined') {
	    WebSocketImpl = WebSocket;
	}
	/**
	 * Create a new websocket connection with the given callbacks.
	 * @constructor
	 * @implements {Transport}
	 */
	var WebSocketConnection = /** @class */ (function () {
	    /**
	     * @param connId identifier for this transport
	     * @param repoInfo The info for the websocket endpoint.
	     * @param applicationId The Firebase App ID for this project.
	     * @param transportSessionId Optional transportSessionId if this is connecting to an existing transport
	     *                                         session
	     * @param lastSessionId Optional lastSessionId if there was a previous connection
	     */
	    function WebSocketConnection(connId, repoInfo, applicationId, transportSessionId, lastSessionId) {
	        this.connId = connId;
	        this.applicationId = applicationId;
	        this.keepaliveTimer = null;
	        this.frames = null;
	        this.totalFrames = 0;
	        this.bytesSent = 0;
	        this.bytesReceived = 0;
	        this.log_ = logWrapper(this.connId);
	        this.stats_ = StatsManager.getCollection(repoInfo);
	        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);
	    }
	    /**
	     * @param {RepoInfo} repoInfo The info for the websocket endpoint.
	     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport
	     *                                         session
	     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection
	     * @return {string} connection url
	     * @private
	     */
	    WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {
	        var urlParams = {};
	        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
	        if (!index_cjs.isNodeSdk() &&
	            typeof location !== 'undefined' &&
	            location.href &&
	            location.href.indexOf(FORGE_DOMAIN) !== -1) {
	            urlParams[REFERER_PARAM] = FORGE_REF;
	        }
	        if (transportSessionId) {
	            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;
	        }
	        if (lastSessionId) {
	            urlParams[LAST_SESSION_PARAM] = lastSessionId;
	        }
	        return repoInfo.connectionURL(WEBSOCKET, urlParams);
	    };
	    /**
	     *
	     * @param onMessage Callback when messages arrive
	     * @param onDisconnect Callback with connection lost.
	     */
	    WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {
	        var _this = this;
	        this.onDisconnect = onDisconnect;
	        this.onMessage = onMessage;
	        this.log_('Websocket connecting to ' + this.connURL);
	        this.everConnected_ = false;
	        // Assume failure until proven otherwise.
	        PersistentStorage.set('previous_websocket_failure', true);
	        try {
	            if (index_cjs.isNodeSdk()) {
	                var device = index_cjs.CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node';
	                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>
	                var options = {
	                    headers: {
	                        'User-Agent': "Firebase/" + PROTOCOL_VERSION + "/" + SDK_VERSION + "/" + process.platform + "/" + device,
	                        'X-Firebase-GMPID': this.applicationId || ''
	                    }
	                };
	                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.
	                var env = process['env'];
	                var proxy = this.connURL.indexOf('wss://') === 0
	                    ? env['HTTPS_PROXY'] || env['https_proxy']
	                    : env['HTTP_PROXY'] || env['http_proxy'];
	                if (proxy) {
	                    options['proxy'] = { origin: proxy };
	                }
	                this.mySock = new WebSocketImpl(this.connURL, [], options);
	            }
	            else {
	                var options = {
	                    headers: {
	                        'X-Firebase-GMPID': this.applicationId || ''
	                    }
	                };
	                this.mySock = new WebSocketImpl(this.connURL, [], options);
	            }
	        }
	        catch (e) {
	            this.log_('Error instantiating WebSocket.');
	            var error = e.message || e.data;
	            if (error) {
	                this.log_(error);
	            }
	            this.onClosed_();
	            return;
	        }
	        this.mySock.onopen = function () {
	            _this.log_('Websocket connected.');
	            _this.everConnected_ = true;
	        };
	        this.mySock.onclose = function () {
	            _this.log_('Websocket connection was disconnected.');
	            _this.mySock = null;
	            _this.onClosed_();
	        };
	        this.mySock.onmessage = function (m) {
	            _this.handleIncomingFrame(m);
	        };
	        this.mySock.onerror = function (e) {
	            _this.log_('WebSocket error.  Closing connection.');
	            // eslint-disable-next-line @typescript-eslint/no-explicit-any
	            var error = e.message || e.data;
	            if (error) {
	                _this.log_(error);
	            }
	            _this.onClosed_();
	        };
	    };
	    /**
	     * No-op for websockets, we don't need to do anything once the connection is confirmed as open
	     */
	    WebSocketConnection.prototype.start = function () { };
	    WebSocketConnection.forceDisallow = function () {
	        WebSocketConnection.forceDisallow_ = true;
	    };
	    WebSocketConnection.isAvailable = function () {
	        var isOldAndroid = false;
	        if (typeof navigator !== 'undefined' && navigator.userAgent) {
	            var oldAndroidRegex = /Android ([0-9]{0,}\.[0-9]{0,})/;
	            var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);
	            if (oldAndroidMatch && oldAndroidMatch.length > 1) {
	                if (parseFloat(oldAndroidMatch[1]) < 4.4) {
	                    isOldAndroid = true;
	                }
	            }
	        }
	        return (!isOldAndroid &&
	            WebSocketImpl !== null &&
	            !WebSocketConnection.forceDisallow_);
	    };
	    /**
	     * Returns true if we previously failed to connect with this transport.
	     * @return {boolean}
	     */
	    WebSocketConnection.previouslyFailed = function () {
	        // If our persistent storage is actually only in-memory storage,
	        // we default to assuming that it previously failed to be safe.
	        return (PersistentStorage.isInMemoryStorage ||
	            PersistentStorage.get('previous_websocket_failure') === true);
	    };
	    WebSocketConnection.prototype.markConnectionHealthy = function () {
	        PersistentStorage.remove('previous_websocket_failure');
	    };
	    WebSocketConnection.prototype.appendFrame_ = function (data) {
	        this.frames.push(data);
	        if (this.frames.length === this.totalFrames) {
	            var fullMess = this.frames.join('');
	            this.frames = null;
	            var jsonMess = index_cjs.jsonEval(fullMess);
	            //handle the message
	            this.onMessage(jsonMess);
	        }
	    };
	    /**
	     * @param {number} frameCount The number of frames we are expecting from the server
	     * @private
	     */
	    WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {
	        this.totalFrames = frameCount;
	        this.frames = [];
	    };
	    /**
	     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1
	     * @param {!String} data
	     * @return {?String} Any remaining data to be process, or null if there is none
	     * @private
	     */
	    WebSocketConnection.prototype.extractFrameCount_ = function (data) {
	        index_cjs.assert(this.frames === null, 'We already have a frame buffer');
	        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced
	        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508
	        if (data.length <= 6) {
	            var frameCount = Number(data);
	            if (!isNaN(frameCount)) {
	                this.handleNewFrameCount_(frameCount);
	                return null;
	            }
	        }
	        this.handleNewFrameCount_(1);
	        return data;
	    };
	    /**
	     * Process a websocket frame that has arrived from the server.
	     * @param mess The frame data
	     */
	    WebSocketConnection.prototype.handleIncomingFrame = function (mess) {
	        if (this.mySock === null) {
	            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.
	        }
	        var data = mess['data'];
	        this.bytesReceived += data.length;
	        this.stats_.incrementCounter('bytes_received', data.length);
	        this.resetKeepAlive();
	        if (this.frames !== null) {
	            // we're buffering
	            this.appendFrame_(data);
	        }
	        else {
	            // try to parse out a frame count, otherwise, assume 1 and process it
	            var remainingData = this.extractFrameCount_(data);
	            if (remainingData !== null) {
	                this.appendFrame_(remainingData);
	            }
	        }
	    };
	    /**
	     * Send a message to the server
	     * @param {Object} data The JSON object to transmit
	     */
	    WebSocketConnection.prototype.send = function (data) {
	        this.resetKeepAlive();
	        var dataStr = index_cjs.stringify(data);
	        this.bytesSent += dataStr.length;
	        this.stats_.incrementCounter('bytes_sent', dataStr.length);
	        //We can only fit a certain amount in each websocket frame, so we need to split this request
	        //up into multiple pieces if it doesn't fit in one request.
	        var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);
	        //Send the length header
	        if (dataSegs.length > 1) {
	            this.sendString_(String(dataSegs.length));
	        }
	        //Send the actual data in segments.
	        for (var i = 0; i < dataSegs.length; i++) {
	            this.sendString_(dataSegs[i]);
	        }
	    };
	    WebSocketConnection.prototype.shutdown_ = function () {
	        this.isClosed_ = true;
	        if (this.keepaliveTimer) {
	            clearInterval(this.keepaliveTimer);
	            this.keepaliveTimer = null;
	        }
	        if (this.mySock) {
	            this.mySock.close();
	            this.mySock = null;
	        }
	    };
	    WebSocketConnection.prototype.onClosed_ = function () {
	        if (!this.isClosed_) {
	            this.log_('WebSocket is closing itself');
	            this.shutdown_();
	            // since this is an internal close, trigger the close listener
	            if (this.onDisconnect) {
	                this.onDisconnect(this.everConnected_);
	                this.onDisconnect = null;
	            }
	        }
	    };
	    /**
	     * External-facing close handler.
	     * Close the websocket and kill the connection.
	     */
	    WebSocketConnection.prototype.close = function () {
	        if (!this.isClosed_) {
	            this.log_('WebSocket is being closed');
	            this.shutdown_();
	        }
	    };
	    /**
	     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after
	     * the last activity.
	     */
	    WebSocketConnection.prototype.resetKeepAlive = function () {
	        var _this = this;
	        clearInterval(this.keepaliveTimer);
	        this.keepaliveTimer = setInterval(function () {
	            //If there has been no websocket activity for a while, send a no-op
	            if (_this.mySock) {
	                _this.sendString_('0');
	            }
	            _this.resetKeepAlive();
	            // eslint-disable-next-line @typescript-eslint/no-explicit-any
	        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));
	    };
	    /**
	     * Send a string over the websocket.
	     *
	     * @param {string} str String to send.
	     * @private
	     */
	    WebSocketConnection.prototype.sendString_ = function (str) {
	        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()
	        // calls for some unknown reason.  We treat these as an error and disconnect.
	        // See https://app.asana.com/0/58926111402292/68021340250410
	        try {
	            this.mySock.send(str);
	        }
	        catch (e) {
	            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');
	            setTimeout(this.onClosed_.bind(this), 0);
	        }
	    };
	    /**
	     * Number of response before we consider the connection "healthy."
	     * @type {number}
	     */
	    WebSocketConnection.responsesRequiredToBeHealthy = 2;
	    /**
	     * Time to wait for the connection te become healthy before giving up.
	     * @type {number}
	     */
	    WebSocketConnection.healthyTimeout = 30000;
	    return WebSocketConnection;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Currently simplistic, this class manages what transport a Connection should use at various stages of its
	 * lifecycle.
	 *
	 * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if
	 * they are available.
	 * @constructor
	 */
	var TransportManager = /** @class */ (function () {
	    /**
	     * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to
	     */
	    function TransportManager(repoInfo) {
	        this.initTransports_(repoInfo);
	    }
	    Object.defineProperty(TransportManager, "ALL_TRANSPORTS", {
	        /**
	         * @const
	         * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}
	         */
	        get: function () {
	            return [BrowserPollConnection, WebSocketConnection];
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * @param {!RepoInfo} repoInfo
	     * @private
	     */
	    TransportManager.prototype.initTransports_ = function (repoInfo) {
	        var e_1, _a;
	        var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();
	        var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();
	        if (repoInfo.webSocketOnly) {
	            if (!isWebSocketsAvailable) {
	                warn("wss:// URL used, but browser isn't known to support websockets.  Trying anyway.");
	            }
	            isSkipPollConnection = true;
	        }
	        if (isSkipPollConnection) {
	            this.transports_ = [WebSocketConnection];
	        }
	        else {
	            var transports = (this.transports_ = []);
	            try {
	                for (var _b = tslib.__values(TransportManager.ALL_TRANSPORTS), _c = _b.next(); !_c.done; _c = _b.next()) {
	                    var transport = _c.value;
	                    if (transport && transport['isAvailable']()) {
	                        transports.push(transport);
	                    }
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	        }
	    };
	    /**
	     * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the
	     * initial transport to use
	     */
	    TransportManager.prototype.initialTransport = function () {
	        if (this.transports_.length > 0) {
	            return this.transports_[0];
	        }
	        else {
	            throw new Error('No transports available');
	        }
	    };
	    /**
	     * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next
	     * transport, or null
	     */
	    TransportManager.prototype.upgradeTransport = function () {
	        if (this.transports_.length > 1) {
	            return this.transports_[1];
	        }
	        else {
	            return null;
	        }
	    };
	    return TransportManager;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// Abort upgrade attempt if it takes longer than 60s.
	var UPGRADE_TIMEOUT = 60000;
	// For some transports (WebSockets), we need to "validate" the transport by exchanging a few requests and responses.
	// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.
	var DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;
	// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)
	// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout
	// but we've sent/received enough bytes, we don't cancel the connection.
	var BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;
	var BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;
	var MESSAGE_TYPE = 't';
	var MESSAGE_DATA = 'd';
	var CONTROL_SHUTDOWN = 's';
	var CONTROL_RESET = 'r';
	var CONTROL_ERROR = 'e';
	var CONTROL_PONG = 'o';
	var SWITCH_ACK = 'a';
	var END_TRANSMISSION = 'n';
	var PING = 'p';
	var SERVER_HELLO = 'h';
	/**
	 * Creates a new real-time connection to the server using whichever method works
	 * best in the current browser.
	 *
	 * @constructor
	 */
	var Connection = /** @class */ (function () {
	    /**
	     * @param id - an id for this connection
	     * @param repoInfo_ - the info for the endpoint to connect to
	     * @param applicationId_ - the Firebase App ID for this project
	     * @param onMessage_ - the callback to be triggered when a server-push message arrives
	     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.
	     * @param onDisconnect_ - the callback to be triggered when a connection was lost
	     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.
	     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server
	     */
	    function Connection(id, repoInfo_, applicationId_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {
	        this.id = id;
	        this.repoInfo_ = repoInfo_;
	        this.applicationId_ = applicationId_;
	        this.onMessage_ = onMessage_;
	        this.onReady_ = onReady_;
	        this.onDisconnect_ = onDisconnect_;
	        this.onKill_ = onKill_;
	        this.lastSessionId = lastSessionId;
	        this.connectionCount = 0;
	        this.pendingDataMessages = [];
	        this.state_ = 0 /* CONNECTING */;
	        this.log_ = logWrapper('c:' + this.id + ':');
	        this.transportManager_ = new TransportManager(repoInfo_);
	        this.log_('Connection created');
	        this.start_();
	    }
	    /**
	     * Starts a connection attempt
	     * @private
	     */
	    Connection.prototype.start_ = function () {
	        var _this = this;
	        var conn = this.transportManager_.initialTransport();
	        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, undefined, this.lastSessionId);
	        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
	        // can consider the transport healthy.
	        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;
	        var onMessageReceived = this.connReceiver_(this.conn_);
	        var onConnectionLost = this.disconnReceiver_(this.conn_);
	        this.tx_ = this.conn_;
	        this.rx_ = this.conn_;
	        this.secondaryConn_ = null;
	        this.isHealthy_ = false;
	        /*
	         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.
	         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.
	         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should
	         * still have the context of your originating frame.
	         */
	        setTimeout(function () {
	            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it
	            _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);
	        }, Math.floor(0));
	        var healthyTimeoutMS = conn['healthyTimeout'] || 0;
	        if (healthyTimeoutMS > 0) {
	            this.healthyTimeout_ = setTimeoutNonBlocking(function () {
	                _this.healthyTimeout_ = null;
	                if (!_this.isHealthy_) {
	                    if (_this.conn_ &&
	                        _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {
	                        _this.log_('Connection exceeded healthy timeout but has received ' +
	                            _this.conn_.bytesReceived +
	                            ' bytes.  Marking connection healthy.');
	                        _this.isHealthy_ = true;
	                        _this.conn_.markConnectionHealthy();
	                    }
	                    else if (_this.conn_ &&
	                        _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {
	                        _this.log_('Connection exceeded healthy timeout but has sent ' +
	                            _this.conn_.bytesSent +
	                            ' bytes.  Leaving connection alive.');
	                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to
	                        // the server.
	                    }
	                    else {
	                        _this.log_('Closing unhealthy connection after timeout.');
	                        _this.close();
	                    }
	                }
	                // eslint-disable-next-line @typescript-eslint/no-explicit-any
	            }, Math.floor(healthyTimeoutMS));
	        }
	    };
	    /**
	     * @return {!string}
	     * @private
	     */
	    Connection.prototype.nextTransportId_ = function () {
	        return 'c:' + this.id + ':' + this.connectionCount++;
	    };
	    Connection.prototype.disconnReceiver_ = function (conn) {
	        var _this = this;
	        return function (everConnected) {
	            if (conn === _this.conn_) {
	                _this.onConnectionLost_(everConnected);
	            }
	            else if (conn === _this.secondaryConn_) {
	                _this.log_('Secondary connection lost.');
	                _this.onSecondaryConnectionLost_();
	            }
	            else {
	                _this.log_('closing an old connection');
	            }
	        };
	    };
	    Connection.prototype.connReceiver_ = function (conn) {
	        var _this = this;
	        return function (message) {
	            if (_this.state_ !== 2 /* DISCONNECTED */) {
	                if (conn === _this.rx_) {
	                    _this.onPrimaryMessageReceived_(message);
	                }
	                else if (conn === _this.secondaryConn_) {
	                    _this.onSecondaryMessageReceived_(message);
	                }
	                else {
	                    _this.log_('message on old connection');
	                }
	            }
	        };
	    };
	    /**
	     *
	     * @param {Object} dataMsg An arbitrary data message to be sent to the server
	     */
	    Connection.prototype.sendRequest = function (dataMsg) {
	        // wrap in a data message envelope and send it on
	        var msg = { t: 'd', d: dataMsg };
	        this.sendData_(msg);
	    };
	    Connection.prototype.tryCleanupConnection = function () {
	        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {
	            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);
	            this.conn_ = this.secondaryConn_;
	            this.secondaryConn_ = null;
	            // the server will shutdown the old connection
	        }
	    };
	    Connection.prototype.onSecondaryControl_ = function (controlData) {
	        if (MESSAGE_TYPE in controlData) {
	            var cmd = controlData[MESSAGE_TYPE];
	            if (cmd === SWITCH_ACK) {
	                this.upgradeIfSecondaryHealthy_();
	            }
	            else if (cmd === CONTROL_RESET) {
	                // Most likely the session wasn't valid. Abandon the switch attempt
	                this.log_('Got a reset on secondary, closing it');
	                this.secondaryConn_.close();
	                // If we were already using this connection for something, than we need to fully close
	                if (this.tx_ === this.secondaryConn_ ||
	                    this.rx_ === this.secondaryConn_) {
	                    this.close();
	                }
	            }
	            else if (cmd === CONTROL_PONG) {
	                this.log_('got pong on secondary.');
	                this.secondaryResponsesRequired_--;
	                this.upgradeIfSecondaryHealthy_();
	            }
	        }
	    };
	    Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {
	        var layer = requireKey('t', parsedData);
	        var data = requireKey('d', parsedData);
	        if (layer === 'c') {
	            this.onSecondaryControl_(data);
	        }
	        else if (layer === 'd') {
	            // got a data message, but we're still second connection. Need to buffer it up
	            this.pendingDataMessages.push(data);
	        }
	        else {
	            throw new Error('Unknown protocol layer: ' + layer);
	        }
	    };
	    Connection.prototype.upgradeIfSecondaryHealthy_ = function () {
	        if (this.secondaryResponsesRequired_ <= 0) {
	            this.log_('Secondary connection is healthy.');
	            this.isHealthy_ = true;
	            this.secondaryConn_.markConnectionHealthy();
	            this.proceedWithUpgrade_();
	        }
	        else {
	            // Send a ping to make sure the connection is healthy.
	            this.log_('sending ping on secondary.');
	            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });
	        }
	    };
	    Connection.prototype.proceedWithUpgrade_ = function () {
	        // tell this connection to consider itself open
	        this.secondaryConn_.start();
	        // send ack
	        this.log_('sending client ack on secondary');
	        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });
	        // send end packet on primary transport, switch to sending on this one
	        // can receive on this one, buffer responses until end received on primary transport
	        this.log_('Ending transmission on primary');
	        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });
	        this.tx_ = this.secondaryConn_;
	        this.tryCleanupConnection();
	    };
	    Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {
	        // Must refer to parsedData properties in quotes, so closure doesn't touch them.
	        var layer = requireKey('t', parsedData);
	        var data = requireKey('d', parsedData);
	        if (layer === 'c') {
	            this.onControl_(data);
	        }
	        else if (layer === 'd') {
	            this.onDataMessage_(data);
	        }
	    };
	    Connection.prototype.onDataMessage_ = function (message) {
	        this.onPrimaryResponse_();
	        // We don't do anything with data messages, just kick them up a level
	        this.onMessage_(message);
	    };
	    Connection.prototype.onPrimaryResponse_ = function () {
	        if (!this.isHealthy_) {
	            this.primaryResponsesRequired_--;
	            if (this.primaryResponsesRequired_ <= 0) {
	                this.log_('Primary connection is healthy.');
	                this.isHealthy_ = true;
	                this.conn_.markConnectionHealthy();
	            }
	        }
	    };
	    Connection.prototype.onControl_ = function (controlData) {
	        var cmd = requireKey(MESSAGE_TYPE, controlData);
	        if (MESSAGE_DATA in controlData) {
	            var payload = controlData[MESSAGE_DATA];
	            if (cmd === SERVER_HELLO) {
	                this.onHandshake_(payload);
	            }
	            else if (cmd === END_TRANSMISSION) {
	                this.log_('recvd end transmission on primary');
	                this.rx_ = this.secondaryConn_;
	                for (var i = 0; i < this.pendingDataMessages.length; ++i) {
	                    this.onDataMessage_(this.pendingDataMessages[i]);
	                }
	                this.pendingDataMessages = [];
	                this.tryCleanupConnection();
	            }
	            else if (cmd === CONTROL_SHUTDOWN) {
	                // This was previously the 'onKill' callback passed to the lower-level connection
	                // payload in this case is the reason for the shutdown. Generally a human-readable error
	                this.onConnectionShutdown_(payload);
	            }
	            else if (cmd === CONTROL_RESET) {
	                // payload in this case is the host we should contact
	                this.onReset_(payload);
	            }
	            else if (cmd === CONTROL_ERROR) {
	                error('Server Error: ' + payload);
	            }
	            else if (cmd === CONTROL_PONG) {
	                this.log_('got pong on primary.');
	                this.onPrimaryResponse_();
	                this.sendPingOnPrimaryIfNecessary_();
	            }
	            else {
	                error('Unknown control packet command: ' + cmd);
	            }
	        }
	    };
	    /**
	     *
	     * @param {Object} handshake The handshake data returned from the server
	     * @private
	     */
	    Connection.prototype.onHandshake_ = function (handshake) {
	        var timestamp = handshake.ts;
	        var version = handshake.v;
	        var host = handshake.h;
	        this.sessionId = handshake.s;
	        this.repoInfo_.updateHost(host);
	        // if we've already closed the connection, then don't bother trying to progress further
	        if (this.state_ === 0 /* CONNECTING */) {
	            this.conn_.start();
	            this.onConnectionEstablished_(this.conn_, timestamp);
	            if (PROTOCOL_VERSION !== version) {
	                warn('Protocol version mismatch detected');
	            }
	            // TODO: do we want to upgrade? when? maybe a delay?
	            this.tryStartUpgrade_();
	        }
	    };
	    Connection.prototype.tryStartUpgrade_ = function () {
	        var conn = this.transportManager_.upgradeTransport();
	        if (conn) {
	            this.startUpgrade_(conn);
	        }
	    };
	    Connection.prototype.startUpgrade_ = function (conn) {
	        var _this = this;
	        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.sessionId);
	        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
	        // can consider the transport healthy.
	        this.secondaryResponsesRequired_ =
	            conn['responsesRequiredToBeHealthy'] || 0;
	        var onMessage = this.connReceiver_(this.secondaryConn_);
	        var onDisconnect = this.disconnReceiver_(this.secondaryConn_);
	        this.secondaryConn_.open(onMessage, onDisconnect);
	        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.
	        setTimeoutNonBlocking(function () {
	            if (_this.secondaryConn_) {
	                _this.log_('Timed out trying to upgrade.');
	                _this.secondaryConn_.close();
	            }
	        }, Math.floor(UPGRADE_TIMEOUT));
	    };
	    Connection.prototype.onReset_ = function (host) {
	        this.log_('Reset packet received.  New host: ' + host);
	        this.repoInfo_.updateHost(host);
	        // TODO: if we're already "connected", we need to trigger a disconnect at the next layer up.
	        // We don't currently support resets after the connection has already been established
	        if (this.state_ === 1 /* CONNECTED */) {
	            this.close();
	        }
	        else {
	            // Close whatever connections we have open and start again.
	            this.closeConnections_();
	            this.start_();
	        }
	    };
	    Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {
	        var _this = this;
	        this.log_('Realtime connection established.');
	        this.conn_ = conn;
	        this.state_ = 1 /* CONNECTED */;
	        if (this.onReady_) {
	            this.onReady_(timestamp, this.sessionId);
	            this.onReady_ = null;
	        }
	        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,
	        // send some pings.
	        if (this.primaryResponsesRequired_ === 0) {
	            this.log_('Primary connection is healthy.');
	            this.isHealthy_ = true;
	        }
	        else {
	            setTimeoutNonBlocking(function () {
	                _this.sendPingOnPrimaryIfNecessary_();
	            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));
	        }
	    };
	    Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {
	        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.
	        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {
	            this.log_('sending ping on primary.');
	            this.sendData_({ t: 'c', d: { t: PING, d: {} } });
	        }
	    };
	    Connection.prototype.onSecondaryConnectionLost_ = function () {
	        var conn = this.secondaryConn_;
	        this.secondaryConn_ = null;
	        if (this.tx_ === conn || this.rx_ === conn) {
	            // we are relying on this connection already in some capacity. Therefore, a failure is real
	            this.close();
	        }
	    };
	    /**
	     *
	     * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if
	     * we should flush the host cache
	     * @private
	     */
	    Connection.prototype.onConnectionLost_ = function (everConnected) {
	        this.conn_ = null;
	        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting
	        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.
	        if (!everConnected && this.state_ === 0 /* CONNECTING */) {
	            this.log_('Realtime connection failed.');
	            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away
	            if (this.repoInfo_.isCacheableHost()) {
	                PersistentStorage.remove('host:' + this.repoInfo_.host);
	                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com
	                this.repoInfo_.internalHost = this.repoInfo_.host;
	            }
	        }
	        else if (this.state_ === 1 /* CONNECTED */) {
	            this.log_('Realtime connection lost.');
	        }
	        this.close();
	    };
	    /**
	     *
	     * @param {string} reason
	     * @private
	     */
	    Connection.prototype.onConnectionShutdown_ = function (reason) {
	        this.log_('Connection shutdown command received. Shutting down...');
	        if (this.onKill_) {
	            this.onKill_(reason);
	            this.onKill_ = null;
	        }
	        // We intentionally don't want to fire onDisconnect (kill is a different case),
	        // so clear the callback.
	        this.onDisconnect_ = null;
	        this.close();
	    };
	    Connection.prototype.sendData_ = function (data) {
	        if (this.state_ !== 1 /* CONNECTED */) {
	            throw 'Connection is not connected';
	        }
	        else {
	            this.tx_.send(data);
	        }
	    };
	    /**
	     * Cleans up this connection, calling the appropriate callbacks
	     */
	    Connection.prototype.close = function () {
	        if (this.state_ !== 2 /* DISCONNECTED */) {
	            this.log_('Closing realtime connection.');
	            this.state_ = 2 /* DISCONNECTED */;
	            this.closeConnections_();
	            if (this.onDisconnect_) {
	                this.onDisconnect_();
	                this.onDisconnect_ = null;
	            }
	        }
	    };
	    /**
	     *
	     * @private
	     */
	    Connection.prototype.closeConnections_ = function () {
	        this.log_('Shutting down all connections');
	        if (this.conn_) {
	            this.conn_.close();
	            this.conn_ = null;
	        }
	        if (this.secondaryConn_) {
	            this.secondaryConn_.close();
	            this.secondaryConn_ = null;
	        }
	        if (this.healthyTimeout_) {
	            clearTimeout(this.healthyTimeout_);
	            this.healthyTimeout_ = null;
	        }
	    };
	    return Connection;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Interface defining the set of actions that can be performed against the Firebase server
	 * (basically corresponds to our wire protocol).
	 *
	 * @interface
	 */
	var ServerActions = /** @class */ (function () {
	    function ServerActions() {
	    }
	    /**
	     * @param {string} pathString
	     * @param {*} data
	     * @param {function(string, string)=} onComplete
	     * @param {string=} hash
	     */
	    ServerActions.prototype.put = function (pathString, data, onComplete, hash) { };
	    /**
	     * @param {string} pathString
	     * @param {*} data
	     * @param {function(string, ?string)} onComplete
	     * @param {string=} hash
	     */
	    ServerActions.prototype.merge = function (pathString, data, onComplete, hash) { };
	    /**
	     * Refreshes the auth token for the current connection.
	     * @param {string} token The authentication token
	     */
	    ServerActions.prototype.refreshAuthToken = function (token) { };
	    /**
	     * @param {string} pathString
	     * @param {*} data
	     * @param {function(string, string)=} onComplete
	     */
	    ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) { };
	    /**
	     * @param {string} pathString
	     * @param {*} data
	     * @param {function(string, string)=} onComplete
	     */
	    ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) { };
	    /**
	     * @param {string} pathString
	     * @param {function(string, string)=} onComplete
	     */
	    ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) { };
	    /**
	     * @param {Object.<string, *>} stats
	     */
	    ServerActions.prototype.reportStats = function (stats) { };
	    return ServerActions;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var RECONNECT_MIN_DELAY = 1000;
	var RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)
	var RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)
	var RECONNECT_DELAY_MULTIPLIER = 1.3;
	var RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.
	var SERVER_KILL_INTERRUPT_REASON = 'server_kill';
	// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.
	var INVALID_AUTH_TOKEN_THRESHOLD = 3;
	/**
	 * Firebase connection.  Abstracts wire protocol and handles reconnecting.
	 *
	 * NOTE: All JSON objects sent to the realtime connection must have property names enclosed
	 * in quotes to make sure the closure compiler does not minify them.
	 */
	var PersistentConnection = /** @class */ (function (_super) {
	    tslib.__extends(PersistentConnection, _super);
	    /**
	     * @implements {ServerActions}
	     * @param repoInfo_ Data about the namespace we are connecting to
	     * @param applicationId_ The Firebase App ID for this project
	     * @param onDataUpdate_ A callback for new data from the server
	     */
	    function PersistentConnection(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {
	        var _this = _super.call(this) || this;
	        _this.repoInfo_ = repoInfo_;
	        _this.applicationId_ = applicationId_;
	        _this.onDataUpdate_ = onDataUpdate_;
	        _this.onConnectStatus_ = onConnectStatus_;
	        _this.onServerInfoUpdate_ = onServerInfoUpdate_;
	        _this.authTokenProvider_ = authTokenProvider_;
	        _this.authOverride_ = authOverride_;
	        // Used for diagnostic logging.
	        _this.id = PersistentConnection.nextPersistentConnectionId_++;
	        _this.log_ = logWrapper('p:' + _this.id + ':');
	        _this.interruptReasons_ = {};
	        /** Map<path, Map<queryId, ListenSpec>> */
	        _this.listens = new Map();
	        _this.outstandingPuts_ = [];
	        _this.outstandingPutCount_ = 0;
	        _this.onDisconnectRequestQueue_ = [];
	        _this.connected_ = false;
	        _this.reconnectDelay_ = RECONNECT_MIN_DELAY;
	        _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;
	        _this.securityDebugCallback_ = null;
	        _this.lastSessionId = null;
	        _this.establishConnectionTimer_ = null;
	        _this.visible_ = false;
	        // Before we get connected, we keep a queue of pending messages to send.
	        _this.requestCBHash_ = {};
	        _this.requestNumber_ = 0;
	        _this.realtime_ = null;
	        _this.authToken_ = null;
	        _this.forceTokenRefresh_ = false;
	        _this.invalidAuthTokenCount_ = 0;
	        _this.firstConnection_ = true;
	        _this.lastConnectionAttemptTime_ = null;
	        _this.lastConnectionEstablishedTime_ = null;
	        if (authOverride_ && !index_cjs.isNodeSdk()) {
	            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');
	        }
	        _this.scheduleConnect_(0);
	        VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);
	        if (repoInfo_.host.indexOf('fblocal') === -1) {
	            OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);
	        }
	        return _this;
	    }
	    PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {
	        var curReqNum = ++this.requestNumber_;
	        var msg = { r: curReqNum, a: action, b: body };
	        this.log_(index_cjs.stringify(msg));
	        index_cjs.assert(this.connected_, "sendRequest call when we're not connected not allowed.");
	        this.realtime_.sendRequest(msg);
	        if (onResponse) {
	            this.requestCBHash_[curReqNum] = onResponse;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {
	        var queryId = query.queryIdentifier();
	        var pathString = query.path.toString();
	        this.log_('Listen called for ' + pathString + ' ' + queryId);
	        if (!this.listens.has(pathString)) {
	            this.listens.set(pathString, new Map());
	        }
	        index_cjs.assert(query.getQueryParams().isDefault() ||
	            !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');
	        index_cjs.assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');
	        var listenSpec = {
	            onComplete: onComplete,
	            hashFn: currentHashFn,
	            query: query,
	            tag: tag
	        };
	        this.listens.get(pathString).set(queryId, listenSpec);
	        if (this.connected_) {
	            this.sendListen_(listenSpec);
	        }
	    };
	    PersistentConnection.prototype.sendListen_ = function (listenSpec) {
	        var _this = this;
	        var query = listenSpec.query;
	        var pathString = query.path.toString();
	        var queryId = query.queryIdentifier();
	        this.log_('Listen on ' + pathString + ' for ' + queryId);
	        var req = { /*path*/ p: pathString };
	        var action = 'q';
	        // Only bother to send query if it's non-default.
	        if (listenSpec.tag) {
	            req['q'] = query.queryObject();
	            req['t'] = listenSpec.tag;
	        }
	        req[ /*hash*/'h'] = listenSpec.hashFn();
	        this.sendRequest(action, req, function (message) {
	            var payload = message[ /*data*/'d'];
	            var status = message[ /*status*/'s'];
	            // print warnings in any case...
	            PersistentConnection.warnOnListenWarnings_(payload, query);
	            var currentListenSpec = _this.listens.get(pathString) &&
	                _this.listens.get(pathString).get(queryId);
	            // only trigger actions if the listen hasn't been removed and readded
	            if (currentListenSpec === listenSpec) {
	                _this.log_('listen response', message);
	                if (status !== 'ok') {
	                    _this.removeListen_(pathString, queryId);
	                }
	                if (listenSpec.onComplete) {
	                    listenSpec.onComplete(status, payload);
	                }
	            }
	        });
	    };
	    PersistentConnection.warnOnListenWarnings_ = function (payload, query) {
	        if (payload && typeof payload === 'object' && index_cjs.contains(payload, 'w')) {
	            // eslint-disable-next-line @typescript-eslint/no-explicit-any
	            var warnings = index_cjs.safeGet(payload, 'w');
	            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {
	                var indexSpec = '".indexOn": "' + query.getQueryParams().getIndex().toString() + '"';
	                var indexPath = query.path.toString();
	                warn("Using an unspecified index. Your data will be downloaded and " +
	                    ("filtered on the client. Consider adding " + indexSpec + " at ") +
	                    (indexPath + " to your security rules for better performance."));
	            }
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    PersistentConnection.prototype.refreshAuthToken = function (token) {
	        this.authToken_ = token;
	        this.log_('Auth token refreshed');
	        if (this.authToken_) {
	            this.tryAuth();
	        }
	        else {
	            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete
	            //the credential so we dont become authenticated next time we connect.
	            if (this.connected_) {
	                this.sendRequest('unauth', {}, function () { });
	            }
	        }
	        this.reduceReconnectDelayIfAdminCredential_(token);
	    };
	    PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {
	        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).
	        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.
	        var isFirebaseSecret = credential && credential.length === 40;
	        if (isFirebaseSecret || index_cjs.isAdmin(credential)) {
	            this.log_('Admin auth credential detected.  Reducing max reconnect time.');
	            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
	        }
	    };
	    /**
	     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like
	     * a auth revoked (the connection is closed).
	     */
	    PersistentConnection.prototype.tryAuth = function () {
	        var _this = this;
	        if (this.connected_ && this.authToken_) {
	            var token_1 = this.authToken_;
	            var authMethod = index_cjs.isValidFormat(token_1) ? 'auth' : 'gauth';
	            var requestData = { cred: token_1 };
	            if (this.authOverride_ === null) {
	                requestData['noauth'] = true;
	            }
	            else if (typeof this.authOverride_ === 'object') {
	                requestData['authvar'] = this.authOverride_;
	            }
	            this.sendRequest(authMethod, requestData, function (res) {
	                var status = res[ /*status*/'s'];
	                var data = res[ /*data*/'d'] || 'error';
	                if (_this.authToken_ === token_1) {
	                    if (status === 'ok') {
	                        _this.invalidAuthTokenCount_ = 0;
	                    }
	                    else {
	                        // Triggers reconnect and force refresh for auth token
	                        _this.onAuthRevoked_(status, data);
	                    }
	                }
	            });
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    PersistentConnection.prototype.unlisten = function (query, tag) {
	        var pathString = query.path.toString();
	        var queryId = query.queryIdentifier();
	        this.log_('Unlisten called for ' + pathString + ' ' + queryId);
	        index_cjs.assert(query.getQueryParams().isDefault() ||
	            !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');
	        var listen = this.removeListen_(pathString, queryId);
	        if (listen && this.connected_) {
	            this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);
	        }
	    };
	    PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {
	        this.log_('Unlisten on ' + pathString + ' for ' + queryId);
	        var req = { /*path*/ p: pathString };
	        var action = 'n';
	        // Only bother sending queryId if it's non-default.
	        if (tag) {
	            req['q'] = queryObj;
	            req['t'] = tag;
	        }
	        this.sendRequest(action, req);
	    };
	    /**
	     * @inheritDoc
	     */
	    PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {
	        if (this.connected_) {
	            this.sendOnDisconnect_('o', pathString, data, onComplete);
	        }
	        else {
	            this.onDisconnectRequestQueue_.push({
	                pathString: pathString,
	                action: 'o',
	                data: data,
	                onComplete: onComplete
	            });
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {
	        if (this.connected_) {
	            this.sendOnDisconnect_('om', pathString, data, onComplete);
	        }
	        else {
	            this.onDisconnectRequestQueue_.push({
	                pathString: pathString,
	                action: 'om',
	                data: data,
	                onComplete: onComplete
	            });
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {
	        if (this.connected_) {
	            this.sendOnDisconnect_('oc', pathString, null, onComplete);
	        }
	        else {
	            this.onDisconnectRequestQueue_.push({
	                pathString: pathString,
	                action: 'oc',
	                data: null,
	                onComplete: onComplete
	            });
	        }
	    };
	    PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {
	        var request = { /*path*/ p: pathString, /*data*/ d: data };
	        this.log_('onDisconnect ' + action, request);
	        this.sendRequest(action, request, function (response) {
	            if (onComplete) {
	                setTimeout(function () {
	                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);
	                }, Math.floor(0));
	            }
	        });
	    };
	    /**
	     * @inheritDoc
	     */
	    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {
	        this.putInternal('p', pathString, data, onComplete, hash);
	    };
	    /**
	     * @inheritDoc
	     */
	    PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {
	        this.putInternal('m', pathString, data, onComplete, hash);
	    };
	    PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {
	        var request = {
	            /*path*/ p: pathString,
	            /*data*/ d: data
	        };
	        if (hash !== undefined) {
	            request[ /*hash*/'h'] = hash;
	        }
	        // TODO: Only keep track of the most recent put for a given path?
	        this.outstandingPuts_.push({
	            action: action,
	            request: request,
	            onComplete: onComplete
	        });
	        this.outstandingPutCount_++;
	        var index = this.outstandingPuts_.length - 1;
	        if (this.connected_) {
	            this.sendPut_(index);
	        }
	        else {
	            this.log_('Buffering put: ' + pathString);
	        }
	    };
	    PersistentConnection.prototype.sendPut_ = function (index) {
	        var _this = this;
	        var action = this.outstandingPuts_[index].action;
	        var request = this.outstandingPuts_[index].request;
	        var onComplete = this.outstandingPuts_[index].onComplete;
	        this.outstandingPuts_[index].queued = this.connected_;
	        this.sendRequest(action, request, function (message) {
	            _this.log_(action + ' response', message);
	            delete _this.outstandingPuts_[index];
	            _this.outstandingPutCount_--;
	            // Clean up array occasionally.
	            if (_this.outstandingPutCount_ === 0) {
	                _this.outstandingPuts_ = [];
	            }
	            if (onComplete) {
	                onComplete(message[ /*status*/'s'], message[ /* data */'d']);
	            }
	        });
	    };
	    /**
	     * @inheritDoc
	     */
	    PersistentConnection.prototype.reportStats = function (stats) {
	        var _this = this;
	        // If we're not connected, we just drop the stats.
	        if (this.connected_) {
	            var request = { /*counters*/ c: stats };
	            this.log_('reportStats', request);
	            this.sendRequest(/*stats*/ 's', request, function (result) {
	                var status = result[ /*status*/'s'];
	                if (status !== 'ok') {
	                    var errorReason = result[ /* data */'d'];
	                    _this.log_('reportStats', 'Error sending stats: ' + errorReason);
	                }
	            });
	        }
	    };
	    PersistentConnection.prototype.onDataMessage_ = function (message) {
	        if ('r' in message) {
	            // this is a response
	            this.log_('from server: ' + index_cjs.stringify(message));
	            var reqNum = message['r'];
	            var onResponse = this.requestCBHash_[reqNum];
	            if (onResponse) {
	                delete this.requestCBHash_[reqNum];
	                onResponse(message[ /*body*/'b']);
	            }
	        }
	        else if ('error' in message) {
	            throw 'A server-side error has occurred: ' + message['error'];
	        }
	        else if ('a' in message) {
	            // a and b are action and body, respectively
	            this.onDataPush_(message['a'], message['b']);
	        }
	    };
	    PersistentConnection.prototype.onDataPush_ = function (action, body) {
	        this.log_('handleServerMessage', action, body);
	        if (action === 'd') {
	            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], 
	            /*isMerge*/ false, body['t']);
	        }
	        else if (action === 'm') {
	            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], 
	            /*isMerge=*/ true, body['t']);
	        }
	        else if (action === 'c') {
	            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);
	        }
	        else if (action === 'ac') {
	            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);
	        }
	        else if (action === 'sd') {
	            this.onSecurityDebugPacket_(body);
	        }
	        else {
	            error('Unrecognized action received from server: ' +
	                index_cjs.stringify(action) +
	                '\nAre you using the latest client?');
	        }
	    };
	    PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {
	        this.log_('connection ready');
	        this.connected_ = true;
	        this.lastConnectionEstablishedTime_ = new Date().getTime();
	        this.handleTimestamp_(timestamp);
	        this.lastSessionId = sessionId;
	        if (this.firstConnection_) {
	            this.sendConnectStats_();
	        }
	        this.restoreState_();
	        this.firstConnection_ = false;
	        this.onConnectStatus_(true);
	    };
	    PersistentConnection.prototype.scheduleConnect_ = function (timeout) {
	        var _this = this;
	        index_cjs.assert(!this.realtime_, "Scheduling a connect when we're already connected/ing?");
	        if (this.establishConnectionTimer_) {
	            clearTimeout(this.establishConnectionTimer_);
	        }
	        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating "Security Error" in
	        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).
	        this.establishConnectionTimer_ = setTimeout(function () {
	            _this.establishConnectionTimer_ = null;
	            _this.establishConnection_();
	            // eslint-disable-next-line @typescript-eslint/no-explicit-any
	        }, Math.floor(timeout));
	    };
	    PersistentConnection.prototype.onVisible_ = function (visible) {
	        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.
	        if (visible &&
	            !this.visible_ &&
	            this.reconnectDelay_ === this.maxReconnectDelay_) {
	            this.log_('Window became visible.  Reducing delay.');
	            this.reconnectDelay_ = RECONNECT_MIN_DELAY;
	            if (!this.realtime_) {
	                this.scheduleConnect_(0);
	            }
	        }
	        this.visible_ = visible;
	    };
	    PersistentConnection.prototype.onOnline_ = function (online) {
	        if (online) {
	            this.log_('Browser went online.');
	            this.reconnectDelay_ = RECONNECT_MIN_DELAY;
	            if (!this.realtime_) {
	                this.scheduleConnect_(0);
	            }
	        }
	        else {
	            this.log_('Browser went offline.  Killing connection.');
	            if (this.realtime_) {
	                this.realtime_.close();
	            }
	        }
	    };
	    PersistentConnection.prototype.onRealtimeDisconnect_ = function () {
	        this.log_('data client disconnected');
	        this.connected_ = false;
	        this.realtime_ = null;
	        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.
	        this.cancelSentTransactions_();
	        // Clear out the pending requests.
	        this.requestCBHash_ = {};
	        if (this.shouldReconnect_()) {
	            if (!this.visible_) {
	                this.log_("Window isn't visible.  Delaying reconnect.");
	                this.reconnectDelay_ = this.maxReconnectDelay_;
	                this.lastConnectionAttemptTime_ = new Date().getTime();
	            }
	            else if (this.lastConnectionEstablishedTime_) {
	                // If we've been connected long enough, reset reconnect delay to minimum.
	                var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;
	                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {
	                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;
	                }
	                this.lastConnectionEstablishedTime_ = null;
	            }
	            var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;
	            var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);
	            reconnectDelay = Math.random() * reconnectDelay;
	            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');
	            this.scheduleConnect_(reconnectDelay);
	            // Adjust reconnect delay for next time.
	            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);
	        }
	        this.onConnectStatus_(false);
	    };
	    PersistentConnection.prototype.establishConnection_ = function () {
	        if (this.shouldReconnect_()) {
	            this.log_('Making a connection attempt');
	            this.lastConnectionAttemptTime_ = new Date().getTime();
	            this.lastConnectionEstablishedTime_ = null;
	            var onDataMessage_1 = this.onDataMessage_.bind(this);
	            var onReady_1 = this.onReady_.bind(this);
	            var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);
	            var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;
	            var self_1 = this;
	            var lastSessionId_1 = this.lastSessionId;
	            var canceled_1 = false;
	            var connection_1 = null;
	            var closeFn_1 = function () {
	                if (connection_1) {
	                    connection_1.close();
	                }
	                else {
	                    canceled_1 = true;
	                    onDisconnect_1();
	                }
	            };
	            var sendRequestFn = function (msg) {
	                index_cjs.assert(connection_1, "sendRequest call when we're not connected not allowed.");
	                connection_1.sendRequest(msg);
	            };
	            this.realtime_ = {
	                close: closeFn_1,
	                sendRequest: sendRequestFn
	            };
	            var forceRefresh = this.forceTokenRefresh_;
	            this.forceTokenRefresh_ = false;
	            // First fetch auth token, and establish connection after fetching the token was successful
	            this.authTokenProvider_
	                .getToken(forceRefresh)
	                .then(function (result) {
	                if (!canceled_1) {
	                    log('getToken() completed. Creating connection.');
	                    self_1.authToken_ = result && result.accessToken;
	                    connection_1 = new Connection(connId_1, self_1.repoInfo_, self_1.applicationId_, onDataMessage_1, onReady_1, onDisconnect_1, 
	                    /* onKill= */ function (reason) {
	                        warn(reason + ' (' + self_1.repoInfo_.toString() + ')');
	                        self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);
	                    }, lastSessionId_1);
	                }
	                else {
	                    log('getToken() completed but was canceled');
	                }
	            })
	                .then(null, function (error) {
	                self_1.log_('Failed to get token: ' + error);
	                if (!canceled_1) {
	                    if (index_cjs.CONSTANTS.NODE_ADMIN) {
	                        // This may be a critical error for the Admin Node.js SDK, so log a warning.
	                        // But getToken() may also just have temporarily failed, so we still want to
	                        // continue retrying.
	                        warn(error);
	                    }
	                    closeFn_1();
	                }
	            });
	        }
	    };
	    PersistentConnection.prototype.interrupt = function (reason) {
	        log('Interrupting connection for reason: ' + reason);
	        this.interruptReasons_[reason] = true;
	        if (this.realtime_) {
	            this.realtime_.close();
	        }
	        else {
	            if (this.establishConnectionTimer_) {
	                clearTimeout(this.establishConnectionTimer_);
	                this.establishConnectionTimer_ = null;
	            }
	            if (this.connected_) {
	                this.onRealtimeDisconnect_();
	            }
	        }
	    };
	    PersistentConnection.prototype.resume = function (reason) {
	        log('Resuming connection for reason: ' + reason);
	        delete this.interruptReasons_[reason];
	        if (index_cjs.isEmpty(this.interruptReasons_)) {
	            this.reconnectDelay_ = RECONNECT_MIN_DELAY;
	            if (!this.realtime_) {
	                this.scheduleConnect_(0);
	            }
	        }
	    };
	    PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {
	        var delta = timestamp - new Date().getTime();
	        this.onServerInfoUpdate_({ serverTimeOffset: delta });
	    };
	    PersistentConnection.prototype.cancelSentTransactions_ = function () {
	        for (var i = 0; i < this.outstandingPuts_.length; i++) {
	            var put = this.outstandingPuts_[i];
	            if (put && /*hash*/ 'h' in put.request && put.queued) {
	                if (put.onComplete) {
	                    put.onComplete('disconnect');
	                }
	                delete this.outstandingPuts_[i];
	                this.outstandingPutCount_--;
	            }
	        }
	        // Clean up array occasionally.
	        if (this.outstandingPutCount_ === 0) {
	            this.outstandingPuts_ = [];
	        }
	    };
	    PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {
	        // Remove the listen and manufacture a "permission_denied" error for the failed listen.
	        var queryId;
	        if (!query) {
	            queryId = 'default';
	        }
	        else {
	            queryId = query.map(function (q) { return ObjectToUniqueKey(q); }).join('$');
	        }
	        var listen = this.removeListen_(pathString, queryId);
	        if (listen && listen.onComplete) {
	            listen.onComplete('permission_denied');
	        }
	    };
	    PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {
	        var normalizedPathString = new Path(pathString).toString(); // normalize path.
	        var listen;
	        if (this.listens.has(normalizedPathString)) {
	            var map = this.listens.get(normalizedPathString);
	            listen = map.get(queryId);
	            map.delete(queryId);
	            if (map.size === 0) {
	                this.listens.delete(normalizedPathString);
	            }
	        }
	        else {
	            // all listens for this path has already been removed
	            listen = undefined;
	        }
	        return listen;
	    };
	    PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {
	        log('Auth token revoked: ' + statusCode + '/' + explanation);
	        this.authToken_ = null;
	        this.forceTokenRefresh_ = true;
	        this.realtime_.close();
	        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {
	            // We'll wait a couple times before logging the warning / increasing the
	            // retry period since oauth tokens will report as "invalid" if they're
	            // just expired. Plus there may be transient issues that resolve themselves.
	            this.invalidAuthTokenCount_++;
	            if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {
	                // Set a long reconnect delay because recovery is unlikely
	                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
	                // Notify the auth token provider that the token is invalid, which will log
	                // a warning
	                this.authTokenProvider_.notifyForInvalidToken();
	            }
	        }
	    };
	    PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {
	        if (this.securityDebugCallback_) {
	            this.securityDebugCallback_(body);
	        }
	        else {
	            if ('msg' in body) {
	                console.log('FIREBASE: ' + body['msg'].replace('\n', '\nFIREBASE: '));
	            }
	        }
	    };
	    PersistentConnection.prototype.restoreState_ = function () {
	        var e_1, _a, e_2, _b;
	        //Re-authenticate ourselves if we have a credential stored.
	        this.tryAuth();
	        try {
	            // Puts depend on having received the corresponding data update from the server before they complete, so we must
	            // make sure to send listens before puts.
	            for (var _c = tslib.__values(this.listens.values()), _d = _c.next(); !_d.done; _d = _c.next()) {
	                var queries = _d.value;
	                try {
	                    for (var _e = (e_2 = void 0, tslib.__values(queries.values())), _f = _e.next(); !_f.done; _f = _e.next()) {
	                        var listenSpec = _f.value;
	                        this.sendListen_(listenSpec);
	                    }
	                }
	                catch (e_2_1) { e_2 = { error: e_2_1 }; }
	                finally {
	                    try {
	                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
	                    }
	                    finally { if (e_2) throw e_2.error; }
	                }
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	        for (var i = 0; i < this.outstandingPuts_.length; i++) {
	            if (this.outstandingPuts_[i]) {
	                this.sendPut_(i);
	            }
	        }
	        while (this.onDisconnectRequestQueue_.length) {
	            var request = this.onDisconnectRequestQueue_.shift();
	            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);
	        }
	    };
	    /**
	     * Sends client stats for first connection
	     */
	    PersistentConnection.prototype.sendConnectStats_ = function () {
	        var stats = {};
	        var clientName = 'js';
	        if (index_cjs.CONSTANTS.NODE_ADMIN) {
	            clientName = 'admin_node';
	        }
	        else if (index_cjs.CONSTANTS.NODE_CLIENT) {
	            clientName = 'node';
	        }
	        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\./g, '-')] = 1;
	        if (index_cjs.isMobileCordova()) {
	            stats['framework.cordova'] = 1;
	        }
	        else if (index_cjs.isReactNative()) {
	            stats['framework.reactnative'] = 1;
	        }
	        this.reportStats(stats);
	    };
	    PersistentConnection.prototype.shouldReconnect_ = function () {
	        var online = OnlineMonitor.getInstance().currentlyOnline();
	        return index_cjs.isEmpty(this.interruptReasons_) && online;
	    };
	    PersistentConnection.nextPersistentConnectionId_ = 0;
	    /**
	     * Counter for number of connections created. Mainly used for tagging in the logs
	     */
	    PersistentConnection.nextConnectionId_ = 0;
	    return PersistentConnection;
	}(ServerActions));

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An implementation of ServerActions that communicates with the server via REST requests.
	 * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full
	 * persistent connection (using WebSockets or long-polling)
	 */
	var ReadonlyRestClient = /** @class */ (function (_super) {
	    tslib.__extends(ReadonlyRestClient, _super);
	    /**
	     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to
	     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server
	     * @param {AuthTokenProvider} authTokenProvider_
	     * @implements {ServerActions}
	     */
	    function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {
	        var _this = _super.call(this) || this;
	        _this.repoInfo_ = repoInfo_;
	        _this.onDataUpdate_ = onDataUpdate_;
	        _this.authTokenProvider_ = authTokenProvider_;
	        /** @private {function(...[*])} */
	        _this.log_ = logWrapper('p:rest:');
	        /**
	         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen
	         * that's been removed. :-/
	         *
	         * @private {!Object.<string, !Object>}
	         */
	        _this.listens_ = {};
	        return _this;
	    }
	    ReadonlyRestClient.prototype.reportStats = function (stats) {
	        throw new Error('Method not implemented.');
	    };
	    /**
	     * @param {!Query} query
	     * @param {?number=} tag
	     * @return {string}
	     * @private
	     */
	    ReadonlyRestClient.getListenId_ = function (query, tag) {
	        if (tag !== undefined) {
	            return 'tag$' + tag;
	        }
	        else {
	            index_cjs.assert(query.getQueryParams().isDefault(), "should have a tag if it's not a default query.");
	            return query.path.toString();
	        }
	    };
	    /** @inheritDoc */
	    ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {
	        var _this = this;
	        var pathString = query.path.toString();
	        this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier());
	        // Mark this listener so we can tell if it's removed.
	        var listenId = ReadonlyRestClient.getListenId_(query, tag);
	        var thisListen = {};
	        this.listens_[listenId] = thisListen;
	        var queryStringParameters = query
	            .getQueryParams()
	            .toRestQueryStringParameters();
	        this.restRequest_(pathString + '.json', queryStringParameters, function (error, result) {
	            var data = result;
	            if (error === 404) {
	                data = null;
	                error = null;
	            }
	            if (error === null) {
	                _this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);
	            }
	            if (index_cjs.safeGet(_this.listens_, listenId) === thisListen) {
	                var status_1;
	                if (!error) {
	                    status_1 = 'ok';
	                }
	                else if (error === 401) {
	                    status_1 = 'permission_denied';
	                }
	                else {
	                    status_1 = 'rest_error:' + error;
	                }
	                onComplete(status_1, null);
	            }
	        });
	    };
	    /** @inheritDoc */
	    ReadonlyRestClient.prototype.unlisten = function (query, tag) {
	        var listenId = ReadonlyRestClient.getListenId_(query, tag);
	        delete this.listens_[listenId];
	    };
	    /** @inheritDoc */
	    ReadonlyRestClient.prototype.refreshAuthToken = function (token) {
	        // no-op since we just always call getToken.
	    };
	    /**
	     * Performs a REST request to the given path, with the provided query string parameters,
	     * and any auth credentials we have.
	     *
	     * @param {!string} pathString
	     * @param {!Object.<string, *>} queryStringParameters
	     * @param {?function(?number, *=)} callback
	     * @private
	     */
	    ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {
	        var _this = this;
	        if (queryStringParameters === void 0) { queryStringParameters = {}; }
	        queryStringParameters['format'] = 'export';
	        this.authTokenProvider_
	            .getToken(/*forceRefresh=*/ false)
	            .then(function (authTokenData) {
	            var authToken = authTokenData && authTokenData.accessToken;
	            if (authToken) {
	                queryStringParameters['auth'] = authToken;
	            }
	            var url = (_this.repoInfo_.secure ? 'https://' : 'http://') +
	                _this.repoInfo_.host +
	                pathString +
	                '?' +
	                'ns=' +
	                _this.repoInfo_.namespace +
	                index_cjs.querystring(queryStringParameters);
	            _this.log_('Sending REST request for ' + url);
	            var xhr = new XMLHttpRequest();
	            xhr.onreadystatechange = function () {
	                if (callback && xhr.readyState === 4) {
	                    _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);
	                    var res = null;
	                    if (xhr.status >= 200 && xhr.status < 300) {
	                        try {
	                            res = index_cjs.jsonEval(xhr.responseText);
	                        }
	                        catch (e) {
	                            warn('Failed to parse JSON response for ' +
	                                url +
	                                ': ' +
	                                xhr.responseText);
	                        }
	                        callback(null, res);
	                    }
	                    else {
	                        // 401 and 404 are expected.
	                        if (xhr.status !== 401 && xhr.status !== 404) {
	                            warn('Got unsuccessful REST response for ' +
	                                url +
	                                ' Status: ' +
	                                xhr.status);
	                        }
	                        callback(xhr.status);
	                    }
	                    callback = null;
	                }
	            };
	            xhr.open('GET', url, /*asynchronous=*/ true);
	            xhr.send();
	        });
	    };
	    return ReadonlyRestClient;
	}(ServerActions));

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var INTERRUPT_REASON = 'repo_interrupt';
	/**
	 * A connection to a single data repository.
	 */
	var Repo = /** @class */ (function () {
	    function Repo(repoInfo_, forceRestClient, app, authTokenProvider) {
	        var _this = this;
	        this.repoInfo_ = repoInfo_;
	        this.app = app;
	        this.dataUpdateCount = 0;
	        this.statsListener_ = null;
	        this.eventQueue_ = new EventQueue();
	        this.nextWriteId_ = 1;
	        this.interceptServerDataCallback_ = null;
	        /** A list of data pieces and paths to be set when this client disconnects. */
	        this.onDisconnect_ = new SparseSnapshotTree();
	        // TODO: This should be @private but it's used by test_access.js and internal.js
	        this.persistentConnection_ = null;
	        this.stats_ = StatsManager.getCollection(repoInfo_);
	        if (forceRestClient || beingCrawled()) {
	            this.server_ = new ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), authTokenProvider);
	            // Minor hack: Fire onConnect immediately, since there's no actual connection.
	            setTimeout(this.onConnectStatus_.bind(this, true), 0);
	        }
	        else {
	            var authOverride = app.options['databaseAuthVariableOverride'];
	            // Validate authOverride
	            if (typeof authOverride !== 'undefined' && authOverride !== null) {
	                if (typeof authOverride !== 'object') {
	                    throw new Error('Only objects are supported for option databaseAuthVariableOverride');
	                }
	                try {
	                    index_cjs.stringify(authOverride);
	                }
	                catch (e) {
	                    throw new Error('Invalid authOverride provided: ' + e);
	                }
	            }
	            this.persistentConnection_ = new PersistentConnection(this.repoInfo_, app.options.appId, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), authTokenProvider, authOverride);
	            this.server_ = this.persistentConnection_;
	        }
	        authTokenProvider.addTokenChangeListener(function (token) {
	            _this.server_.refreshAuthToken(token);
	        });
	        // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),
	        // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.
	        this.statsReporter_ = StatsManager.getOrCreateReporter(repoInfo_, function () { return new StatsReporter(_this.stats_, _this.server_); });
	        this.transactionsInit_();
	        // Used for .info.
	        this.infoData_ = new SnapshotHolder();
	        this.infoSyncTree_ = new SyncTree({
	            startListening: function (query, tag, currentHashFn, onComplete) {
	                var infoEvents = [];
	                var node = _this.infoData_.getNode(query.path);
	                // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events
	                // on initial data...
	                if (!node.isEmpty()) {
	                    infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);
	                    setTimeout(function () {
	                        onComplete('ok');
	                    }, 0);
	                }
	                return infoEvents;
	            },
	            stopListening: function () { }
	        });
	        this.updateInfo_('connected', false);
	        this.serverSyncTree_ = new SyncTree({
	            startListening: function (query, tag, currentHashFn, onComplete) {
	                _this.server_.listen(query, currentHashFn, tag, function (status, data) {
	                    var events = onComplete(status, data);
	                    _this.eventQueue_.raiseEventsForChangedPath(query.path, events);
	                });
	                // No synchronous events for network-backed sync trees
	                return [];
	            },
	            stopListening: function (query, tag) {
	                _this.server_.unlisten(query, tag);
	            }
	        });
	    }
	    /**
	     * @return The URL corresponding to the root of this Firebase.
	     */
	    Repo.prototype.toString = function () {
	        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);
	    };
	    /**
	     * @return The namespace represented by the repo.
	     */
	    Repo.prototype.name = function () {
	        return this.repoInfo_.namespace;
	    };
	    /**
	     * @return The time in milliseconds, taking the server offset into account if we have one.
	     */
	    Repo.prototype.serverTime = function () {
	        var offsetNode = this.infoData_.getNode(new Path('.info/serverTimeOffset'));
	        var offset = offsetNode.val() || 0;
	        return new Date().getTime() + offset;
	    };
	    /**
	     * Generate ServerValues using some variables from the repo object.
	     */
	    Repo.prototype.generateServerValues = function () {
	        return generateWithValues({
	            timestamp: this.serverTime()
	        });
	    };
	    /**
	     * Called by realtime when we get new messages from the server.
	     */
	    Repo.prototype.onDataUpdate_ = function (pathString, data, isMerge, tag) {
	        // For testing.
	        this.dataUpdateCount++;
	        var path = new Path(pathString);
	        data = this.interceptServerDataCallback_
	            ? this.interceptServerDataCallback_(pathString, data)
	            : data;
	        var events = [];
	        if (tag) {
	            if (isMerge) {
	                var taggedChildren = index_cjs.map(data, function (raw) { return nodeFromJSON$1(raw); });
	                events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);
	            }
	            else {
	                var taggedSnap = nodeFromJSON$1(data);
	                events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);
	            }
	        }
	        else if (isMerge) {
	            var changedChildren = index_cjs.map(data, function (raw) { return nodeFromJSON$1(raw); });
	            events = this.serverSyncTree_.applyServerMerge(path, changedChildren);
	        }
	        else {
	            var snap = nodeFromJSON$1(data);
	            events = this.serverSyncTree_.applyServerOverwrite(path, snap);
	        }
	        var affectedPath = path;
	        if (events.length > 0) {
	            // Since we have a listener outstanding for each transaction, receiving any events
	            // is a proxy for some change having occurred.
	            affectedPath = this.rerunTransactions_(path);
	        }
	        this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);
	    };
	    // TODO: This should be @private but it's used by test_access.js and internal.js
	    Repo.prototype.interceptServerData_ = function (callback) {
	        this.interceptServerDataCallback_ = callback;
	    };
	    Repo.prototype.onConnectStatus_ = function (connectStatus) {
	        this.updateInfo_('connected', connectStatus);
	        if (connectStatus === false) {
	            this.runOnDisconnectEvents_();
	        }
	    };
	    Repo.prototype.onServerInfoUpdate_ = function (updates) {
	        var _this = this;
	        each(updates, function (key, value) {
	            _this.updateInfo_(key, value);
	        });
	    };
	    Repo.prototype.updateInfo_ = function (pathString, value) {
	        var path = new Path('/.info/' + pathString);
	        var newNode = nodeFromJSON$1(value);
	        this.infoData_.updateSnapshot(path, newNode);
	        var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);
	        this.eventQueue_.raiseEventsForChangedPath(path, events);
	    };
	    Repo.prototype.getNextWriteId_ = function () {
	        return this.nextWriteId_++;
	    };
	    Repo.prototype.setWithPriority = function (path, newVal, newPriority, onComplete) {
	        var _this = this;
	        this.log_('set', {
	            path: path.toString(),
	            value: newVal,
	            priority: newPriority
	        });
	        // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or
	        // (b) store unresolved paths on JSON parse
	        var serverValues = this.generateServerValues();
	        var newNodeUnresolved = nodeFromJSON$1(newVal, newPriority);
	        var existing = this.serverSyncTree_.calcCompleteEventCache(path);
	        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);
	        var writeId = this.getNextWriteId_();
	        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);
	        this.eventQueue_.queueEvents(events);
	        this.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), function (status, errorReason) {
	            var success = status === 'ok';
	            if (!success) {
	                warn('set at ' + path + ' failed: ' + status);
	            }
	            var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);
	            _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);
	            _this.callOnCompleteCallback(onComplete, status, errorReason);
	        });
	        var affectedPath = this.abortTransactions_(path);
	        this.rerunTransactions_(affectedPath);
	        // We queued the events above, so just flush the queue here
	        this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);
	    };
	    Repo.prototype.update = function (path, childrenToMerge, onComplete) {
	        var _this = this;
	        this.log_('update', { path: path.toString(), value: childrenToMerge });
	        // Start with our existing data and merge each child into it.
	        var empty = true;
	        var serverValues = this.generateServerValues();
	        var changedChildren = {};
	        each(childrenToMerge, function (changedKey, changedValue) {
	            empty = false;
	            changedChildren[changedKey] = resolveDeferredValueTree(path.child(changedKey), nodeFromJSON$1(changedValue), _this.serverSyncTree_, serverValues);
	        });
	        if (!empty) {
	            var writeId_1 = this.getNextWriteId_();
	            var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);
	            this.eventQueue_.queueEvents(events);
	            this.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {
	                var success = status === 'ok';
	                if (!success) {
	                    warn('update at ' + path + ' failed: ' + status);
	                }
	                var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);
	                var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;
	                _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);
	                _this.callOnCompleteCallback(onComplete, status, errorReason);
	            });
	            each(childrenToMerge, function (changedPath) {
	                var affectedPath = _this.abortTransactions_(path.child(changedPath));
	                _this.rerunTransactions_(affectedPath);
	            });
	            // We queued the events above, so just flush the queue here
	            this.eventQueue_.raiseEventsForChangedPath(path, []);
	        }
	        else {
	            log("update() called with empty data.  Don't do anything.");
	            this.callOnCompleteCallback(onComplete, 'ok');
	        }
	    };
	    /**
	     * Applies all of the changes stored up in the onDisconnect_ tree.
	     */
	    Repo.prototype.runOnDisconnectEvents_ = function () {
	        var _this = this;
	        this.log_('onDisconnectEvents');
	        var serverValues = this.generateServerValues();
	        var resolvedOnDisconnectTree = new SparseSnapshotTree();
	        this.onDisconnect_.forEachTree(Path.Empty, function (path, node) {
	            var resolved = resolveDeferredValueTree(path, node, _this.serverSyncTree_, serverValues);
	            resolvedOnDisconnectTree.remember(path, resolved);
	        });
	        var events = [];
	        resolvedOnDisconnectTree.forEachTree(Path.Empty, function (path, snap) {
	            events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));
	            var affectedPath = _this.abortTransactions_(path);
	            _this.rerunTransactions_(affectedPath);
	        });
	        this.onDisconnect_ = new SparseSnapshotTree();
	        this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);
	    };
	    Repo.prototype.onDisconnectCancel = function (path, onComplete) {
	        var _this = this;
	        this.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {
	            if (status === 'ok') {
	                _this.onDisconnect_.forget(path);
	            }
	            _this.callOnCompleteCallback(onComplete, status, errorReason);
	        });
	    };
	    Repo.prototype.onDisconnectSet = function (path, value, onComplete) {
	        var _this = this;
	        var newNode = nodeFromJSON$1(value);
	        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {
	            if (status === 'ok') {
	                _this.onDisconnect_.remember(path, newNode);
	            }
	            _this.callOnCompleteCallback(onComplete, status, errorReason);
	        });
	    };
	    Repo.prototype.onDisconnectSetWithPriority = function (path, value, priority, onComplete) {
	        var _this = this;
	        var newNode = nodeFromJSON$1(value, priority);
	        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {
	            if (status === 'ok') {
	                _this.onDisconnect_.remember(path, newNode);
	            }
	            _this.callOnCompleteCallback(onComplete, status, errorReason);
	        });
	    };
	    Repo.prototype.onDisconnectUpdate = function (path, childrenToMerge, onComplete) {
	        var _this = this;
	        if (index_cjs.isEmpty(childrenToMerge)) {
	            log("onDisconnect().update() called with empty data.  Don't do anything.");
	            this.callOnCompleteCallback(onComplete, 'ok');
	            return;
	        }
	        this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {
	            if (status === 'ok') {
	                each(childrenToMerge, function (childName, childNode) {
	                    var newChildNode = nodeFromJSON$1(childNode);
	                    _this.onDisconnect_.remember(path.child(childName), newChildNode);
	                });
	            }
	            _this.callOnCompleteCallback(onComplete, status, errorReason);
	        });
	    };
	    Repo.prototype.addEventCallbackForQuery = function (query, eventRegistration) {
	        var events;
	        if (query.path.getFront() === '.info') {
	            events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);
	        }
	        else {
	            events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);
	        }
	        this.eventQueue_.raiseEventsAtPath(query.path, events);
	    };
	    Repo.prototype.removeEventCallbackForQuery = function (query, eventRegistration) {
	        // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof
	        // a little bit by handling the return values anyways.
	        var events;
	        if (query.path.getFront() === '.info') {
	            events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);
	        }
	        else {
	            events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);
	        }
	        this.eventQueue_.raiseEventsAtPath(query.path, events);
	    };
	    Repo.prototype.interrupt = function () {
	        if (this.persistentConnection_) {
	            this.persistentConnection_.interrupt(INTERRUPT_REASON);
	        }
	    };
	    Repo.prototype.resume = function () {
	        if (this.persistentConnection_) {
	            this.persistentConnection_.resume(INTERRUPT_REASON);
	        }
	    };
	    Repo.prototype.stats = function (showDelta) {
	        if (showDelta === void 0) { showDelta = false; }
	        if (typeof console === 'undefined') {
	            return;
	        }
	        var stats;
	        if (showDelta) {
	            if (!this.statsListener_) {
	                this.statsListener_ = new StatsListener(this.stats_);
	            }
	            stats = this.statsListener_.get();
	        }
	        else {
	            stats = this.stats_.get();
	        }
	        var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {
	            return Math.max(currentValue.length, previousValue);
	        }, 0);
	        each(stats, function (stat, value) {
	            var paddedStat = stat;
	            // pad stat names to be the same length (plus 2 extra spaces).
	            for (var i = stat.length; i < longestName + 2; i++) {
	                paddedStat += ' ';
	            }
	            console.log(paddedStat + value);
	        });
	    };
	    Repo.prototype.statsIncrementCounter = function (metric) {
	        this.stats_.incrementCounter(metric);
	        this.statsReporter_.includeStat(metric);
	    };
	    Repo.prototype.log_ = function () {
	        var varArgs = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            varArgs[_i] = arguments[_i];
	        }
	        var prefix = '';
	        if (this.persistentConnection_) {
	            prefix = this.persistentConnection_.id + ':';
	        }
	        log.apply(void 0, tslib.__spread([prefix], varArgs));
	    };
	    Repo.prototype.callOnCompleteCallback = function (callback, status, errorReason) {
	        if (callback) {
	            exceptionGuard(function () {
	                if (status === 'ok') {
	                    callback(null);
	                }
	                else {
	                    var code = (status || 'error').toUpperCase();
	                    var message = code;
	                    if (errorReason) {
	                        message += ': ' + errorReason;
	                    }
	                    var error = new Error(message);
	                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	                    error.code = code;
	                    callback(error);
	                }
	            });
	        }
	    };
	    Object.defineProperty(Repo.prototype, "database", {
	        get: function () {
	            return this.__database || (this.__database = new Database(this));
	        },
	        enumerable: false,
	        configurable: true
	    });
	    return Repo;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node
	 *
	 * @constructor
	 * @implements {NodeFilter}
	 */
	var RangedFilter = /** @class */ (function () {
	    /**
	     * @param {!QueryParams} params
	     */
	    function RangedFilter(params) {
	        this.indexedFilter_ = new IndexedFilter(params.getIndex());
	        this.index_ = params.getIndex();
	        this.startPost_ = RangedFilter.getStartPost_(params);
	        this.endPost_ = RangedFilter.getEndPost_(params);
	    }
	    /**
	     * @return {!NamedNode}
	     */
	    RangedFilter.prototype.getStartPost = function () {
	        return this.startPost_;
	    };
	    /**
	     * @return {!NamedNode}
	     */
	    RangedFilter.prototype.getEndPost = function () {
	        return this.endPost_;
	    };
	    /**
	     * @param {!NamedNode} node
	     * @return {boolean}
	     */
	    RangedFilter.prototype.matches = function (node) {
	        return (this.index_.compare(this.getStartPost(), node) <= 0 &&
	            this.index_.compare(node, this.getEndPost()) <= 0);
	    };
	    /**
	     * @inheritDoc
	     */
	    RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
	        if (!this.matches(new NamedNode(key, newChild))) {
	            newChild = ChildrenNode.EMPTY_NODE;
	        }
	        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
	    };
	    /**
	     * @inheritDoc
	     */
	    RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
	        if (newSnap.isLeafNode()) {
	            // Make sure we have a children node with the correct index, not a leaf node;
	            newSnap = ChildrenNode.EMPTY_NODE;
	        }
	        var filtered = newSnap.withIndex(this.index_);
	        // Don't support priorities on queries
	        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
	        var self = this;
	        newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {
	            if (!self.matches(new NamedNode(key, childNode))) {
	                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);
	            }
	        });
	        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);
	    };
	    /**
	     * @inheritDoc
	     */
	    RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
	        // Don't support priorities on queries
	        return oldSnap;
	    };
	    /**
	     * @inheritDoc
	     */
	    RangedFilter.prototype.filtersNodes = function () {
	        return true;
	    };
	    /**
	     * @inheritDoc
	     */
	    RangedFilter.prototype.getIndexedFilter = function () {
	        return this.indexedFilter_;
	    };
	    /**
	     * @inheritDoc
	     */
	    RangedFilter.prototype.getIndex = function () {
	        return this.index_;
	    };
	    /**
	     * @param {!QueryParams} params
	     * @return {!NamedNode}
	     * @private
	     */
	    RangedFilter.getStartPost_ = function (params) {
	        if (params.hasStart()) {
	            var startName = params.getIndexStartName();
	            return params.getIndex().makePost(params.getIndexStartValue(), startName);
	        }
	        else {
	            return params.getIndex().minPost();
	        }
	    };
	    /**
	     * @param {!QueryParams} params
	     * @return {!NamedNode}
	     * @private
	     */
	    RangedFilter.getEndPost_ = function (params) {
	        if (params.hasEnd()) {
	            var endName = params.getIndexEndName();
	            return params.getIndex().makePost(params.getIndexEndValue(), endName);
	        }
	        else {
	            return params.getIndex().maxPost();
	        }
	    };
	    return RangedFilter;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible
	 *
	 * @constructor
	 * @implements {NodeFilter}
	 */
	var LimitedFilter = /** @class */ (function () {
	    /**
	     * @param {!QueryParams} params
	     */
	    function LimitedFilter(params) {
	        this.rangedFilter_ = new RangedFilter(params);
	        this.index_ = params.getIndex();
	        this.limit_ = params.getLimit();
	        this.reverse_ = !params.isViewFromLeft();
	    }
	    /**
	     * @inheritDoc
	     */
	    LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
	        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {
	            newChild = ChildrenNode.EMPTY_NODE;
	        }
	        if (snap.getImmediateChild(key).equals(newChild)) {
	            // No change
	            return snap;
	        }
	        else if (snap.numChildren() < this.limit_) {
	            return this.rangedFilter_
	                .getIndexedFilter()
	                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
	        }
	        else {
	            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
	        var filtered;
	        if (newSnap.isLeafNode() || newSnap.isEmpty()) {
	            // Make sure we have a children node with the correct index, not a leaf node;
	            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
	        }
	        else {
	            if (this.limit_ * 2 < newSnap.numChildren() &&
	                newSnap.isIndexed(this.index_)) {
	                // Easier to build up a snapshot, since what we're given has more than twice the elements we want
	                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
	                // anchor to the startPost, endPost, or last element as appropriate
	                var iterator = void 0;
	                if (this.reverse_) {
	                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);
	                }
	                else {
	                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);
	                }
	                var count = 0;
	                while (iterator.hasNext() && count < this.limit_) {
	                    var next = iterator.getNext();
	                    var inRange = void 0;
	                    if (this.reverse_) {
	                        inRange =
	                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;
	                    }
	                    else {
	                        inRange =
	                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;
	                    }
	                    if (inRange) {
	                        filtered = filtered.updateImmediateChild(next.name, next.node);
	                        count++;
	                    }
	                    else {
	                        // if we have reached the end post, we cannot keep adding elemments
	                        break;
	                    }
	                }
	            }
	            else {
	                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one
	                filtered = newSnap.withIndex(this.index_);
	                // Don't support priorities on queries
	                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
	                var startPost = void 0;
	                var endPost = void 0;
	                var cmp = void 0;
	                var iterator = void 0;
	                if (this.reverse_) {
	                    iterator = filtered.getReverseIterator(this.index_);
	                    startPost = this.rangedFilter_.getEndPost();
	                    endPost = this.rangedFilter_.getStartPost();
	                    var indexCompare_1 = this.index_.getCompare();
	                    cmp = function (a, b) { return indexCompare_1(b, a); };
	                }
	                else {
	                    iterator = filtered.getIterator(this.index_);
	                    startPost = this.rangedFilter_.getStartPost();
	                    endPost = this.rangedFilter_.getEndPost();
	                    cmp = this.index_.getCompare();
	                }
	                var count = 0;
	                var foundStartPost = false;
	                while (iterator.hasNext()) {
	                    var next = iterator.getNext();
	                    if (!foundStartPost && cmp(startPost, next) <= 0) {
	                        // start adding
	                        foundStartPost = true;
	                    }
	                    var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;
	                    if (inRange) {
	                        count++;
	                    }
	                    else {
	                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);
	                    }
	                }
	            }
	        }
	        return this.rangedFilter_
	            .getIndexedFilter()
	            .updateFullNode(oldSnap, filtered, optChangeAccumulator);
	    };
	    /**
	     * @inheritDoc
	     */
	    LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
	        // Don't support priorities on queries
	        return oldSnap;
	    };
	    /**
	     * @inheritDoc
	     */
	    LimitedFilter.prototype.filtersNodes = function () {
	        return true;
	    };
	    /**
	     * @inheritDoc
	     */
	    LimitedFilter.prototype.getIndexedFilter = function () {
	        return this.rangedFilter_.getIndexedFilter();
	    };
	    /**
	     * @inheritDoc
	     */
	    LimitedFilter.prototype.getIndex = function () {
	        return this.index_;
	    };
	    /**
	     * @param {!Node} snap
	     * @param {string} childKey
	     * @param {!Node} childSnap
	     * @param {!CompleteChildSource} source
	     * @param {?ChildChangeAccumulator} changeAccumulator
	     * @return {!Node}
	     * @private
	     */
	    LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {
	        // TODO: rename all cache stuff etc to general snap terminology
	        var cmp;
	        if (this.reverse_) {
	            var indexCmp_1 = this.index_.getCompare();
	            cmp = function (a, b) { return indexCmp_1(b, a); };
	        }
	        else {
	            cmp = this.index_.getCompare();
	        }
	        var oldEventCache = snap;
	        index_cjs.assert(oldEventCache.numChildren() === this.limit_, '');
	        var newChildNamedNode = new NamedNode(childKey, childSnap);
	        var windowBoundary = this.reverse_
	            ? oldEventCache.getFirstChild(this.index_)
	            : oldEventCache.getLastChild(this.index_);
	        var inRange = this.rangedFilter_.matches(newChildNamedNode);
	        if (oldEventCache.hasChild(childKey)) {
	            var oldChildSnap = oldEventCache.getImmediateChild(childKey);
	            var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);
	            while (nextChild != null &&
	                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {
	                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't
	                // been applied to the limited filter yet. Ignore this next child which will be updated later in
	                // the limited filter...
	                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);
	            }
	            var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);
	            var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;
	            if (remainsInWindow) {
	                if (changeAccumulator != null) {
	                    changeAccumulator.trackChildChange(Change.childChangedChange(childKey, childSnap, oldChildSnap));
	                }
	                return oldEventCache.updateImmediateChild(childKey, childSnap);
	            }
	            else {
	                if (changeAccumulator != null) {
	                    changeAccumulator.trackChildChange(Change.childRemovedChange(childKey, oldChildSnap));
	                }
	                var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);
	                var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);
	                if (nextChildInRange) {
	                    if (changeAccumulator != null) {
	                        changeAccumulator.trackChildChange(Change.childAddedChange(nextChild.name, nextChild.node));
	                    }
	                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);
	                }
	                else {
	                    return newEventCache;
	                }
	            }
	        }
	        else if (childSnap.isEmpty()) {
	            // we're deleting a node, but it was not in the window, so ignore it
	            return snap;
	        }
	        else if (inRange) {
	            if (cmp(windowBoundary, newChildNamedNode) >= 0) {
	                if (changeAccumulator != null) {
	                    changeAccumulator.trackChildChange(Change.childRemovedChange(windowBoundary.name, windowBoundary.node));
	                    changeAccumulator.trackChildChange(Change.childAddedChange(childKey, childSnap));
	                }
	                return oldEventCache
	                    .updateImmediateChild(childKey, childSnap)
	                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);
	            }
	            else {
	                return snap;
	            }
	        }
	        else {
	            return snap;
	        }
	    };
	    return LimitedFilter;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a
	 * range to be returned for a particular location. It is assumed that validation of parameters is done at the
	 * user-facing API level, so it is not done here.
	 * @constructor
	 */
	var QueryParams = /** @class */ (function () {
	    function QueryParams() {
	        this.limitSet_ = false;
	        this.startSet_ = false;
	        this.startNameSet_ = false;
	        this.endSet_ = false;
	        this.endNameSet_ = false;
	        this.limit_ = 0;
	        this.viewFrom_ = '';
	        this.indexStartValue_ = null;
	        this.indexStartName_ = '';
	        this.indexEndValue_ = null;
	        this.indexEndName_ = '';
	        this.index_ = PRIORITY_INDEX;
	    }
	    /**
	     * @return {boolean}
	     */
	    QueryParams.prototype.hasStart = function () {
	        return this.startSet_;
	    };
	    /**
	     * @return {boolean} True if it would return from left.
	     */
	    QueryParams.prototype.isViewFromLeft = function () {
	        if (this.viewFrom_ === '') {
	            // limit(), rather than limitToFirst or limitToLast was called.
	            // This means that only one of startSet_ and endSet_ is true. Use them
	            // to calculate which side of the view to anchor to. If neither is set,
	            // anchor to the end.
	            return this.startSet_;
	        }
	        else {
	            return (this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT);
	        }
	    };
	    /**
	     * Only valid to call if hasStart() returns true
	     * @return {*}
	     */
	    QueryParams.prototype.getIndexStartValue = function () {
	        index_cjs.assert(this.startSet_, 'Only valid if start has been set');
	        return this.indexStartValue_;
	    };
	    /**
	     * Only valid to call if hasStart() returns true.
	     * Returns the starting key name for the range defined by these query parameters
	     * @return {!string}
	     */
	    QueryParams.prototype.getIndexStartName = function () {
	        index_cjs.assert(this.startSet_, 'Only valid if start has been set');
	        if (this.startNameSet_) {
	            return this.indexStartName_;
	        }
	        else {
	            return MIN_NAME;
	        }
	    };
	    /**
	     * @return {boolean}
	     */
	    QueryParams.prototype.hasEnd = function () {
	        return this.endSet_;
	    };
	    /**
	     * Only valid to call if hasEnd() returns true.
	     * @return {*}
	     */
	    QueryParams.prototype.getIndexEndValue = function () {
	        index_cjs.assert(this.endSet_, 'Only valid if end has been set');
	        return this.indexEndValue_;
	    };
	    /**
	     * Only valid to call if hasEnd() returns true.
	     * Returns the end key name for the range defined by these query parameters
	     * @return {!string}
	     */
	    QueryParams.prototype.getIndexEndName = function () {
	        index_cjs.assert(this.endSet_, 'Only valid if end has been set');
	        if (this.endNameSet_) {
	            return this.indexEndName_;
	        }
	        else {
	            return MAX_NAME;
	        }
	    };
	    /**
	     * @return {boolean}
	     */
	    QueryParams.prototype.hasLimit = function () {
	        return this.limitSet_;
	    };
	    /**
	     * @return {boolean} True if a limit has been set and it has been explicitly anchored
	     */
	    QueryParams.prototype.hasAnchoredLimit = function () {
	        return this.limitSet_ && this.viewFrom_ !== '';
	    };
	    /**
	     * Only valid to call if hasLimit() returns true
	     * @return {!number}
	     */
	    QueryParams.prototype.getLimit = function () {
	        index_cjs.assert(this.limitSet_, 'Only valid if limit has been set');
	        return this.limit_;
	    };
	    /**
	     * @return {!Index}
	     */
	    QueryParams.prototype.getIndex = function () {
	        return this.index_;
	    };
	    /**
	     * @return {!QueryParams}
	     * @private
	     */
	    QueryParams.prototype.copy_ = function () {
	        var copy = new QueryParams();
	        copy.limitSet_ = this.limitSet_;
	        copy.limit_ = this.limit_;
	        copy.startSet_ = this.startSet_;
	        copy.indexStartValue_ = this.indexStartValue_;
	        copy.startNameSet_ = this.startNameSet_;
	        copy.indexStartName_ = this.indexStartName_;
	        copy.endSet_ = this.endSet_;
	        copy.indexEndValue_ = this.indexEndValue_;
	        copy.endNameSet_ = this.endNameSet_;
	        copy.indexEndName_ = this.indexEndName_;
	        copy.index_ = this.index_;
	        copy.viewFrom_ = this.viewFrom_;
	        return copy;
	    };
	    /**
	     * @param {!number} newLimit
	     * @return {!QueryParams}
	     */
	    QueryParams.prototype.limit = function (newLimit) {
	        var newParams = this.copy_();
	        newParams.limitSet_ = true;
	        newParams.limit_ = newLimit;
	        newParams.viewFrom_ = '';
	        return newParams;
	    };
	    /**
	     * @param {!number} newLimit
	     * @return {!QueryParams}
	     */
	    QueryParams.prototype.limitToFirst = function (newLimit) {
	        var newParams = this.copy_();
	        newParams.limitSet_ = true;
	        newParams.limit_ = newLimit;
	        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;
	        return newParams;
	    };
	    /**
	     * @param {!number} newLimit
	     * @return {!QueryParams}
	     */
	    QueryParams.prototype.limitToLast = function (newLimit) {
	        var newParams = this.copy_();
	        newParams.limitSet_ = true;
	        newParams.limit_ = newLimit;
	        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;
	        return newParams;
	    };
	    /**
	     * @param {*} indexValue
	     * @param {?string=} key
	     * @return {!QueryParams}
	     */
	    QueryParams.prototype.startAt = function (indexValue, key) {
	        var newParams = this.copy_();
	        newParams.startSet_ = true;
	        if (indexValue === undefined) {
	            indexValue = null;
	        }
	        newParams.indexStartValue_ = indexValue;
	        if (key != null) {
	            newParams.startNameSet_ = true;
	            newParams.indexStartName_ = key;
	        }
	        else {
	            newParams.startNameSet_ = false;
	            newParams.indexStartName_ = '';
	        }
	        return newParams;
	    };
	    /**
	     * @param {*} indexValue
	     * @param {?string=} key
	     * @return {!QueryParams}
	     */
	    QueryParams.prototype.endAt = function (indexValue, key) {
	        var newParams = this.copy_();
	        newParams.endSet_ = true;
	        if (indexValue === undefined) {
	            indexValue = null;
	        }
	        newParams.indexEndValue_ = indexValue;
	        if (key !== undefined) {
	            newParams.endNameSet_ = true;
	            newParams.indexEndName_ = key;
	        }
	        else {
	            newParams.endNameSet_ = false;
	            newParams.indexEndName_ = '';
	        }
	        return newParams;
	    };
	    /**
	     * @param {!Index} index
	     * @return {!QueryParams}
	     */
	    QueryParams.prototype.orderBy = function (index) {
	        var newParams = this.copy_();
	        newParams.index_ = index;
	        return newParams;
	    };
	    /**
	     * @return {!Object}
	     */
	    QueryParams.prototype.getQueryObject = function () {
	        var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;
	        var obj = {};
	        if (this.startSet_) {
	            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;
	            if (this.startNameSet_) {
	                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;
	            }
	        }
	        if (this.endSet_) {
	            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;
	            if (this.endNameSet_) {
	                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;
	            }
	        }
	        if (this.limitSet_) {
	            obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;
	            var viewFrom = this.viewFrom_;
	            if (viewFrom === '') {
	                if (this.isViewFromLeft()) {
	                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;
	                }
	                else {
	                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;
	                }
	            }
	            obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;
	        }
	        // For now, priority index is the default, so we only specify if it's some other index
	        if (this.index_ !== PRIORITY_INDEX) {
	            obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();
	        }
	        return obj;
	    };
	    /**
	     * @return {boolean}
	     */
	    QueryParams.prototype.loadsAllData = function () {
	        return !(this.startSet_ || this.endSet_ || this.limitSet_);
	    };
	    /**
	     * @return {boolean}
	     */
	    QueryParams.prototype.isDefault = function () {
	        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;
	    };
	    /**
	     * @return {!NodeFilter}
	     */
	    QueryParams.prototype.getNodeFilter = function () {
	        if (this.loadsAllData()) {
	            return new IndexedFilter(this.getIndex());
	        }
	        else if (this.hasLimit()) {
	            return new LimitedFilter(this);
	        }
	        else {
	            return new RangedFilter(this);
	        }
	    };
	    /**
	     * Returns a set of REST query string parameters representing this query.
	     *
	     * @return {!Object.<string,*>} query string parameters
	     */
	    QueryParams.prototype.toRestQueryStringParameters = function () {
	        var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;
	        var qs = {};
	        if (this.isDefault()) {
	            return qs;
	        }
	        var orderBy;
	        if (this.index_ === PRIORITY_INDEX) {
	            orderBy = REST_CONSTANTS.PRIORITY_INDEX;
	        }
	        else if (this.index_ === VALUE_INDEX) {
	            orderBy = REST_CONSTANTS.VALUE_INDEX;
	        }
	        else if (this.index_ === KEY_INDEX) {
	            orderBy = REST_CONSTANTS.KEY_INDEX;
	        }
	        else {
	            index_cjs.assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');
	            orderBy = this.index_.toString();
	        }
	        qs[REST_CONSTANTS.ORDER_BY] = index_cjs.stringify(orderBy);
	        if (this.startSet_) {
	            qs[REST_CONSTANTS.START_AT] = index_cjs.stringify(this.indexStartValue_);
	            if (this.startNameSet_) {
	                qs[REST_CONSTANTS.START_AT] += ',' + index_cjs.stringify(this.indexStartName_);
	            }
	        }
	        if (this.endSet_) {
	            qs[REST_CONSTANTS.END_AT] = index_cjs.stringify(this.indexEndValue_);
	            if (this.endNameSet_) {
	                qs[REST_CONSTANTS.END_AT] += ',' + index_cjs.stringify(this.indexEndName_);
	            }
	        }
	        if (this.limitSet_) {
	            if (this.isViewFromLeft()) {
	                qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;
	            }
	            else {
	                qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;
	            }
	        }
	        return qs;
	    };
	    /**
	     * Wire Protocol Constants
	     * @const
	     * @enum {string}
	     * @private
	     */
	    QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {
	        INDEX_START_VALUE: 'sp',
	        INDEX_START_NAME: 'sn',
	        INDEX_END_VALUE: 'ep',
	        INDEX_END_NAME: 'en',
	        LIMIT: 'l',
	        VIEW_FROM: 'vf',
	        VIEW_FROM_LEFT: 'l',
	        VIEW_FROM_RIGHT: 'r',
	        INDEX: 'i'
	    };
	    /**
	     * REST Query Constants
	     * @const
	     * @enum {string}
	     * @private
	     */
	    QueryParams.REST_QUERY_CONSTANTS_ = {
	        ORDER_BY: 'orderBy',
	        PRIORITY_INDEX: '$priority',
	        VALUE_INDEX: '$value',
	        KEY_INDEX: '$key',
	        START_AT: 'startAt',
	        END_AT: 'endAt',
	        LIMIT_TO_FIRST: 'limitToFirst',
	        LIMIT_TO_LAST: 'limitToLast'
	    };
	    /**
	     * Default, empty query parameters
	     * @type {!QueryParams}
	     * @const
	     */
	    QueryParams.DEFAULT = new QueryParams();
	    return QueryParams;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var Reference = /** @class */ (function (_super) {
	    tslib.__extends(Reference, _super);
	    /**
	     * Call options:
	     *   new Reference(Repo, Path) or
	     *   new Reference(url: string, string|RepoManager)
	     *
	     * Externally - this is the firebase.database.Reference type.
	     *
	     * @param {!Repo} repo
	     * @param {(!Path)} path
	     * @extends {Query}
	     */
	    function Reference(repo, path) {
	        var _this = this;
	        if (!(repo instanceof Repo)) {
	            throw new Error('new Reference() no longer supported - use app.database().');
	        }
	        // call Query's constructor, passing in the repo and path.
	        _this = _super.call(this, repo, path, QueryParams.DEFAULT, false) || this;
	        return _this;
	    }
	    /** @return {?string} */
	    Reference.prototype.getKey = function () {
	        index_cjs.validateArgCount('Reference.key', 0, 0, arguments.length);
	        if (this.path.isEmpty()) {
	            return null;
	        }
	        else {
	            return this.path.getBack();
	        }
	    };
	    /**
	     * @param {!(string|Path)} pathString
	     * @return {!Reference}
	     */
	    Reference.prototype.child = function (pathString) {
	        index_cjs.validateArgCount('Reference.child', 1, 1, arguments.length);
	        if (typeof pathString === 'number') {
	            pathString = String(pathString);
	        }
	        else if (!(pathString instanceof Path)) {
	            if (this.path.getFront() === null) {
	                validateRootPathString('Reference.child', 1, pathString, false);
	            }
	            else {
	                validatePathString('Reference.child', 1, pathString, false);
	            }
	        }
	        return new Reference(this.repo, this.path.child(pathString));
	    };
	    /** @return {?Reference} */
	    Reference.prototype.getParent = function () {
	        index_cjs.validateArgCount('Reference.parent', 0, 0, arguments.length);
	        var parentPath = this.path.parent();
	        return parentPath === null ? null : new Reference(this.repo, parentPath);
	    };
	    /** @return {!Reference} */
	    Reference.prototype.getRoot = function () {
	        index_cjs.validateArgCount('Reference.root', 0, 0, arguments.length);
	        var ref = this;
	        while (ref.getParent() !== null) {
	            ref = ref.getParent();
	        }
	        return ref;
	    };
	    /** @return {!Database} */
	    Reference.prototype.databaseProp = function () {
	        return this.repo.database;
	    };
	    /**
	     * @param {*} newVal
	     * @param {function(?Error)=} onComplete
	     * @return {!Promise}
	     */
	    Reference.prototype.set = function (newVal, onComplete) {
	        index_cjs.validateArgCount('Reference.set', 1, 2, arguments.length);
	        validateWritablePath('Reference.set', this.path);
	        validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);
	        index_cjs.validateCallback('Reference.set', 2, onComplete, true);
	        var deferred = new index_cjs.Deferred();
	        this.repo.setWithPriority(this.path, newVal, 
	        /*priority=*/ null, deferred.wrapCallback(onComplete));
	        return deferred.promise;
	    };
	    /**
	     * @param {!Object} objectToMerge
	     * @param {function(?Error)=} onComplete
	     * @return {!Promise}
	     */
	    Reference.prototype.update = function (objectToMerge, onComplete) {
	        index_cjs.validateArgCount('Reference.update', 1, 2, arguments.length);
	        validateWritablePath('Reference.update', this.path);
	        if (Array.isArray(objectToMerge)) {
	            var newObjectToMerge = {};
	            for (var i = 0; i < objectToMerge.length; ++i) {
	                newObjectToMerge['' + i] = objectToMerge[i];
	            }
	            objectToMerge = newObjectToMerge;
	            warn('Passing an Array to Firebase.update() is deprecated. ' +
	                'Use set() if you want to overwrite the existing data, or ' +
	                'an Object with integer keys if you really do want to ' +
	                'only update some of the children.');
	        }
	        validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);
	        index_cjs.validateCallback('Reference.update', 2, onComplete, true);
	        var deferred = new index_cjs.Deferred();
	        this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));
	        return deferred.promise;
	    };
	    /**
	     * @param {*} newVal
	     * @param {string|number|null} newPriority
	     * @param {function(?Error)=} onComplete
	     * @return {!Promise}
	     */
	    Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {
	        index_cjs.validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);
	        validateWritablePath('Reference.setWithPriority', this.path);
	        validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);
	        validatePriority('Reference.setWithPriority', 2, newPriority, false);
	        index_cjs.validateCallback('Reference.setWithPriority', 3, onComplete, true);
	        if (this.getKey() === '.length' || this.getKey() === '.keys') {
	            throw ('Reference.setWithPriority failed: ' +
	                this.getKey() +
	                ' is a read-only object.');
	        }
	        var deferred = new index_cjs.Deferred();
	        this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));
	        return deferred.promise;
	    };
	    /**
	     * @param {function(?Error)=} onComplete
	     * @return {!Promise}
	     */
	    Reference.prototype.remove = function (onComplete) {
	        index_cjs.validateArgCount('Reference.remove', 0, 1, arguments.length);
	        validateWritablePath('Reference.remove', this.path);
	        index_cjs.validateCallback('Reference.remove', 1, onComplete, true);
	        return this.set(null, onComplete);
	    };
	    /**
	     * @param {function(*):*} transactionUpdate
	     * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete
	     * @param {boolean=} applyLocally
	     * @return {!Promise}
	     */
	    Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {
	        index_cjs.validateArgCount('Reference.transaction', 1, 3, arguments.length);
	        validateWritablePath('Reference.transaction', this.path);
	        index_cjs.validateCallback('Reference.transaction', 1, transactionUpdate, false);
	        index_cjs.validateCallback('Reference.transaction', 2, onComplete, true);
	        // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how
	        // to expose it.
	        validateBoolean('Reference.transaction', 3, applyLocally, true);
	        if (this.getKey() === '.length' || this.getKey() === '.keys') {
	            throw ('Reference.transaction failed: ' +
	                this.getKey() +
	                ' is a read-only object.');
	        }
	        if (applyLocally === undefined) {
	            applyLocally = true;
	        }
	        var deferred = new index_cjs.Deferred();
	        if (typeof onComplete === 'function') {
	            deferred.promise.catch(function () { });
	        }
	        var promiseComplete = function (error, committed, snapshot) {
	            if (error) {
	                deferred.reject(error);
	            }
	            else {
	                deferred.resolve(new TransactionResult(committed, snapshot));
	            }
	            if (typeof onComplete === 'function') {
	                onComplete(error, committed, snapshot);
	            }
	        };
	        this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);
	        return deferred.promise;
	    };
	    /**
	     * @param {string|number|null} priority
	     * @param {function(?Error)=} onComplete
	     * @return {!Promise}
	     */
	    Reference.prototype.setPriority = function (priority, onComplete) {
	        index_cjs.validateArgCount('Reference.setPriority', 1, 2, arguments.length);
	        validateWritablePath('Reference.setPriority', this.path);
	        validatePriority('Reference.setPriority', 1, priority, false);
	        index_cjs.validateCallback('Reference.setPriority', 2, onComplete, true);
	        var deferred = new index_cjs.Deferred();
	        this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));
	        return deferred.promise;
	    };
	    /**
	     * @param {*=} value
	     * @param {function(?Error)=} onComplete
	     * @return {!Reference}
	     */
	    Reference.prototype.push = function (value, onComplete) {
	        index_cjs.validateArgCount('Reference.push', 0, 2, arguments.length);
	        validateWritablePath('Reference.push', this.path);
	        validateFirebaseDataArg('Reference.push', 1, value, this.path, true);
	        index_cjs.validateCallback('Reference.push', 2, onComplete, true);
	        var now = this.repo.serverTime();
	        var name = nextPushId(now);
	        // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.
	        // We use child() to create handles to two different references. The first is turned into a
	        // ThennableReference below by adding then() and catch() methods and is used as the
	        // return value of push(). The second remains a regular Reference and is used as the fulfilled
	        // value of the first ThennableReference.
	        var thennablePushRef = this.child(name);
	        var pushRef = this.child(name);
	        var promise;
	        if (value != null) {
	            promise = thennablePushRef.set(value, onComplete).then(function () { return pushRef; });
	        }
	        else {
	            promise = Promise.resolve(pushRef);
	        }
	        thennablePushRef.then = promise.then.bind(promise);
	        thennablePushRef.catch = promise.then.bind(promise, undefined);
	        if (typeof onComplete === 'function') {
	            promise.catch(function () { });
	        }
	        return thennablePushRef;
	    };
	    /**
	     * @return {!OnDisconnect}
	     */
	    Reference.prototype.onDisconnect = function () {
	        validateWritablePath('Reference.onDisconnect', this.path);
	        return new OnDisconnect(this.repo, this.path);
	    };
	    Object.defineProperty(Reference.prototype, "database", {
	        get: function () {
	            return this.databaseProp();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Reference.prototype, "key", {
	        get: function () {
	            return this.getKey();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Reference.prototype, "parent", {
	        get: function () {
	            return this.getParent();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Reference.prototype, "root", {
	        get: function () {
	            return this.getRoot();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    return Reference;
	}(Query));
	/**
	 * Define reference constructor in various modules
	 *
	 * We are doing this here to avoid several circular
	 * dependency issues
	 */
	Query.__referenceConstructor = Reference;
	SyncPoint.__referenceConstructor = Reference;

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Node in a Tree.
	 */
	var TreeNode = /** @class */ (function () {
	    function TreeNode() {
	        // TODO: Consider making accessors that create children and value lazily or
	        // separate Internal / Leaf 'types'.
	        this.children = {};
	        this.childCount = 0;
	        this.value = null;
	    }
	    return TreeNode;
	}());
	/**
	 * A light-weight tree, traversable by path.  Nodes can have both values and children.
	 * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty
	 * children.
	 */
	var Tree = /** @class */ (function () {
	    /**
	     * @template T
	     * @param {string=} name_ Optional name of the node.
	     * @param {Tree=} parent_ Optional parent node.
	     * @param {TreeNode=} node_ Optional node to wrap.
	     */
	    function Tree(name_, parent_, node_) {
	        if (name_ === void 0) { name_ = ''; }
	        if (parent_ === void 0) { parent_ = null; }
	        if (node_ === void 0) { node_ = new TreeNode(); }
	        this.name_ = name_;
	        this.parent_ = parent_;
	        this.node_ = node_;
	    }
	    /**
	     * Returns a sub-Tree for the given path.
	     *
	     * @param {!(string|Path)} pathObj Path to look up.
	     * @return {!Tree.<T>} Tree for path.
	     */
	    Tree.prototype.subTree = function (pathObj) {
	        // TODO: Require pathObj to be Path?
	        var path = pathObj instanceof Path ? pathObj : new Path(pathObj);
	        var child = this, next = path.getFront();
	        while (next !== null) {
	            var childNode = index_cjs.safeGet(child.node_.children, next) || new TreeNode();
	            child = new Tree(next, child, childNode);
	            path = path.popFront();
	            next = path.getFront();
	        }
	        return child;
	    };
	    /**
	     * Returns the data associated with this tree node.
	     *
	     * @return {?T} The data or null if no data exists.
	     */
	    Tree.prototype.getValue = function () {
	        return this.node_.value;
	    };
	    /**
	     * Sets data to this tree node.
	     *
	     * @param {!T} value Value to set.
	     */
	    Tree.prototype.setValue = function (value) {
	        index_cjs.assert(typeof value !== 'undefined', 'Cannot set value to undefined');
	        this.node_.value = value;
	        this.updateParents_();
	    };
	    /**
	     * Clears the contents of the tree node (its value and all children).
	     */
	    Tree.prototype.clear = function () {
	        this.node_.value = null;
	        this.node_.children = {};
	        this.node_.childCount = 0;
	        this.updateParents_();
	    };
	    /**
	     * @return {boolean} Whether the tree has any children.
	     */
	    Tree.prototype.hasChildren = function () {
	        return this.node_.childCount > 0;
	    };
	    /**
	     * @return {boolean} Whether the tree is empty (no value or children).
	     */
	    Tree.prototype.isEmpty = function () {
	        return this.getValue() === null && !this.hasChildren();
	    };
	    /**
	     * Calls action for each child of this tree node.
	     *
	     * @param {function(!Tree.<T>)} action Action to be called for each child.
	     */
	    Tree.prototype.forEachChild = function (action) {
	        var _this = this;
	        each(this.node_.children, function (child, childTree) {
	            action(new Tree(child, _this, childTree));
	        });
	    };
	    /**
	     * Does a depth-first traversal of this node's descendants, calling action for each one.
	     *
	     * @param {function(!Tree.<T>)} action Action to be called for each child.
	     * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to
	     *   false.
	     * @param {boolean=} childrenFirst Whether to call action on children before calling it on
	     *   parent.
	     */
	    Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {
	        if (includeSelf && !childrenFirst) {
	            action(this);
	        }
	        this.forEachChild(function (child) {
	            child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);
	        });
	        if (includeSelf && childrenFirst) {
	            action(this);
	        }
	    };
	    /**
	     * Calls action on each ancestor node.
	     *
	     * @param {function(!Tree.<T>)} action Action to be called on each parent; return
	     *   true to abort.
	     * @param {boolean=} includeSelf Whether to call action on this node as well.
	     * @return {boolean} true if the action callback returned true.
	     */
	    Tree.prototype.forEachAncestor = function (action, includeSelf) {
	        var node = includeSelf ? this : this.parent();
	        while (node !== null) {
	            if (action(node)) {
	                return true;
	            }
	            node = node.parent();
	        }
	        return false;
	    };
	    /**
	     * Does a depth-first traversal of this node's descendants.  When a descendant with a value
	     * is found, action is called on it and traversal does not continue inside the node.
	     * Action is *not* called on this node.
	     *
	     * @param {function(!Tree.<T>)} action Action to be called for each child.
	     */
	    Tree.prototype.forEachImmediateDescendantWithValue = function (action) {
	        this.forEachChild(function (child) {
	            if (child.getValue() !== null) {
	                action(child);
	            }
	            else {
	                child.forEachImmediateDescendantWithValue(action);
	            }
	        });
	    };
	    /**
	     * @return {!Path} The path of this tree node, as a Path.
	     */
	    Tree.prototype.path = function () {
	        return new Path(this.parent_ === null
	            ? this.name_
	            : this.parent_.path() + '/' + this.name_);
	    };
	    /**
	     * @return {string} The name of the tree node.
	     */
	    Tree.prototype.name = function () {
	        return this.name_;
	    };
	    /**
	     * @return {?Tree} The parent tree node, or null if this is the root of the tree.
	     */
	    Tree.prototype.parent = function () {
	        return this.parent_;
	    };
	    /**
	     * Adds or removes this child from its parent based on whether it's empty or not.
	     *
	     * @private
	     */
	    Tree.prototype.updateParents_ = function () {
	        if (this.parent_ !== null) {
	            this.parent_.updateChild_(this.name_, this);
	        }
	    };
	    /**
	     * Adds or removes the passed child to this tree node, depending on whether it's empty.
	     *
	     * @param {string} childName The name of the child to update.
	     * @param {!Tree.<T>} child The child to update.
	     * @private
	     */
	    Tree.prototype.updateChild_ = function (childName, child) {
	        var childEmpty = child.isEmpty();
	        var childExists = index_cjs.contains(this.node_.children, childName);
	        if (childEmpty && childExists) {
	            delete this.node_.children[childName];
	            this.node_.childCount--;
	            this.updateParents_();
	        }
	        else if (!childEmpty && !childExists) {
	            this.node_.children[childName] = child.node_;
	            this.node_.childCount++;
	            this.updateParents_();
	        }
	    };
	    return Tree;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific
	// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well
	// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.
	// For now it's part of Repo, but in its own file.
	/**
	 * @enum {number}
	 */
	var TransactionStatus;
	(function (TransactionStatus) {
	    // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the
	    // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to
	    // mismatched hash.
	    TransactionStatus[TransactionStatus["RUN"] = 0] = "RUN";
	    // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted
	    // or rejected yet).
	    TransactionStatus[TransactionStatus["SENT"] = 1] = "SENT";
	    // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be
	    // removed when we get a chance to prune completed ones.
	    TransactionStatus[TransactionStatus["COMPLETED"] = 2] = "COMPLETED";
	    // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).
	    // If it comes back as unsuccessful, we'll abort it.
	    TransactionStatus[TransactionStatus["SENT_NEEDS_ABORT"] = 3] = "SENT_NEEDS_ABORT";
	    // Temporary state used to mark transactions that need to be aborted.
	    TransactionStatus[TransactionStatus["NEEDS_ABORT"] = 4] = "NEEDS_ABORT";
	})(TransactionStatus || (TransactionStatus = {}));
	/**
	 * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's
	 * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.
	 * @type {number}
	 * @const
	 * @private
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	Repo.MAX_TRANSACTION_RETRIES_ = 25;
	/**
	 * Setup the transaction data structures
	 * @private
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	Repo.prototype.transactionsInit_ = function () {
	    /**
	     * Stores queues of outstanding transactions for Firebase locations.
	     *
	     * @type {!Tree.<Array.<!Transaction>>}
	     * @private
	     */
	    this.transactionQueueTree_ = new Tree();
	};
	/**
	 * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.
	 *
	 * @param {!Path} path Path at which to do transaction.
	 * @param {function(*):*} transactionUpdate Update callback.
	 * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.
	 * @param {boolean} applyLocally Whether or not to make intermediate results visible
	 */
	Repo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {
	    this.log_('transaction on ' + path);
	    // Add a watch to make sure we get server updates.
	    var valueCallback = function () { };
	    var watchRef = new Reference(this, path);
	    watchRef.on('value', valueCallback);
	    var unwatcher = function () {
	        watchRef.off('value', valueCallback);
	    };
	    // Initialize transaction.
	    var transaction = {
	        path: path,
	        update: transactionUpdate,
	        onComplete: onComplete,
	        // One of TransactionStatus enums.
	        status: null,
	        // Used when combining transactions at different locations to figure out which one goes first.
	        order: LUIDGenerator(),
	        // Whether to raise local events for this transaction.
	        applyLocally: applyLocally,
	        // Count of how many times we've retried the transaction.
	        retryCount: 0,
	        // Function to call to clean up our .on() listener.
	        unwatcher: unwatcher,
	        // Stores why a transaction was aborted.
	        abortReason: null,
	        currentWriteId: null,
	        currentInputSnapshot: null,
	        currentOutputSnapshotRaw: null,
	        currentOutputSnapshotResolved: null
	    };
	    // Run transaction initially.
	    var currentState = this.getLatestState_(path);
	    transaction.currentInputSnapshot = currentState;
	    var newVal = transaction.update(currentState.val());
	    if (newVal === undefined) {
	        // Abort transaction.
	        transaction.unwatcher();
	        transaction.currentOutputSnapshotRaw = null;
	        transaction.currentOutputSnapshotResolved = null;
	        if (transaction.onComplete) {
	            // We just set the input snapshot, so this cast should be safe
	            var snapshot = new DataSnapshot(transaction.currentInputSnapshot, new Reference(this, transaction.path), PRIORITY_INDEX);
	            transaction.onComplete(null, false, snapshot);
	        }
	    }
	    else {
	        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);
	        // Mark as run and add to our queue.
	        transaction.status = TransactionStatus.RUN;
	        var queueNode = this.transactionQueueTree_.subTree(path);
	        var nodeQueue = queueNode.getValue() || [];
	        nodeQueue.push(transaction);
	        queueNode.setValue(nodeQueue);
	        // Update visibleData and raise events
	        // Note: We intentionally raise events after updating all of our transaction state, since the user could
	        // start new transactions from the event callbacks.
	        var priorityForNode = void 0;
	        if (typeof newVal === 'object' &&
	            newVal !== null &&
	            index_cjs.contains(newVal, '.priority')) {
	            // eslint-disable-next-line @typescript-eslint/no-explicit-any
	            priorityForNode = index_cjs.safeGet(newVal, '.priority');
	            index_cjs.assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +
	                'Priority must be a valid string, finite number, server value, or null.');
	        }
	        else {
	            var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) ||
	                ChildrenNode.EMPTY_NODE;
	            priorityForNode = currentNode.getPriority().val();
	        }
	        priorityForNode /** @type {null|number|string} */ = priorityForNode;
	        var serverValues = this.generateServerValues();
	        var newNodeUnresolved = nodeFromJSON$1(newVal, priorityForNode);
	        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);
	        transaction.currentOutputSnapshotRaw = newNodeUnresolved;
	        transaction.currentOutputSnapshotResolved = newNode;
	        transaction.currentWriteId = this.getNextWriteId_();
	        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);
	        this.eventQueue_.raiseEventsForChangedPath(path, events);
	        this.sendReadyTransactions_();
	    }
	};
	/**
	 * @param {!Path} path
	 * @param {Array.<number>=} excludeSets A specific set to exclude
	 * @return {Node}
	 * @private
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	Repo.prototype.getLatestState_ = function (path, excludeSets) {
	    return (this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||
	        ChildrenNode.EMPTY_NODE);
	};
	/**
	 * Sends any already-run transactions that aren't waiting for outstanding transactions to
	 * complete.
	 *
	 * Externally it's called with no arguments, but it calls itself recursively with a particular
	 * transactionQueueTree node to recurse through the tree.
	 *
	 * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.
	 * @private
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	Repo.prototype.sendReadyTransactions_ = function (node) {
	    var _this = this;
	    if (node === void 0) { node = this.transactionQueueTree_; }
	    // Before recursing, make sure any completed transactions are removed.
	    if (!node) {
	        this.pruneCompletedTransactionsBelowNode_(node);
	    }
	    if (node.getValue() !== null) {
	        var queue = this.buildTransactionQueue_(node);
	        index_cjs.assert(queue.length > 0, 'Sending zero length transaction queue');
	        var allRun = queue.every(function (transaction) { return transaction.status === TransactionStatus.RUN; });
	        // If they're all run (and not sent), we can send them.  Else, we must wait.
	        if (allRun) {
	            this.sendTransactionQueue_(node.path(), queue);
	        }
	    }
	    else if (node.hasChildren()) {
	        node.forEachChild(function (childNode) {
	            _this.sendReadyTransactions_(childNode);
	        });
	    }
	};
	/**
	 * Given a list of run transactions, send them to the server and then handle the result (success or failure).
	 *
	 * @param {!Path} path The location of the queue.
	 * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.
	 * @private
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	Repo.prototype.sendTransactionQueue_ = function (path, queue) {
	    var _this = this;
	    // Mark transactions as sent and increment retry count!
	    var setsToIgnore = queue.map(function (txn) {
	        return txn.currentWriteId;
	    });
	    var latestState = this.getLatestState_(path, setsToIgnore);
	    var snapToSend = latestState;
	    var latestHash = latestState.hash();
	    for (var i = 0; i < queue.length; i++) {
	        var txn = queue[i];
	        index_cjs.assert(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');
	        txn.status = TransactionStatus.SENT;
	        txn.retryCount++;
	        var relativePath = Path.relativePath(path, txn.path);
	        // If we've gotten to this point, the output snapshot must be defined.
	        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);
	    }
	    var dataToSend = snapToSend.val(true);
	    var pathToSend = path;
	    // Send the put.
	    this.server_.put(pathToSend.toString(), dataToSend, function (status) {
	        _this.log_('transaction put response', {
	            path: pathToSend.toString(),
	            status: status
	        });
	        var events = [];
	        if (status === 'ok') {
	            // Queue up the callbacks and fire them after cleaning up all of our transaction state, since
	            // the callback could trigger more transactions or sets.
	            var callbacks = [];
	            for (var i = 0; i < queue.length; i++) {
	                queue[i].status = TransactionStatus.COMPLETED;
	                events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));
	                if (queue[i].onComplete) {
	                    // We never unset the output snapshot, and given that this transaction is complete, it should be set
	                    var node = queue[i].currentOutputSnapshotResolved;
	                    var ref = new Reference(_this, queue[i].path);
	                    var snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);
	                    callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));
	                }
	                queue[i].unwatcher();
	            }
	            // Now remove the completed transactions.
	            _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path));
	            // There may be pending transactions that we can now send.
	            _this.sendReadyTransactions_();
	            _this.eventQueue_.raiseEventsForChangedPath(path, events);
	            // Finally, trigger onComplete callbacks.
	            for (var i = 0; i < callbacks.length; i++) {
	                exceptionGuard(callbacks[i]);
	            }
	        }
	        else {
	            // transactions are no longer sent.  Update their status appropriately.
	            if (status === 'datastale') {
	                for (var i = 0; i < queue.length; i++) {
	                    if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {
	                        queue[i].status = TransactionStatus.NEEDS_ABORT;
	                    }
	                    else {
	                        queue[i].status = TransactionStatus.RUN;
	                    }
	                }
	            }
	            else {
	                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);
	                for (var i = 0; i < queue.length; i++) {
	                    queue[i].status = TransactionStatus.NEEDS_ABORT;
	                    queue[i].abortReason = status;
	                }
	            }
	            _this.rerunTransactions_(path);
	        }
	    }, latestHash);
	};
	/**
	 * Finds all transactions dependent on the data at changedPath and reruns them.
	 *
	 * Should be called any time cached data changes.
	 *
	 * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to
	 * be raised for.
	 *
	 * @param {!Path} changedPath The path in mergedData that changed.
	 * @return {!Path} The rootmost path that was affected by rerunning transactions.
	 * @private
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	Repo.prototype.rerunTransactions_ = function (changedPath) {
	    var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);
	    var path = rootMostTransactionNode.path();
	    var queue = this.buildTransactionQueue_(rootMostTransactionNode);
	    this.rerunTransactionQueue_(queue, path);
	    return path;
	};
	/**
	 * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).
	 *
	 * @param {Array.<Transaction>} queue The queue of transactions to run.
	 * @param {!Path} path The path the queue is for.
	 * @private
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	Repo.prototype.rerunTransactionQueue_ = function (queue, path) {
	    if (queue.length === 0) {
	        return; // Nothing to do!
	    }
	    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since
	    // the callback could trigger more transactions or sets.
	    var callbacks = [];
	    var events = [];
	    // Ignore all of the sets we're going to re-run.
	    var txnsToRerun = queue.filter(function (q) {
	        return q.status === TransactionStatus.RUN;
	    });
	    var setsToIgnore = txnsToRerun.map(function (q) {
	        return q.currentWriteId;
	    });
	    for (var i = 0; i < queue.length; i++) {
	        var transaction = queue[i];
	        var relativePath = Path.relativePath(path, transaction.path);
	        var abortTransaction = false, abortReason = void 0;
	        index_cjs.assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');
	        if (transaction.status === TransactionStatus.NEEDS_ABORT) {
	            abortTransaction = true;
	            abortReason = transaction.abortReason;
	            events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
	        }
	        else if (transaction.status === TransactionStatus.RUN) {
	            // eslint-disable-next-line @typescript-eslint/no-explicit-any
	            if (transaction.retryCount >= Repo.MAX_TRANSACTION_RETRIES_) {
	                abortTransaction = true;
	                abortReason = 'maxretry';
	                events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
	            }
	            else {
	                // This code reruns a transaction
	                var currentNode = this.getLatestState_(transaction.path, setsToIgnore);
	                transaction.currentInputSnapshot = currentNode;
	                var newData = queue[i].update(currentNode.val());
	                if (newData !== undefined) {
	                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);
	                    var newDataNode = nodeFromJSON$1(newData);
	                    var hasExplicitPriority = typeof newData === 'object' &&
	                        newData != null &&
	                        index_cjs.contains(newData, '.priority');
	                    if (!hasExplicitPriority) {
	                        // Keep the old priority if there wasn't a priority explicitly specified.
	                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());
	                    }
	                    var oldWriteId = transaction.currentWriteId;
	                    var serverValues = this.generateServerValues();
	                    var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);
	                    transaction.currentOutputSnapshotRaw = newDataNode;
	                    transaction.currentOutputSnapshotResolved = newNodeResolved;
	                    transaction.currentWriteId = this.getNextWriteId_();
	                    // Mutates setsToIgnore in place
	                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);
	                    events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));
	                    events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));
	                }
	                else {
	                    abortTransaction = true;
	                    abortReason = 'nodata';
	                    events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
	                }
	            }
	        }
	        this.eventQueue_.raiseEventsForChangedPath(path, events);
	        events = [];
	        if (abortTransaction) {
	            // Abort.
	            queue[i].status = TransactionStatus.COMPLETED;
	            // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).
	            // So defer the unwatcher until we're done.
	            (function (unwatcher) {
	                setTimeout(unwatcher, Math.floor(0));
	            })(queue[i].unwatcher);
	            if (queue[i].onComplete) {
	                if (abortReason === 'nodata') {
	                    var ref = new Reference(this, queue[i].path);
	                    // We set this field immediately, so it's safe to cast to an actual snapshot
	                    var lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;
	                    var snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);
	                    callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));
	                }
	                else {
	                    callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));
	                }
	            }
	        }
	    }
	    // Clean up completed transactions.
	    this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);
	    // Now fire callbacks, now that we're in a good, known state.
	    for (var i = 0; i < callbacks.length; i++) {
	        exceptionGuard(callbacks[i]);
	    }
	    // Try to send the transaction result to the server.
	    this.sendReadyTransactions_();
	};
	/**
	 * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns
	 * the node for the given path if there are no pending transactions on any ancestor.
	 *
	 * @param {!Path} path The location to start at.
	 * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.
	 * @private
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	Repo.prototype.getAncestorTransactionNode_ = function (path) {
	    var front;
	    // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.
	    var transactionNode = this.transactionQueueTree_;
	    front = path.getFront();
	    while (front !== null && transactionNode.getValue() === null) {
	        transactionNode = transactionNode.subTree(front);
	        path = path.popFront();
	        front = path.getFront();
	    }
	    return transactionNode;
	};
	/**
	 * Builds the queue of all transactions at or below the specified transactionNode.
	 *
	 * @param {!Tree.<Array.<Transaction>>} transactionNode
	 * @return {Array.<Transaction>} The generated queue.
	 * @private
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	Repo.prototype.buildTransactionQueue_ = function (transactionNode) {
	    // Walk any child transaction queues and aggregate them into a single queue.
	    var transactionQueue = [];
	    this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);
	    // Sort them by the order the transactions were created.
	    transactionQueue.sort(function (a, b) {
	        return a.order - b.order;
	    });
	    return transactionQueue;
	};
	/**
	 * @param {!Tree.<Array.<Transaction>>} node
	 * @param {Array.<Transaction>} queue
	 * @private
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	Repo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {
	    var _this = this;
	    var nodeQueue = node.getValue();
	    if (nodeQueue !== null) {
	        for (var i = 0; i < nodeQueue.length; i++) {
	            queue.push(nodeQueue[i]);
	        }
	    }
	    node.forEachChild(function (child) {
	        _this.aggregateTransactionQueuesForNode_(child, queue);
	    });
	};
	/**
	 * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.
	 *
	 * @param {!Tree.<Array.<!Transaction>>} node
	 * @private
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	Repo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {
	    var _this = this;
	    var queue = node.getValue();
	    if (queue) {
	        var to = 0;
	        for (var from = 0; from < queue.length; from++) {
	            if (queue[from].status !== TransactionStatus.COMPLETED) {
	                queue[to] = queue[from];
	                to++;
	            }
	        }
	        queue.length = to;
	        node.setValue(queue.length > 0 ? queue : null);
	    }
	    node.forEachChild(function (childNode) {
	        _this.pruneCompletedTransactionsBelowNode_(childNode);
	    });
	};
	/**
	 * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()
	 * since we consider them incompatible with transactions.
	 *
	 * @param {!Path} path Path for which we want to abort related transactions.
	 * @return {!Path}
	 * @private
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	Repo.prototype.abortTransactions_ = function (path) {
	    var _this = this;
	    var affectedPath = this.getAncestorTransactionNode_(path).path();
	    var transactionNode = this.transactionQueueTree_.subTree(path);
	    transactionNode.forEachAncestor(function (node) {
	        _this.abortTransactionsOnNode_(node);
	    });
	    this.abortTransactionsOnNode_(transactionNode);
	    transactionNode.forEachDescendant(function (node) {
	        _this.abortTransactionsOnNode_(node);
	    });
	    return affectedPath;
	};
	/**
	 * Abort transactions stored in this transaction queue node.
	 *
	 * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.
	 * @private
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	Repo.prototype.abortTransactionsOnNode_ = function (node) {
	    var queue = node.getValue();
	    if (queue !== null) {
	        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since
	        // the callback could trigger more transactions or sets.
	        var callbacks = [];
	        // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones
	        // can be immediately aborted and removed.
	        var events = [];
	        var lastSent = -1;
	        for (var i = 0; i < queue.length; i++) {
	            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) ;
	            else if (queue[i].status === TransactionStatus.SENT) {
	                index_cjs.assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');
	                lastSent = i;
	                // Mark transaction for abort when it comes back.
	                queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;
	                queue[i].abortReason = 'set';
	            }
	            else {
	                index_cjs.assert(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort');
	                // We can abort it immediately.
	                queue[i].unwatcher();
	                events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));
	                if (queue[i].onComplete) {
	                    var snapshot = null;
	                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));
	                }
	            }
	        }
	        if (lastSent === -1) {
	            // We're not waiting for any sent transactions.  We can clear the queue.
	            node.setValue(null);
	        }
	        else {
	            // Remove the transactions we aborted.
	            queue.length = lastSent + 1;
	        }
	        // Now fire the callbacks.
	        this.eventQueue_.raiseEventsForChangedPath(node.path(), events);
	        for (var i = 0; i < callbacks.length; i++) {
	            exceptionGuard(callbacks[i]);
	        }
	    }
	};

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Abstraction around FirebaseApp's token fetching capabilities.
	 */
	var FirebaseAuthTokenProvider = /** @class */ (function () {
	    function FirebaseAuthTokenProvider(app_, authProvider_) {
	        var _this = this;
	        this.app_ = app_;
	        this.authProvider_ = authProvider_;
	        this.auth_ = null;
	        this.auth_ = authProvider_.getImmediate({ optional: true });
	        if (!this.auth_) {
	            authProvider_.get().then(function (auth) { return (_this.auth_ = auth); });
	        }
	    }
	    /**
	     * @param {boolean} forceRefresh
	     * @return {!Promise<FirebaseAuthTokenData>}
	     */
	    FirebaseAuthTokenProvider.prototype.getToken = function (forceRefresh) {
	        if (!this.auth_) {
	            return Promise.resolve(null);
	        }
	        return this.auth_.getToken(forceRefresh).catch(function (error) {
	            // TODO: Need to figure out all the cases this is raised and whether
	            // this makes sense.
	            if (error && error.code === 'auth/token-not-initialized') {
	                log('Got auth/token-not-initialized error.  Treating as null token.');
	                return null;
	            }
	            else {
	                return Promise.reject(error);
	            }
	        });
	    };
	    FirebaseAuthTokenProvider.prototype.addTokenChangeListener = function (listener) {
	        // TODO: We might want to wrap the listener and call it with no args to
	        // avoid a leaky abstraction, but that makes removing the listener harder.
	        if (this.auth_) {
	            this.auth_.addAuthTokenListener(listener);
	        }
	        else {
	            setTimeout(function () { return listener(null); }, 0);
	            this.authProvider_
	                .get()
	                .then(function (auth) { return auth.addAuthTokenListener(listener); });
	        }
	    };
	    FirebaseAuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {
	        this.authProvider_
	            .get()
	            .then(function (auth) { return auth.removeAuthTokenListener(listener); });
	    };
	    FirebaseAuthTokenProvider.prototype.notifyForInvalidToken = function () {
	        var errorMessage = 'Provided authentication credentials for the app named "' +
	            this.app_.name +
	            '" are invalid. This usually indicates your app was not ' +
	            'initialized correctly. ';
	        if ('credential' in this.app_.options) {
	            errorMessage +=
	                'Make sure the "credential" property provided to initializeApp() ' +
	                    'is authorized to access the specified "databaseURL" and is from the correct ' +
	                    'project.';
	        }
	        else if ('serviceAccount' in this.app_.options) {
	            errorMessage +=
	                'Make sure the "serviceAccount" property provided to initializeApp() ' +
	                    'is authorized to access the specified "databaseURL" and is from the correct ' +
	                    'project.';
	        }
	        else {
	            errorMessage +=
	                'Make sure the "apiKey" and "databaseURL" properties provided to ' +
	                    'initializeApp() match the values provided for your app at ' +
	                    'https://console.firebase.google.com/.';
	        }
	        warn(errorMessage);
	    };
	    return FirebaseAuthTokenProvider;
	}());
	/* Auth token provider that the Admin SDK uses to connect to the Emulator. */
	var EmulatorAdminTokenProvider = /** @class */ (function () {
	    function EmulatorAdminTokenProvider() {
	    }
	    EmulatorAdminTokenProvider.prototype.getToken = function (forceRefresh) {
	        return Promise.resolve({
	            accessToken: EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN
	        });
	    };
	    EmulatorAdminTokenProvider.prototype.addTokenChangeListener = function (listener) {
	        // Invoke the listener immediately to match the behavior in Firebase Auth
	        // (see packages/auth/src/auth.js#L1807)
	        listener(EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN);
	    };
	    EmulatorAdminTokenProvider.prototype.removeTokenChangeListener = function (listener) { };
	    EmulatorAdminTokenProvider.prototype.notifyForInvalidToken = function () { };
	    EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN = 'owner';
	    return EmulatorAdminTokenProvider;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** @const {string} */
	var DATABASE_URL_OPTION = 'databaseURL';
	/**
	 * This variable is also defined in the firebase node.js admin SDK. Before
	 * modifying this definition, consult the definition in:
	 *
	 * https://github.com/firebase/firebase-admin-node
	 *
	 * and make sure the two are consistent.
	 */
	var FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';
	var _staticInstance;
	/**
	 * Creates and caches Repo instances.
	 */
	var RepoManager = /** @class */ (function () {
	    function RepoManager() {
	        /**
	         * @private {!Object.<string, Object<string, !fb.core.Repo>>}
	         */
	        this.repos_ = {};
	        /**
	         * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).
	         * @private {boolean}
	         */
	        this.useRestClient_ = false;
	    }
	    RepoManager.getInstance = function () {
	        if (!_staticInstance) {
	            _staticInstance = new RepoManager();
	        }
	        return _staticInstance;
	    };
	    // TODO(koss): Remove these functions unless used in tests?
	    RepoManager.prototype.interrupt = function () {
	        var e_1, _a, e_2, _b;
	        try {
	            for (var _c = tslib.__values(Object.keys(this.repos_)), _d = _c.next(); !_d.done; _d = _c.next()) {
	                var appName = _d.value;
	                try {
	                    for (var _e = (e_2 = void 0, tslib.__values(Object.keys(this.repos_[appName]))), _f = _e.next(); !_f.done; _f = _e.next()) {
	                        var dbUrl = _f.value;
	                        this.repos_[appName][dbUrl].interrupt();
	                    }
	                }
	                catch (e_2_1) { e_2 = { error: e_2_1 }; }
	                finally {
	                    try {
	                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
	                    }
	                    finally { if (e_2) throw e_2.error; }
	                }
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	    };
	    RepoManager.prototype.resume = function () {
	        var e_3, _a, e_4, _b;
	        try {
	            for (var _c = tslib.__values(Object.keys(this.repos_)), _d = _c.next(); !_d.done; _d = _c.next()) {
	                var appName = _d.value;
	                try {
	                    for (var _e = (e_4 = void 0, tslib.__values(Object.keys(this.repos_[appName]))), _f = _e.next(); !_f.done; _f = _e.next()) {
	                        var dbUrl = _f.value;
	                        this.repos_[appName][dbUrl].resume();
	                    }
	                }
	                catch (e_4_1) { e_4 = { error: e_4_1 }; }
	                finally {
	                    try {
	                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
	                    }
	                    finally { if (e_4) throw e_4.error; }
	                }
	            }
	        }
	        catch (e_3_1) { e_3 = { error: e_3_1 }; }
	        finally {
	            try {
	                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
	            }
	            finally { if (e_3) throw e_3.error; }
	        }
	    };
	    /**
	     * This function should only ever be called to CREATE a new database instance.
	     *
	     * @param {!FirebaseApp} app
	     * @return {!Database}
	     */
	    RepoManager.prototype.databaseFromApp = function (app, authProvider, url) {
	        var dbUrl = url || app.options[DATABASE_URL_OPTION];
	        if (dbUrl === undefined) {
	            fatal("Can't determine Firebase Database URL.  Be sure to include " +
	                DATABASE_URL_OPTION +
	                ' option when calling firebase.initializeApp().');
	        }
	        var parsedUrl = parseRepoInfo(dbUrl);
	        var repoInfo = parsedUrl.repoInfo;
	        var isEmulator;
	        var dbEmulatorHost = undefined;
	        if (typeof process !== 'undefined') {
	            dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];
	        }
	        if (dbEmulatorHost) {
	            isEmulator = true;
	            dbUrl = "http://" + dbEmulatorHost + "?ns=" + repoInfo.namespace;
	            parsedUrl = parseRepoInfo(dbUrl);
	            repoInfo = parsedUrl.repoInfo;
	        }
	        else {
	            isEmulator = !parsedUrl.repoInfo.secure;
	        }
	        var authTokenProvider = index_cjs.CONSTANTS.NODE_ADMIN && isEmulator
	            ? new EmulatorAdminTokenProvider()
	            : new FirebaseAuthTokenProvider(app, authProvider);
	        validateUrl('Invalid Firebase Database URL', 1, parsedUrl);
	        if (!parsedUrl.path.isEmpty()) {
	            fatal('Database URL must point to the root of a Firebase Database ' +
	                '(not including a child path).');
	        }
	        var repo = this.createRepo(repoInfo, app, authTokenProvider);
	        return repo.database;
	    };
	    /**
	     * Remove the repo and make sure it is disconnected.
	     *
	     * @param {!Repo} repo
	     */
	    RepoManager.prototype.deleteRepo = function (repo) {
	        var appRepos = index_cjs.safeGet(this.repos_, repo.app.name);
	        // This should never happen...
	        if (!appRepos || index_cjs.safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {
	            fatal("Database " + repo.app.name + "(" + repo.repoInfo_ + ") has already been deleted.");
	        }
	        repo.interrupt();
	        delete appRepos[repo.repoInfo_.toURLString()];
	    };
	    /**
	     * Ensures a repo doesn't already exist and then creates one using the
	     * provided app.
	     *
	     * @param {!RepoInfo} repoInfo The metadata about the Repo
	     * @param {!FirebaseApp} app
	     * @return {!Repo} The Repo object for the specified server / repoName.
	     */
	    RepoManager.prototype.createRepo = function (repoInfo, app, authTokenProvider) {
	        var appRepos = index_cjs.safeGet(this.repos_, app.name);
	        if (!appRepos) {
	            appRepos = {};
	            this.repos_[app.name] = appRepos;
	        }
	        var repo = index_cjs.safeGet(appRepos, repoInfo.toURLString());
	        if (repo) {
	            fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');
	        }
	        repo = new Repo(repoInfo, this.useRestClient_, app, authTokenProvider);
	        appRepos[repoInfo.toURLString()] = repo;
	        return repo;
	    };
	    /**
	     * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.
	     * @param {boolean} forceRestClient
	     */
	    RepoManager.prototype.forceRestClient = function (forceRestClient) {
	        this.useRestClient_ = forceRestClient;
	    };
	    return RepoManager;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Class representing a firebase database.
	 * @implements {FirebaseService}
	 */
	var Database = /** @class */ (function () {
	    /**
	     * The constructor should not be called by users of our public API.
	     * @param {!Repo} repo_
	     */
	    function Database(repo_) {
	        this.repo_ = repo_;
	        if (!(repo_ instanceof Repo)) {
	            fatal("Don't call new Database() directly - please use firebase.database().");
	        }
	        /** @type {Reference} */
	        this.root_ = new Reference(repo_, Path.Empty);
	        this.INTERNAL = new DatabaseInternals(this);
	    }
	    Object.defineProperty(Database.prototype, "app", {
	        get: function () {
	            return this.repo_.app;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Database.prototype.ref = function (path) {
	        this.checkDeleted_('ref');
	        index_cjs.validateArgCount('database.ref', 0, 1, arguments.length);
	        if (path instanceof Reference) {
	            return this.refFromURL(path.toString());
	        }
	        return path !== undefined ? this.root_.child(path) : this.root_;
	    };
	    /**
	     * Returns a reference to the root or the path specified in url.
	     * We throw a exception if the url is not in the same domain as the
	     * current repo.
	     * @param {string} url
	     * @return {!Reference} Firebase reference.
	     */
	    Database.prototype.refFromURL = function (url) {
	        /** @const {string} */
	        var apiName = 'database.refFromURL';
	        this.checkDeleted_(apiName);
	        index_cjs.validateArgCount(apiName, 1, 1, arguments.length);
	        var parsedURL = parseRepoInfo(url);
	        validateUrl(apiName, 1, parsedURL);
	        var repoInfo = parsedURL.repoInfo;
	        if (repoInfo.host !== this.repo_.repoInfo_.host) {
	            fatal(apiName +
	                ': Host name does not match the current database: ' +
	                '(found ' +
	                repoInfo.host +
	                ' but expected ' +
	                this.repo_.repoInfo_.host +
	                ')');
	        }
	        return this.ref(parsedURL.path.toString());
	    };
	    /**
	     * @param {string} apiName
	     */
	    Database.prototype.checkDeleted_ = function (apiName) {
	        if (this.repo_ === null) {
	            fatal('Cannot call ' + apiName + ' on a deleted database.');
	        }
	    };
	    // Make individual repo go offline.
	    Database.prototype.goOffline = function () {
	        index_cjs.validateArgCount('database.goOffline', 0, 0, arguments.length);
	        this.checkDeleted_('goOffline');
	        this.repo_.interrupt();
	    };
	    Database.prototype.goOnline = function () {
	        index_cjs.validateArgCount('database.goOnline', 0, 0, arguments.length);
	        this.checkDeleted_('goOnline');
	        this.repo_.resume();
	    };
	    Database.ServerValue = {
	        TIMESTAMP: {
	            '.sv': 'timestamp'
	        },
	        increment: function (delta) {
	            return {
	                '.sv': {
	                    'increment': delta
	                }
	            };
	        }
	    };
	    return Database;
	}());
	var DatabaseInternals = /** @class */ (function () {
	    /** @param {!Database} database */
	    function DatabaseInternals(database) {
	        this.database = database;
	    }
	    /** @return {Promise<void>} */
	    DatabaseInternals.prototype.delete = function () {
	        return tslib.__awaiter(this, void 0, void 0, function () {
	            return tslib.__generator(this, function (_a) {
	                // eslint-disable-next-line @typescript-eslint/no-explicit-any
	                this.database.checkDeleted_('delete');
	                // eslint-disable-next-line @typescript-eslint/no-explicit-any
	                RepoManager.getInstance().deleteRepo(this.database.repo_);
	                // eslint-disable-next-line @typescript-eslint/no-explicit-any
	                this.database.repo_ = null;
	                // eslint-disable-next-line @typescript-eslint/no-explicit-any
	                this.database.root_ = null;
	                this.database.INTERNAL = null;
	                this.database = null;
	                return [2 /*return*/];
	            });
	        });
	    };
	    return DatabaseInternals;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * INTERNAL methods for internal-use only (tests, etc.).
	 *
	 * Customers shouldn't use these or else should be aware that they could break at any time.
	 *
	 * @const
	 */
	var forceLongPolling = function () {
	    WebSocketConnection.forceDisallow();
	    BrowserPollConnection.forceAllow();
	};
	var forceWebSockets = function () {
	    BrowserPollConnection.forceDisallow();
	};
	/* Used by App Manager */
	var isWebSocketsAvailable = function () {
	    return WebSocketConnection['isAvailable']();
	};
	var setSecurityDebugCallback = function (ref, callback) {
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    ref.repo.persistentConnection_.securityDebugCallback_ = callback;
	};
	var stats = function (ref, showDelta) {
	    ref.repo.stats(showDelta);
	};
	var statsIncrementCounter = function (ref, metric) {
	    ref.repo.statsIncrementCounter(metric);
	};
	var dataUpdateCount = function (ref) {
	    return ref.repo.dataUpdateCount;
	};
	var interceptServerData = function (ref, callback) {
	    return ref.repo.interceptServerData_(callback);
	};

	var INTERNAL = /*#__PURE__*/Object.freeze({
	  __proto__: null,
	  forceLongPolling: forceLongPolling,
	  forceWebSockets: forceWebSockets,
	  isWebSocketsAvailable: isWebSocketsAvailable,
	  setSecurityDebugCallback: setSecurityDebugCallback,
	  stats: stats,
	  statsIncrementCounter: statsIncrementCounter,
	  dataUpdateCount: dataUpdateCount,
	  interceptServerData: interceptServerData
	});

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var DataConnection = PersistentConnection;
	/**
	 * @param {!string} pathString
	 * @param {function(*)} onComplete
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	PersistentConnection.prototype.simpleListen = function (pathString, onComplete) {
	    this.sendRequest('q', { p: pathString }, onComplete);
	};
	/**
	 * @param {*} data
	 * @param {function(*)} onEcho
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	PersistentConnection.prototype.echo = function (data, onEcho) {
	    this.sendRequest('echo', { d: data }, onEcho);
	};
	// RealTimeConnection properties that we use in tests.
	var RealTimeConnection = Connection;
	/**
	 * @param {function(): string} newHash
	 * @return {function()}
	 */
	var hijackHash = function (newHash) {
	    var oldPut = PersistentConnection.prototype.put;
	    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {
	        if (hash !== undefined) {
	            hash = newHash();
	        }
	        oldPut.call(this, pathString, data, onComplete, hash);
	    };
	    return function () {
	        PersistentConnection.prototype.put = oldPut;
	    };
	};
	/**
	 * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}
	 */
	var ConnectionTarget = RepoInfo;
	/**
	 * @param {!Query} query
	 * @return {!string}
	 */
	var queryIdentifier = function (query) {
	    return query.queryIdentifier();
	};
	/**
	 * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.
	 *
	 * @param {boolean} forceRestClient
	 */
	var forceRestClient = function (forceRestClient) {
	    RepoManager.getInstance().forceRestClient(forceRestClient);
	};

	var TEST_ACCESS = /*#__PURE__*/Object.freeze({
	  __proto__: null,
	  DataConnection: DataConnection,
	  RealTimeConnection: RealTimeConnection,
	  hijackHash: hijackHash,
	  ConnectionTarget: ConnectionTarget,
	  queryIdentifier: queryIdentifier,
	  forceRestClient: forceRestClient
	});

	var name = "@firebase/database";
	var version = "0.6.11";

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var ServerValue = Database.ServerValue;
	function registerDatabase(instance) {
	    // set SDK_VERSION
	    setSDKVersion(instance.SDK_VERSION);
	    // Register the Database Service with the 'firebase' namespace.
	    var namespace = instance.INTERNAL.registerComponent(new index_cjs$1.Component('database', function (container, url) {
	        /* Dependencies */
	        // getImmediate for FirebaseApp will always succeed
	        var app = container.getProvider('app').getImmediate();
	        var authProvider = container.getProvider('auth-internal');
	        return RepoManager.getInstance().databaseFromApp(app, authProvider, url);
	    }, "PUBLIC" /* PUBLIC */)
	        .setServiceProps(
	    // firebase.database namespace properties
	    {
	        Reference: Reference,
	        Query: Query,
	        Database: Database,
	        DataSnapshot: DataSnapshot,
	        enableLogging: enableLogging,
	        INTERNAL: INTERNAL,
	        ServerValue: ServerValue,
	        TEST_ACCESS: TEST_ACCESS
	    })
	        .setMultipleInstances(true));
	    instance.registerVersion(name, version);
	    if (index_cjs.isNodeSdk()) {
	        module.exports = namespace;
	    }
	}
	registerDatabase(firebase);

	exports.DataSnapshot = DataSnapshot;
	exports.Database = Database;
	exports.OnDisconnect = OnDisconnect;
	exports.Query = Query;
	exports.Reference = Reference;
	exports.ServerValue = ServerValue;
	exports.enableLogging = enableLogging;
	exports.registerDatabase = registerDatabase;

	});

	unwrapExports(index_cjs$4);
	var index_cjs_1$3 = index_cjs$4.DataSnapshot;
	var index_cjs_2$2 = index_cjs$4.Database;
	var index_cjs_3$2 = index_cjs$4.OnDisconnect;
	var index_cjs_4$1 = index_cjs$4.Query;
	var index_cjs_5$1 = index_cjs$4.Reference;
	var index_cjs_6$1 = index_cjs$4.ServerValue;
	var index_cjs_7$1 = index_cjs$4.enableLogging;
	var index_cjs_8$1 = index_cjs$4.registerDatabase;

	var idb = createCommonjsModule(function (module, exports) {
	(function (global, factory) {
	   factory(exports) ;
	}(this, function (exports) {
	  function toArray(arr) {
	    return Array.prototype.slice.call(arr);
	  }

	  function promisifyRequest(request) {
	    return new Promise(function(resolve, reject) {
	      request.onsuccess = function() {
	        resolve(request.result);
	      };

	      request.onerror = function() {
	        reject(request.error);
	      };
	    });
	  }

	  function promisifyRequestCall(obj, method, args) {
	    var request;
	    var p = new Promise(function(resolve, reject) {
	      request = obj[method].apply(obj, args);
	      promisifyRequest(request).then(resolve, reject);
	    });

	    p.request = request;
	    return p;
	  }

	  function promisifyCursorRequestCall(obj, method, args) {
	    var p = promisifyRequestCall(obj, method, args);
	    return p.then(function(value) {
	      if (!value) return;
	      return new Cursor(value, p.request);
	    });
	  }

	  function proxyProperties(ProxyClass, targetProp, properties) {
	    properties.forEach(function(prop) {
	      Object.defineProperty(ProxyClass.prototype, prop, {
	        get: function() {
	          return this[targetProp][prop];
	        },
	        set: function(val) {
	          this[targetProp][prop] = val;
	        }
	      });
	    });
	  }

	  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {
	    properties.forEach(function(prop) {
	      if (!(prop in Constructor.prototype)) return;
	      ProxyClass.prototype[prop] = function() {
	        return promisifyRequestCall(this[targetProp], prop, arguments);
	      };
	    });
	  }

	  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {
	    properties.forEach(function(prop) {
	      if (!(prop in Constructor.prototype)) return;
	      ProxyClass.prototype[prop] = function() {
	        return this[targetProp][prop].apply(this[targetProp], arguments);
	      };
	    });
	  }

	  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {
	    properties.forEach(function(prop) {
	      if (!(prop in Constructor.prototype)) return;
	      ProxyClass.prototype[prop] = function() {
	        return promisifyCursorRequestCall(this[targetProp], prop, arguments);
	      };
	    });
	  }

	  function Index(index) {
	    this._index = index;
	  }

	  proxyProperties(Index, '_index', [
	    'name',
	    'keyPath',
	    'multiEntry',
	    'unique'
	  ]);

	  proxyRequestMethods(Index, '_index', IDBIndex, [
	    'get',
	    'getKey',
	    'getAll',
	    'getAllKeys',
	    'count'
	  ]);

	  proxyCursorRequestMethods(Index, '_index', IDBIndex, [
	    'openCursor',
	    'openKeyCursor'
	  ]);

	  function Cursor(cursor, request) {
	    this._cursor = cursor;
	    this._request = request;
	  }

	  proxyProperties(Cursor, '_cursor', [
	    'direction',
	    'key',
	    'primaryKey',
	    'value'
	  ]);

	  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [
	    'update',
	    'delete'
	  ]);

	  // proxy 'next' methods
	  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {
	    if (!(methodName in IDBCursor.prototype)) return;
	    Cursor.prototype[methodName] = function() {
	      var cursor = this;
	      var args = arguments;
	      return Promise.resolve().then(function() {
	        cursor._cursor[methodName].apply(cursor._cursor, args);
	        return promisifyRequest(cursor._request).then(function(value) {
	          if (!value) return;
	          return new Cursor(value, cursor._request);
	        });
	      });
	    };
	  });

	  function ObjectStore(store) {
	    this._store = store;
	  }

	  ObjectStore.prototype.createIndex = function() {
	    return new Index(this._store.createIndex.apply(this._store, arguments));
	  };

	  ObjectStore.prototype.index = function() {
	    return new Index(this._store.index.apply(this._store, arguments));
	  };

	  proxyProperties(ObjectStore, '_store', [
	    'name',
	    'keyPath',
	    'indexNames',
	    'autoIncrement'
	  ]);

	  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [
	    'put',
	    'add',
	    'delete',
	    'clear',
	    'get',
	    'getAll',
	    'getKey',
	    'getAllKeys',
	    'count'
	  ]);

	  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [
	    'openCursor',
	    'openKeyCursor'
	  ]);

	  proxyMethods(ObjectStore, '_store', IDBObjectStore, [
	    'deleteIndex'
	  ]);

	  function Transaction(idbTransaction) {
	    this._tx = idbTransaction;
	    this.complete = new Promise(function(resolve, reject) {
	      idbTransaction.oncomplete = function() {
	        resolve();
	      };
	      idbTransaction.onerror = function() {
	        reject(idbTransaction.error);
	      };
	      idbTransaction.onabort = function() {
	        reject(idbTransaction.error);
	      };
	    });
	  }

	  Transaction.prototype.objectStore = function() {
	    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));
	  };

	  proxyProperties(Transaction, '_tx', [
	    'objectStoreNames',
	    'mode'
	  ]);

	  proxyMethods(Transaction, '_tx', IDBTransaction, [
	    'abort'
	  ]);

	  function UpgradeDB(db, oldVersion, transaction) {
	    this._db = db;
	    this.oldVersion = oldVersion;
	    this.transaction = new Transaction(transaction);
	  }

	  UpgradeDB.prototype.createObjectStore = function() {
	    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));
	  };

	  proxyProperties(UpgradeDB, '_db', [
	    'name',
	    'version',
	    'objectStoreNames'
	  ]);

	  proxyMethods(UpgradeDB, '_db', IDBDatabase, [
	    'deleteObjectStore',
	    'close'
	  ]);

	  function DB(db) {
	    this._db = db;
	  }

	  DB.prototype.transaction = function() {
	    return new Transaction(this._db.transaction.apply(this._db, arguments));
	  };

	  proxyProperties(DB, '_db', [
	    'name',
	    'version',
	    'objectStoreNames'
	  ]);

	  proxyMethods(DB, '_db', IDBDatabase, [
	    'close'
	  ]);

	  // Add cursor iterators
	  // TODO: remove this once browsers do the right thing with promises
	  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {
	    [ObjectStore, Index].forEach(function(Constructor) {
	      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.
	      if (!(funcName in Constructor.prototype)) return;

	      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {
	        var args = toArray(arguments);
	        var callback = args[args.length - 1];
	        var nativeObject = this._store || this._index;
	        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));
	        request.onsuccess = function() {
	          callback(request.result);
	        };
	      };
	    });
	  });

	  // polyfill getAll
	  [Index, ObjectStore].forEach(function(Constructor) {
	    if (Constructor.prototype.getAll) return;
	    Constructor.prototype.getAll = function(query, count) {
	      var instance = this;
	      var items = [];

	      return new Promise(function(resolve) {
	        instance.iterateCursor(query, function(cursor) {
	          if (!cursor) {
	            resolve(items);
	            return;
	          }
	          items.push(cursor.value);

	          if (count !== undefined && items.length == count) {
	            resolve(items);
	            return;
	          }
	          cursor.continue();
	        });
	      });
	    };
	  });

	  function openDb(name, version, upgradeCallback) {
	    var p = promisifyRequestCall(indexedDB, 'open', [name, version]);
	    var request = p.request;

	    if (request) {
	      request.onupgradeneeded = function(event) {
	        if (upgradeCallback) {
	          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));
	        }
	      };
	    }

	    return p.then(function(db) {
	      return new DB(db);
	    });
	  }

	  function deleteDb(name) {
	    return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);
	  }

	  exports.openDb = openDb;
	  exports.deleteDb = deleteDb;

	  Object.defineProperty(exports, '__esModule', { value: true });

	}));
	});

	unwrapExports(idb);
	var idb_1 = idb.openDb;
	var idb_2 = idb.deleteDb;

	var name$2 = "@firebase/installations";
	var version$2 = "0.4.16";

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var PENDING_TIMEOUT_MS = 10000;
	var PACKAGE_VERSION = "w:" + version$2;
	var INTERNAL_AUTH_VERSION = 'FIS_v2';
	var INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';
	var TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour
	var SERVICE = 'installations';
	var SERVICE_NAME = 'Installations';

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var _a$1;
	var ERROR_DESCRIPTION_MAP = (_a$1 = {},
	    _a$1["missing-app-config-values" /* MISSING_APP_CONFIG_VALUES */] = 'Missing App configuration value: "{$valueName}"',
	    _a$1["not-registered" /* NOT_REGISTERED */] = 'Firebase Installation is not registered.',
	    _a$1["installation-not-found" /* INSTALLATION_NOT_FOUND */] = 'Firebase Installation not found.',
	    _a$1["request-failed" /* REQUEST_FAILED */] = '{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',
	    _a$1["app-offline" /* APP_OFFLINE */] = 'Could not process request. Application offline.',
	    _a$1["delete-pending-registration" /* DELETE_PENDING_REGISTRATION */] = "Can't delete installation while there is a pending registration request.",
	    _a$1);
	var ERROR_FACTORY = new index_cjs_3(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);
	/** Returns true if error is a FirebaseError that is based on an error from the server. */
	function isServerError(error) {
	    return (error instanceof index_cjs_4 &&
	        error.code.includes("request-failed" /* REQUEST_FAILED */));
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function getInstallationsEndpoint(_a) {
	    var projectId = _a.projectId;
	    return INSTALLATIONS_API_URL + "/projects/" + projectId + "/installations";
	}
	function extractAuthTokenInfoFromResponse(response) {
	    return {
	        token: response.token,
	        requestStatus: 2 /* COMPLETED */,
	        expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),
	        creationTime: Date.now()
	    };
	}
	function getErrorFromResponse(requestName, response) {
	    return tslib_7(this, void 0, void 0, function () {
	        var responseJson, errorData;
	        return tslib_8(this, function (_a) {
	            switch (_a.label) {
	                case 0: return [4 /*yield*/, response.json()];
	                case 1:
	                    responseJson = _a.sent();
	                    errorData = responseJson.error;
	                    return [2 /*return*/, ERROR_FACTORY.create("request-failed" /* REQUEST_FAILED */, {
	                            requestName: requestName,
	                            serverCode: errorData.code,
	                            serverMessage: errorData.message,
	                            serverStatus: errorData.status
	                        })];
	            }
	        });
	    });
	}
	function getHeaders(_a) {
	    var apiKey = _a.apiKey;
	    return new Headers({
	        'Content-Type': 'application/json',
	        Accept: 'application/json',
	        'x-goog-api-key': apiKey
	    });
	}
	function getHeadersWithAuth(appConfig, _a) {
	    var refreshToken = _a.refreshToken;
	    var headers = getHeaders(appConfig);
	    headers.append('Authorization', getAuthorizationHeader(refreshToken));
	    return headers;
	}
	/**
	 * Calls the passed in fetch wrapper and returns the response.
	 * If the returned response has a status of 5xx, re-runs the function once and
	 * returns the response.
	 */
	function retryIfServerError(fn) {
	    return tslib_7(this, void 0, void 0, function () {
	        var result;
	        return tslib_8(this, function (_a) {
	            switch (_a.label) {
	                case 0: return [4 /*yield*/, fn()];
	                case 1:
	                    result = _a.sent();
	                    if (result.status >= 500 && result.status < 600) {
	                        // Internal Server Error. Retry request.
	                        return [2 /*return*/, fn()];
	                    }
	                    return [2 /*return*/, result];
	            }
	        });
	    });
	}
	function getExpiresInFromResponseExpiresIn(responseExpiresIn) {
	    // This works because the server will never respond with fractions of a second.
	    return Number(responseExpiresIn.replace('s', '000'));
	}
	function getAuthorizationHeader(refreshToken) {
	    return INTERNAL_AUTH_VERSION + " " + refreshToken;
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function createInstallationRequest(appConfig, _a) {
	    var fid = _a.fid;
	    return tslib_7(this, void 0, void 0, function () {
	        var endpoint, headers, body, request, response, responseValue, registeredInstallationEntry;
	        return tslib_8(this, function (_b) {
	            switch (_b.label) {
	                case 0:
	                    endpoint = getInstallationsEndpoint(appConfig);
	                    headers = getHeaders(appConfig);
	                    body = {
	                        fid: fid,
	                        authVersion: INTERNAL_AUTH_VERSION,
	                        appId: appConfig.appId,
	                        sdkVersion: PACKAGE_VERSION
	                    };
	                    request = {
	                        method: 'POST',
	                        headers: headers,
	                        body: JSON.stringify(body)
	                    };
	                    return [4 /*yield*/, retryIfServerError(function () { return fetch(endpoint, request); })];
	                case 1:
	                    response = _b.sent();
	                    if (!response.ok) return [3 /*break*/, 3];
	                    return [4 /*yield*/, response.json()];
	                case 2:
	                    responseValue = _b.sent();
	                    registeredInstallationEntry = {
	                        fid: responseValue.fid || fid,
	                        registrationStatus: 2 /* COMPLETED */,
	                        refreshToken: responseValue.refreshToken,
	                        authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)
	                    };
	                    return [2 /*return*/, registeredInstallationEntry];
	                case 3: return [4 /*yield*/, getErrorFromResponse('Create Installation', response)];
	                case 4: throw _b.sent();
	            }
	        });
	    });
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** Returns a promise that resolves after given time passes. */
	function sleep(ms) {
	    return new Promise(function (resolve) {
	        setTimeout(resolve, ms);
	    });
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function bufferToBase64UrlSafe(array) {
	    var b64 = btoa(String.fromCharCode.apply(String, tslib_12(array)));
	    return b64.replace(/\+/g, '-').replace(/\//g, '_');
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var VALID_FID_PATTERN = /^[cdef][\w-]{21}$/;
	var INVALID_FID = '';
	/**
	 * Generates a new FID using random values from Web Crypto API.
	 * Returns an empty string if FID generation fails for any reason.
	 */
	function generateFid() {
	    try {
	        // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5
	        // bytes. our implementation generates a 17 byte array instead.
	        var fidByteArray = new Uint8Array(17);
	        var crypto_1 = self.crypto || self.msCrypto;
	        crypto_1.getRandomValues(fidByteArray);
	        // Replace the first 4 random bits with the constant FID header of 0b0111.
	        fidByteArray[0] = 112 + (fidByteArray[0] % 16);
	        var fid = encode(fidByteArray);
	        return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;
	    }
	    catch (_a) {
	        // FID generation errored
	        return INVALID_FID;
	    }
	}
	/** Converts a FID Uint8Array to a base64 string representation. */
	function encode(fidByteArray) {
	    var b64String = bufferToBase64UrlSafe(fidByteArray);
	    // Remove the 23rd character that was added because of the extra 4 bits at the
	    // end of our 17 byte array, and the '=' padding.
	    return b64String.substr(0, 22);
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** Returns a string key that can be used to identify the app. */
	function getKey(appConfig) {
	    return appConfig.appName + "!" + appConfig.appId;
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var fidChangeCallbacks = new Map();
	/**
	 * Calls the onIdChange callbacks with the new FID value, and broadcasts the
	 * change to other tabs.
	 */
	function fidChanged(appConfig, fid) {
	    var key = getKey(appConfig);
	    callFidChangeCallbacks(key, fid);
	    broadcastFidChange(key, fid);
	}
	function addCallback(appConfig, callback) {
	    // Open the broadcast channel if it's not already open,
	    // to be able to listen to change events from other tabs.
	    getBroadcastChannel();
	    var key = getKey(appConfig);
	    var callbackSet = fidChangeCallbacks.get(key);
	    if (!callbackSet) {
	        callbackSet = new Set();
	        fidChangeCallbacks.set(key, callbackSet);
	    }
	    callbackSet.add(callback);
	}
	function removeCallback(appConfig, callback) {
	    var key = getKey(appConfig);
	    var callbackSet = fidChangeCallbacks.get(key);
	    if (!callbackSet) {
	        return;
	    }
	    callbackSet.delete(callback);
	    if (callbackSet.size === 0) {
	        fidChangeCallbacks.delete(key);
	    }
	    // Close broadcast channel if there are no more callbacks.
	    closeBroadcastChannel();
	}
	function callFidChangeCallbacks(key, fid) {
	    var e_1, _a;
	    var callbacks = fidChangeCallbacks.get(key);
	    if (!callbacks) {
	        return;
	    }
	    try {
	        for (var callbacks_1 = tslib_10(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {
	            var callback = callbacks_1_1.value;
	            callback(fid);
	        }
	    }
	    catch (e_1_1) { e_1 = { error: e_1_1 }; }
	    finally {
	        try {
	            if (callbacks_1_1 && !callbacks_1_1.done && (_a = callbacks_1.return)) _a.call(callbacks_1);
	        }
	        finally { if (e_1) throw e_1.error; }
	    }
	}
	function broadcastFidChange(key, fid) {
	    var channel = getBroadcastChannel();
	    if (channel) {
	        channel.postMessage({ key: key, fid: fid });
	    }
	    closeBroadcastChannel();
	}
	var broadcastChannel = null;
	/** Opens and returns a BroadcastChannel if it is supported by the browser. */
	function getBroadcastChannel() {
	    if (!broadcastChannel && 'BroadcastChannel' in self) {
	        broadcastChannel = new BroadcastChannel('[Firebase] FID Change');
	        broadcastChannel.onmessage = function (e) {
	            callFidChangeCallbacks(e.data.key, e.data.fid);
	        };
	    }
	    return broadcastChannel;
	}
	function closeBroadcastChannel() {
	    if (fidChangeCallbacks.size === 0 && broadcastChannel) {
	        broadcastChannel.close();
	        broadcastChannel = null;
	    }
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var DATABASE_NAME = 'firebase-installations-database';
	var DATABASE_VERSION = 1;
	var OBJECT_STORE_NAME = 'firebase-installations-store';
	var dbPromise = null;
	function getDbPromise() {
	    if (!dbPromise) {
	        dbPromise = idb_1(DATABASE_NAME, DATABASE_VERSION, function (upgradeDB) {
	            // We don't use 'break' in this switch statement, the fall-through
	            // behavior is what we want, because if there are multiple versions between
	            // the old version and the current version, we want ALL the migrations
	            // that correspond to those versions to run, not only the last one.
	            // eslint-disable-next-line default-case
	            switch (upgradeDB.oldVersion) {
	                case 0:
	                    upgradeDB.createObjectStore(OBJECT_STORE_NAME);
	            }
	        });
	    }
	    return dbPromise;
	}
	/** Assigns or overwrites the record for the given key with the given value. */
	function set(appConfig, value) {
	    return tslib_7(this, void 0, void 0, function () {
	        var key, db, tx, objectStore, oldValue;
	        return tslib_8(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    key = getKey(appConfig);
	                    return [4 /*yield*/, getDbPromise()];
	                case 1:
	                    db = _a.sent();
	                    tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
	                    objectStore = tx.objectStore(OBJECT_STORE_NAME);
	                    return [4 /*yield*/, objectStore.get(key)];
	                case 2:
	                    oldValue = _a.sent();
	                    return [4 /*yield*/, objectStore.put(value, key)];
	                case 3:
	                    _a.sent();
	                    return [4 /*yield*/, tx.complete];
	                case 4:
	                    _a.sent();
	                    if (!oldValue || oldValue.fid !== value.fid) {
	                        fidChanged(appConfig, value.fid);
	                    }
	                    return [2 /*return*/, value];
	            }
	        });
	    });
	}
	/** Removes record(s) from the objectStore that match the given key. */
	function remove(appConfig) {
	    return tslib_7(this, void 0, void 0, function () {
	        var key, db, tx;
	        return tslib_8(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    key = getKey(appConfig);
	                    return [4 /*yield*/, getDbPromise()];
	                case 1:
	                    db = _a.sent();
	                    tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
	                    return [4 /*yield*/, tx.objectStore(OBJECT_STORE_NAME).delete(key)];
	                case 2:
	                    _a.sent();
	                    return [4 /*yield*/, tx.complete];
	                case 3:
	                    _a.sent();
	                    return [2 /*return*/];
	            }
	        });
	    });
	}
	/**
	 * Atomically updates a record with the result of updateFn, which gets
	 * called with the current value. If newValue is undefined, the record is
	 * deleted instead.
	 * @return Updated value
	 */
	function update(appConfig, updateFn) {
	    return tslib_7(this, void 0, void 0, function () {
	        var key, db, tx, store, oldValue, newValue;
	        return tslib_8(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    key = getKey(appConfig);
	                    return [4 /*yield*/, getDbPromise()];
	                case 1:
	                    db = _a.sent();
	                    tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
	                    store = tx.objectStore(OBJECT_STORE_NAME);
	                    return [4 /*yield*/, store.get(key)];
	                case 2:
	                    oldValue = _a.sent();
	                    newValue = updateFn(oldValue);
	                    if (!(newValue === undefined)) return [3 /*break*/, 4];
	                    return [4 /*yield*/, store.delete(key)];
	                case 3:
	                    _a.sent();
	                    return [3 /*break*/, 6];
	                case 4: return [4 /*yield*/, store.put(newValue, key)];
	                case 5:
	                    _a.sent();
	                    _a.label = 6;
	                case 6: return [4 /*yield*/, tx.complete];
	                case 7:
	                    _a.sent();
	                    if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {
	                        fidChanged(appConfig, newValue.fid);
	                    }
	                    return [2 /*return*/, newValue];
	            }
	        });
	    });
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Updates and returns the InstallationEntry from the database.
	 * Also triggers a registration request if it is necessary and possible.
	 */
	function getInstallationEntry(appConfig) {
	    return tslib_7(this, void 0, void 0, function () {
	        var registrationPromise, installationEntry, _a;
	        return tslib_8(this, function (_b) {
	            switch (_b.label) {
	                case 0: return [4 /*yield*/, update(appConfig, function (oldEntry) {
	                        var installationEntry = updateOrCreateInstallationEntry(oldEntry);
	                        var entryWithPromise = triggerRegistrationIfNecessary(appConfig, installationEntry);
	                        registrationPromise = entryWithPromise.registrationPromise;
	                        return entryWithPromise.installationEntry;
	                    })];
	                case 1:
	                    installationEntry = _b.sent();
	                    if (!(installationEntry.fid === INVALID_FID)) return [3 /*break*/, 3];
	                    _a = {};
	                    return [4 /*yield*/, registrationPromise];
	                case 2: 
	                // FID generation failed. Waiting for the FID from the server.
	                return [2 /*return*/, (_a.installationEntry = _b.sent(), _a)];
	                case 3: return [2 /*return*/, {
	                        installationEntry: installationEntry,
	                        registrationPromise: registrationPromise
	                    }];
	            }
	        });
	    });
	}
	/**
	 * Creates a new Installation Entry if one does not exist.
	 * Also clears timed out pending requests.
	 */
	function updateOrCreateInstallationEntry(oldEntry) {
	    var entry = oldEntry || {
	        fid: generateFid(),
	        registrationStatus: 0 /* NOT_STARTED */
	    };
	    return clearTimedOutRequest(entry);
	}
	/**
	 * If the Firebase Installation is not registered yet, this will trigger the
	 * registration and return an InProgressInstallationEntry.
	 *
	 * If registrationPromise does not exist, the installationEntry is guaranteed
	 * to be registered.
	 */
	function triggerRegistrationIfNecessary(appConfig, installationEntry) {
	    if (installationEntry.registrationStatus === 0 /* NOT_STARTED */) {
	        if (!navigator.onLine) {
	            // Registration required but app is offline.
	            var registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create("app-offline" /* APP_OFFLINE */));
	            return {
	                installationEntry: installationEntry,
	                registrationPromise: registrationPromiseWithError
	            };
	        }
	        // Try registering. Change status to IN_PROGRESS.
	        var inProgressEntry = {
	            fid: installationEntry.fid,
	            registrationStatus: 1 /* IN_PROGRESS */,
	            registrationTime: Date.now()
	        };
	        var registrationPromise = registerInstallation(appConfig, inProgressEntry);
	        return { installationEntry: inProgressEntry, registrationPromise: registrationPromise };
	    }
	    else if (installationEntry.registrationStatus === 1 /* IN_PROGRESS */) {
	        return {
	            installationEntry: installationEntry,
	            registrationPromise: waitUntilFidRegistration(appConfig)
	        };
	    }
	    else {
	        return { installationEntry: installationEntry };
	    }
	}
	/** This will be executed only once for each new Firebase Installation. */
	function registerInstallation(appConfig, installationEntry) {
	    return tslib_7(this, void 0, void 0, function () {
	        var registeredInstallationEntry, e_1;
	        return tslib_8(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    _a.trys.push([0, 2, , 7]);
	                    return [4 /*yield*/, createInstallationRequest(appConfig, installationEntry)];
	                case 1:
	                    registeredInstallationEntry = _a.sent();
	                    return [2 /*return*/, set(appConfig, registeredInstallationEntry)];
	                case 2:
	                    e_1 = _a.sent();
	                    if (!(isServerError(e_1) && e_1.serverCode === 409)) return [3 /*break*/, 4];
	                    // Server returned a "FID can not be used" error.
	                    // Generate a new ID next time.
	                    return [4 /*yield*/, remove(appConfig)];
	                case 3:
	                    // Server returned a "FID can not be used" error.
	                    // Generate a new ID next time.
	                    _a.sent();
	                    return [3 /*break*/, 6];
	                case 4: 
	                // Registration failed. Set FID as not registered.
	                return [4 /*yield*/, set(appConfig, {
	                        fid: installationEntry.fid,
	                        registrationStatus: 0 /* NOT_STARTED */
	                    })];
	                case 5:
	                    // Registration failed. Set FID as not registered.
	                    _a.sent();
	                    _a.label = 6;
	                case 6: throw e_1;
	                case 7: return [2 /*return*/];
	            }
	        });
	    });
	}
	/** Call if FID registration is pending in another request. */
	function waitUntilFidRegistration(appConfig) {
	    return tslib_7(this, void 0, void 0, function () {
	        var entry, _a, installationEntry, registrationPromise;
	        return tslib_8(this, function (_b) {
	            switch (_b.label) {
	                case 0: return [4 /*yield*/, updateInstallationRequest(appConfig)];
	                case 1:
	                    entry = _b.sent();
	                    _b.label = 2;
	                case 2:
	                    if (!(entry.registrationStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 5];
	                    // createInstallation request still in progress.
	                    return [4 /*yield*/, sleep(100)];
	                case 3:
	                    // createInstallation request still in progress.
	                    _b.sent();
	                    return [4 /*yield*/, updateInstallationRequest(appConfig)];
	                case 4:
	                    entry = _b.sent();
	                    return [3 /*break*/, 2];
	                case 5:
	                    if (!(entry.registrationStatus === 0 /* NOT_STARTED */)) return [3 /*break*/, 7];
	                    return [4 /*yield*/, getInstallationEntry(appConfig)];
	                case 6:
	                    _a = _b.sent(), installationEntry = _a.installationEntry, registrationPromise = _a.registrationPromise;
	                    if (registrationPromise) {
	                        return [2 /*return*/, registrationPromise];
	                    }
	                    else {
	                        // if there is no registrationPromise, entry is registered.
	                        return [2 /*return*/, installationEntry];
	                    }
	                case 7: return [2 /*return*/, entry];
	            }
	        });
	    });
	}
	/**
	 * Called only if there is a CreateInstallation request in progress.
	 *
	 * Updates the InstallationEntry in the DB based on the status of the
	 * CreateInstallation request.
	 *
	 * Returns the updated InstallationEntry.
	 */
	function updateInstallationRequest(appConfig) {
	    return update(appConfig, function (oldEntry) {
	        if (!oldEntry) {
	            throw ERROR_FACTORY.create("installation-not-found" /* INSTALLATION_NOT_FOUND */);
	        }
	        return clearTimedOutRequest(oldEntry);
	    });
	}
	function clearTimedOutRequest(entry) {
	    if (hasInstallationRequestTimedOut(entry)) {
	        return {
	            fid: entry.fid,
	            registrationStatus: 0 /* NOT_STARTED */
	        };
	    }
	    return entry;
	}
	function hasInstallationRequestTimedOut(installationEntry) {
	    return (installationEntry.registrationStatus === 1 /* IN_PROGRESS */ &&
	        installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now());
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function generateAuthTokenRequest(_a, installationEntry) {
	    var appConfig = _a.appConfig, platformLoggerProvider = _a.platformLoggerProvider;
	    return tslib_7(this, void 0, void 0, function () {
	        var endpoint, headers, platformLogger, body, request, response, responseValue, completedAuthToken;
	        return tslib_8(this, function (_b) {
	            switch (_b.label) {
	                case 0:
	                    endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);
	                    headers = getHeadersWithAuth(appConfig, installationEntry);
	                    platformLogger = platformLoggerProvider.getImmediate({
	                        optional: true
	                    });
	                    if (platformLogger) {
	                        headers.append('x-firebase-client', platformLogger.getPlatformInfoString());
	                    }
	                    body = {
	                        installation: {
	                            sdkVersion: PACKAGE_VERSION
	                        }
	                    };
	                    request = {
	                        method: 'POST',
	                        headers: headers,
	                        body: JSON.stringify(body)
	                    };
	                    return [4 /*yield*/, retryIfServerError(function () { return fetch(endpoint, request); })];
	                case 1:
	                    response = _b.sent();
	                    if (!response.ok) return [3 /*break*/, 3];
	                    return [4 /*yield*/, response.json()];
	                case 2:
	                    responseValue = _b.sent();
	                    completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);
	                    return [2 /*return*/, completedAuthToken];
	                case 3: return [4 /*yield*/, getErrorFromResponse('Generate Auth Token', response)];
	                case 4: throw _b.sent();
	            }
	        });
	    });
	}
	function getGenerateAuthTokenEndpoint(appConfig, _a) {
	    var fid = _a.fid;
	    return getInstallationsEndpoint(appConfig) + "/" + fid + "/authTokens:generate";
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Returns a valid authentication token for the installation. Generates a new
	 * token if one doesn't exist, is expired or about to expire.
	 *
	 * Should only be called if the Firebase Installation is registered.
	 */
	function refreshAuthToken(dependencies, forceRefresh) {
	    if (forceRefresh === void 0) { forceRefresh = false; }
	    return tslib_7(this, void 0, void 0, function () {
	        var tokenPromise, entry, authToken, _a;
	        return tslib_8(this, function (_b) {
	            switch (_b.label) {
	                case 0: return [4 /*yield*/, update(dependencies.appConfig, function (oldEntry) {
	                        if (!isEntryRegistered(oldEntry)) {
	                            throw ERROR_FACTORY.create("not-registered" /* NOT_REGISTERED */);
	                        }
	                        var oldAuthToken = oldEntry.authToken;
	                        if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {
	                            // There is a valid token in the DB.
	                            return oldEntry;
	                        }
	                        else if (oldAuthToken.requestStatus === 1 /* IN_PROGRESS */) {
	                            // There already is a token request in progress.
	                            tokenPromise = waitUntilAuthTokenRequest(dependencies, forceRefresh);
	                            return oldEntry;
	                        }
	                        else {
	                            // No token or token expired.
	                            if (!navigator.onLine) {
	                                throw ERROR_FACTORY.create("app-offline" /* APP_OFFLINE */);
	                            }
	                            var inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);
	                            tokenPromise = fetchAuthTokenFromServer(dependencies, inProgressEntry);
	                            return inProgressEntry;
	                        }
	                    })];
	                case 1:
	                    entry = _b.sent();
	                    if (!tokenPromise) return [3 /*break*/, 3];
	                    return [4 /*yield*/, tokenPromise];
	                case 2:
	                    _a = _b.sent();
	                    return [3 /*break*/, 4];
	                case 3:
	                    _a = entry.authToken;
	                    _b.label = 4;
	                case 4:
	                    authToken = _a;
	                    return [2 /*return*/, authToken];
	            }
	        });
	    });
	}
	/**
	 * Call only if FID is registered and Auth Token request is in progress.
	 *
	 * Waits until the current pending request finishes. If the request times out,
	 * tries once in this thread as well.
	 */
	function waitUntilAuthTokenRequest(dependencies, forceRefresh) {
	    return tslib_7(this, void 0, void 0, function () {
	        var entry, authToken;
	        return tslib_8(this, function (_a) {
	            switch (_a.label) {
	                case 0: return [4 /*yield*/, updateAuthTokenRequest(dependencies.appConfig)];
	                case 1:
	                    entry = _a.sent();
	                    _a.label = 2;
	                case 2:
	                    if (!(entry.authToken.requestStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 5];
	                    // generateAuthToken still in progress.
	                    return [4 /*yield*/, sleep(100)];
	                case 3:
	                    // generateAuthToken still in progress.
	                    _a.sent();
	                    return [4 /*yield*/, updateAuthTokenRequest(dependencies.appConfig)];
	                case 4:
	                    entry = _a.sent();
	                    return [3 /*break*/, 2];
	                case 5:
	                    authToken = entry.authToken;
	                    if (authToken.requestStatus === 0 /* NOT_STARTED */) {
	                        // The request timed out or failed in a different call. Try again.
	                        return [2 /*return*/, refreshAuthToken(dependencies, forceRefresh)];
	                    }
	                    else {
	                        return [2 /*return*/, authToken];
	                    }
	            }
	        });
	    });
	}
	/**
	 * Called only if there is a GenerateAuthToken request in progress.
	 *
	 * Updates the InstallationEntry in the DB based on the status of the
	 * GenerateAuthToken request.
	 *
	 * Returns the updated InstallationEntry.
	 */
	function updateAuthTokenRequest(appConfig) {
	    return update(appConfig, function (oldEntry) {
	        if (!isEntryRegistered(oldEntry)) {
	            throw ERROR_FACTORY.create("not-registered" /* NOT_REGISTERED */);
	        }
	        var oldAuthToken = oldEntry.authToken;
	        if (hasAuthTokenRequestTimedOut(oldAuthToken)) {
	            return tslib_2(tslib_2({}, oldEntry), { authToken: { requestStatus: 0 /* NOT_STARTED */ } });
	        }
	        return oldEntry;
	    });
	}
	function fetchAuthTokenFromServer(dependencies, installationEntry) {
	    return tslib_7(this, void 0, void 0, function () {
	        var authToken, updatedInstallationEntry, e_1, updatedInstallationEntry;
	        return tslib_8(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    _a.trys.push([0, 3, , 8]);
	                    return [4 /*yield*/, generateAuthTokenRequest(dependencies, installationEntry)];
	                case 1:
	                    authToken = _a.sent();
	                    updatedInstallationEntry = tslib_2(tslib_2({}, installationEntry), { authToken: authToken });
	                    return [4 /*yield*/, set(dependencies.appConfig, updatedInstallationEntry)];
	                case 2:
	                    _a.sent();
	                    return [2 /*return*/, authToken];
	                case 3:
	                    e_1 = _a.sent();
	                    if (!(isServerError(e_1) && (e_1.serverCode === 401 || e_1.serverCode === 404))) return [3 /*break*/, 5];
	                    // Server returned a "FID not found" or a "Invalid authentication" error.
	                    // Generate a new ID next time.
	                    return [4 /*yield*/, remove(dependencies.appConfig)];
	                case 4:
	                    // Server returned a "FID not found" or a "Invalid authentication" error.
	                    // Generate a new ID next time.
	                    _a.sent();
	                    return [3 /*break*/, 7];
	                case 5:
	                    updatedInstallationEntry = tslib_2(tslib_2({}, installationEntry), { authToken: { requestStatus: 0 /* NOT_STARTED */ } });
	                    return [4 /*yield*/, set(dependencies.appConfig, updatedInstallationEntry)];
	                case 6:
	                    _a.sent();
	                    _a.label = 7;
	                case 7: throw e_1;
	                case 8: return [2 /*return*/];
	            }
	        });
	    });
	}
	function isEntryRegistered(installationEntry) {
	    return (installationEntry !== undefined &&
	        installationEntry.registrationStatus === 2 /* COMPLETED */);
	}
	function isAuthTokenValid(authToken) {
	    return (authToken.requestStatus === 2 /* COMPLETED */ &&
	        !isAuthTokenExpired(authToken));
	}
	function isAuthTokenExpired(authToken) {
	    var now = Date.now();
	    return (now < authToken.creationTime ||
	        authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER);
	}
	/** Returns an updated InstallationEntry with an InProgressAuthToken. */
	function makeAuthTokenRequestInProgressEntry(oldEntry) {
	    var inProgressAuthToken = {
	        requestStatus: 1 /* IN_PROGRESS */,
	        requestTime: Date.now()
	    };
	    return tslib_2(tslib_2({}, oldEntry), { authToken: inProgressAuthToken });
	}
	function hasAuthTokenRequestTimedOut(authToken) {
	    return (authToken.requestStatus === 1 /* IN_PROGRESS */ &&
	        authToken.requestTime + PENDING_TIMEOUT_MS < Date.now());
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function getId(dependencies) {
	    return tslib_7(this, void 0, void 0, function () {
	        var _a, installationEntry, registrationPromise;
	        return tslib_8(this, function (_b) {
	            switch (_b.label) {
	                case 0: return [4 /*yield*/, getInstallationEntry(dependencies.appConfig)];
	                case 1:
	                    _a = _b.sent(), installationEntry = _a.installationEntry, registrationPromise = _a.registrationPromise;
	                    if (registrationPromise) {
	                        registrationPromise.catch(console.error);
	                    }
	                    else {
	                        // If the installation is already registered, update the authentication
	                        // token if needed.
	                        refreshAuthToken(dependencies).catch(console.error);
	                    }
	                    return [2 /*return*/, installationEntry.fid];
	            }
	        });
	    });
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function getToken(dependencies, forceRefresh) {
	    if (forceRefresh === void 0) { forceRefresh = false; }
	    return tslib_7(this, void 0, void 0, function () {
	        var authToken;
	        return tslib_8(this, function (_a) {
	            switch (_a.label) {
	                case 0: return [4 /*yield*/, completeInstallationRegistration(dependencies.appConfig)];
	                case 1:
	                    _a.sent();
	                    return [4 /*yield*/, refreshAuthToken(dependencies, forceRefresh)];
	                case 2:
	                    authToken = _a.sent();
	                    return [2 /*return*/, authToken.token];
	            }
	        });
	    });
	}
	function completeInstallationRegistration(appConfig) {
	    return tslib_7(this, void 0, void 0, function () {
	        var registrationPromise;
	        return tslib_8(this, function (_a) {
	            switch (_a.label) {
	                case 0: return [4 /*yield*/, getInstallationEntry(appConfig)];
	                case 1:
	                    registrationPromise = (_a.sent()).registrationPromise;
	                    if (!registrationPromise) return [3 /*break*/, 3];
	                    // A createInstallation request is in progress. Wait until it finishes.
	                    return [4 /*yield*/, registrationPromise];
	                case 2:
	                    // A createInstallation request is in progress. Wait until it finishes.
	                    _a.sent();
	                    _a.label = 3;
	                case 3: return [2 /*return*/];
	            }
	        });
	    });
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function deleteInstallationRequest(appConfig, installationEntry) {
	    return tslib_7(this, void 0, void 0, function () {
	        var endpoint, headers, request, response;
	        return tslib_8(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    endpoint = getDeleteEndpoint(appConfig, installationEntry);
	                    headers = getHeadersWithAuth(appConfig, installationEntry);
	                    request = {
	                        method: 'DELETE',
	                        headers: headers
	                    };
	                    return [4 /*yield*/, retryIfServerError(function () { return fetch(endpoint, request); })];
	                case 1:
	                    response = _a.sent();
	                    if (!!response.ok) return [3 /*break*/, 3];
	                    return [4 /*yield*/, getErrorFromResponse('Delete Installation', response)];
	                case 2: throw _a.sent();
	                case 3: return [2 /*return*/];
	            }
	        });
	    });
	}
	function getDeleteEndpoint(appConfig, _a) {
	    var fid = _a.fid;
	    return getInstallationsEndpoint(appConfig) + "/" + fid;
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function deleteInstallation(dependencies) {
	    return tslib_7(this, void 0, void 0, function () {
	        var appConfig, entry;
	        return tslib_8(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    appConfig = dependencies.appConfig;
	                    return [4 /*yield*/, update(appConfig, function (oldEntry) {
	                            if (oldEntry && oldEntry.registrationStatus === 0 /* NOT_STARTED */) {
	                                // Delete the unregistered entry without sending a deleteInstallation request.
	                                return undefined;
	                            }
	                            return oldEntry;
	                        })];
	                case 1:
	                    entry = _a.sent();
	                    if (!entry) return [3 /*break*/, 6];
	                    if (!(entry.registrationStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 2];
	                    // Can't delete while trying to register.
	                    throw ERROR_FACTORY.create("delete-pending-registration" /* DELETE_PENDING_REGISTRATION */);
	                case 2:
	                    if (!(entry.registrationStatus === 2 /* COMPLETED */)) return [3 /*break*/, 6];
	                    if (!!navigator.onLine) return [3 /*break*/, 3];
	                    throw ERROR_FACTORY.create("app-offline" /* APP_OFFLINE */);
	                case 3: return [4 /*yield*/, deleteInstallationRequest(appConfig, entry)];
	                case 4:
	                    _a.sent();
	                    return [4 /*yield*/, remove(appConfig)];
	                case 5:
	                    _a.sent();
	                    _a.label = 6;
	                case 6: return [2 /*return*/];
	            }
	        });
	    });
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Sets a new callback that will get called when Installation ID changes.
	 * Returns an unsubscribe function that will remove the callback when called.
	 */
	function onIdChange(_a, callback) {
	    var appConfig = _a.appConfig;
	    addCallback(appConfig, callback);
	    return function () {
	        removeCallback(appConfig, callback);
	    };
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function extractAppConfig(app) {
	    var e_1, _a;
	    if (!app || !app.options) {
	        throw getMissingValueError('App Configuration');
	    }
	    if (!app.name) {
	        throw getMissingValueError('App Name');
	    }
	    // Required app config keys
	    var configKeys = [
	        'projectId',
	        'apiKey',
	        'appId'
	    ];
	    try {
	        for (var configKeys_1 = tslib_10(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()) {
	            var keyName = configKeys_1_1.value;
	            if (!app.options[keyName]) {
	                throw getMissingValueError(keyName);
	            }
	        }
	    }
	    catch (e_1_1) { e_1 = { error: e_1_1 }; }
	    finally {
	        try {
	            if (configKeys_1_1 && !configKeys_1_1.done && (_a = configKeys_1.return)) _a.call(configKeys_1);
	        }
	        finally { if (e_1) throw e_1.error; }
	    }
	    return {
	        appName: app.name,
	        projectId: app.options.projectId,
	        apiKey: app.options.apiKey,
	        appId: app.options.appId
	    };
	}
	function getMissingValueError(valueName) {
	    return ERROR_FACTORY.create("missing-app-config-values" /* MISSING_APP_CONFIG_VALUES */, {
	        valueName: valueName
	    });
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function registerInstallations(instance) {
	    var installationsName = 'installations';
	    instance.INTERNAL.registerComponent(new index_cjs_1$1(installationsName, function (container) {
	        var app = container.getProvider('app').getImmediate();
	        // Throws if app isn't configured properly.
	        var appConfig = extractAppConfig(app);
	        var platformLoggerProvider = container.getProvider('platform-logger');
	        var dependencies = {
	            appConfig: appConfig,
	            platformLoggerProvider: platformLoggerProvider
	        };
	        var installations = {
	            app: app,
	            getId: function () { return getId(dependencies); },
	            getToken: function (forceRefresh) {
	                return getToken(dependencies, forceRefresh);
	            },
	            delete: function () { return deleteInstallation(dependencies); },
	            onIdChange: function (callback) {
	                return onIdChange(dependencies, callback);
	            }
	        };
	        return installations;
	    }, "PUBLIC" /* PUBLIC */));
	    instance.registerVersion(name$2, version$2);
	}
	registerInstallations(firebase);

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var ANALYTICS_ID_FIELD = 'measurementId';
	// Key to attach FID to in gtag params.
	var GA_FID_KEY = 'firebase_id';
	var ORIGIN_KEY = 'origin';
	var GTAG_URL = 'https://www.googletagmanager.com/gtag/js';
	var GtagCommand;
	(function (GtagCommand) {
	    GtagCommand["EVENT"] = "event";
	    GtagCommand["SET"] = "set";
	    GtagCommand["CONFIG"] = "config";
	})(GtagCommand || (GtagCommand = {}));
	/*
	 * Officially recommended event names for gtag.js
	 * Any other string is also allowed.
	 */
	var EventName;
	(function (EventName) {
	    EventName["ADD_SHIPPING_INFO"] = "add_shipping_info";
	    EventName["ADD_PAYMENT_INFO"] = "add_payment_info";
	    EventName["ADD_TO_CART"] = "add_to_cart";
	    EventName["ADD_TO_WISHLIST"] = "add_to_wishlist";
	    EventName["BEGIN_CHECKOUT"] = "begin_checkout";
	    /** @deprecated */
	    EventName["CHECKOUT_PROGRESS"] = "checkout_progress";
	    EventName["EXCEPTION"] = "exception";
	    EventName["GENERATE_LEAD"] = "generate_lead";
	    EventName["LOGIN"] = "login";
	    EventName["PAGE_VIEW"] = "page_view";
	    EventName["PURCHASE"] = "purchase";
	    EventName["REFUND"] = "refund";
	    EventName["REMOVE_FROM_CART"] = "remove_from_cart";
	    EventName["SCREEN_VIEW"] = "screen_view";
	    EventName["SEARCH"] = "search";
	    EventName["SELECT_CONTENT"] = "select_content";
	    EventName["SELECT_ITEM"] = "select_item";
	    EventName["SELECT_PROMOTION"] = "select_promotion";
	    /** @deprecated */
	    EventName["SET_CHECKOUT_OPTION"] = "set_checkout_option";
	    EventName["SHARE"] = "share";
	    EventName["SIGN_UP"] = "sign_up";
	    EventName["TIMING_COMPLETE"] = "timing_complete";
	    EventName["VIEW_CART"] = "view_cart";
	    EventName["VIEW_ITEM"] = "view_item";
	    EventName["VIEW_ITEM_LIST"] = "view_item_list";
	    EventName["VIEW_PROMOTION"] = "view_promotion";
	    EventName["VIEW_SEARCH_RESULTS"] = "view_search_results";
	})(EventName || (EventName = {}));

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Logs an analytics event through the Firebase SDK.
	 *
	 * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
	 * @param eventName Google Analytics event name, choose from standard list or use a custom string.
	 * @param eventParams Analytics event parameters.
	 */
	function logEvent(gtagFunction, analyticsId, eventName, eventParams, options) {
	    var params = eventParams || {};
	    if (!options || !options.global) {
	        params = tslib_2(tslib_2({}, eventParams), { 'send_to': analyticsId });
	    }
	    // Workaround for http://b/141370449 - third argument cannot be undefined.
	    gtagFunction(GtagCommand.EVENT, eventName, params || {});
	}
	// TODO: Brad is going to add `screen_name` to GA Gold config parameter schema
	/**
	 * Set screen_name parameter for this Google Analytics ID.
	 *
	 * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
	 * @param screenName Screen name string to set.
	 */
	function setCurrentScreen(gtagFunction, analyticsId, screenName, options) {
	    if (options && options.global) {
	        gtagFunction(GtagCommand.SET, { 'screen_name': screenName });
	    }
	    else {
	        gtagFunction(GtagCommand.CONFIG, analyticsId, {
	            update: true,
	            'screen_name': screenName
	        });
	    }
	}
	/**
	 * Set user_id parameter for this Google Analytics ID.
	 *
	 * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
	 * @param id User ID string to set
	 */
	function setUserId(gtagFunction, analyticsId, id, options) {
	    if (options && options.global) {
	        gtagFunction(GtagCommand.SET, { 'user_id': id });
	    }
	    else {
	        gtagFunction(GtagCommand.CONFIG, analyticsId, {
	            update: true,
	            'user_id': id
	        });
	    }
	}
	/**
	 * Set all other user properties other than user_id and screen_name.
	 *
	 * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
	 * @param properties Map of user properties to set
	 */
	function setUserProperties(gtagFunction, analyticsId, properties, options) {
	    if (options && options.global) {
	        var flatProperties = {};
	        for (var _i = 0, _a = Object.keys(properties); _i < _a.length; _i++) {
	            var key = _a[_i];
	            // use dot notation for merge behavior in gtag.js
	            flatProperties["user_properties." + key] = properties[key];
	        }
	        gtagFunction(GtagCommand.SET, flatProperties);
	    }
	    else {
	        gtagFunction(GtagCommand.CONFIG, analyticsId, {
	            update: true,
	            'user_properties': properties
	        });
	    }
	}
	/**
	 * Set whether collection is enabled for this ID.
	 *
	 * @param enabled If true, collection is enabled for this ID.
	 */
	function setAnalyticsCollectionEnabled(analyticsId, enabled) {
	    window["ga-disable-" + analyticsId] = !enabled;
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var logger = new Logger('@firebase/analytics');

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Initialize the analytics instance in gtag.js by calling config command with fid.
	 *
	 * NOTE: We combine analytics initialization and setting fid together because we want fid to be
	 * part of the `page_view` event that's sent during the initialization
	 * @param app Firebase app
	 * @param gtagCore The gtag function that's not wrapped.
	 */
	function initializeGAId(app, installations, gtagCore) {
	    return tslib_7(this, void 0, void 0, function () {
	        var fid;
	        var _a;
	        return tslib_8(this, function (_b) {
	            switch (_b.label) {
	                case 0: return [4 /*yield*/, installations.getId()];
	                case 1:
	                    fid = _b.sent();
	                    // This command initializes gtag.js and only needs to be called once for the entire web app,
	                    // but since it is idempotent, we can call it multiple times.
	                    // We keep it together with other initialization logic for better code structure.
	                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	                    gtagCore('js', new Date());
	                    // It should be the first config command called on this GA-ID
	                    // Initialize this GA-ID and set FID on it using the gtag config API.
	                    gtagCore(GtagCommand.CONFIG, app.options[ANALYTICS_ID_FIELD], (_a = {},
	                        _a[GA_FID_KEY] = fid,
	                        // guard against developers accidentally setting properties with prefix `firebase_`
	                        _a[ORIGIN_KEY] = 'firebase',
	                        _a.update = true,
	                        _a));
	                    return [2 /*return*/];
	            }
	        });
	    });
	}
	function insertScriptTag(dataLayerName) {
	    var script = document.createElement('script');
	    // We are not providing an analyticsId in the URL because it would trigger a `page_view`
	    // without fid. We will initialize ga-id using gtag (config) command together with fid.
	    script.src = GTAG_URL + "?l=" + dataLayerName;
	    script.async = true;
	    document.head.appendChild(script);
	}
	/** Get reference to, or create, global datalayer.
	 * @param dataLayerName Name of datalayer (most often the default, "_dataLayer")
	 */
	function getOrCreateDataLayer(dataLayerName) {
	    // Check for existing dataLayer and create if needed.
	    var dataLayer = [];
	    if (Array.isArray(window[dataLayerName])) {
	        dataLayer = window[dataLayerName];
	    }
	    else {
	        window[dataLayerName] = dataLayer;
	    }
	    return dataLayer;
	}
	/**
	 * Wraps a standard gtag function with extra code to wait for completion of
	 * relevant initialization promises before sending requests.
	 *
	 * @param gtagCore Basic gtag function that just appends to dataLayer
	 * @param initializedIdPromisesMap Map of gaIds to their initialization promises
	 */
	function wrapGtag(gtagCore, initializedIdPromisesMap) {
	    return function (command, idOrNameOrParams, gtagParams) {
	        // If event, check that relevant initialization promises have completed.
	        if (command === GtagCommand.EVENT) {
	            var initializationPromisesToWaitFor = [];
	            // If there's a 'send_to' param, check if any ID specified matches
	            // a FID we have begun a fetch on.
	            if (gtagParams && gtagParams['send_to']) {
	                var gaSendToList = gtagParams['send_to'];
	                // Make it an array if is isn't, so it can be dealt with the same way.
	                if (!Array.isArray(gaSendToList)) {
	                    gaSendToList = [gaSendToList];
	                }
	                for (var _i = 0, gaSendToList_1 = gaSendToList; _i < gaSendToList_1.length; _i++) {
	                    var sendToId = gaSendToList_1[_i];
	                    var initializationPromise = initializedIdPromisesMap[sendToId];
	                    // Groups will not be in the map.
	                    if (initializationPromise) {
	                        initializationPromisesToWaitFor.push(initializationPromise);
	                    }
	                    else {
	                        // There is an item in 'send_to' that is not associated
	                        // directly with an FID, possibly a group.  Empty this array
	                        // and let it get populated below.
	                        initializationPromisesToWaitFor = [];
	                        break;
	                    }
	                }
	            }
	            // This will be unpopulated if there was no 'send_to' field , or
	            // if not all entries in the 'send_to' field could be mapped to
	            // a FID. In these cases, wait on all pending initialization promises.
	            if (initializationPromisesToWaitFor.length === 0) {
	                for (var _a = 0, _b = Object.values(initializedIdPromisesMap); _a < _b.length; _a++) {
	                    var idPromise = _b[_a];
	                    initializationPromisesToWaitFor.push(idPromise);
	                }
	            }
	            // Run core gtag function with args after all relevant initialization
	            // promises have been resolved.
	            Promise.all(initializationPromisesToWaitFor)
	                // Workaround for http://b/141370449 - third argument cannot be undefined.
	                .then(function () {
	                return gtagCore(GtagCommand.EVENT, idOrNameOrParams, gtagParams || {});
	            })
	                .catch(function (e) { return logger.error(e); });
	        }
	        else if (command === GtagCommand.CONFIG) {
	            var initializationPromiseToWait = initializedIdPromisesMap[idOrNameOrParams] ||
	                Promise.resolve();
	            initializationPromiseToWait
	                .then(function () {
	                gtagCore(GtagCommand.CONFIG, idOrNameOrParams, gtagParams);
	            })
	                .catch(function (e) { return logger.error(e); });
	        }
	        else {
	            // SET command.
	            // Splitting calls for CONFIG and SET to make it clear which signature
	            // Typescript is checking.
	            gtagCore(GtagCommand.SET, idOrNameOrParams);
	        }
	    };
	}
	/**
	 * Creates global gtag function or wraps existing one if found.
	 * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and
	 * 'event' calls that belong to the GAID associated with this Firebase instance.
	 *
	 * @param initializedIdPromisesMap Map of gaId to initialization promises.
	 * @param dataLayerName Name of global GA datalayer array.
	 * @param gtagFunctionName Name of global gtag function ("gtag" if not user-specified)
	 */
	function wrapOrCreateGtag(initializedIdPromisesMap, dataLayerName, gtagFunctionName) {
	    // Create a basic core gtag function
	    var gtagCore = function () {
	        var _args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            _args[_i] = arguments[_i];
	        }
	        // Must push IArguments object, not an array.
	        window[dataLayerName].push(arguments);
	    };
	    // Replace it with existing one if found
	    if (window[gtagFunctionName] &&
	        typeof window[gtagFunctionName] === 'function') {
	        // @ts-ignore
	        gtagCore = window[gtagFunctionName];
	    }
	    window[gtagFunctionName] = wrapGtag(gtagCore, initializedIdPromisesMap);
	    return {
	        gtagCore: gtagCore,
	        wrappedGtag: window[gtagFunctionName]
	    };
	}
	/**
	 * Returns first script tag in DOM matching our gtag url pattern.
	 */
	function findGtagScriptOnPage() {
	    var scriptTags = window.document.getElementsByTagName('script');
	    for (var _i = 0, _a = Object.values(scriptTags); _i < _a.length; _i++) {
	        var tag = _a[_i];
	        if (tag.src && tag.src.includes(GTAG_URL)) {
	            return tag;
	        }
	    }
	    return null;
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var _a$2;
	var ERRORS = (_a$2 = {},
	    _a$2["no-ga-id" /* NO_GA_ID */] = "\"" + ANALYTICS_ID_FIELD + "\" field is empty in " +
	        'Firebase config. Firebase Analytics ' +
	        'requires this field to contain a valid measurement ID.',
	    _a$2["already-exists" /* ALREADY_EXISTS */] = 'A Firebase Analytics instance with the measurement ID ${id} ' +
	        ' already exists. ' +
	        'Only one Firebase Analytics instance can be created for each measurement ID.',
	    _a$2["already-initialized" /* ALREADY_INITIALIZED */] = 'Firebase Analytics has already been initialized.' +
	        'settings() must be called before initializing any Analytics instance' +
	        'or it will have no effect.',
	    _a$2["interop-component-reg-failed" /* INTEROP_COMPONENT_REG_FAILED */] = 'Firebase Analytics Interop Component failed to instantiate',
	    _a$2["indexedDB-unsupported" /* INDEXED_DB_UNSUPPORTED */] = 'IndexedDB is not supported by current browswer',
	    _a$2["invalid-indexedDB-context" /* INVALID_INDEXED_DB_CONTEXT */] = "Environment doesn't support IndexedDB: {$errorInfo}. " +
	        'Wrap initialization of analytics in analytics.isSupported() ' +
	        'to prevent initialization in unsupported environments',
	    _a$2["cookies-not-enabled" /* COOKIES_NOT_ENABLED */] = 'Cookies are not enabled in this browser environment. Analytics requires cookies to be enabled.',
	    _a$2["invalid-analytics-context" /* INVALID_ANALYTICS_CONTEXT */] = 'Firebase Analytics is not supported in browser extensions.',
	    _a$2);
	var ERROR_FACTORY$1 = new index_cjs_3('analytics', 'Analytics', ERRORS);

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Maps gaId to FID fetch promises.
	 */
	var initializedIdPromisesMap = {};
	/**
	 * Name for window global data layer array used by GA: defaults to 'dataLayer'.
	 */
	var dataLayerName = 'dataLayer';
	/**
	 * Name for window global gtag function used by GA: defaults to 'gtag'.
	 */
	var gtagName = 'gtag';
	/**
	 * Reproduction of standard gtag function or reference to existing
	 * gtag function on window object.
	 */
	var gtagCoreFunction;
	/**
	 * Wrapper around gtag function that ensures FID is sent with all
	 * relevant event and config calls.
	 */
	var wrappedGtagFunction;
	/**
	 * Flag to ensure page initialization steps (creation or wrapping of
	 * dataLayer and gtag script) are only run once per page load.
	 */
	var globalInitDone = false;
	/**
	 * This must be run before calling firebase.analytics() or it won't
	 * have any effect.
	 * @param options Custom gtag and dataLayer names.
	 */
	function settings(options) {
	    if (globalInitDone) {
	        throw ERROR_FACTORY$1.create("already-initialized" /* ALREADY_INITIALIZED */);
	    }
	    if (options.dataLayerName) {
	        dataLayerName = options.dataLayerName;
	    }
	    if (options.gtagName) {
	        gtagName = options.gtagName;
	    }
	}
	function factory(app, installations) {
	    if (index_cjs_22()) {
	        throw ERROR_FACTORY$1.create("invalid-analytics-context" /* INVALID_ANALYTICS_CONTEXT */);
	    }
	    if (!index_cjs_6()) {
	        throw ERROR_FACTORY$1.create("cookies-not-enabled" /* COOKIES_NOT_ENABLED */);
	    }
	    if (!index_cjs_26()) {
	        throw ERROR_FACTORY$1.create("indexedDB-unsupported" /* INDEXED_DB_UNSUPPORTED */);
	    }
	    // Async but non-blocking.
	    index_cjs_47().catch(function (error) {
	        throw ERROR_FACTORY$1.create("invalid-indexedDB-context" /* INVALID_INDEXED_DB_CONTEXT */, {
	            errorInfo: error
	        });
	    });
	    var analyticsId = app.options[ANALYTICS_ID_FIELD];
	    if (!analyticsId) {
	        throw ERROR_FACTORY$1.create("no-ga-id" /* NO_GA_ID */);
	    }
	    if (initializedIdPromisesMap[analyticsId] != null) {
	        throw ERROR_FACTORY$1.create("already-exists" /* ALREADY_EXISTS */, {
	            id: analyticsId
	        });
	    }
	    if (!globalInitDone) {
	        // Steps here should only be done once per page: creation or wrapping
	        // of dataLayer and global gtag function.
	        // Detect if user has already put the gtag <script> tag on this page.
	        if (!findGtagScriptOnPage()) {
	            insertScriptTag(dataLayerName);
	        }
	        getOrCreateDataLayer(dataLayerName);
	        var _a = wrapOrCreateGtag(initializedIdPromisesMap, dataLayerName, gtagName), wrappedGtag = _a.wrappedGtag, gtagCore = _a.gtagCore;
	        wrappedGtagFunction = wrappedGtag;
	        gtagCoreFunction = gtagCore;
	        globalInitDone = true;
	    }
	    // Async but non-blocking.
	    initializedIdPromisesMap[analyticsId] = initializeGAId(app, installations, gtagCoreFunction);
	    var analyticsInstance = {
	        app: app,
	        logEvent: function (eventName, eventParams, options) {
	            return logEvent(wrappedGtagFunction, analyticsId, eventName, eventParams, options);
	        },
	        setCurrentScreen: function (screenName, options) {
	            return setCurrentScreen(wrappedGtagFunction, analyticsId, screenName, options);
	        },
	        setUserId: function (id, options) {
	            return setUserId(wrappedGtagFunction, analyticsId, id, options);
	        },
	        setUserProperties: function (properties, options) {
	            return setUserProperties(wrappedGtagFunction, analyticsId, properties, options);
	        },
	        setAnalyticsCollectionEnabled: function (enabled) {
	            return setAnalyticsCollectionEnabled(analyticsId, enabled);
	        }
	    };
	    return analyticsInstance;
	}

	var name$3 = "@firebase/analytics";
	var version$3 = "0.4.2";

	/**
	 * Type constant for Firebase Analytics.
	 */
	var ANALYTICS_TYPE = 'analytics';
	function registerAnalytics(instance) {
	    instance.INTERNAL.registerComponent(new index_cjs_1$1(ANALYTICS_TYPE, function (container) {
	        // getImmediate for FirebaseApp will always succeed
	        var app = container.getProvider('app').getImmediate();
	        var installations = container
	            .getProvider('installations')
	            .getImmediate();
	        return factory(app, installations);
	    }, "PUBLIC" /* PUBLIC */).setServiceProps({
	        settings: settings,
	        EventName: EventName,
	        isSupported: isSupported
	    }));
	    instance.INTERNAL.registerComponent(new index_cjs_1$1('analytics-internal', internalFactory, "PRIVATE" /* PRIVATE */));
	    instance.registerVersion(name$3, version$3);
	    function internalFactory(container) {
	        try {
	            var analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();
	            return {
	                logEvent: analytics.logEvent
	            };
	        }
	        catch (e) {
	            throw ERROR_FACTORY$1.create("interop-component-reg-failed" /* INTEROP_COMPONENT_REG_FAILED */, {
	                reason: e
	            });
	        }
	    }
	}
	registerAnalytics(firebase);
	/**
	 * this is a public static method provided to users that wraps four different checks:
	 *
	 * 1. check if it's not a browser extension environment.
	 * 1. check if cookie is enabled in current browser.
	 * 3. check if IndexedDB is supported by the browser environment.
	 * 4. check if the current browser context is valid for using IndexedDB.
	 *
	 */
	function isSupported() {
	    return tslib_7(this, void 0, void 0, function () {
	        var isDBOpenable, error_1;
	        return tslib_8(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    if (index_cjs_22()) {
	                        return [2 /*return*/, false];
	                    }
	                    if (!index_cjs_6()) {
	                        return [2 /*return*/, false];
	                    }
	                    if (!index_cjs_26()) {
	                        return [2 /*return*/, false];
	                    }
	                    _a.label = 1;
	                case 1:
	                    _a.trys.push([1, 3, , 4]);
	                    return [4 /*yield*/, index_cjs_47()];
	                case 2:
	                    isDBOpenable = _a.sent();
	                    return [2 /*return*/, isDBOpenable];
	                case 3:
	                    error_1 = _a.sent();
	                    return [2 /*return*/, false];
	                case 4: return [2 /*return*/];
	            }
	        });
	    });
	}

	var fpFuture = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	function future() {
	    let resolver;
	    let rejecter;
	    const promise = new Promise((ok, err) => {
	        resolver = (x) => {
	            ok(x);
	            promise.isPending = false;
	        };
	        rejecter = (x) => {
	            err(x);
	            promise.isPending = false;
	        };
	    }).catch(e => Promise.reject(e));
	    promise.resolve = resolver;
	    promise.reject = rejecter;
	    if (!("finally" in promise)) {
	        promise.finally = fn => {
	            promise.then(fn);
	            promise.catch(fn);
	        };
	    }
	    promise.isPending = true;
	    return promise;
	}
	exports.future = future;
	exports.default = future;

	});

	var future = unwrapExports(fpFuture);
	var fpFuture_1 = fpFuture.future;

	async function addFirebase() {
	    index_cjs$3.initializeApp(globalConfig.firebaseConfig);
	    index_cjs$3.analytics();
	    await index_cjs$3.auth().setPersistence(index_cjs$3.auth.Auth.Persistence.LOCAL);
	    await new Promise((resolve, reject) => {
	        const unsubscribe = index_cjs$3.auth().onAuthStateChanged((user) => {
	            unsubscribe();
	            resolve(user);
	        }, (e) => {
	            console.error(e);
	            reject("API Failed");
	        });
	    });
	}
	function newNotebook(userId) {
	    const ref = index_cjs$3.database().ref(`users/${userId}/notebooks`);
	    const document = ref.push();
	    document.child("meta/uid").set(userId, function (err) {
	        if (err)
	            console.log("error setting uid", err);
	    });
	    document.child("meta/title").set("Untitled notebook", function (err) {
	        if (err)
	            console.log("error setting titile2", err);
	    });
	    if (typeof console !== "undefined" && "development" != "production") {
	        console.log("Firebase data: ", document.toString());
	    }
	    return document;
	}
	function openByHash(userId, notebookId) {
	    return index_cjs$3.database().ref().child(`users/${userId}/notebooks/${notebookId}`);
	}
	function logEvent$1(event) {
	    index_cjs$3.analytics().logEvent(event);
	}
	function logException(error) {
	    index_cjs$3.analytics().logEvent("exception", {
	        description: typeof error == "object" ? error.message : error,
	        fatal: typeof error == "object",
	    });
	}
	function logPageView(page_location, page_path) {
	    index_cjs$3.analytics().logEvent("page_view", { page_location, page_path });
	}
	async function newNotebookWithContent(content) {
	    const ret = future();
	    let owner = (index_cjs$3.auth().currentUser && index_cjs$3.auth().currentUser.uid) || "anonymous";
	    const ref = newNotebook(owner);
	    const headless = new Firepad.Headless(ref);
	    headless.setText(content, function (data, succeed) {
	        ret.resolve({ ref, data, succeed, owner });
	    });
	    return ret;
	}
	globalThis["firebase"] = index_cjs$3;

	const history = createHashHistory();
	function navigateTo(path, state) {
	    const location = {
	        pathname: path,
	        state: state || {},
	    };
	    if (history.location.pathname != location.pathname) {
	        history.push(location);
	    }
	}
	history.listen((e) => {
	    logPageView(location.toString(), e.pathname);
	});

	var interopRequireDefault = createCommonjsModule(function (module) {
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	}

	module.exports = _interopRequireDefault;
	});

	unwrapExports(interopRequireDefault);

	var _typeof_1 = createCommonjsModule(function (module) {
	function _typeof(obj) {
	  "@babel/helpers - typeof";

	  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
	    module.exports = _typeof = function _typeof(obj) {
	      return typeof obj;
	    };
	  } else {
	    module.exports = _typeof = function _typeof(obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	    };
	  }

	  return _typeof(obj);
	}

	module.exports = _typeof;
	});

	var interopRequireWildcard = createCommonjsModule(function (module) {
	function _getRequireWildcardCache() {
	  if (typeof WeakMap !== "function") return null;
	  var cache = new WeakMap();

	  _getRequireWildcardCache = function _getRequireWildcardCache() {
	    return cache;
	  };

	  return cache;
	}

	function _interopRequireWildcard(obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  }

	  if (obj === null || _typeof_1(obj) !== "object" && typeof obj !== "function") {
	    return {
	      "default": obj
	    };
	  }

	  var cache = _getRequireWildcardCache();

	  if (cache && cache.has(obj)) {
	    return cache.get(obj);
	  }

	  var newObj = {};
	  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

	  for (var key in obj) {
	    if (Object.prototype.hasOwnProperty.call(obj, key)) {
	      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

	      if (desc && (desc.get || desc.set)) {
	        Object.defineProperty(newObj, key, desc);
	      } else {
	        newObj[key] = obj[key];
	      }
	    }
	  }

	  newObj["default"] = obj;

	  if (cache) {
	    cache.set(obj, newObj);
	  }

	  return newObj;
	}

	module.exports = _interopRequireWildcard;
	});

	unwrapExports(interopRequireWildcard);

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	var defineProperty = _defineProperty;

	function _arrayWithHoles(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	var arrayWithHoles = _arrayWithHoles;

	function _iterableToArrayLimit(arr, i) {
	  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
	  var _arr = [];
	  var _n = true;
	  var _d = false;
	  var _e = undefined;

	  try {
	    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	var iterableToArrayLimit = _iterableToArrayLimit;

	function _arrayLikeToArray(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
	    arr2[i] = arr[i];
	  }

	  return arr2;
	}

	var arrayLikeToArray = _arrayLikeToArray;

	function _unsupportedIterableToArray(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return arrayLikeToArray(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
	}

	var unsupportedIterableToArray = _unsupportedIterableToArray;

	function _nonIterableRest() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	var nonIterableRest = _nonIterableRest;

	function _slicedToArray(arr, i) {
	  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
	}

	var slicedToArray = _slicedToArray;

	var Loading_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _react = interopRequireDefault(react);

	var loadingStyles = {
	  display: 'flex',
	  height: '100%',
	  width: '100%',
	  justifyContent: 'center',
	  alignItems: 'center'
	};

	function Loading(_ref) {
	  var content = _ref.content;
	  return _react.default.createElement("div", {
	    style: loadingStyles
	  }, content);
	}

	var _default = Loading;
	exports.default = _default;
	});

	unwrapExports(Loading_1);

	var Loading = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _Loading = interopRequireDefault(Loading_1);

	var _default = _Loading.default;
	exports.default = _default;
	});

	unwrapExports(Loading);

	var styles_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	var styles = {
	  wrapper: {
	    display: 'flex',
	    position: 'relative',
	    textAlign: 'initial'
	  },
	  fullWidth: {
	    width: '100%'
	  },
	  hide: {
	    display: 'none'
	  }
	};
	var _default = styles;
	exports.default = _default;
	});

	unwrapExports(styles_1);

	var MonacoContainer_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	var _react = interopRequireDefault(react);

	var _propTypes = interopRequireDefault(propTypes);

	var _Loading = interopRequireDefault(Loading);

	var _styles = interopRequireDefault(styles_1);

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	// ** forwardref render functions do not support proptypes or defaultprops **
	// one of the reasons why we use a separate prop for passing ref instead of using forwardref
	var MonacoContainer = function MonacoContainer(_ref2) {
	  var width = _ref2.width,
	      height = _ref2.height,
	      isEditorReady = _ref2.isEditorReady,
	      loading = _ref2.loading,
	      _ref = _ref2._ref,
	      className = _ref2.className,
	      wrapperClassName = _ref2.wrapperClassName;
	  return _react.default.createElement("section", {
	    style: _objectSpread({}, _styles.default.wrapper, {
	      width: width,
	      height: height
	    }),
	    className: wrapperClassName
	  }, !isEditorReady && _react.default.createElement(_Loading.default, {
	    content: loading
	  }), _react.default.createElement("div", {
	    ref: _ref,
	    style: _objectSpread({}, _styles.default.fullWidth, {}, !isEditorReady && _styles.default.hide),
	    className: className
	  }));
	};

	MonacoContainer.propTypes = {
	  width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]).isRequired,
	  height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]).isRequired,
	  loading: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.string]).isRequired,
	  isEditorReady: _propTypes.default.bool.isRequired,
	  className: _propTypes.default.string,
	  wrapperClassName: _propTypes.default.string
	};
	var _default = MonacoContainer;
	exports.default = _default;
	});

	unwrapExports(MonacoContainer_1);

	var MonacoContainer = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;



	var _MonacoContainer = interopRequireDefault(MonacoContainer_1);

	var _default = (0, react.memo)(_MonacoContainer.default);

	exports.default = _default;
	});

	unwrapExports(MonacoContainer);

	function _objectWithoutPropertiesLoose$1(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose$1;

	function _objectWithoutProperties(source, excluded) {
	  if (source == null) return {};
	  var target = objectWithoutPropertiesLoose(source, excluded);
	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	var objectWithoutProperties = _objectWithoutProperties;

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	var classCallCheck = _classCallCheck;

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}

	var createClass = _createClass;

	var config_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	var config = {
	  paths: {
	    vs: 'https://cdn.jsdelivr.net/npm/monaco-editor@0.20.0/min/vs'
	  }
	};
	var _default = config;
	exports.default = _default;
	});

	unwrapExports(config_1);

	var monaco$1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);

	var _classCallCheck2 = interopRequireDefault(classCallCheck);

	var _createClass2 = interopRequireDefault(createClass);

	var _defineProperty2 = interopRequireDefault(defineProperty);

	var _config2 = interopRequireDefault(config_1);



	var Monaco =
	/*#__PURE__*/
	function () {
	  function Monaco(_ref) {
	    var _this = this;

	    var src = _ref.src,
	        config = (0, _objectWithoutProperties2.default)(_ref, ["src"]);
	    (0, _classCallCheck2.default)(this, Monaco);
	    (0, _defineProperty2.default)(this, "handleConfigScriptLoad", function (_) {
	      document.removeEventListener('monaco_init', _this.handleConfigScriptLoad);

	      _this.resolve(window.monaco);
	    });
	    (0, _defineProperty2.default)(this, "isInitialized", false);
	    (0, _defineProperty2.default)(this, "wrapperPromise", new Promise(function (res, rej) {
	      _this.resolve = res;
	      _this.reject = rej;
	    }));
	    this.configScriptSrc = src;
	    this.__config = config;
	  }

	  (0, _createClass2.default)(Monaco, [{
	    key: "config",
	    value: function config() {
	      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	      var src = _ref2.src,
	          _config = (0, _objectWithoutProperties2.default)(_ref2, ["src"]);

	      this.configScriptSrc = src;
	      this.__config = (0, utils.deepMerge)(this.__config, this.validateConfig(_config));
	      return this;
	    }
	  }, {
	    key: "validateConfig",
	    value: function validateConfig(config) {
	      if (config.urls) {
	        this.informAboutDepreciation();
	        return {
	          paths: {
	            vs: config.urls.monacoBase
	          }
	        };
	      }

	      return config;
	    }
	  }, {
	    key: "informAboutDepreciation",
	    value: function informAboutDepreciation() {
	      console.warn("Deprecation warning!\n      You are using deprecated way of configuration.\n\n      Instead of using\n        monaco.config({ urls: { monacoBase: '...' } })\n      use\n        monaco.config({ paths: { vs: '...' } })\n\n      For more please check the link https://github.com/suren-atoyan/monaco-react#config\n    ");
	    }
	  }, {
	    key: "injectScripts",
	    value: function injectScripts(script) {
	      document.body.appendChild(script);
	    }
	  }, {
	    key: "createScript",
	    value: function createScript(src) {
	      var script = document.createElement('script');
	      return src && (script.src = src), script;
	    }
	  }, {
	    key: "createMonacoLoaderScript",
	    value: function createMonacoLoaderScript(configScript) {
	      var _this2 = this;

	      var loaderScript = this.createScript("".concat(this.__config.paths.vs, "/loader.js"));

	      loaderScript.onload = function (_) {
	        return _this2.injectScripts(configScript);
	      };

	      loaderScript.onerror = this.reject;
	      return loaderScript;
	    }
	  }, {
	    key: "createConfigScript",
	    value: function createConfigScript() {
	      var configScript = this.createScript();

	      if (this.configScriptSrc) {
	        // it will be helpfull in case of CSP, which doesn't allow
	        // inline script execution
	        configScript.src = this.configScriptSrc;
	      } else {
	        configScript.innerHTML = "\n        require.config(".concat(JSON.stringify(this.__config), ");\n        require(['vs/editor/editor.main'], function() {\n          document.dispatchEvent(new Event('monaco_init'));\n        });\n      ");
	      }

	      configScript.onerror = this.reject;
	      return configScript;
	    }
	  }, {
	    key: "init",
	    value: function init() {
	      if (!this.isInitialized) {
	        if (window.monaco && window.monaco.editor) {
	          return new Promise(function (res, rej) {
	            return res(window.monaco);
	          });
	        }

	        document.addEventListener('monaco_init', this.handleConfigScriptLoad);
	        var configScript = this.createConfigScript();
	        var loaderScript = this.createMonacoLoaderScript(configScript);
	        this.injectScripts(loaderScript);
	      }

	      this.isInitialized = true;
	      return (0, utils.makeCancelable)(this.wrapperPromise);
	    }
	  }]);
	  return Monaco;
	}();

	var _default = new Monaco(_config2.default);

	exports.default = _default;
	});

	unwrapExports(monaco$1);

	var noop_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var noop = function noop(_) {};

	var _default = noop;
	exports.default = _default;
	});

	unwrapExports(noop_1);

	var deepMerge = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	var merge = function merge(target, source) {
	  Object.keys(source).forEach(function (key) {
	    if (source[key] instanceof Object) target[key] && Object.assign(source[key], merge(target[key], source[key]));
	  });
	  return _objectSpread({}, target, {}, source);
	};

	var _default = merge;
	exports.default = _default;
	});

	unwrapExports(deepMerge);

	var makeCancelable_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// The source (has been changed) is https://github.com/facebook/react/issues/5465#issuecomment-157888325
	var CANCELATION_MESSAGE = {
	  type: 'cancelation',
	  msg: 'operation is manually canceled'
	};

	var makeCancelable = function makeCancelable(promise) {
	  var hasCanceled_ = false;
	  var wrappedPromise = new Promise(function (resolve, reject) {
	    promise.then(function (val) {
	      return hasCanceled_ ? reject(CANCELATION_MESSAGE) : resolve(val);
	    });
	    promise.catch(reject);
	  });
	  return wrappedPromise.cancel = function (_) {
	    return hasCanceled_ = true;
	  }, wrappedPromise;
	};

	var _default = makeCancelable;
	exports.default = _default;
	});

	unwrapExports(makeCancelable_1);

	var utils = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "monaco", {
	  enumerable: true,
	  get: function get() {
	    return _monaco.default;
	  }
	});
	Object.defineProperty(exports, "noop", {
	  enumerable: true,
	  get: function get() {
	    return _noop.default;
	  }
	});
	Object.defineProperty(exports, "deepMerge", {
	  enumerable: true,
	  get: function get() {
	    return _deepMerge.default;
	  }
	});
	Object.defineProperty(exports, "makeCancelable", {
	  enumerable: true,
	  get: function get() {
	    return _makeCancelable.default;
	  }
	});

	var _monaco = interopRequireDefault(monaco$1);

	var _noop = interopRequireDefault(noop_1);

	var _deepMerge = interopRequireDefault(deepMerge);

	var _makeCancelable = interopRequireDefault(makeCancelable_1);
	});

	unwrapExports(utils);

	var useMount_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;



	var useMount = function useMount(effect) {
	  return (0, react.useEffect)(effect, []);
	};

	var _default = useMount;
	exports.default = _default;
	});

	unwrapExports(useMount_1);

	var useUpdate_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;



	var useUpdate = function useUpdate(effect, deps) {
	  var applyChanges = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
	  var isInitialMount = (0, react.useRef)(true);
	  (0, react.useEffect)(isInitialMount.current || !applyChanges ? function (_) {
	    isInitialMount.current = false;
	  } : effect, deps);
	};

	var _default = useUpdate;
	exports.default = _default;
	});

	unwrapExports(useUpdate_1);

	var hooks = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "useMount", {
	  enumerable: true,
	  get: function get() {
	    return _useMount.default;
	  }
	});
	Object.defineProperty(exports, "useUpdate", {
	  enumerable: true,
	  get: function get() {
	    return _useUpdate.default;
	  }
	});

	var _useMount = interopRequireDefault(useMount_1);

	var _useUpdate = interopRequireDefault(useUpdate_1);
	});

	unwrapExports(hooks);

	var themes_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	var themes = {
	  'night-dark': {
	    base: 'vs-dark',
	    inherit: true,
	    rules: [],
	    colors: {
	      'editor.background': '#202124'
	    }
	  }
	};
	var _default = themes;
	exports.default = _default;
	});

	unwrapExports(themes_1);

	var Editor_1 = createCommonjsModule(function (module, exports) {





	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	var _slicedToArray2 = interopRequireDefault(slicedToArray);

	var _react = interopRequireWildcard(react);

	var _propTypes = interopRequireDefault(propTypes);

	var _MonacoContainer = interopRequireDefault(MonacoContainer);





	var _themes = interopRequireDefault(themes_1);

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	var Editor = function Editor(_ref) {
	  var value = _ref.value,
	      language = _ref.language,
	      editorDidMount = _ref.editorDidMount,
	      theme = _ref.theme,
	      line = _ref.line,
	      width = _ref.width,
	      height = _ref.height,
	      loading = _ref.loading,
	      options = _ref.options,
	      overrideServices = _ref.overrideServices,
	      _isControlledMode = _ref._isControlledMode,
	      className = _ref.className,
	      wrapperClassName = _ref.wrapperClassName;

	  var _useState = (0, _react.useState)(false),
	      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
	      isEditorReady = _useState2[0],
	      setIsEditorReady = _useState2[1];

	  var _useState3 = (0, _react.useState)(true),
	      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
	      isMonacoMounting = _useState4[0],
	      setIsMonacoMounting = _useState4[1];

	  var editorRef = (0, _react.useRef)();
	  var monacoRef = (0, _react.useRef)();
	  var containerRef = (0, _react.useRef)();
	  (0, hooks.useMount)(function (_) {
	    var cancelable = utils.monaco.init();

	    cancelable.then(function (monaco) {
	      return (monacoRef.current = monaco) && setIsMonacoMounting(false);
	    }).catch(function (error) {
	      return (error === null || error === void 0 ? void 0 : error.type) !== 'cancelation' && console.error('Monaco initialization: error:', error);
	    });
	    return function (_) {
	      return editorRef.current ? disposeEditor() : cancelable.cancel();
	    };
	  });
	  (0, hooks.useUpdate)(function (_) {
	    editorRef.current.updateOptions(options);
	  }, [options], isEditorReady);
	  (0, hooks.useUpdate)(function (_) {
	    if (editorRef.current.getOption(monacoRef.current.editor.EditorOption.readOnly)) {
	      editorRef.current.setValue(value);
	    } else {
	      if (value !== editorRef.current.getValue()) {
	        editorRef.current.executeEdits('', [{
	          range: editorRef.current.getModel().getFullModelRange(),
	          text: value
	        }]);

	        if (_isControlledMode) {
	          var model = editorRef.current.getModel();
	          model.forceTokenization(model.getLineCount());
	        }

	        editorRef.current.pushUndoStop();
	      }
	    }
	  }, [value], isEditorReady);
	  (0, hooks.useUpdate)(function (_) {
	    // set last value by .setValue method before changing the language
	    editorRef.current.setValue(value);
	    monacoRef.current.editor.setModelLanguage(editorRef.current.getModel(), language);
	  }, [language], isEditorReady);
	  (0, hooks.useUpdate)(function (_) {
	    editorRef.current.setScrollPosition({
	      scrollTop: line
	    });
	  }, [line], isEditorReady);
	  (0, hooks.useUpdate)(function (_) {
	    monacoRef.current.editor.setTheme(theme);
	  }, [theme], isEditorReady);
	  var createEditor = (0, _react.useCallback)(function (_) {
	    editorRef.current = monacoRef.current.editor.create(containerRef.current, _objectSpread({
	      value: value,
	      language: language,
	      automaticLayout: true
	    }, options), overrideServices);
	    editorDidMount(editorRef.current.getValue.bind(editorRef.current), editorRef.current);
	    monacoRef.current.editor.defineTheme('dark', _themes.default['night-dark']);
	    monacoRef.current.editor.setTheme(theme);
	    setIsEditorReady(true);
	  }, [editorDidMount, language, options, overrideServices, theme, value]);
	  (0, _react.useEffect)(function (_) {
	    !isMonacoMounting && !isEditorReady && createEditor();
	  }, [isMonacoMounting, isEditorReady, createEditor]);

	  var disposeEditor = function disposeEditor(_) {
	    return editorRef.current.dispose();
	  };

	  return _react.default.createElement(_MonacoContainer.default, {
	    width: width,
	    height: height,
	    isEditorReady: isEditorReady,
	    loading: loading,
	    _ref: containerRef,
	    className: className,
	    wrapperClassName: wrapperClassName
	  });
	};

	Editor.propTypes = {
	  value: _propTypes.default.string,
	  language: _propTypes.default.string,
	  editorDidMount: _propTypes.default.func,
	  theme: _propTypes.default.string,
	  line: _propTypes.default.number,
	  width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
	  height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
	  loading: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.string]),
	  options: _propTypes.default.object,
	  className: _propTypes.default.string,
	  wrapperClassName: _propTypes.default.string,
	  overrideServices: _propTypes.default.object,
	  _isControlledMode: _propTypes.default.bool
	};
	Editor.defaultProps = {
	  editorDidMount: utils.noop,
	  theme: 'light',
	  width: '100%',
	  height: '100%',
	  loading: 'Loading...',
	  options: {},
	  overrideServices: {},
	  _isControlledMode: false
	};
	var _default = Editor;
	exports.default = _default;
	});

	unwrapExports(Editor_1);

	var Editor = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;



	var _Editor = interopRequireDefault(Editor_1);

	var _default = (0, react.memo)(_Editor.default);

	exports.default = _default;
	});

	unwrapExports(Editor);

	var DiffEditor_1 = createCommonjsModule(function (module, exports) {





	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty);

	var _slicedToArray2 = interopRequireDefault(slicedToArray);

	var _react = interopRequireWildcard(react);

	var _propTypes = interopRequireDefault(propTypes);

	var _MonacoContainer = interopRequireDefault(MonacoContainer);





	var _themes = interopRequireDefault(themes_1);

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	var DiffEditor = function DiffEditor(_ref) {
	  var original = _ref.original,
	      modified = _ref.modified,
	      language = _ref.language,
	      originalLanguage = _ref.originalLanguage,
	      modifiedLanguage = _ref.modifiedLanguage,
	      editorDidMount = _ref.editorDidMount,
	      theme = _ref.theme,
	      width = _ref.width,
	      height = _ref.height,
	      loading = _ref.loading,
	      options = _ref.options,
	      className = _ref.className,
	      wrapperClassName = _ref.wrapperClassName;

	  var _useState = (0, _react.useState)(false),
	      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
	      isEditorReady = _useState2[0],
	      setIsEditorReady = _useState2[1];

	  var _useState3 = (0, _react.useState)(true),
	      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
	      isMonacoMounting = _useState4[0],
	      setIsMonacoMounting = _useState4[1];

	  var editorRef = (0, _react.useRef)();
	  var monacoRef = (0, _react.useRef)();
	  var containerRef = (0, _react.useRef)();
	  (0, hooks.useMount)(function (_) {
	    var cancelable = utils.monaco.init();

	    cancelable.then(function (monaco) {
	      return (monacoRef.current = monaco) && setIsMonacoMounting(false);
	    }).catch(function (error) {
	      return (error === null || error === void 0 ? void 0 : error.type) !== 'cancelation' && console.error('Monaco initialization: error:', error);
	    });
	    return function (_) {
	      return editorRef.current ? disposeEditor() : cancelable.cancel();
	    };
	  });
	  (0, hooks.useUpdate)(function (_) {
	    editorRef.current.getModel().modified.setValue(modified);
	  }, [modified], isEditorReady);
	  (0, hooks.useUpdate)(function (_) {
	    editorRef.current.getModel().original.setValue(original);
	  }, [original], isEditorReady);
	  (0, hooks.useUpdate)(function (_) {
	    var _editorRef$current$ge = editorRef.current.getModel(),
	        original = _editorRef$current$ge.original,
	        modified = _editorRef$current$ge.modified;

	    monacoRef.current.editor.setModelLanguage(original, originalLanguage || language);
	    monacoRef.current.editor.setModelLanguage(modified, modifiedLanguage || language);
	  }, [language, originalLanguage, modifiedLanguage], isEditorReady);
	  (0, hooks.useUpdate)(function (_) {
	    monacoRef.current.editor.setTheme(theme);
	  }, [theme], isEditorReady);
	  (0, hooks.useUpdate)(function (_) {
	    editorRef.current.updateOptions(options);
	  }, [options], isEditorReady);
	  var setModels = (0, _react.useCallback)(function (_) {
	    var originalModel = monacoRef.current.editor.createModel(original, originalLanguage || language);
	    var modifiedModel = monacoRef.current.editor.createModel(modified, modifiedLanguage || language);
	    editorRef.current.setModel({
	      original: originalModel,
	      modified: modifiedModel
	    });
	  }, [language, modified, modifiedLanguage, original, originalLanguage]);
	  var createEditor = (0, _react.useCallback)(function (_) {
	    editorRef.current = monacoRef.current.editor.createDiffEditor(containerRef.current, _objectSpread({
	      automaticLayout: true
	    }, options));
	    setModels();

	    var _editorRef$current$ge2 = editorRef.current.getModel(),
	        original = _editorRef$current$ge2.original,
	        modified = _editorRef$current$ge2.modified;

	    editorDidMount(modified.getValue.bind(modified), original.getValue.bind(original), editorRef.current);
	    monacoRef.current.editor.defineTheme('dark', _themes.default['night-dark']);
	    monacoRef.current.editor.setTheme(theme);
	    setIsEditorReady(true);
	  }, [editorDidMount, options, theme, setModels]);
	  (0, _react.useEffect)(function (_) {
	    !isMonacoMounting && !isEditorReady && createEditor();
	  }, [isMonacoMounting, isEditorReady, createEditor]);

	  var disposeEditor = function disposeEditor(_) {
	    return editorRef.current.dispose();
	  };

	  return _react.default.createElement(_MonacoContainer.default, {
	    width: width,
	    height: height,
	    isEditorReady: isEditorReady,
	    loading: loading,
	    _ref: containerRef,
	    className: className,
	    wrapperClassName: wrapperClassName
	  });
	};

	DiffEditor.propTypes = {
	  original: _propTypes.default.string,
	  modified: _propTypes.default.string,
	  language: _propTypes.default.string,
	  originalLanguage: _propTypes.default.string,
	  modifiedLanguage: _propTypes.default.string,
	  editorDidMount: _propTypes.default.func,
	  theme: _propTypes.default.string,
	  width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
	  height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
	  loading: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.string]),
	  options: _propTypes.default.object,
	  className: _propTypes.default.string,
	  wrapperClassName: _propTypes.default.string
	};
	DiffEditor.defaultProps = {
	  editorDidMount: utils.noop,
	  theme: 'light',
	  width: '100%',
	  height: '100%',
	  loading: 'Loading...',
	  options: {}
	};
	var _default = DiffEditor;
	exports.default = _default;
	});

	unwrapExports(DiffEditor_1);

	var DiffEditor = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;



	var _DiffEditor = interopRequireDefault(DiffEditor_1);

	var _default = (0, react.memo)(_DiffEditor.default);

	exports.default = _default;
	});

	unwrapExports(DiffEditor);

	var _extends_1 = createCommonjsModule(function (module) {
	function _extends() {
	  module.exports = _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends.apply(this, arguments);
	}

	module.exports = _extends;
	});

	var ControlledEditor_1 = createCommonjsModule(function (module, exports) {





	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = interopRequireDefault(_extends_1);

	var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);

	var _react = interopRequireWildcard(react);

	var _propTypes = interopRequireDefault(propTypes);

	var _ = interopRequireDefault(lib);



	var ControlledEditor = function ControlledEditor(_ref) {
	  var value = _ref.value,
	      onChange = _ref.onChange,
	      editorDidMount = _ref.editorDidMount,
	      props = (0, _objectWithoutProperties2.default)(_ref, ["value", "onChange", "editorDidMount"]);
	  var previousValue = (0, _react.useRef)(value);

	  var handleEditorDidMount = function handleEditorDidMount(getValue, editor) {
	    editor.onDidChangeModelContent(function (ev) {
	      var currentValue = editor.getValue();

	      if (currentValue !== previousValue.current) {
	        previousValue.current = currentValue;

	        var _value = onChange(ev, currentValue);

	        if (typeof _value === 'string' && currentValue !== _value) {
	          editor.setValue(_value);
	        }
	      }
	    });
	    editorDidMount(getValue, editor);
	  };

	  return _react.default.createElement(_.default, (0, _extends2.default)({
	    value: value,
	    editorDidMount: handleEditorDidMount,
	    _isControlledMode: true
	  }, props));
	};

	ControlledEditor.propTypes = {
	  value: _propTypes.default.string,
	  editorDidMount: _propTypes.default.func,
	  onChange: _propTypes.default.func
	};
	ControlledEditor.defaultProps = {
	  editorDidMount: utils.noop,
	  onChange: utils.noop
	};
	var _default = ControlledEditor;
	exports.default = _default;
	});

	unwrapExports(ControlledEditor_1);

	var ControlledEditor = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;



	var _ControlledEditor = interopRequireDefault(ControlledEditor_1);

	var _default = (0, react.memo)(_ControlledEditor.default);

	exports.default = _default;
	});

	unwrapExports(ControlledEditor);

	var lib = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "DiffEditor", {
	  enumerable: true,
	  get: function get() {
	    return _DiffEditor.default;
	  }
	});
	Object.defineProperty(exports, "ControlledEditor", {
	  enumerable: true,
	  get: function get() {
	    return _ControlledEditor.default;
	  }
	});
	Object.defineProperty(exports, "monaco", {
	  enumerable: true,
	  get: function get() {
	    return utils.monaco;
	  }
	});
	exports.default = void 0;

	var _Editor = interopRequireDefault(Editor);

	var _DiffEditor = interopRequireDefault(DiffEditor);

	var _ControlledEditor = interopRequireDefault(ControlledEditor);



	var _default = _Editor.default;
	exports.default = _default;
	});

	var Monaco = unwrapExports(lib);
	var lib_1 = lib.monaco;

	var marked = createCommonjsModule(function (module, exports) {
	/**
	 * marked - a markdown parser
	 * Copyright (c) 2011-2020, Christopher Jeffrey. (MIT Licensed)
	 * https://github.com/markedjs/marked
	 */

	/**
	 * DO NOT EDIT THIS FILE
	 * The code in this file is generated from files in ./src/
	 */

	(function (global, factory) {
	   module.exports = factory() ;
	}(this, (function () {
	  function _defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }

	  function _createClass(Constructor, protoProps, staticProps) {
	    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) _defineProperties(Constructor, staticProps);
	    return Constructor;
	  }

	  function _unsupportedIterableToArray(o, minLen) {
	    if (!o) return;
	    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
	    var n = Object.prototype.toString.call(o).slice(8, -1);
	    if (n === "Object" && o.constructor) n = o.constructor.name;
	    if (n === "Map" || n === "Set") return Array.from(o);
	    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
	  }

	  function _arrayLikeToArray(arr, len) {
	    if (len == null || len > arr.length) len = arr.length;

	    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

	    return arr2;
	  }

	  function _createForOfIteratorHelperLoose(o, allowArrayLike) {
	    var it;

	    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
	      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
	        if (it) o = it;
	        var i = 0;
	        return function () {
	          if (i >= o.length) return {
	            done: true
	          };
	          return {
	            done: false,
	            value: o[i++]
	          };
	        };
	      }

	      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	    }

	    it = o[Symbol.iterator]();
	    return it.next.bind(it);
	  }

	  function createCommonjsModule(fn, module) {
	  	return module = { exports: {} }, fn(module, module.exports), module.exports;
	  }

	  var defaults = createCommonjsModule(function (module) {
	    function getDefaults() {
	      return {
	        baseUrl: null,
	        breaks: false,
	        gfm: true,
	        headerIds: true,
	        headerPrefix: '',
	        highlight: null,
	        langPrefix: 'language-',
	        mangle: true,
	        pedantic: false,
	        renderer: null,
	        sanitize: false,
	        sanitizer: null,
	        silent: false,
	        smartLists: false,
	        smartypants: false,
	        tokenizer: null,
	        walkTokens: null,
	        xhtml: false
	      };
	    }

	    function changeDefaults(newDefaults) {
	      module.exports.defaults = newDefaults;
	    }

	    module.exports = {
	      defaults: getDefaults(),
	      getDefaults: getDefaults,
	      changeDefaults: changeDefaults
	    };
	  });
	  var defaults_1 = defaults.defaults;
	  var defaults_2 = defaults.getDefaults;
	  var defaults_3 = defaults.changeDefaults;

	  /**
	   * Helpers
	   */
	  var escapeTest = /[&<>"']/;
	  var escapeReplace = /[&<>"']/g;
	  var escapeTestNoEncode = /[<>"']|&(?!#?\w+;)/;
	  var escapeReplaceNoEncode = /[<>"']|&(?!#?\w+;)/g;
	  var escapeReplacements = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;'
	  };

	  var getEscapeReplacement = function getEscapeReplacement(ch) {
	    return escapeReplacements[ch];
	  };

	  function escape(html, encode) {
	    if (encode) {
	      if (escapeTest.test(html)) {
	        return html.replace(escapeReplace, getEscapeReplacement);
	      }
	    } else {
	      if (escapeTestNoEncode.test(html)) {
	        return html.replace(escapeReplaceNoEncode, getEscapeReplacement);
	      }
	    }

	    return html;
	  }

	  var unescapeTest = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;

	  function unescape(html) {
	    // explicitly match decimal, hex, and named HTML entities
	    return html.replace(unescapeTest, function (_, n) {
	      n = n.toLowerCase();
	      if (n === 'colon') return ':';

	      if (n.charAt(0) === '#') {
	        return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));
	      }

	      return '';
	    });
	  }

	  var caret = /(^|[^\[])\^/g;

	  function edit(regex, opt) {
	    regex = regex.source || regex;
	    opt = opt || '';
	    var obj = {
	      replace: function replace(name, val) {
	        val = val.source || val;
	        val = val.replace(caret, '$1');
	        regex = regex.replace(name, val);
	        return obj;
	      },
	      getRegex: function getRegex() {
	        return new RegExp(regex, opt);
	      }
	    };
	    return obj;
	  }

	  var nonWordAndColonTest = /[^\w:]/g;
	  var originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;

	  function cleanUrl(sanitize, base, href) {
	    if (sanitize) {
	      var prot;

	      try {
	        prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, '').toLowerCase();
	      } catch (e) {
	        return null;
	      }

	      if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {
	        return null;
	      }
	    }

	    if (base && !originIndependentUrl.test(href)) {
	      href = resolveUrl(base, href);
	    }

	    try {
	      href = encodeURI(href).replace(/%25/g, '%');
	    } catch (e) {
	      return null;
	    }

	    return href;
	  }

	  var baseUrls = {};
	  var justDomain = /^[^:]+:\/*[^/]*$/;
	  var protocol = /^([^:]+:)[\s\S]*$/;
	  var domain = /^([^:]+:\/*[^/]*)[\s\S]*$/;

	  function resolveUrl(base, href) {
	    if (!baseUrls[' ' + base]) {
	      // we can ignore everything in base after the last slash of its path component,
	      // but we might need to add _that_
	      // https://tools.ietf.org/html/rfc3986#section-3
	      if (justDomain.test(base)) {
	        baseUrls[' ' + base] = base + '/';
	      } else {
	        baseUrls[' ' + base] = rtrim(base, '/', true);
	      }
	    }

	    base = baseUrls[' ' + base];
	    var relativeBase = base.indexOf(':') === -1;

	    if (href.substring(0, 2) === '//') {
	      if (relativeBase) {
	        return href;
	      }

	      return base.replace(protocol, '$1') + href;
	    } else if (href.charAt(0) === '/') {
	      if (relativeBase) {
	        return href;
	      }

	      return base.replace(domain, '$1') + href;
	    } else {
	      return base + href;
	    }
	  }

	  var noopTest = {
	    exec: function noopTest() {}
	  };

	  function merge(obj) {
	    var i = 1,
	        target,
	        key;

	    for (; i < arguments.length; i++) {
	      target = arguments[i];

	      for (key in target) {
	        if (Object.prototype.hasOwnProperty.call(target, key)) {
	          obj[key] = target[key];
	        }
	      }
	    }

	    return obj;
	  }

	  function splitCells(tableRow, count) {
	    // ensure that every cell-delimiting pipe has a space
	    // before it to distinguish it from an escaped pipe
	    var row = tableRow.replace(/\|/g, function (match, offset, str) {
	      var escaped = false,
	          curr = offset;

	      while (--curr >= 0 && str[curr] === '\\') {
	        escaped = !escaped;
	      }

	      if (escaped) {
	        // odd number of slashes means | is escaped
	        // so we leave it alone
	        return '|';
	      } else {
	        // add space before unescaped |
	        return ' |';
	      }
	    }),
	        cells = row.split(/ \|/);
	    var i = 0;

	    if (cells.length > count) {
	      cells.splice(count);
	    } else {
	      while (cells.length < count) {
	        cells.push('');
	      }
	    }

	    for (; i < cells.length; i++) {
	      // leading or trailing whitespace is ignored per the gfm spec
	      cells[i] = cells[i].trim().replace(/\\\|/g, '|');
	    }

	    return cells;
	  } // Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').
	  // /c*$/ is vulnerable to REDOS.
	  // invert: Remove suffix of non-c chars instead. Default falsey.


	  function rtrim(str, c, invert) {
	    var l = str.length;

	    if (l === 0) {
	      return '';
	    } // Length of suffix matching the invert condition.


	    var suffLen = 0; // Step left until we fail to match the invert condition.

	    while (suffLen < l) {
	      var currChar = str.charAt(l - suffLen - 1);

	      if (currChar === c && !invert) {
	        suffLen++;
	      } else if (currChar !== c && invert) {
	        suffLen++;
	      } else {
	        break;
	      }
	    }

	    return str.substr(0, l - suffLen);
	  }

	  function findClosingBracket(str, b) {
	    if (str.indexOf(b[1]) === -1) {
	      return -1;
	    }

	    var l = str.length;
	    var level = 0,
	        i = 0;

	    for (; i < l; i++) {
	      if (str[i] === '\\') {
	        i++;
	      } else if (str[i] === b[0]) {
	        level++;
	      } else if (str[i] === b[1]) {
	        level--;

	        if (level < 0) {
	          return i;
	        }
	      }
	    }

	    return -1;
	  }

	  function checkSanitizeDeprecation(opt) {
	    if (opt && opt.sanitize && !opt.silent) {
	      console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');
	    }
	  }

	  var helpers = {
	    escape: escape,
	    unescape: unescape,
	    edit: edit,
	    cleanUrl: cleanUrl,
	    resolveUrl: resolveUrl,
	    noopTest: noopTest,
	    merge: merge,
	    splitCells: splitCells,
	    rtrim: rtrim,
	    findClosingBracket: findClosingBracket,
	    checkSanitizeDeprecation: checkSanitizeDeprecation
	  };

	  var defaults$1 = defaults.defaults;
	  var rtrim$1 = helpers.rtrim,
	      splitCells$1 = helpers.splitCells,
	      _escape = helpers.escape,
	      findClosingBracket$1 = helpers.findClosingBracket;

	  function outputLink(cap, link, raw) {
	    var href = link.href;
	    var title = link.title ? _escape(link.title) : null;
	    var text = cap[1].replace(/\\([\[\]])/g, '$1');

	    if (cap[0].charAt(0) !== '!') {
	      return {
	        type: 'link',
	        raw: raw,
	        href: href,
	        title: title,
	        text: text
	      };
	    } else {
	      return {
	        type: 'image',
	        raw: raw,
	        href: href,
	        title: title,
	        text: _escape(text)
	      };
	    }
	  }

	  function indentCodeCompensation(raw, text) {
	    var matchIndentToCode = raw.match(/^(\s+)(?:```)/);

	    if (matchIndentToCode === null) {
	      return text;
	    }

	    var indentToCode = matchIndentToCode[1];
	    return text.split('\n').map(function (node) {
	      var matchIndentInNode = node.match(/^\s+/);

	      if (matchIndentInNode === null) {
	        return node;
	      }

	      var indentInNode = matchIndentInNode[0];

	      if (indentInNode.length >= indentToCode.length) {
	        return node.slice(indentToCode.length);
	      }

	      return node;
	    }).join('\n');
	  }
	  /**
	   * Tokenizer
	   */


	  var Tokenizer_1 = /*#__PURE__*/function () {
	    function Tokenizer(options) {
	      this.options = options || defaults$1;
	    }

	    var _proto = Tokenizer.prototype;

	    _proto.space = function space(src) {
	      var cap = this.rules.block.newline.exec(src);

	      if (cap) {
	        if (cap[0].length > 1) {
	          return {
	            type: 'space',
	            raw: cap[0]
	          };
	        }

	        return {
	          raw: '\n'
	        };
	      }
	    };

	    _proto.code = function code(src, tokens) {
	      var cap = this.rules.block.code.exec(src);

	      if (cap) {
	        var lastToken = tokens[tokens.length - 1]; // An indented code block cannot interrupt a paragraph.

	        if (lastToken && lastToken.type === 'paragraph') {
	          return {
	            raw: cap[0],
	            text: cap[0].trimRight()
	          };
	        }

	        var text = cap[0].replace(/^ {4}/gm, '');
	        return {
	          type: 'code',
	          raw: cap[0],
	          codeBlockStyle: 'indented',
	          text: !this.options.pedantic ? rtrim$1(text, '\n') : text
	        };
	      }
	    };

	    _proto.fences = function fences(src) {
	      var cap = this.rules.block.fences.exec(src);

	      if (cap) {
	        var raw = cap[0];
	        var text = indentCodeCompensation(raw, cap[3] || '');
	        return {
	          type: 'code',
	          raw: raw,
	          lang: cap[2] ? cap[2].trim() : cap[2],
	          text: text
	        };
	      }
	    };

	    _proto.heading = function heading(src) {
	      var cap = this.rules.block.heading.exec(src);

	      if (cap) {
	        return {
	          type: 'heading',
	          raw: cap[0],
	          depth: cap[1].length,
	          text: cap[2]
	        };
	      }
	    };

	    _proto.nptable = function nptable(src) {
	      var cap = this.rules.block.nptable.exec(src);

	      if (cap) {
	        var item = {
	          type: 'table',
	          header: splitCells$1(cap[1].replace(/^ *| *\| *$/g, '')),
	          align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
	          cells: cap[3] ? cap[3].replace(/\n$/, '').split('\n') : [],
	          raw: cap[0]
	        };

	        if (item.header.length === item.align.length) {
	          var l = item.align.length;
	          var i;

	          for (i = 0; i < l; i++) {
	            if (/^ *-+: *$/.test(item.align[i])) {
	              item.align[i] = 'right';
	            } else if (/^ *:-+: *$/.test(item.align[i])) {
	              item.align[i] = 'center';
	            } else if (/^ *:-+ *$/.test(item.align[i])) {
	              item.align[i] = 'left';
	            } else {
	              item.align[i] = null;
	            }
	          }

	          l = item.cells.length;

	          for (i = 0; i < l; i++) {
	            item.cells[i] = splitCells$1(item.cells[i], item.header.length);
	          }

	          return item;
	        }
	      }
	    };

	    _proto.hr = function hr(src) {
	      var cap = this.rules.block.hr.exec(src);

	      if (cap) {
	        return {
	          type: 'hr',
	          raw: cap[0]
	        };
	      }
	    };

	    _proto.blockquote = function blockquote(src) {
	      var cap = this.rules.block.blockquote.exec(src);

	      if (cap) {
	        var text = cap[0].replace(/^ *> ?/gm, '');
	        return {
	          type: 'blockquote',
	          raw: cap[0],
	          text: text
	        };
	      }
	    };

	    _proto.list = function list(src) {
	      var cap = this.rules.block.list.exec(src);

	      if (cap) {
	        var raw = cap[0];
	        var bull = cap[2];
	        var isordered = bull.length > 1;
	        var isparen = bull[bull.length - 1] === ')';
	        var list = {
	          type: 'list',
	          raw: raw,
	          ordered: isordered,
	          start: isordered ? +bull.slice(0, -1) : '',
	          loose: false,
	          items: []
	        }; // Get each top-level item.

	        var itemMatch = cap[0].match(this.rules.block.item);
	        var next = false,
	            item,
	            space,
	            b,
	            addBack,
	            loose,
	            istask,
	            ischecked;
	        var l = itemMatch.length;

	        for (var i = 0; i < l; i++) {
	          item = itemMatch[i];
	          raw = item; // Remove the list item's bullet
	          // so it is seen as the next token.

	          space = item.length;
	          item = item.replace(/^ *([*+-]|\d+[.)]) */, ''); // Outdent whatever the
	          // list item contains. Hacky.

	          if (~item.indexOf('\n ')) {
	            space -= item.length;
	            item = !this.options.pedantic ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '') : item.replace(/^ {1,4}/gm, '');
	          } // Determine whether the next list item belongs here.
	          // Backpedal if it does not belong in this list.


	          if (i !== l - 1) {
	            b = this.rules.block.bullet.exec(itemMatch[i + 1])[0];

	            if (isordered ? b.length === 1 || !isparen && b[b.length - 1] === ')' : b.length > 1 || this.options.smartLists && b !== bull) {
	              addBack = itemMatch.slice(i + 1).join('\n');
	              list.raw = list.raw.substring(0, list.raw.length - addBack.length);
	              i = l - 1;
	            }
	          } // Determine whether item is loose or not.
	          // Use: /(^|\n)(?! )[^\n]+\n\n(?!\s*$)/
	          // for discount behavior.


	          loose = next || /\n\n(?!\s*$)/.test(item);

	          if (i !== l - 1) {
	            next = item.charAt(item.length - 1) === '\n';
	            if (!loose) loose = next;
	          }

	          if (loose) {
	            list.loose = true;
	          } // Check for task list items


	          istask = /^\[[ xX]\] /.test(item);
	          ischecked = undefined;

	          if (istask) {
	            ischecked = item[1] !== ' ';
	            item = item.replace(/^\[[ xX]\] +/, '');
	          }

	          list.items.push({
	            type: 'list_item',
	            raw: raw,
	            task: istask,
	            checked: ischecked,
	            loose: loose,
	            text: item
	          });
	        }

	        return list;
	      }
	    };

	    _proto.html = function html(src) {
	      var cap = this.rules.block.html.exec(src);

	      if (cap) {
	        return {
	          type: this.options.sanitize ? 'paragraph' : 'html',
	          raw: cap[0],
	          pre: !this.options.sanitizer && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),
	          text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0]
	        };
	      }
	    };

	    _proto.def = function def(src) {
	      var cap = this.rules.block.def.exec(src);

	      if (cap) {
	        if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);
	        var tag = cap[1].toLowerCase().replace(/\s+/g, ' ');
	        return {
	          tag: tag,
	          raw: cap[0],
	          href: cap[2],
	          title: cap[3]
	        };
	      }
	    };

	    _proto.table = function table(src) {
	      var cap = this.rules.block.table.exec(src);

	      if (cap) {
	        var item = {
	          type: 'table',
	          header: splitCells$1(cap[1].replace(/^ *| *\| *$/g, '')),
	          align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
	          cells: cap[3] ? cap[3].replace(/\n$/, '').split('\n') : []
	        };

	        if (item.header.length === item.align.length) {
	          item.raw = cap[0];
	          var l = item.align.length;
	          var i;

	          for (i = 0; i < l; i++) {
	            if (/^ *-+: *$/.test(item.align[i])) {
	              item.align[i] = 'right';
	            } else if (/^ *:-+: *$/.test(item.align[i])) {
	              item.align[i] = 'center';
	            } else if (/^ *:-+ *$/.test(item.align[i])) {
	              item.align[i] = 'left';
	            } else {
	              item.align[i] = null;
	            }
	          }

	          l = item.cells.length;

	          for (i = 0; i < l; i++) {
	            item.cells[i] = splitCells$1(item.cells[i].replace(/^ *\| *| *\| *$/g, ''), item.header.length);
	          }

	          return item;
	        }
	      }
	    };

	    _proto.lheading = function lheading(src) {
	      var cap = this.rules.block.lheading.exec(src);

	      if (cap) {
	        return {
	          type: 'heading',
	          raw: cap[0],
	          depth: cap[2].charAt(0) === '=' ? 1 : 2,
	          text: cap[1]
	        };
	      }
	    };

	    _proto.paragraph = function paragraph(src) {
	      var cap = this.rules.block.paragraph.exec(src);

	      if (cap) {
	        return {
	          type: 'paragraph',
	          raw: cap[0],
	          text: cap[1].charAt(cap[1].length - 1) === '\n' ? cap[1].slice(0, -1) : cap[1]
	        };
	      }
	    };

	    _proto.text = function text(src, tokens) {
	      var cap = this.rules.block.text.exec(src);

	      if (cap) {
	        var lastToken = tokens[tokens.length - 1];

	        if (lastToken && lastToken.type === 'text') {
	          return {
	            raw: cap[0],
	            text: cap[0]
	          };
	        }

	        return {
	          type: 'text',
	          raw: cap[0],
	          text: cap[0]
	        };
	      }
	    };

	    _proto.escape = function escape(src) {
	      var cap = this.rules.inline.escape.exec(src);

	      if (cap) {
	        return {
	          type: 'escape',
	          raw: cap[0],
	          text: _escape(cap[1])
	        };
	      }
	    };

	    _proto.tag = function tag(src, inLink, inRawBlock) {
	      var cap = this.rules.inline.tag.exec(src);

	      if (cap) {
	        if (!inLink && /^<a /i.test(cap[0])) {
	          inLink = true;
	        } else if (inLink && /^<\/a>/i.test(cap[0])) {
	          inLink = false;
	        }

	        if (!inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
	          inRawBlock = true;
	        } else if (inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
	          inRawBlock = false;
	        }

	        return {
	          type: this.options.sanitize ? 'text' : 'html',
	          raw: cap[0],
	          inLink: inLink,
	          inRawBlock: inRawBlock,
	          text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0]
	        };
	      }
	    };

	    _proto.link = function link(src) {
	      var cap = this.rules.inline.link.exec(src);

	      if (cap) {
	        var lastParenIndex = findClosingBracket$1(cap[2], '()');

	        if (lastParenIndex > -1) {
	          var start = cap[0].indexOf('!') === 0 ? 5 : 4;
	          var linkLen = start + cap[1].length + lastParenIndex;
	          cap[2] = cap[2].substring(0, lastParenIndex);
	          cap[0] = cap[0].substring(0, linkLen).trim();
	          cap[3] = '';
	        }

	        var href = cap[2];
	        var title = '';

	        if (this.options.pedantic) {
	          var link = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);

	          if (link) {
	            href = link[1];
	            title = link[3];
	          } else {
	            title = '';
	          }
	        } else {
	          title = cap[3] ? cap[3].slice(1, -1) : '';
	        }

	        href = href.trim().replace(/^<([\s\S]*)>$/, '$1');
	        var token = outputLink(cap, {
	          href: href ? href.replace(this.rules.inline._escapes, '$1') : href,
	          title: title ? title.replace(this.rules.inline._escapes, '$1') : title
	        }, cap[0]);
	        return token;
	      }
	    };

	    _proto.reflink = function reflink(src, links) {
	      var cap;

	      if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {
	        var link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
	        link = links[link.toLowerCase()];

	        if (!link || !link.href) {
	          var text = cap[0].charAt(0);
	          return {
	            type: 'text',
	            raw: text,
	            text: text
	          };
	        }

	        var token = outputLink(cap, link, cap[0]);
	        return token;
	      }
	    };

	    _proto.strong = function strong(src, maskedSrc, prevChar) {
	      if (prevChar === void 0) {
	        prevChar = '';
	      }

	      var match = this.rules.inline.strong.start.exec(src);

	      if (match && (!match[1] || match[1] && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar)))) {
	        maskedSrc = maskedSrc.slice(-1 * src.length);
	        var endReg = match[0] === '**' ? this.rules.inline.strong.endAst : this.rules.inline.strong.endUnd;
	        endReg.lastIndex = 0;
	        var cap;

	        while ((match = endReg.exec(maskedSrc)) != null) {
	          cap = this.rules.inline.strong.middle.exec(maskedSrc.slice(0, match.index + 3));

	          if (cap) {
	            return {
	              type: 'strong',
	              raw: src.slice(0, cap[0].length),
	              text: src.slice(2, cap[0].length - 2)
	            };
	          }
	        }
	      }
	    };

	    _proto.em = function em(src, maskedSrc, prevChar) {
	      if (prevChar === void 0) {
	        prevChar = '';
	      }

	      var match = this.rules.inline.em.start.exec(src);

	      if (match && (!match[1] || match[1] && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar)))) {
	        maskedSrc = maskedSrc.slice(-1 * src.length);
	        var endReg = match[0] === '*' ? this.rules.inline.em.endAst : this.rules.inline.em.endUnd;
	        endReg.lastIndex = 0;
	        var cap;

	        while ((match = endReg.exec(maskedSrc)) != null) {
	          cap = this.rules.inline.em.middle.exec(maskedSrc.slice(0, match.index + 2));

	          if (cap) {
	            return {
	              type: 'em',
	              raw: src.slice(0, cap[0].length),
	              text: src.slice(1, cap[0].length - 1)
	            };
	          }
	        }
	      }
	    };

	    _proto.codespan = function codespan(src) {
	      var cap = this.rules.inline.code.exec(src);

	      if (cap) {
	        var text = cap[2].replace(/\n/g, ' ');
	        var hasNonSpaceChars = /[^ ]/.test(text);
	        var hasSpaceCharsOnBothEnds = text.startsWith(' ') && text.endsWith(' ');

	        if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {
	          text = text.substring(1, text.length - 1);
	        }

	        text = _escape(text, true);
	        return {
	          type: 'codespan',
	          raw: cap[0],
	          text: text
	        };
	      }
	    };

	    _proto.br = function br(src) {
	      var cap = this.rules.inline.br.exec(src);

	      if (cap) {
	        return {
	          type: 'br',
	          raw: cap[0]
	        };
	      }
	    };

	    _proto.del = function del(src) {
	      var cap = this.rules.inline.del.exec(src);

	      if (cap) {
	        return {
	          type: 'del',
	          raw: cap[0],
	          text: cap[1]
	        };
	      }
	    };

	    _proto.autolink = function autolink(src, mangle) {
	      var cap = this.rules.inline.autolink.exec(src);

	      if (cap) {
	        var text, href;

	        if (cap[2] === '@') {
	          text = _escape(this.options.mangle ? mangle(cap[1]) : cap[1]);
	          href = 'mailto:' + text;
	        } else {
	          text = _escape(cap[1]);
	          href = text;
	        }

	        return {
	          type: 'link',
	          raw: cap[0],
	          text: text,
	          href: href,
	          tokens: [{
	            type: 'text',
	            raw: text,
	            text: text
	          }]
	        };
	      }
	    };

	    _proto.url = function url(src, mangle) {
	      var cap;

	      if (cap = this.rules.inline.url.exec(src)) {
	        var text, href;

	        if (cap[2] === '@') {
	          text = _escape(this.options.mangle ? mangle(cap[0]) : cap[0]);
	          href = 'mailto:' + text;
	        } else {
	          // do extended autolink path validation
	          var prevCapZero;

	          do {
	            prevCapZero = cap[0];
	            cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];
	          } while (prevCapZero !== cap[0]);

	          text = _escape(cap[0]);

	          if (cap[1] === 'www.') {
	            href = 'http://' + text;
	          } else {
	            href = text;
	          }
	        }

	        return {
	          type: 'link',
	          raw: cap[0],
	          text: text,
	          href: href,
	          tokens: [{
	            type: 'text',
	            raw: text,
	            text: text
	          }]
	        };
	      }
	    };

	    _proto.inlineText = function inlineText(src, inRawBlock, smartypants) {
	      var cap = this.rules.inline.text.exec(src);

	      if (cap) {
	        var text;

	        if (inRawBlock) {
	          text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0];
	        } else {
	          text = _escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);
	        }

	        return {
	          type: 'text',
	          raw: cap[0],
	          text: text
	        };
	      }
	    };

	    return Tokenizer;
	  }();

	  var noopTest$1 = helpers.noopTest,
	      edit$1 = helpers.edit,
	      merge$1 = helpers.merge;
	  /**
	   * Block-Level Grammar
	   */

	  var block = {
	    newline: /^\n+/,
	    code: /^( {4}[^\n]+\n*)+/,
	    fences: /^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?:\n+|$)|$)/,
	    hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,
	    heading: /^ {0,3}(#{1,6}) +([^\n]*?)(?: +#+)? *(?:\n+|$)/,
	    blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
	    list: /^( {0,3})(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,
	    html: '^ {0,3}(?:' // optional indentation
	    + '<(script|pre|style)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)' // (1)
	    + '|comment[^\\n]*(\\n+|$)' // (2)
	    + '|<\\?[\\s\\S]*?\\?>\\n*' // (3)
	    + '|<![A-Z][\\s\\S]*?>\\n*' // (4)
	    + '|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\n*' // (5)
	    + '|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:\\n{2,}|$)' // (6)
	    + '|<(?!script|pre|style)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$)' // (7) open tag
	    + '|</(?!script|pre|style)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$)' // (7) closing tag
	    + ')',
	    def: /^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/,
	    nptable: noopTest$1,
	    table: noopTest$1,
	    lheading: /^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,
	    // regex template, placeholders will be replaced according to different paragraph
	    // interruption rules of commonmark and the original markdown spec:
	    _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html)[^\n]+)*)/,
	    text: /^[^\n]+/
	  };
	  block._label = /(?!\s*\])(?:\\[\[\]]|[^\[\]])+/;
	  block._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
	  block.def = edit$1(block.def).replace('label', block._label).replace('title', block._title).getRegex();
	  block.bullet = /(?:[*+-]|\d{1,9}[.)])/;
	  block.item = /^( *)(bull) ?[^\n]*(?:\n(?!\1bull ?)[^\n]*)*/;
	  block.item = edit$1(block.item, 'gm').replace(/bull/g, block.bullet).getRegex();
	  block.list = edit$1(block.list).replace(/bull/g, block.bullet).replace('hr', '\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))').replace('def', '\\n+(?=' + block.def.source + ')').getRegex();
	  block._tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr' + '|track|ul';
	  block._comment = /<!--(?!-?>)[\s\S]*?-->/;
	  block.html = edit$1(block.html, 'i').replace('comment', block._comment).replace('tag', block._tag).replace('attribute', / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
	  block.paragraph = edit$1(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs
	  .replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
	  .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks
	  .getRegex();
	  block.blockquote = edit$1(block.blockquote).replace('paragraph', block.paragraph).getRegex();
	  /**
	   * Normal Block Grammar
	   */

	  block.normal = merge$1({}, block);
	  /**
	   * GFM Block Grammar
	   */

	  block.gfm = merge$1({}, block.normal, {
	    nptable: '^ *([^|\\n ].*\\|.*)\\n' // Header
	    + ' *([-:]+ *\\|[-| :]*)' // Align
	    + '(?:\\n((?:(?!\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)',
	    // Cells
	    table: '^ *\\|(.+)\\n' // Header
	    + ' *\\|?( *[-:]+[-| :]*)' // Align
	    + '(?:\\n *((?:(?!\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)' // Cells

	  });
	  block.gfm.nptable = edit$1(block.gfm.nptable).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
	  .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|!--)').replace('tag', block._tag) // tables can be interrupted by type (6) html blocks
	  .getRegex();
	  block.gfm.table = edit$1(block.gfm.table).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
	  .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|!--)').replace('tag', block._tag) // tables can be interrupted by type (6) html blocks
	  .getRegex();
	  /**
	   * Pedantic grammar (original John Gruber's loose markdown specification)
	   */

	  block.pedantic = merge$1({}, block.normal, {
	    html: edit$1('^ *(?:comment *(?:\\n|\\s*$)' + '|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)' // closed tag
	    + '|<tag(?:"[^"]*"|\'[^\']*\'|\\s[^\'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))').replace('comment', block._comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\b)\\w+(?!:|[^\\w\\s@]*@)\\b').getRegex(),
	    def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
	    heading: /^ *(#{1,6}) *([^\n]+?) *(?:#+ *)?(?:\n+|$)/,
	    fences: noopTest$1,
	    // fences not supported
	    paragraph: edit$1(block.normal._paragraph).replace('hr', block.hr).replace('heading', ' *#{1,6} *[^\n]').replace('lheading', block.lheading).replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').getRegex()
	  });
	  /**
	   * Inline-Level Grammar
	   */

	  var inline = {
	    escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
	    autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
	    url: noopTest$1,
	    tag: '^comment' + '|^</[a-zA-Z][\\w:-]*\\s*>' // self-closing tag
	    + '|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>' // open tag
	    + '|^<\\?[\\s\\S]*?\\?>' // processing instruction, e.g. <?php ?>
	    + '|^<![a-zA-Z]+\\s[\\s\\S]*?>' // declaration, e.g. <!DOCTYPE html>
	    + '|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>',
	    // CDATA section
	    link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
	    reflink: /^!?\[(label)\]\[(?!\s*\])((?:\\[\[\]]?|[^\[\]\\])+)\]/,
	    nolink: /^!?\[(?!\s*\])((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\](?:\[\])?/,
	    reflinkSearch: 'reflink|nolink(?!\\()',
	    strong: {
	      start: /^(?:(\*\*(?=[*punctuation]))|\*\*)(?![\s])|__/,
	      // (1) returns if starts w/ punctuation
	      middle: /^\*\*(?:(?:(?!overlapSkip)(?:[^*]|\\\*)|overlapSkip)|\*(?:(?!overlapSkip)(?:[^*]|\\\*)|overlapSkip)*?\*)+?\*\*$|^__(?![\s])((?:(?:(?!overlapSkip)(?:[^_]|\\_)|overlapSkip)|_(?:(?!overlapSkip)(?:[^_]|\\_)|overlapSkip)*?_)+?)__$/,
	      endAst: /[^punctuation\s]\*\*(?!\*)|[punctuation]\*\*(?!\*)(?:(?=[punctuation\s]|$))/,
	      // last char can't be punct, or final * must also be followed by punct (or endline)
	      endUnd: /[^\s]__(?!_)(?:(?=[punctuation\s])|$)/ // last char can't be a space, and final _ must preceed punct or \s (or endline)

	    },
	    em: {
	      start: /^(?:(\*(?=[punctuation]))|\*)(?![*\s])|_/,
	      // (1) returns if starts w/ punctuation
	      middle: /^\*(?:(?:(?!overlapSkip)(?:[^*]|\\\*)|overlapSkip)|\*(?:(?!overlapSkip)(?:[^*]|\\\*)|overlapSkip)*?\*)+?\*$|^_(?![_\s])(?:(?:(?!overlapSkip)(?:[^_]|\\_)|overlapSkip)|_(?:(?!overlapSkip)(?:[^_]|\\_)|overlapSkip)*?_)+?_$/,
	      endAst: /[^punctuation\s]\*(?!\*)|[punctuation]\*(?!\*)(?:(?=[punctuation\s]|$))/,
	      // last char can't be punct, or final * must also be followed by punct (or endline)
	      endUnd: /[^\s]_(?!_)(?:(?=[punctuation\s])|$)/ // last char can't be a space, and final _ must preceed punct or \s (or endline)

	    },
	    code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
	    br: /^( {2,}|\\)\n(?!\s*$)/,
	    del: noopTest$1,
	    text: /^(`+|[^`])(?:[\s\S]*?(?:(?=[\\<!\[`*]|\b_|$)|[^ ](?= {2,}\n))|(?= {2,}\n))/,
	    punctuation: /^([\s*punctuation])/
	  }; // list of punctuation marks from common mark spec
	  // without * and _ to workaround cases with double emphasis

	  inline._punctuation = '!"#$%&\'()+\\-.,/:;<=>?@\\[\\]`^{|}~';
	  inline.punctuation = edit$1(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex(); // sequences em should skip over [title](link), `code`, <html>

	  inline._blockSkip = '\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>';
	  inline._overlapSkip = '__[^_]*?__|\\*\\*\\[^\\*\\]*?\\*\\*';
	  inline.em.start = edit$1(inline.em.start).replace(/punctuation/g, inline._punctuation).getRegex();
	  inline.em.middle = edit$1(inline.em.middle).replace(/punctuation/g, inline._punctuation).replace(/overlapSkip/g, inline._overlapSkip).getRegex();
	  inline.em.endAst = edit$1(inline.em.endAst, 'g').replace(/punctuation/g, inline._punctuation).getRegex();
	  inline.em.endUnd = edit$1(inline.em.endUnd, 'g').replace(/punctuation/g, inline._punctuation).getRegex();
	  inline.strong.start = edit$1(inline.strong.start).replace(/punctuation/g, inline._punctuation).getRegex();
	  inline.strong.middle = edit$1(inline.strong.middle).replace(/punctuation/g, inline._punctuation).replace(/blockSkip/g, inline._blockSkip).getRegex();
	  inline.strong.endAst = edit$1(inline.strong.endAst, 'g').replace(/punctuation/g, inline._punctuation).getRegex();
	  inline.strong.endUnd = edit$1(inline.strong.endUnd, 'g').replace(/punctuation/g, inline._punctuation).getRegex();
	  inline.blockSkip = edit$1(inline._blockSkip, 'g').getRegex();
	  inline.overlapSkip = edit$1(inline._overlapSkip, 'g').getRegex();
	  inline._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;
	  inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
	  inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
	  inline.autolink = edit$1(inline.autolink).replace('scheme', inline._scheme).replace('email', inline._email).getRegex();
	  inline._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;
	  inline.tag = edit$1(inline.tag).replace('comment', block._comment).replace('attribute', inline._attribute).getRegex();
	  inline._label = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
	  inline._href = /<(?:\\[<>]?|[^\s<>\\])*>|[^\s\x00-\x1f]*/;
	  inline._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;
	  inline.link = edit$1(inline.link).replace('label', inline._label).replace('href', inline._href).replace('title', inline._title).getRegex();
	  inline.reflink = edit$1(inline.reflink).replace('label', inline._label).getRegex();
	  inline.reflinkSearch = edit$1(inline.reflinkSearch, 'g').replace('reflink', inline.reflink).replace('nolink', inline.nolink).getRegex();
	  /**
	   * Normal Inline Grammar
	   */

	  inline.normal = merge$1({}, inline);
	  /**
	   * Pedantic Inline Grammar
	   */

	  inline.pedantic = merge$1({}, inline.normal, {
	    strong: {
	      start: /^__|\*\*/,
	      middle: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
	      endAst: /\*\*(?!\*)/g,
	      endUnd: /__(?!_)/g
	    },
	    em: {
	      start: /^_|\*/,
	      middle: /^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,
	      endAst: /\*(?!\*)/g,
	      endUnd: /_(?!_)/g
	    },
	    link: edit$1(/^!?\[(label)\]\((.*?)\)/).replace('label', inline._label).getRegex(),
	    reflink: edit$1(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace('label', inline._label).getRegex()
	  });
	  /**
	   * GFM Inline Grammar
	   */

	  inline.gfm = merge$1({}, inline.normal, {
	    escape: edit$1(inline.escape).replace('])', '~|])').getRegex(),
	    _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
	    url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
	    _backpedal: /(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,
	    del: /^~+(?=\S)([\s\S]*?\S)~+/,
	    text: /^(`+|[^`])(?:[\s\S]*?(?:(?=[\\<!\[`*~]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))|(?= {2,}\n|[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))/
	  });
	  inline.gfm.url = edit$1(inline.gfm.url, 'i').replace('email', inline.gfm._extended_email).getRegex();
	  /**
	   * GFM + Line Breaks Inline Grammar
	   */

	  inline.breaks = merge$1({}, inline.gfm, {
	    br: edit$1(inline.br).replace('{2,}', '*').getRegex(),
	    text: edit$1(inline.gfm.text).replace('\\b_', '\\b_| {2,}\\n').replace(/\{2,\}/g, '*').getRegex()
	  });
	  var rules = {
	    block: block,
	    inline: inline
	  };

	  var defaults$2 = defaults.defaults;
	  var block$1 = rules.block,
	      inline$1 = rules.inline;
	  /**
	   * smartypants text replacement
	   */

	  function smartypants(text) {
	    return text // em-dashes
	    .replace(/---/g, "\u2014") // en-dashes
	    .replace(/--/g, "\u2013") // opening singles
	    .replace(/(^|[-\u2014/(\[{"\s])'/g, "$1\u2018") // closing singles & apostrophes
	    .replace(/'/g, "\u2019") // opening doubles
	    .replace(/(^|[-\u2014/(\[{\u2018\s])"/g, "$1\u201C") // closing doubles
	    .replace(/"/g, "\u201D") // ellipses
	    .replace(/\.{3}/g, "\u2026");
	  }
	  /**
	   * mangle email addresses
	   */


	  function mangle(text) {
	    var out = '',
	        i,
	        ch;
	    var l = text.length;

	    for (i = 0; i < l; i++) {
	      ch = text.charCodeAt(i);

	      if (Math.random() > 0.5) {
	        ch = 'x' + ch.toString(16);
	      }

	      out += '&#' + ch + ';';
	    }

	    return out;
	  }
	  /**
	   * Block Lexer
	   */


	  var Lexer_1 = /*#__PURE__*/function () {
	    function Lexer(options) {
	      this.tokens = [];
	      this.tokens.links = Object.create(null);
	      this.options = options || defaults$2;
	      this.options.tokenizer = this.options.tokenizer || new Tokenizer_1();
	      this.tokenizer = this.options.tokenizer;
	      this.tokenizer.options = this.options;
	      var rules = {
	        block: block$1.normal,
	        inline: inline$1.normal
	      };

	      if (this.options.pedantic) {
	        rules.block = block$1.pedantic;
	        rules.inline = inline$1.pedantic;
	      } else if (this.options.gfm) {
	        rules.block = block$1.gfm;

	        if (this.options.breaks) {
	          rules.inline = inline$1.breaks;
	        } else {
	          rules.inline = inline$1.gfm;
	        }
	      }

	      this.tokenizer.rules = rules;
	    }
	    /**
	     * Expose Rules
	     */


	    /**
	     * Static Lex Method
	     */
	    Lexer.lex = function lex(src, options) {
	      var lexer = new Lexer(options);
	      return lexer.lex(src);
	    }
	    /**
	     * Preprocessing
	     */
	    ;

	    var _proto = Lexer.prototype;

	    _proto.lex = function lex(src) {
	      src = src.replace(/\r\n|\r/g, '\n').replace(/\t/g, '    ');
	      this.blockTokens(src, this.tokens, true);
	      this.inline(this.tokens);
	      return this.tokens;
	    }
	    /**
	     * Lexing
	     */
	    ;

	    _proto.blockTokens = function blockTokens(src, tokens, top) {
	      if (tokens === void 0) {
	        tokens = [];
	      }

	      if (top === void 0) {
	        top = true;
	      }

	      src = src.replace(/^ +$/gm, '');
	      var token, i, l, lastToken;

	      while (src) {
	        // newline
	        if (token = this.tokenizer.space(src)) {
	          src = src.substring(token.raw.length);

	          if (token.type) {
	            tokens.push(token);
	          }

	          continue;
	        } // code


	        if (token = this.tokenizer.code(src, tokens)) {
	          src = src.substring(token.raw.length);

	          if (token.type) {
	            tokens.push(token);
	          } else {
	            lastToken = tokens[tokens.length - 1];
	            lastToken.raw += '\n' + token.raw;
	            lastToken.text += '\n' + token.text;
	          }

	          continue;
	        } // fences


	        if (token = this.tokenizer.fences(src)) {
	          src = src.substring(token.raw.length);
	          tokens.push(token);
	          continue;
	        } // heading


	        if (token = this.tokenizer.heading(src)) {
	          src = src.substring(token.raw.length);
	          tokens.push(token);
	          continue;
	        } // table no leading pipe (gfm)


	        if (token = this.tokenizer.nptable(src)) {
	          src = src.substring(token.raw.length);
	          tokens.push(token);
	          continue;
	        } // hr


	        if (token = this.tokenizer.hr(src)) {
	          src = src.substring(token.raw.length);
	          tokens.push(token);
	          continue;
	        } // blockquote


	        if (token = this.tokenizer.blockquote(src)) {
	          src = src.substring(token.raw.length);
	          token.tokens = this.blockTokens(token.text, [], top);
	          tokens.push(token);
	          continue;
	        } // list


	        if (token = this.tokenizer.list(src)) {
	          src = src.substring(token.raw.length);
	          l = token.items.length;

	          for (i = 0; i < l; i++) {
	            token.items[i].tokens = this.blockTokens(token.items[i].text, [], false);
	          }

	          tokens.push(token);
	          continue;
	        } // html


	        if (token = this.tokenizer.html(src)) {
	          src = src.substring(token.raw.length);
	          tokens.push(token);
	          continue;
	        } // def


	        if (top && (token = this.tokenizer.def(src))) {
	          src = src.substring(token.raw.length);

	          if (!this.tokens.links[token.tag]) {
	            this.tokens.links[token.tag] = {
	              href: token.href,
	              title: token.title
	            };
	          }

	          continue;
	        } // table (gfm)


	        if (token = this.tokenizer.table(src)) {
	          src = src.substring(token.raw.length);
	          tokens.push(token);
	          continue;
	        } // lheading


	        if (token = this.tokenizer.lheading(src)) {
	          src = src.substring(token.raw.length);
	          tokens.push(token);
	          continue;
	        } // top-level paragraph


	        if (top && (token = this.tokenizer.paragraph(src))) {
	          src = src.substring(token.raw.length);
	          tokens.push(token);
	          continue;
	        } // text


	        if (token = this.tokenizer.text(src, tokens)) {
	          src = src.substring(token.raw.length);

	          if (token.type) {
	            tokens.push(token);
	          } else {
	            lastToken = tokens[tokens.length - 1];
	            lastToken.raw += '\n' + token.raw;
	            lastToken.text += '\n' + token.text;
	          }

	          continue;
	        }

	        if (src) {
	          var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);

	          if (this.options.silent) {
	            console.error(errMsg);
	            break;
	          } else {
	            throw new Error(errMsg);
	          }
	        }
	      }

	      return tokens;
	    };

	    _proto.inline = function inline(tokens) {
	      var i, j, k, l2, row, token;
	      var l = tokens.length;

	      for (i = 0; i < l; i++) {
	        token = tokens[i];

	        switch (token.type) {
	          case 'paragraph':
	          case 'text':
	          case 'heading':
	            {
	              token.tokens = [];
	              this.inlineTokens(token.text, token.tokens);
	              break;
	            }

	          case 'table':
	            {
	              token.tokens = {
	                header: [],
	                cells: []
	              }; // header

	              l2 = token.header.length;

	              for (j = 0; j < l2; j++) {
	                token.tokens.header[j] = [];
	                this.inlineTokens(token.header[j], token.tokens.header[j]);
	              } // cells


	              l2 = token.cells.length;

	              for (j = 0; j < l2; j++) {
	                row = token.cells[j];
	                token.tokens.cells[j] = [];

	                for (k = 0; k < row.length; k++) {
	                  token.tokens.cells[j][k] = [];
	                  this.inlineTokens(row[k], token.tokens.cells[j][k]);
	                }
	              }

	              break;
	            }

	          case 'blockquote':
	            {
	              this.inline(token.tokens);
	              break;
	            }

	          case 'list':
	            {
	              l2 = token.items.length;

	              for (j = 0; j < l2; j++) {
	                this.inline(token.items[j].tokens);
	              }

	              break;
	            }
	        }
	      }

	      return tokens;
	    }
	    /**
	     * Lexing/Compiling
	     */
	    ;

	    _proto.inlineTokens = function inlineTokens(src, tokens, inLink, inRawBlock, prevChar) {
	      if (tokens === void 0) {
	        tokens = [];
	      }

	      if (inLink === void 0) {
	        inLink = false;
	      }

	      if (inRawBlock === void 0) {
	        inRawBlock = false;
	      }

	      if (prevChar === void 0) {
	        prevChar = '';
	      }

	      var token; // String with links masked to avoid interference with em and strong

	      var maskedSrc = src;
	      var match; // Mask out reflinks

	      if (this.tokens.links) {
	        var links = Object.keys(this.tokens.links);

	        if (links.length > 0) {
	          while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {
	            if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {
	              maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
	            }
	          }
	        }
	      } // Mask out other blocks


	      while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {
	        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
	      }

	      while (src) {
	        // escape
	        if (token = this.tokenizer.escape(src)) {
	          src = src.substring(token.raw.length);
	          tokens.push(token);
	          continue;
	        } // tag


	        if (token = this.tokenizer.tag(src, inLink, inRawBlock)) {
	          src = src.substring(token.raw.length);
	          inLink = token.inLink;
	          inRawBlock = token.inRawBlock;
	          tokens.push(token);
	          continue;
	        } // link


	        if (token = this.tokenizer.link(src)) {
	          src = src.substring(token.raw.length);

	          if (token.type === 'link') {
	            token.tokens = this.inlineTokens(token.text, [], true, inRawBlock);
	          }

	          tokens.push(token);
	          continue;
	        } // reflink, nolink


	        if (token = this.tokenizer.reflink(src, this.tokens.links)) {
	          src = src.substring(token.raw.length);

	          if (token.type === 'link') {
	            token.tokens = this.inlineTokens(token.text, [], true, inRawBlock);
	          }

	          tokens.push(token);
	          continue;
	        } // strong


	        if (token = this.tokenizer.strong(src, maskedSrc, prevChar)) {
	          src = src.substring(token.raw.length);
	          token.tokens = this.inlineTokens(token.text, [], inLink, inRawBlock);
	          tokens.push(token);
	          continue;
	        } // em


	        if (token = this.tokenizer.em(src, maskedSrc, prevChar)) {
	          src = src.substring(token.raw.length);
	          token.tokens = this.inlineTokens(token.text, [], inLink, inRawBlock);
	          tokens.push(token);
	          continue;
	        } // code


	        if (token = this.tokenizer.codespan(src)) {
	          src = src.substring(token.raw.length);
	          tokens.push(token);
	          continue;
	        } // br


	        if (token = this.tokenizer.br(src)) {
	          src = src.substring(token.raw.length);
	          tokens.push(token);
	          continue;
	        } // del (gfm)


	        if (token = this.tokenizer.del(src)) {
	          src = src.substring(token.raw.length);
	          token.tokens = this.inlineTokens(token.text, [], inLink, inRawBlock);
	          tokens.push(token);
	          continue;
	        } // autolink


	        if (token = this.tokenizer.autolink(src, mangle)) {
	          src = src.substring(token.raw.length);
	          tokens.push(token);
	          continue;
	        } // url (gfm)


	        if (!inLink && (token = this.tokenizer.url(src, mangle))) {
	          src = src.substring(token.raw.length);
	          tokens.push(token);
	          continue;
	        } // text


	        if (token = this.tokenizer.inlineText(src, inRawBlock, smartypants)) {
	          src = src.substring(token.raw.length);
	          prevChar = token.raw.slice(-1);
	          tokens.push(token);
	          continue;
	        }

	        if (src) {
	          var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);

	          if (this.options.silent) {
	            console.error(errMsg);
	            break;
	          } else {
	            throw new Error(errMsg);
	          }
	        }
	      }

	      return tokens;
	    };

	    _createClass(Lexer, null, [{
	      key: "rules",
	      get: function get() {
	        return {
	          block: block$1,
	          inline: inline$1
	        };
	      }
	    }]);

	    return Lexer;
	  }();

	  var defaults$3 = defaults.defaults;
	  var cleanUrl$1 = helpers.cleanUrl,
	      escape$1 = helpers.escape;
	  /**
	   * Renderer
	   */

	  var Renderer_1 = /*#__PURE__*/function () {
	    function Renderer(options) {
	      this.options = options || defaults$3;
	    }

	    var _proto = Renderer.prototype;

	    _proto.code = function code(_code, infostring, escaped) {
	      var lang = (infostring || '').match(/\S*/)[0];

	      if (this.options.highlight) {
	        var out = this.options.highlight(_code, lang);

	        if (out != null && out !== _code) {
	          escaped = true;
	          _code = out;
	        }
	      }

	      if (!lang) {
	        return '<pre><code>' + (escaped ? _code : escape$1(_code, true)) + '</code></pre>\n';
	      }

	      return '<pre><code class="' + this.options.langPrefix + escape$1(lang, true) + '">' + (escaped ? _code : escape$1(_code, true)) + '</code></pre>\n';
	    };

	    _proto.blockquote = function blockquote(quote) {
	      return '<blockquote>\n' + quote + '</blockquote>\n';
	    };

	    _proto.html = function html(_html) {
	      return _html;
	    };

	    _proto.heading = function heading(text, level, raw, slugger) {
	      if (this.options.headerIds) {
	        return '<h' + level + ' id="' + this.options.headerPrefix + slugger.slug(raw) + '">' + text + '</h' + level + '>\n';
	      } // ignore IDs


	      return '<h' + level + '>' + text + '</h' + level + '>\n';
	    };

	    _proto.hr = function hr() {
	      return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
	    };

	    _proto.list = function list(body, ordered, start) {
	      var type = ordered ? 'ol' : 'ul',
	          startatt = ordered && start !== 1 ? ' start="' + start + '"' : '';
	      return '<' + type + startatt + '>\n' + body + '</' + type + '>\n';
	    };

	    _proto.listitem = function listitem(text) {
	      return '<li>' + text + '</li>\n';
	    };

	    _proto.checkbox = function checkbox(checked) {
	      return '<input ' + (checked ? 'checked="" ' : '') + 'disabled="" type="checkbox"' + (this.options.xhtml ? ' /' : '') + '> ';
	    };

	    _proto.paragraph = function paragraph(text) {
	      return '<p>' + text + '</p>\n';
	    };

	    _proto.table = function table(header, body) {
	      if (body) body = '<tbody>' + body + '</tbody>';
	      return '<table>\n' + '<thead>\n' + header + '</thead>\n' + body + '</table>\n';
	    };

	    _proto.tablerow = function tablerow(content) {
	      return '<tr>\n' + content + '</tr>\n';
	    };

	    _proto.tablecell = function tablecell(content, flags) {
	      var type = flags.header ? 'th' : 'td';
	      var tag = flags.align ? '<' + type + ' align="' + flags.align + '">' : '<' + type + '>';
	      return tag + content + '</' + type + '>\n';
	    } // span level renderer
	    ;

	    _proto.strong = function strong(text) {
	      return '<strong>' + text + '</strong>';
	    };

	    _proto.em = function em(text) {
	      return '<em>' + text + '</em>';
	    };

	    _proto.codespan = function codespan(text) {
	      return '<code>' + text + '</code>';
	    };

	    _proto.br = function br() {
	      return this.options.xhtml ? '<br/>' : '<br>';
	    };

	    _proto.del = function del(text) {
	      return '<del>' + text + '</del>';
	    };

	    _proto.link = function link(href, title, text) {
	      href = cleanUrl$1(this.options.sanitize, this.options.baseUrl, href);

	      if (href === null) {
	        return text;
	      }

	      var out = '<a href="' + escape$1(href) + '"';

	      if (title) {
	        out += ' title="' + title + '"';
	      }

	      out += '>' + text + '</a>';
	      return out;
	    };

	    _proto.image = function image(href, title, text) {
	      href = cleanUrl$1(this.options.sanitize, this.options.baseUrl, href);

	      if (href === null) {
	        return text;
	      }

	      var out = '<img src="' + href + '" alt="' + text + '"';

	      if (title) {
	        out += ' title="' + title + '"';
	      }

	      out += this.options.xhtml ? '/>' : '>';
	      return out;
	    };

	    _proto.text = function text(_text) {
	      return _text;
	    };

	    return Renderer;
	  }();

	  /**
	   * TextRenderer
	   * returns only the textual part of the token
	   */
	  var TextRenderer_1 = /*#__PURE__*/function () {
	    function TextRenderer() {}

	    var _proto = TextRenderer.prototype;

	    // no need for block level renderers
	    _proto.strong = function strong(text) {
	      return text;
	    };

	    _proto.em = function em(text) {
	      return text;
	    };

	    _proto.codespan = function codespan(text) {
	      return text;
	    };

	    _proto.del = function del(text) {
	      return text;
	    };

	    _proto.html = function html(text) {
	      return text;
	    };

	    _proto.text = function text(_text) {
	      return _text;
	    };

	    _proto.link = function link(href, title, text) {
	      return '' + text;
	    };

	    _proto.image = function image(href, title, text) {
	      return '' + text;
	    };

	    _proto.br = function br() {
	      return '';
	    };

	    return TextRenderer;
	  }();

	  /**
	   * Slugger generates header id
	   */
	  var Slugger_1 = /*#__PURE__*/function () {
	    function Slugger() {
	      this.seen = {};
	    }
	    /**
	     * Convert string to unique id
	     */


	    var _proto = Slugger.prototype;

	    _proto.slug = function slug(value) {
	      var slug = value.toLowerCase().trim() // remove html tags
	      .replace(/<[!\/a-z].*?>/ig, '') // remove unwanted chars
	      .replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g, '').replace(/\s/g, '-');

	      if (this.seen.hasOwnProperty(slug)) {
	        var originalSlug = slug;

	        do {
	          this.seen[originalSlug]++;
	          slug = originalSlug + '-' + this.seen[originalSlug];
	        } while (this.seen.hasOwnProperty(slug));
	      }

	      this.seen[slug] = 0;
	      return slug;
	    };

	    return Slugger;
	  }();

	  var defaults$4 = defaults.defaults;
	  var unescape$1 = helpers.unescape;
	  /**
	   * Parsing & Compiling
	   */

	  var Parser_1 = /*#__PURE__*/function () {
	    function Parser(options) {
	      this.options = options || defaults$4;
	      this.options.renderer = this.options.renderer || new Renderer_1();
	      this.renderer = this.options.renderer;
	      this.renderer.options = this.options;
	      this.textRenderer = new TextRenderer_1();
	      this.slugger = new Slugger_1();
	    }
	    /**
	     * Static Parse Method
	     */


	    Parser.parse = function parse(tokens, options) {
	      var parser = new Parser(options);
	      return parser.parse(tokens);
	    }
	    /**
	     * Parse Loop
	     */
	    ;

	    var _proto = Parser.prototype;

	    _proto.parse = function parse(tokens, top) {
	      if (top === void 0) {
	        top = true;
	      }

	      var out = '',
	          i,
	          j,
	          k,
	          l2,
	          l3,
	          row,
	          cell,
	          header,
	          body,
	          token,
	          ordered,
	          start,
	          loose,
	          itemBody,
	          item,
	          checked,
	          task,
	          checkbox;
	      var l = tokens.length;

	      for (i = 0; i < l; i++) {
	        token = tokens[i];

	        switch (token.type) {
	          case 'space':
	            {
	              continue;
	            }

	          case 'hr':
	            {
	              out += this.renderer.hr();
	              continue;
	            }

	          case 'heading':
	            {
	              out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape$1(this.parseInline(token.tokens, this.textRenderer)), this.slugger);
	              continue;
	            }

	          case 'code':
	            {
	              out += this.renderer.code(token.text, token.lang, token.escaped);
	              continue;
	            }

	          case 'table':
	            {
	              header = ''; // header

	              cell = '';
	              l2 = token.header.length;

	              for (j = 0; j < l2; j++) {
	                cell += this.renderer.tablecell(this.parseInline(token.tokens.header[j]), {
	                  header: true,
	                  align: token.align[j]
	                });
	              }

	              header += this.renderer.tablerow(cell);
	              body = '';
	              l2 = token.cells.length;

	              for (j = 0; j < l2; j++) {
	                row = token.tokens.cells[j];
	                cell = '';
	                l3 = row.length;

	                for (k = 0; k < l3; k++) {
	                  cell += this.renderer.tablecell(this.parseInline(row[k]), {
	                    header: false,
	                    align: token.align[k]
	                  });
	                }

	                body += this.renderer.tablerow(cell);
	              }

	              out += this.renderer.table(header, body);
	              continue;
	            }

	          case 'blockquote':
	            {
	              body = this.parse(token.tokens);
	              out += this.renderer.blockquote(body);
	              continue;
	            }

	          case 'list':
	            {
	              ordered = token.ordered;
	              start = token.start;
	              loose = token.loose;
	              l2 = token.items.length;
	              body = '';

	              for (j = 0; j < l2; j++) {
	                item = token.items[j];
	                checked = item.checked;
	                task = item.task;
	                itemBody = '';

	                if (item.task) {
	                  checkbox = this.renderer.checkbox(checked);

	                  if (loose) {
	                    if (item.tokens.length > 0 && item.tokens[0].type === 'text') {
	                      item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;

	                      if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {
	                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;
	                      }
	                    } else {
	                      item.tokens.unshift({
	                        type: 'text',
	                        text: checkbox
	                      });
	                    }
	                  } else {
	                    itemBody += checkbox;
	                  }
	                }

	                itemBody += this.parse(item.tokens, loose);
	                body += this.renderer.listitem(itemBody, task, checked);
	              }

	              out += this.renderer.list(body, ordered, start);
	              continue;
	            }

	          case 'html':
	            {
	              // TODO parse inline content if parameter markdown=1
	              out += this.renderer.html(token.text);
	              continue;
	            }

	          case 'paragraph':
	            {
	              out += this.renderer.paragraph(this.parseInline(token.tokens));
	              continue;
	            }

	          case 'text':
	            {
	              body = token.tokens ? this.parseInline(token.tokens) : token.text;

	              while (i + 1 < l && tokens[i + 1].type === 'text') {
	                token = tokens[++i];
	                body += '\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);
	              }

	              out += top ? this.renderer.paragraph(body) : body;
	              continue;
	            }

	          default:
	            {
	              var errMsg = 'Token with "' + token.type + '" type was not found.';

	              if (this.options.silent) {
	                console.error(errMsg);
	                return;
	              } else {
	                throw new Error(errMsg);
	              }
	            }
	        }
	      }

	      return out;
	    }
	    /**
	     * Parse Inline Tokens
	     */
	    ;

	    _proto.parseInline = function parseInline(tokens, renderer) {
	      renderer = renderer || this.renderer;
	      var out = '',
	          i,
	          token;
	      var l = tokens.length;

	      for (i = 0; i < l; i++) {
	        token = tokens[i];

	        switch (token.type) {
	          case 'escape':
	            {
	              out += renderer.text(token.text);
	              break;
	            }

	          case 'html':
	            {
	              out += renderer.html(token.text);
	              break;
	            }

	          case 'link':
	            {
	              out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));
	              break;
	            }

	          case 'image':
	            {
	              out += renderer.image(token.href, token.title, token.text);
	              break;
	            }

	          case 'strong':
	            {
	              out += renderer.strong(this.parseInline(token.tokens, renderer));
	              break;
	            }

	          case 'em':
	            {
	              out += renderer.em(this.parseInline(token.tokens, renderer));
	              break;
	            }

	          case 'codespan':
	            {
	              out += renderer.codespan(token.text);
	              break;
	            }

	          case 'br':
	            {
	              out += renderer.br();
	              break;
	            }

	          case 'del':
	            {
	              out += renderer.del(this.parseInline(token.tokens, renderer));
	              break;
	            }

	          case 'text':
	            {
	              out += renderer.text(token.text);
	              break;
	            }

	          default:
	            {
	              var errMsg = 'Token with "' + token.type + '" type was not found.';

	              if (this.options.silent) {
	                console.error(errMsg);
	                return;
	              } else {
	                throw new Error(errMsg);
	              }
	            }
	        }
	      }

	      return out;
	    };

	    return Parser;
	  }();

	  var merge$2 = helpers.merge,
	      checkSanitizeDeprecation$1 = helpers.checkSanitizeDeprecation,
	      escape$2 = helpers.escape;
	  var getDefaults = defaults.getDefaults,
	      changeDefaults = defaults.changeDefaults,
	      defaults$5 = defaults.defaults;
	  /**
	   * Marked
	   */

	  function marked(src, opt, callback) {
	    // throw error in case of non string input
	    if (typeof src === 'undefined' || src === null) {
	      throw new Error('marked(): input parameter is undefined or null');
	    }

	    if (typeof src !== 'string') {
	      throw new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');
	    }

	    if (typeof opt === 'function') {
	      callback = opt;
	      opt = null;
	    }

	    opt = merge$2({}, marked.defaults, opt || {});
	    checkSanitizeDeprecation$1(opt);

	    if (callback) {
	      var highlight = opt.highlight;
	      var tokens;

	      try {
	        tokens = Lexer_1.lex(src, opt);
	      } catch (e) {
	        return callback(e);
	      }

	      var done = function done(err) {
	        var out;

	        if (!err) {
	          try {
	            out = Parser_1.parse(tokens, opt);
	          } catch (e) {
	            err = e;
	          }
	        }

	        opt.highlight = highlight;
	        return err ? callback(err) : callback(null, out);
	      };

	      if (!highlight || highlight.length < 3) {
	        return done();
	      }

	      delete opt.highlight;
	      if (!tokens.length) return done();
	      var pending = 0;
	      marked.walkTokens(tokens, function (token) {
	        if (token.type === 'code') {
	          pending++;
	          setTimeout(function () {
	            highlight(token.text, token.lang, function (err, code) {
	              if (err) {
	                return done(err);
	              }

	              if (code != null && code !== token.text) {
	                token.text = code;
	                token.escaped = true;
	              }

	              pending--;

	              if (pending === 0) {
	                done();
	              }
	            });
	          }, 0);
	        }
	      });

	      if (pending === 0) {
	        done();
	      }

	      return;
	    }

	    try {
	      var _tokens = Lexer_1.lex(src, opt);

	      if (opt.walkTokens) {
	        marked.walkTokens(_tokens, opt.walkTokens);
	      }

	      return Parser_1.parse(_tokens, opt);
	    } catch (e) {
	      e.message += '\nPlease report this to https://github.com/markedjs/marked.';

	      if (opt.silent) {
	        return '<p>An error occurred:</p><pre>' + escape$2(e.message + '', true) + '</pre>';
	      }

	      throw e;
	    }
	  }
	  /**
	   * Options
	   */


	  marked.options = marked.setOptions = function (opt) {
	    merge$2(marked.defaults, opt);
	    changeDefaults(marked.defaults);
	    return marked;
	  };

	  marked.getDefaults = getDefaults;
	  marked.defaults = defaults$5;
	  /**
	   * Use Extension
	   */

	  marked.use = function (extension) {
	    var opts = merge$2({}, extension);

	    if (extension.renderer) {
	      (function () {
	        var renderer = marked.defaults.renderer || new Renderer_1();

	        var _loop = function _loop(prop) {
	          var prevRenderer = renderer[prop];

	          renderer[prop] = function () {
	            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	              args[_key] = arguments[_key];
	            }

	            var ret = extension.renderer[prop].apply(renderer, args);

	            if (ret === false) {
	              ret = prevRenderer.apply(renderer, args);
	            }

	            return ret;
	          };
	        };

	        for (var prop in extension.renderer) {
	          _loop(prop);
	        }

	        opts.renderer = renderer;
	      })();
	    }

	    if (extension.tokenizer) {
	      (function () {
	        var tokenizer = marked.defaults.tokenizer || new Tokenizer_1();

	        var _loop2 = function _loop2(prop) {
	          var prevTokenizer = tokenizer[prop];

	          tokenizer[prop] = function () {
	            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	              args[_key2] = arguments[_key2];
	            }

	            var ret = extension.tokenizer[prop].apply(tokenizer, args);

	            if (ret === false) {
	              ret = prevTokenizer.apply(tokenizer, args);
	            }

	            return ret;
	          };
	        };

	        for (var prop in extension.tokenizer) {
	          _loop2(prop);
	        }

	        opts.tokenizer = tokenizer;
	      })();
	    }

	    if (extension.walkTokens) {
	      var walkTokens = marked.defaults.walkTokens;

	      opts.walkTokens = function (token) {
	        extension.walkTokens(token);

	        if (walkTokens) {
	          walkTokens(token);
	        }
	      };
	    }

	    marked.setOptions(opts);
	  };
	  /**
	   * Run callback for every token
	   */


	  marked.walkTokens = function (tokens, callback) {
	    for (var _iterator = _createForOfIteratorHelperLoose(tokens), _step; !(_step = _iterator()).done;) {
	      var token = _step.value;
	      callback(token);

	      switch (token.type) {
	        case 'table':
	          {
	            for (var _iterator2 = _createForOfIteratorHelperLoose(token.tokens.header), _step2; !(_step2 = _iterator2()).done;) {
	              var cell = _step2.value;
	              marked.walkTokens(cell, callback);
	            }

	            for (var _iterator3 = _createForOfIteratorHelperLoose(token.tokens.cells), _step3; !(_step3 = _iterator3()).done;) {
	              var row = _step3.value;

	              for (var _iterator4 = _createForOfIteratorHelperLoose(row), _step4; !(_step4 = _iterator4()).done;) {
	                var _cell = _step4.value;
	                marked.walkTokens(_cell, callback);
	              }
	            }

	            break;
	          }

	        case 'list':
	          {
	            marked.walkTokens(token.items, callback);
	            break;
	          }

	        default:
	          {
	            if (token.tokens) {
	              marked.walkTokens(token.tokens, callback);
	            }
	          }
	      }
	    }
	  };
	  /**
	   * Expose
	   */


	  marked.Parser = Parser_1;
	  marked.parser = Parser_1.parse;
	  marked.Renderer = Renderer_1;
	  marked.TextRenderer = TextRenderer_1;
	  marked.Lexer = Lexer_1;
	  marked.lexer = Lexer_1.lex;
	  marked.Tokenizer = Tokenizer_1;
	  marked.Slugger = Slugger_1;
	  marked.parse = marked;
	  var marked_1 = marked;

	  return marked_1;

	})));
	});

	function parseMD(document) {
	    return marked.lexer(document);
	}

	async function injectScript(url) {
	    const theFuture = future();
	    const theScript = document.createElement("script");
	    theScript.src = url;
	    theScript.async = true;
	    theScript.type = "application/javascript";
	    theScript.addEventListener("load", theFuture.resolve);
	    theScript.addEventListener("error", (e) => theFuture.reject(e.error || e));
	    document.body.appendChild(theScript);
	    return theFuture;
	}
	async function injectCss(url) {
	    const theFuture = future();
	    const theStyle = document.createElement("link");
	    theStyle.href = url;
	    theStyle.rel = "stylesheet";
	    theStyle.addEventListener("load", theFuture.resolve);
	    theStyle.addEventListener("error", (e) => theFuture.reject(e.error || e));
	    document.body.appendChild(theStyle);
	    return theFuture;
	}
	function fallbackCopyTextToClipboard(text) {
	    var textArea = document.createElement("textarea");
	    textArea.value = text;
	    textArea.style.top = "0";
	    textArea.style.left = "0";
	    textArea.style.position = "fixed";
	    document.body.appendChild(textArea);
	    textArea.focus();
	    textArea.select();
	    try {
	        var successful = document.execCommand("copy");
	        var msg = successful ? "successful" : "unsuccessful";
	        console.log("Fallback: Copying text command was " + msg);
	    }
	    catch (err) {
	        console.error("Fallback: Oops, unable to copy", err);
	    }
	    document.body.removeChild(textArea);
	}
	async function copyTextToClipboard(text) {
	    if (!navigator.clipboard) {
	        return fallbackCopyTextToClipboard(text);
	    }
	    return navigator.clipboard.writeText(text).then(function () {
	        console.log("Async: Copying to clipboard was successful!");
	    }, function (err) {
	        console.error("Async: Could not copy text: ", err);
	    });
	}
	function generateStaticLinkFragment(content) {
	    return "/static?t=" + encodeURIComponent(content);
	}
	function generateStaticLink(content) {
	    return (document.location.protocol +
	        "//" +
	        document.location.host +
	        "#" +
	        generateStaticLinkFragment(content));
	}
	function download(filename, text, mime) {
	    var element = document.createElement("a");
	    element.setAttribute("href", URL.createObjectURL(new Blob([text], { type: mime })));
	    element.setAttribute("download", filename);
	    element.style.display = "none";
	    document.body.appendChild(element);
	    element.click();
	    document.body.removeChild(element);
	}

	var sizeMap = {
	  small: 16,
	  medium: 32,
	  large: 64
	};

	function getSvgProps(_ref) {
	  var ariaLabel = _ref['aria-label'],
	      className = _ref.className,
	      size = _ref.size,
	      verticalAlign = _ref.verticalAlign,
	      svgDataByHeight = _ref.svgDataByHeight;

	  var height = sizeMap[size] || size;
	  var naturalHeight = closestNaturalHeight(Object.keys(svgDataByHeight), height);
	  var naturalWidth = svgDataByHeight[naturalHeight].width;
	  var width = height * (naturalWidth / naturalHeight);
	  var path = svgDataByHeight[naturalHeight].path;

	  return {
	    'aria-hidden': ariaLabel ? 'false' : 'true',
	    'aria-label': ariaLabel,
	    role: 'img',
	    className: className,
	    viewBox: '0 0 ' + naturalWidth + ' ' + naturalHeight,
	    width: width,
	    height: height,
	    fill: 'currentColor',
	    style: {
	      display: 'inline-block',
	      userSelect: 'none',
	      verticalAlign: verticalAlign
	    },
	    dangerouslySetInnerHTML: { __html: path }
	  };
	}

	function closestNaturalHeight(naturalHeights, height) {
	  return naturalHeights.map(function (naturalHeight) {
	    return parseInt(naturalHeight, 10);
	  }).reduce(function (acc, naturalHeight) {
	    return naturalHeight <= height ? naturalHeight : acc;
	  }, naturalHeights[0]);
	}

	var _extends$1 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function AlertIcon(props) {
	  var svgDataByHeight = { "16": { "width": 16, "path": "<path fill-rule=\"evenodd\" d=\"M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z\"></path>" }, "24": { "width": 24, "path": "<path d=\"M13 17.5a1 1 0 11-2 0 1 1 0 012 0zm-.25-8.25a.75.75 0 00-1.5 0v4.5a.75.75 0 001.5 0v-4.5z\"></path><path fill-rule=\"evenodd\" d=\"M9.836 3.244c.963-1.665 3.365-1.665 4.328 0l8.967 15.504c.963 1.667-.24 3.752-2.165 3.752H3.034c-1.926 0-3.128-2.085-2.165-3.752L9.836 3.244zm3.03.751a1 1 0 00-1.732 0L2.168 19.499A1 1 0 003.034 21h17.932a1 1 0 00.866-1.5L12.866 3.994z\"></path>" } };
	  return react.createElement('svg', getSvgProps(_extends$1({}, props, { svgDataByHeight: svgDataByHeight })));
	}

	AlertIcon.defaultProps = {
	  className: 'octicon',
	  size: 16,
	  verticalAlign: 'text-bottom'
	};

	function DownloadIcon(props) {
	  var svgDataByHeight = { "16": { "width": 16, "path": "<path fill-rule=\"evenodd\" d=\"M7.47 10.78a.75.75 0 001.06 0l3.75-3.75a.75.75 0 00-1.06-1.06L8.75 8.44V1.75a.75.75 0 00-1.5 0v6.69L4.78 5.97a.75.75 0 00-1.06 1.06l3.75 3.75zM3.75 13a.75.75 0 000 1.5h8.5a.75.75 0 000-1.5h-8.5z\"></path>" }, "24": { "width": 24, "path": "<path d=\"M4.97 11.03a.75.75 0 111.06-1.06L11 14.94V2.75a.75.75 0 011.5 0v12.19l4.97-4.97a.75.75 0 111.06 1.06l-6.25 6.25a.75.75 0 01-1.06 0l-6.25-6.25zm-.22 9.47a.75.75 0 000 1.5h14.5a.75.75 0 000-1.5H4.75z\"></path>" } };
	  return react.createElement('svg', getSvgProps(_extends$1({}, props, { svgDataByHeight: svgDataByHeight })));
	}

	DownloadIcon.defaultProps = {
	  className: 'octicon',
	  size: 16,
	  verticalAlign: 'text-bottom'
	};

	function LinkIcon(props) {
	  var svgDataByHeight = { "16": { "width": 16, "path": "<path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path>" }, "24": { "width": 24, "path": "<path d=\"M14.78 3.653a3.936 3.936 0 115.567 5.567l-3.627 3.627a3.936 3.936 0 01-5.88-.353.75.75 0 00-1.18.928 5.436 5.436 0 008.12.486l3.628-3.628a5.436 5.436 0 10-7.688-7.688l-3 3a.75.75 0 001.06 1.061l3-3z\"></path><path d=\"M7.28 11.153a3.936 3.936 0 015.88.353.75.75 0 001.18-.928 5.436 5.436 0 00-8.12-.486L2.592 13.72a5.436 5.436 0 107.688 7.688l3-3a.75.75 0 10-1.06-1.06l-3 3a3.936 3.936 0 01-5.567-5.568l3.627-3.627z\"></path>" } };
	  return react.createElement('svg', getSvgProps(_extends$1({}, props, { svgDataByHeight: svgDataByHeight })));
	}

	LinkIcon.defaultProps = {
	  className: 'octicon',
	  size: 16,
	  verticalAlign: 'text-bottom'
	};

	function MarkGithubIcon(props) {
	  var svgDataByHeight = { "16": { "width": 16, "path": "<path fill-rule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\"></path>" } };
	  return react.createElement('svg', getSvgProps(_extends$1({}, props, { svgDataByHeight: svgDataByHeight })));
	}

	MarkGithubIcon.defaultProps = {
	  className: 'octicon',
	  size: 16,
	  verticalAlign: 'text-bottom'
	};

	function RepoForkedIcon(props) {
	  var svgDataByHeight = { "16": { "width": 16, "path": "<path fill-rule=\"evenodd\" d=\"M5 3.25a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm0 2.122a2.25 2.25 0 10-1.5 0v.878A2.25 2.25 0 005.75 8.5h1.5v2.128a2.251 2.251 0 101.5 0V8.5h1.5a2.25 2.25 0 002.25-2.25v-.878a2.25 2.25 0 10-1.5 0v.878a.75.75 0 01-.75.75h-4.5A.75.75 0 015 6.25v-.878zm3.75 7.378a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm3-8.75a.75.75 0 100-1.5.75.75 0 000 1.5z\"></path>" } };
	  return react.createElement('svg', getSvgProps(_extends$1({}, props, { svgDataByHeight: svgDataByHeight })));
	}

	RepoForkedIcon.defaultProps = {
	  className: 'octicon',
	  size: 16,
	  verticalAlign: 'text-bottom'
	};

	function ShareAndroidIcon(props) {
	  var svgDataByHeight = { "16": { "width": 16, "path": "<path fill-rule=\"evenodd\" d=\"M13.5 3a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM15 3a3 3 0 01-5.175 2.066l-3.92 2.179a3.005 3.005 0 010 1.51l3.92 2.179a3 3 0 11-.73 1.31l-3.92-2.178a3 3 0 110-4.133l3.92-2.178A3 3 0 1115 3zm-1.5 10a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zm-9-5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0z\"></path>" }, "24": { "width": 24, "path": "<path fill-rule=\"evenodd\" d=\"M20 5.5a3.5 3.5 0 01-6.062 2.385l-5.112 3.021a3.497 3.497 0 010 2.188l5.112 3.021a3.5 3.5 0 11-.764 1.29l-5.112-3.02a3.5 3.5 0 110-4.77l5.112-3.021v.001A3.5 3.5 0 1120 5.5zm-1.5 0a2 2 0 11-4 0 2 2 0 014 0zM5.5 14a2 2 0 100-4 2 2 0 000 4zm13 4.5a2 2 0 11-4 0 2 2 0 014 0z\"></path>" } };
	  return react.createElement('svg', getSvgProps(_extends$1({}, props, { svgDataByHeight: svgDataByHeight })));
	}

	ShareAndroidIcon.defaultProps = {
	  className: 'octicon',
	  size: 16,
	  verticalAlign: 'text-bottom'
	};

	function sanitizeSVG(original) {
	    let ret = "";
	    if (!original.includes("<?xml")) {
	        ret = `<?xml version="1.0" encoding="UTF-8"?>\n` + ret;
	    }
	    if (!original.includes("<!DOCTYPE svg")) {
	        ret =
	            ret +
	                `<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n`;
	    }
	    return ret + original;
	}
	function DownloadSvg(props) {
	    const theRef = react_7(null);
	    function dl() {
	        const pre = "children" in props
	            ? '<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n'
	            : "";
	        download("diagram.svg", pre + theRef.current.innerHTML, "image/svg+xml");
	    }
	    return (react.createElement(react.Fragment, null,
	        "dangerouslySetInnerHTML" in props ? (react.createElement("div", { ref: theRef, dangerouslySetInnerHTML: props.dangerouslySetInnerHTML })) : (react.createElement("div", { ref: theRef }, props.children)),
	        react.createElement("button", { className: "btn btn-sm btn-link", onClick: dl, style: { fontSize: 12 } },
	            react.createElement(DownloadIcon, { size: 16 }),
	            "Download SVG")));
	}

	const monospaceFont = `Menlo, Monaco, "Courier New", monospace`;
	const font = `14px ${monospaceFont}`;
	const DIAGRAM_MARGIN = 10;
	const ACTOR_MARGIN = 10;
	const ACTOR_PADDING = 10;
	const SIGNAL_MARGIN = 5;
	const SIGNAL_PADDING = 5;
	const NOTE_MARGIN = 10;
	const NOTE_PADDING = 5;
	const NOTE_OVERLAP = 15;
	const TITLE_MARGIN = 0;
	const TITLE_PADDING = 5;
	const SELF_SIGNAL_WIDTH = 20;
	const ALIGN_LEFT = 0;
	const ALIGN_CENTER = 1;
	const ALIGN_HORIZONTAL_CENTER = 2;
	const ALIGN_VERTICAL_CENTER = 3;
	const can = document.createElement("canvas");
	const ctx = can.getContext("2d");
	function textBBox(text, fnt) {
	    if (fnt)
	        ctx.font = fnt;
	    else
	        ctx.font = font;
	    const r = ctx.measureText(text);
	    return Object.assign(r, {
	        height: r.actualBoundingBoxDescent + r.actualBoundingBoxAscent,
	    });
	}
	class AssertException extends Error {
	    toString() {
	        return "AssertException: " + this.message;
	    }
	}
	function assert(exp, message) {
	    if (!exp) {
	        throw new AssertException(message);
	    }
	}
	function processSequenceLayout(diagram) {
	    diagram.signalsHeight_ = 0;
	    diagram.actorsHeight_ = 0;
	    diagram.width = 0;
	    diagram.height = 0;
	    if (diagram.title) {
	        diagram.title_ = {};
	        var title = diagram.title_;
	        var bb = textBBox(diagram.title);
	        title.textBB = bb;
	        title.message = diagram.title;
	        title.width = bb.width + (TITLE_PADDING + TITLE_MARGIN) * 2;
	        title.height = bb.height + (TITLE_PADDING + TITLE_MARGIN) * 2;
	        title.x = DIAGRAM_MARGIN;
	        title.y = DIAGRAM_MARGIN;
	        diagram.width += title.width;
	        diagram.height += title.height;
	    }
	    diagram.actors.forEach((a) => {
	        var bb = textBBox(a.name);
	        a.textBB = bb;
	        a.x = 0;
	        a.y = 0;
	        a.width = bb.width + (ACTOR_PADDING + ACTOR_MARGIN) * 2;
	        a.height = bb.height + (ACTOR_PADDING + ACTOR_MARGIN) * 2;
	        a.distances = [];
	        a.paddingRight = 0;
	        diagram.actorsHeight_ = Math.max(a.height, diagram.actorsHeight_ || 0) | 0;
	    });
	    function actorEnsureDistance(a, b, d) {
	        assert(a < b, "a must be less than or equal to b");
	        if (a < 0) {
	            const actorB = diagram.actors[b];
	            actorB.x = Math.max(d - actorB.width / 2, actorB.x) | 0;
	        }
	        else if (b >= diagram.actors.length) {
	            const actorA = diagram.actors[a];
	            actorA.paddingRight = Math.max(d, actorA.paddingRight || 0) | 0;
	        }
	        else {
	            const actorA = diagram.actors[a];
	            actorA.distances[b] =
	                Math.max(d, actorA.distances[b] ? actorA.distances[b] : 0) | 0;
	        }
	    }
	    diagram.signals.forEach((s) => {
	        var a;
	        var b;
	        var bb = textBBox(s.message);
	        s.textBB = bb;
	        s.width = bb.width;
	        s.height = bb.height;
	        var extraWidth = 0;
	        if (s.type == "Signal") {
	            s.width += (SIGNAL_MARGIN + SIGNAL_PADDING) * 2;
	            s.height += (SIGNAL_MARGIN + SIGNAL_PADDING) * 2;
	            if (s.isSelf()) {
	                a = s.actorA.index;
	                b = a + 1;
	                s.width += SELF_SIGNAL_WIDTH;
	            }
	            else {
	                a = Math.min(s.actorA.index, s.actorB.index);
	                b = Math.max(s.actorA.index, s.actorB.index);
	            }
	        }
	        else if (s.type == "Note") {
	            s.width += (NOTE_MARGIN + NOTE_PADDING) * 2;
	            s.height += (NOTE_MARGIN + NOTE_PADDING) * 2;
	            extraWidth = 2 * ACTOR_MARGIN;
	            if (s.placement == Diagram.PLACEMENT.LEFTOF) {
	                b = s.actor.index;
	                a = b - 1;
	            }
	            else if (s.placement == Diagram.PLACEMENT.RIGHTOF) {
	                a = s.actor.index;
	                b = a + 1;
	            }
	            else if (s.placement == Diagram.PLACEMENT.OVER && s.hasManyActors()) {
	                a = Math.min(s.actor[0].index, s.actor[1].index);
	                b = Math.max(s.actor[0].index, s.actor[1].index);
	                extraWidth = -(NOTE_PADDING * 2 + NOTE_OVERLAP * 2);
	            }
	            else if (s.placement == Diagram.PLACEMENT.OVER) {
	                a = s.actor.index;
	                actorEnsureDistance(a - 1, a, s.width / 2);
	                actorEnsureDistance(a, a + 1, s.width / 2);
	                diagram.signalsHeight_ += s.height;
	                return;
	            }
	        }
	        actorEnsureDistance(a, b, s.width + extraWidth);
	        diagram.signalsHeight_ += s.height;
	    });
	    var actorsX = 0;
	    diagram.actors.forEach((a) => {
	        a.x = Math.max(actorsX, a.x);
	        a.distances.forEach((distance, ix) => {
	            if (typeof distance == "undefined") {
	                return;
	            }
	            const b = diagram.actors[ix];
	            distance = Math.max(distance, a.width / 2, b.width / 2) | 0;
	            b.x = Math.max(b.x, a.x + a.width / 2 + distance - b.width / 2) | 0;
	        });
	        actorsX = a.x + a.width + a.paddingRight;
	    });
	    diagram.width = Math.max(actorsX, diagram.width);
	    diagram.width += 2 * DIAGRAM_MARGIN;
	    diagram.height +=
	        2 * DIAGRAM_MARGIN + 2 * diagram.actorsHeight_ + diagram.signalsHeight_;
	}
	window["Snap"] = {};
	async function initializeDiagrams() {
	    await injectScript("bower_components/underscore/underscore-min.js");
	    await injectScript("bower_components/js-sequence-diagrams/dist/sequence-diagram-min.js");
	    await injectScript("bower_components/jszip/jszip.min.js");
	}
	function parseDiagram(txt) {
	    return Diagram.parse(txt.trim().replace(/^sequenceDiagram[\s\n\r]*/, ""));
	}
	function Line($) {
	    return (react.createElement("line", { x1: $.x1 | 0, x2: $.x2 | 0, y1: $.y1 | 0, y2: $.y2 | 0, style: { strokeWidth: "2px" }, stroke: "#000000", fill: "none", strokeDasharray: $.linetype === undefined
	            ? undefined
	            : $.linetype === Diagram.LINETYPE.DOTTED
	                ? "6px, 2px"
	                : undefined, markerEnd: $.arrowhead === undefined
	            ? undefined
	            : $.arrowhead == Diagram.ARROWTYPE.FILLED
	                ? "url(#markerArrowBlock)"
	                : "url(#markerArrowOpen)" }));
	}
	function Rect($) {
	    return (react.createElement("rect", { x: $.x | 0, y: $.y | 0, width: $.width | 0, height: $.height | 0, style: { strokeWidth: "2px" }, stroke: "#000000", fill: "#ffffff" }));
	}
	function Text($) {
	    var bb = textBBox($.text, $.font);
	    var x = $.x;
	    var y = $.y;
	    if ($.align == ALIGN_CENTER || $.align == ALIGN_HORIZONTAL_CENTER) {
	        x = x - bb.width / 2;
	    }
	    if ($.align == ALIGN_CENTER || $.align == ALIGN_VERTICAL_CENTER) {
	        y = y - bb.height / 2;
	    }
	    y = y + bb.height;
	    return (react.createElement("text", { x: x | 0, y: y | 0, style: { font: $.font }, textAnchor: "start" },
	        react.createElement("tspan", { x: x | 0, y: y | 0 }, $.text)));
	}
	function getCenterX(box) {
	    return box.x + box.width / 2;
	}
	function getCenterY(box) {
	    return box.y + box.height / 2;
	}
	function TextBox($) {
	    var x = $.box.x + $.margin;
	    var y = $.box.y + $.margin;
	    var w = $.box.width - 2 * $.margin;
	    var h = $.box.height - 2 * $.margin;
	    const rect = react.createElement(Rect, { x: x, y: y, width: w, height: h });
	    if ($.align == ALIGN_CENTER) {
	        x = getCenterX($.box);
	        y = getCenterY($.box);
	    }
	    else {
	        x += $.padding;
	        y += $.padding;
	    }
	    return (react.createElement(react.Fragment, null,
	        rect,
	        react.createElement(Text, { x: x, y: y, text: $.text, font: $.font, align: $.align })));
	}
	function ActorSVG($) {
	    $.actor.y = $.offsetY;
	    $.actor.height = $.height;
	    return (react.createElement(TextBox, { box: $.actor, text: $.actor.name, margin: ACTOR_MARGIN, padding: ACTOR_PADDING, font: $.font, align: ALIGN_CENTER }));
	}
	function RenderDiagram(props) {
	    const { diagram: $ } = props;
	    if (!$)
	        return react.createElement("div", null, "Empty diagram");
	    var offsetY = 0;
	    const elems = [];
	    function drawSelfSignal(signal) {
	        assert(signal.isSelf(), "signal must be a self signal");
	        var textBB = signal.textBB;
	        var aX = getCenterX(signal.actorA);
	        var y1 = offsetY + SIGNAL_MARGIN + SIGNAL_PADDING;
	        var y2 = y1 + signal.height - 2 * SIGNAL_MARGIN - SIGNAL_PADDING;
	        elems.push(react.createElement(Line, { x1: aX, y1: y1, x2: aX + SELF_SIGNAL_WIDTH, y2: y1, linetype: signal.linetype, key: elems.length }));
	        elems.push(react.createElement(Line, { x1: aX + SELF_SIGNAL_WIDTH, y1: y1, x2: aX + SELF_SIGNAL_WIDTH, y2: y2, linetype: signal.linetype, key: elems.length }));
	        elems.push(react.createElement(Line, { x1: aX + SELF_SIGNAL_WIDTH, y1: y2, x2: aX, y2: y2, linetype: signal.linetype, arrowhead: signal.arrowtype, key: elems.length }));
	        var x = aX + SELF_SIGNAL_WIDTH + SIGNAL_PADDING;
	        var arrowHeight = y2 - y1;
	        var emptyVerticalSpace = arrowHeight - textBB.height;
	        var topPadding = emptyVerticalSpace / 2;
	        elems.push(react.createElement(Text, { x: x, y: y1 + topPadding, text: signal.message, font: font, align: ALIGN_LEFT, key: elems.length }));
	    }
	    function drawSignal(signal) {
	        var aX = getCenterX(signal.actorA);
	        var bX = getCenterX(signal.actorB);
	        var x = (bX - aX) / 2 + aX;
	        var y = offsetY + SIGNAL_MARGIN + SIGNAL_PADDING;
	        elems.push(react.createElement(Text, { x: x, y: y, text: signal.message, font: font, align: ALIGN_HORIZONTAL_CENTER, key: elems.length }));
	        y = offsetY + signal.height - SIGNAL_PADDING;
	        elems.push(react.createElement(Line, { x1: aX, y1: y, x2: bX, y2: y, linetype: signal.linetype, arrowhead: signal.arrowtype, key: elems.length }));
	    }
	    function drawNote(note) {
	        note.y = offsetY;
	        var actorA = note.hasManyActors() ? note.actor[0] : note.actor;
	        var aX = getCenterX(actorA);
	        switch (note.placement) {
	            case Diagram.PLACEMENT.RIGHTOF:
	                note.x = aX + ACTOR_MARGIN;
	                break;
	            case Diagram.PLACEMENT.LEFTOF:
	                note.x = aX - ACTOR_MARGIN - note.width;
	                break;
	            case Diagram.PLACEMENT.OVER:
	                if (note.hasManyActors()) {
	                    var bX = getCenterX(note.actor[1]);
	                    var overlap = NOTE_OVERLAP + NOTE_PADDING;
	                    note.x = Math.min(aX, bX) - overlap;
	                    note.width = Math.max(aX, bX) + overlap - note.x;
	                }
	                else {
	                    note.x = aX - note.width / 2;
	                }
	                break;
	            default:
	                throw new Error("Unhandled note placement: " + note.placement);
	        }
	        elems.push(react.createElement(TextBox, { box: note, text: note.message, margin: NOTE_MARGIN, padding: NOTE_PADDING, font: font, align: ALIGN_LEFT, key: elems.length }));
	    }
	    $.actors.map(function (a) {
	        elems.push(react.createElement(ActorSVG, { actor: a, offsetY: offsetY, height: $.actorsHeight_, font: font, key: elems.length }));
	        elems.push(react.createElement(ActorSVG, { actor: a, offsetY: offsetY + $.actorsHeight_ + $.signalsHeight_, height: $.actorsHeight_, font: font, key: elems.length }));
	        var aX = getCenterX(a);
	        elems.push(react.createElement(Line, { x1: aX, y1: offsetY + $.actorsHeight_ - ACTOR_MARGIN, x2: aX, y2: offsetY + $.actorsHeight_ + ACTOR_MARGIN + $.signalsHeight_, key: elems.length }));
	    });
	    offsetY += $.actorsHeight_;
	    $.signals.forEach(function (s) {
	        if (s.type == "Signal") {
	            if (s.isSelf()) {
	                drawSelfSignal(s);
	            }
	            else {
	                drawSignal(s);
	            }
	        }
	        else if (s.type == "Note") {
	            drawNote(s);
	        }
	        offsetY += s.height;
	    });
	    return (react.createElement(DownloadSvg, null,
	        react.createElement("svg", { width: $.width | 0, height: $.height | 0, xmlns: "http://www.w3.org/2000/svg" },
	            react.createElement("defs", null,
	                react.createElement("marker", { viewBox: "0 0 5 5", markerWidth: "5", markerHeight: "5", orient: "auto", refX: "5", refY: "2.5", id: "markerArrowBlock" },
	                    react.createElement("path", { d: "M 0 0 L 5 2.5 L 0 5 z" })),
	                react.createElement("marker", { viewBox: "0 0 9.6 16", markerWidth: "4", markerHeight: "16", orient: "auto", refX: "9.6", refY: "8", id: "markerArrowOpen" },
	                    react.createElement("path", { d: "M 9.6,8 1.92,16 0,13.7 5.76,8 0,2.286 1.92,0 9.6,8 z" }))),
	            elems)));
	}
	function SequenceDiagram(props) {
	    const { input, className } = props;
	    const divRef = react_7(null);
	    const [width, setWidth] = react_6(0);
	    const [height, setHeight] = react_6(0);
	    const [error, setError] = react_6(null);
	    const [diagram, setDiagram] = react_6(null);
	    react_5(() => {
	        try {
	            const tmpDiagram = parseDiagram(input.trim().replace(/^sequenceDiagram[\s\n\r]*/, ""));
	            processSequenceLayout(tmpDiagram);
	            setWidth(tmpDiagram.width);
	            setHeight(tmpDiagram.height);
	            setError(null);
	            setDiagram(tmpDiagram);
	        }
	        catch (e) {
	            setError(e.toString());
	        }
	    }, [input, divRef]);
	    if (!error) {
	        return (react.createElement("div", { className: className, style: { width, height: height + 32 }, ref: divRef },
	            react.createElement(RenderDiagram, { diagram: diagram })));
	    }
	    else {
	        return react.createElement("pre", { className: className }, error);
	    }
	}

	const DEFAULT_EXAMPLE = `
# Collaborative diagrams tool

## This editor works with live collaboration, like Google Docs

Once you get an editable link, you can share it, and multiple users can edit the same document.

We use it for architecture discussions and planning with my team, it helps a lot because now that all of us are remote.

## How to use it?

1. Click in "Make a copy" in the top bar
2. Edit the document created for you! Share the link to start collaborating.

## What can we do with this tool?

### Sequence diagrams

\`\`\`sequence
Andrew->China: Says Hello
Note right of China: China thinks about it
China-->Andrew: How are you?
Andrew->>China: I am good thanks!
\`\`\`

### Graphviz

\`\`\`dot
digraph G {

	subgraph cluster_0 {
		style=filled;
		color=lightgrey;
		node [style=filled,color=white];
		a0 -> a1 -> a2 -> a3;
		label = "process #1";
	}

	subgraph cluster_1 {
		node [style=filled];
		b0 -> b1 -> b2 -> b3;
		label = "process #2";
		color=blue
	}
	start -> a0;
	start -> b0;
	a1 -> b3;
	b2 -> a3;
	a3 -> a0;
	a3 -> end;
	b3 -> end;

	start [shape=Mdiamond];
	end [shape=Msquare];
}
\`\`\`

### This is another title with a sequence diagram

\`\`\`sequence
Title: Here is a title
A->B: Normal line
B-->C: Dashed line
C->>D: Open arrow
D-->>A: Dashed open arrow
\`\`\`

### Add notes

\`\`\`sequence
# Example of a comment.
Note left of A: Note to the left of A
Note right of A: Note to the right of A
Note over A: Note over A
Note over A,B: Note over both A and B
\`\`\`

### Specify participants

\`\`\`sequence
participant C
participant B
participant A
Note right of A: By listing the participants you can change their order
\`\`\`

### Code example:

\`\`\`javascript
// this example generates a static link to use with this site

const content = "# this is a title\\n .. put sequences, .dot files or markdown in here ..";

function generateStaticLink(content) {
  return \`https://diagrams.menduz.com/#/static?t=\${encodeURIComponent(content)}\`;
}

console.log(generateStaticLink(content));
\`\`\`

### Attributions

- Sequence diagrams parser & syntax: https://bramp.github.io/js-sequence-diagrams/
- Firepad: https://github.com/FirebaseExtended/firepad

### Contact & feedback

You can contact me on https://twitter.com/@menduz

### Help me pay the hosting

If you want to help with the expenses of the site, here is my Ethereum address, anything you send is more than welcome:

\`\`\`
menduz.eth - 0xf2f58ed9Ab3057838d88D06be8269270cDc8Aa89
\`\`\`

Thanks and enjoy!

`;

	function closeMenu() {
	    document.querySelectorAll(".dropdown[open]").forEach((e) => {
	        e.removeAttribute("open");
	    });
	}
	function DropdownShare(props) {
	    return (react.createElement("details", { className: "dropdown details-reset details-overlay d-inline-block mr-2" },
	        react.createElement("summary", { className: `btn ${props.className}`, "aria-haspopup": "true" },
	            props.label,
	            react.createElement("div", { className: "dropdown-caret" })),
	        react.createElement("ul", { className: "dropdown-menu dropdown-menu-sw", style: { width: 200 } }, props.children)));
	}

	var lottie = createCommonjsModule(function (module) {
	(typeof navigator !== "undefined") && (function(root, factory) {
	    if ( module.exports) {
	        module.exports = factory(root);
	    } else {
	        root.lottie = factory(root);
	        root.bodymovin = root.lottie;
	    }
	}((window || {}), function(window) {
	var svgNS = "http://www.w3.org/2000/svg";

	var locationHref = '';

	var initialDefaultFrame = -999999;

	var subframeEnabled = true;
	var expressionsPlugin;
	var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
	var bm_pow = Math.pow;
	var bm_sqrt = Math.sqrt;
	var bm_floor = Math.floor;
	var bm_max = Math.max;
	var bm_min = Math.min;

	var BMMath = {};
	(function(){
	    var propertyNames = ["abs", "acos", "acosh", "asin", "asinh", "atan", "atanh", "atan2", "ceil", "cbrt", "expm1", "clz32", "cos", "cosh", "exp", "floor", "fround", "hypot", "imul", "log", "log1p", "log2", "log10", "max", "min", "pow", "random", "round", "sign", "sin", "sinh", "sqrt", "tan", "tanh", "trunc", "E", "LN10", "LN2", "LOG10E", "LOG2E", "PI", "SQRT1_2", "SQRT2"];
	    var i, len = propertyNames.length;
	    for(i=0;i<len;i+=1){
	        BMMath[propertyNames[i]] = Math[propertyNames[i]];
	    }
	}());

	function ProjectInterface(){return {};}

	BMMath.random = Math.random;
	BMMath.abs = function(val){
	    var tOfVal = typeof val;
	    if(tOfVal === 'object' && val.length){
	        var absArr = createSizedArray(val.length);
	        var i, len = val.length;
	        for(i=0;i<len;i+=1){
	            absArr[i] = Math.abs(val[i]);
	        }
	        return absArr;
	    }
	    return Math.abs(val);

	};
	var defaultCurveSegments = 150;
	var degToRads = Math.PI/180;
	var roundCorner = 0.5519;

	function styleDiv(element){
	    element.style.position = 'absolute';
	    element.style.top = 0;
	    element.style.left = 0;
	    element.style.display = 'block';
	    element.style.transformOrigin = element.style.webkitTransformOrigin = '0 0';
	    element.style.backfaceVisibility  = element.style.webkitBackfaceVisibility = 'visible';
	    element.style.transformStyle = element.style.webkitTransformStyle = element.style.mozTransformStyle = "preserve-3d";
	}

	function BMEnterFrameEvent(type, currentTime, totalTime, frameMultiplier){
	    this.type = type;
	    this.currentTime = currentTime;
	    this.totalTime = totalTime;
	    this.direction = frameMultiplier < 0 ? -1 : 1;
	}

	function BMCompleteEvent(type, frameMultiplier){
	    this.type = type;
	    this.direction = frameMultiplier < 0 ? -1 : 1;
	}

	function BMCompleteLoopEvent(type, totalLoops, currentLoop, frameMultiplier){
	    this.type = type;
	    this.currentLoop = currentLoop;
	    this.totalLoops = totalLoops;
	    this.direction = frameMultiplier < 0 ? -1 : 1;
	}

	function BMSegmentStartEvent(type, firstFrame, totalFrames){
	    this.type = type;
	    this.firstFrame = firstFrame;
	    this.totalFrames = totalFrames;
	}

	function BMDestroyEvent(type, target){
	    this.type = type;
	    this.target = target;
	}

	function BMRenderFrameErrorEvent(nativeError, currentTime) {
	    this.type = 'renderFrameError';
	    this.nativeError = nativeError;
	    this.currentTime = currentTime;
	}

	function BMConfigErrorEvent(nativeError) {
	    this.type = 'configError';
	    this.nativeError = nativeError;
	}

	var createElementID = (function(){
	    var _count = 0;
	    return function createID() {
	        return '__lottie_element_' + ++_count
	    }
	}());

	function HSVtoRGB(h, s, v) {
	    var r, g, b, i, f, p, q, t;
	    i = Math.floor(h * 6);
	    f = h * 6 - i;
	    p = v * (1 - s);
	    q = v * (1 - f * s);
	    t = v * (1 - (1 - f) * s);
	    switch (i % 6) {
	        case 0: r = v; g = t; b = p; break;
	        case 1: r = q; g = v; b = p; break;
	        case 2: r = p; g = v; b = t; break;
	        case 3: r = p; g = q; b = v; break;
	        case 4: r = t; g = p; b = v; break;
	        case 5: r = v; g = p; b = q; break;
	    }
	    return [ r,
	        g,
	         b ];
	}

	function RGBtoHSV(r, g, b) {
	    var max = Math.max(r, g, b), min = Math.min(r, g, b),
	        d = max - min,
	        h,
	        s = (max === 0 ? 0 : d / max),
	        v = max / 255;

	    switch (max) {
	        case min: h = 0; break;
	        case r: h = (g - b) + d * (g < b ? 6: 0); h /= 6 * d; break;
	        case g: h = (b - r) + d * 2; h /= 6 * d; break;
	        case b: h = (r - g) + d * 4; h /= 6 * d; break;
	    }

	    return [
	         h,
	         s,
	         v
	    ];
	}

	function addSaturationToRGB(color,offset){
	    var hsv = RGBtoHSV(color[0]*255,color[1]*255,color[2]*255);
	    hsv[1] += offset;
	    if (hsv[1] > 1) {
	        hsv[1] = 1;
	    }
	    else if (hsv[1] <= 0) {
	        hsv[1] = 0;
	    }
	    return HSVtoRGB(hsv[0],hsv[1],hsv[2]);
	}

	function addBrightnessToRGB(color,offset){
	    var hsv = RGBtoHSV(color[0]*255,color[1]*255,color[2]*255);
	    hsv[2] += offset;
	    if (hsv[2] > 1) {
	        hsv[2] = 1;
	    }
	    else if (hsv[2] < 0) {
	        hsv[2] = 0;
	    }
	    return HSVtoRGB(hsv[0],hsv[1],hsv[2]);
	}

	function addHueToRGB(color,offset) {
	    var hsv = RGBtoHSV(color[0]*255,color[1]*255,color[2]*255);
	    hsv[0] += offset/360;
	    if (hsv[0] > 1) {
	        hsv[0] -= 1;
	    }
	    else if (hsv[0] < 0) {
	        hsv[0] += 1;
	    }
	    return HSVtoRGB(hsv[0],hsv[1],hsv[2]);
	}

	var rgbToHex = (function(){
	    var colorMap = [];
	    var i;
	    var hex;
	    for(i=0;i<256;i+=1){
	        hex = i.toString(16);
	        colorMap[i] = hex.length == 1 ? '0' + hex : hex;
	    }

	    return function(r, g, b) {
	        if(r<0){
	            r = 0;
	        }
	        if(g<0){
	            g = 0;
	        }
	        if(b<0){
	            b = 0;
	        }
	        return '#' + colorMap[r] + colorMap[g] + colorMap[b];
	    };
	}());
	function BaseEvent(){}
	BaseEvent.prototype = {
		triggerEvent: function (eventName, args) {
		    if (this._cbs[eventName]) {
		        var len = this._cbs[eventName].length;
		        for (var i = 0; i < len; i++){
		            this._cbs[eventName][i](args);
		        }
		    }
		},
		addEventListener: function (eventName, callback) {
		    if (!this._cbs[eventName]){
		        this._cbs[eventName] = [];
		    }
		    this._cbs[eventName].push(callback);

			return function() {
				this.removeEventListener(eventName, callback);
			}.bind(this);
		},
		removeEventListener: function (eventName,callback){
		    if (!callback){
		        this._cbs[eventName] = null;
		    }else if(this._cbs[eventName]){
		        var i = 0, len = this._cbs[eventName].length;
		        while(i<len){
		            if(this._cbs[eventName][i] === callback){
		                this._cbs[eventName].splice(i,1);
		                i -=1;
		                len -= 1;
		            }
		            i += 1;
		        }
		        if(!this._cbs[eventName].length){
		            this._cbs[eventName] = null;
		        }
		    }
		}
	};
	var createTypedArray = (function(){
		function createRegularArray(type, len){
			var i = 0, arr = [], value;
			switch(type) {
				case 'int16':
				case 'uint8c':
					value = 1;
					break;
				default:
					value = 1.1;
					break;
			}
			for(i = 0; i < len; i += 1) {
				arr.push(value);
			}
			return arr;
		}
		function createTypedArray(type, len){
			if(type === 'float32') {
				return new Float32Array(len);
			} else if(type === 'int16') {
				return new Int16Array(len);
			} else if(type === 'uint8c') {
				return new Uint8ClampedArray(len);
			}
		}
		if(typeof Uint8ClampedArray === 'function' && typeof Float32Array === 'function') {
			return createTypedArray;
		} else {
			return createRegularArray;
		}
	}());

	function createSizedArray(len) {
		return Array.apply(null,{length:len});
	}
	function createNS(type) {
		//return {appendChild:function(){},setAttribute:function(){},style:{}}
		return document.createElementNS(svgNS, type);
	}
	function createTag(type) {
		//return {appendChild:function(){},setAttribute:function(){},style:{}}
		return document.createElement(type);
	}
	function DynamicPropertyContainer(){}DynamicPropertyContainer.prototype = {
		addDynamicProperty: function(prop) {
			if(this.dynamicProperties.indexOf(prop) === -1) {
		        this.dynamicProperties.push(prop);
		        this.container.addDynamicProperty(this);
		    	this._isAnimated = true;
		    }
		},
		iterateDynamicProperties: function(){
		    this._mdf = false;
		    var i, len = this.dynamicProperties.length;
		    for(i=0;i<len;i+=1){
		        this.dynamicProperties[i].getValue();
		        if(this.dynamicProperties[i]._mdf) {
		            this._mdf = true;
		        }
		    }
		},
		initDynamicPropertyContainer: function(container){
		    this.container = container;
		    this.dynamicProperties = [];
		    this._mdf = false;
		    this._isAnimated = false;
		}
	};
	var getBlendMode = (function() {

		var blendModeEnums = {
	        0:'source-over',
	        1:'multiply',
	        2:'screen',
	        3:'overlay',
	        4:'darken',
	        5:'lighten',
	        6:'color-dodge',
	        7:'color-burn',
	        8:'hard-light',
	        9:'soft-light',
	        10:'difference',
	        11:'exclusion',
	        12:'hue',
	        13:'saturation',
	        14:'color',
	        15:'luminosity'
	    };

		return function(mode) {
			return blendModeEnums[mode] || '';
		}
	}());
	/*!
	 Transformation Matrix v2.0
	 (c) Epistemex 2014-2015
	 www.epistemex.com
	 By Ken Fyrstenberg
	 Contributions by leeoniya.
	 License: MIT, header required.
	 */

	/**
	 * 2D transformation matrix object initialized with identity matrix.
	 *
	 * The matrix can synchronize a canvas context by supplying the context
	 * as an argument, or later apply current absolute transform to an
	 * existing context.
	 *
	 * All values are handled as floating point values.
	 *
	 * @param {CanvasRenderingContext2D} [context] - Optional context to sync with Matrix
	 * @prop {number} a - scale x
	 * @prop {number} b - shear y
	 * @prop {number} c - shear x
	 * @prop {number} d - scale y
	 * @prop {number} e - translate x
	 * @prop {number} f - translate y
	 * @prop {CanvasRenderingContext2D|null} [context=null] - set or get current canvas context
	 * @constructor
	 */

	var Matrix = (function(){

	    var _cos = Math.cos;
	    var _sin = Math.sin;
	    var _tan = Math.tan;
	    var _rnd = Math.round;

	    function reset(){
	        this.props[0] = 1;
	        this.props[1] = 0;
	        this.props[2] = 0;
	        this.props[3] = 0;
	        this.props[4] = 0;
	        this.props[5] = 1;
	        this.props[6] = 0;
	        this.props[7] = 0;
	        this.props[8] = 0;
	        this.props[9] = 0;
	        this.props[10] = 1;
	        this.props[11] = 0;
	        this.props[12] = 0;
	        this.props[13] = 0;
	        this.props[14] = 0;
	        this.props[15] = 1;
	        return this;
	    }

	    function rotate(angle) {
	        if(angle === 0){
	            return this;
	        }
	        var mCos = _cos(angle);
	        var mSin = _sin(angle);
	        return this._t(mCos, -mSin,  0, 0, mSin,  mCos, 0, 0, 0,  0,  1, 0, 0, 0, 0, 1);
	    }

	    function rotateX(angle){
	        if(angle === 0){
	            return this;
	        }
	        var mCos = _cos(angle);
	        var mSin = _sin(angle);
	        return this._t(1, 0, 0, 0, 0, mCos, -mSin, 0, 0, mSin,  mCos, 0, 0, 0, 0, 1);
	    }

	    function rotateY(angle){
	        if(angle === 0){
	            return this;
	        }
	        var mCos = _cos(angle);
	        var mSin = _sin(angle);
	        return this._t(mCos,  0,  mSin, 0, 0, 1, 0, 0, -mSin,  0,  mCos, 0, 0, 0, 0, 1);
	    }

	    function rotateZ(angle){
	        if(angle === 0){
	            return this;
	        }
	        var mCos = _cos(angle);
	        var mSin = _sin(angle);
	        return this._t(mCos, -mSin,  0, 0, mSin,  mCos, 0, 0, 0,  0,  1, 0, 0, 0, 0, 1);
	    }

	    function shear(sx,sy){
	        return this._t(1, sy, sx, 1, 0, 0);
	    }

	    function skew(ax, ay){
	        return this.shear(_tan(ax), _tan(ay));
	    }

	    function skewFromAxis(ax, angle){
	        var mCos = _cos(angle);
	        var mSin = _sin(angle);
	        return this._t(mCos, mSin,  0, 0, -mSin,  mCos, 0, 0, 0,  0,  1, 0, 0, 0, 0, 1)
	            ._t(1, 0,  0, 0, _tan(ax),  1, 0, 0, 0,  0,  1, 0, 0, 0, 0, 1)
	            ._t(mCos, -mSin,  0, 0, mSin,  mCos, 0, 0, 0,  0,  1, 0, 0, 0, 0, 1);
	        //return this._t(mCos, mSin, -mSin, mCos, 0, 0)._t(1, 0, _tan(ax), 1, 0, 0)._t(mCos, -mSin, mSin, mCos, 0, 0);
	    }

	    function scale(sx, sy, sz) {
	        if(!sz && sz !== 0) {
	            sz = 1;
	        }
	        if(sx === 1 && sy === 1 && sz === 1){
	            return this;
	        }
	        return this._t(sx, 0, 0, 0, 0, sy, 0, 0, 0, 0, sz, 0, 0, 0, 0, 1);
	    }

	    function setTransform(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
	        this.props[0] = a;
	        this.props[1] = b;
	        this.props[2] = c;
	        this.props[3] = d;
	        this.props[4] = e;
	        this.props[5] = f;
	        this.props[6] = g;
	        this.props[7] = h;
	        this.props[8] = i;
	        this.props[9] = j;
	        this.props[10] = k;
	        this.props[11] = l;
	        this.props[12] = m;
	        this.props[13] = n;
	        this.props[14] = o;
	        this.props[15] = p;
	        return this;
	    }

	    function translate(tx, ty, tz) {
	        tz = tz || 0;
	        if(tx !== 0 || ty !== 0 || tz !== 0){
	            return this._t(1,0,0,0,0,1,0,0,0,0,1,0,tx,ty,tz,1);
	        }
	        return this;
	    }

	    function transform(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2) {

	        var _p = this.props;

	        if(a2 === 1 && b2 === 0 && c2 === 0 && d2 === 0 && e2 === 0 && f2 === 1 && g2 === 0 && h2 === 0 && i2 === 0 && j2 === 0 && k2 === 1 && l2 === 0){
	            //NOTE: commenting this condition because TurboFan deoptimizes code when present
	            //if(m2 !== 0 || n2 !== 0 || o2 !== 0){
	                _p[12] = _p[12] * a2 + _p[15] * m2;
	                _p[13] = _p[13] * f2 + _p[15] * n2;
	                _p[14] = _p[14] * k2 + _p[15] * o2;
	                _p[15] = _p[15] * p2;
	            //}
	            this._identityCalculated = false;
	            return this;
	        }

	        var a1 = _p[0];
	        var b1 = _p[1];
	        var c1 = _p[2];
	        var d1 = _p[3];
	        var e1 = _p[4];
	        var f1 = _p[5];
	        var g1 = _p[6];
	        var h1 = _p[7];
	        var i1 = _p[8];
	        var j1 = _p[9];
	        var k1 = _p[10];
	        var l1 = _p[11];
	        var m1 = _p[12];
	        var n1 = _p[13];
	        var o1 = _p[14];
	        var p1 = _p[15];

	        /* matrix order (canvas compatible):
	         * ace
	         * bdf
	         * 001
	         */
	        _p[0] = a1 * a2 + b1 * e2 + c1 * i2 + d1 * m2;
	        _p[1] = a1 * b2 + b1 * f2 + c1 * j2 + d1 * n2 ;
	        _p[2] = a1 * c2 + b1 * g2 + c1 * k2 + d1 * o2 ;
	        _p[3] = a1 * d2 + b1 * h2 + c1 * l2 + d1 * p2 ;

	        _p[4] = e1 * a2 + f1 * e2 + g1 * i2 + h1 * m2 ;
	        _p[5] = e1 * b2 + f1 * f2 + g1 * j2 + h1 * n2 ;
	        _p[6] = e1 * c2 + f1 * g2 + g1 * k2 + h1 * o2 ;
	        _p[7] = e1 * d2 + f1 * h2 + g1 * l2 + h1 * p2 ;

	        _p[8] = i1 * a2 + j1 * e2 + k1 * i2 + l1 * m2 ;
	        _p[9] = i1 * b2 + j1 * f2 + k1 * j2 + l1 * n2 ;
	        _p[10] = i1 * c2 + j1 * g2 + k1 * k2 + l1 * o2 ;
	        _p[11] = i1 * d2 + j1 * h2 + k1 * l2 + l1 * p2 ;

	        _p[12] = m1 * a2 + n1 * e2 + o1 * i2 + p1 * m2 ;
	        _p[13] = m1 * b2 + n1 * f2 + o1 * j2 + p1 * n2 ;
	        _p[14] = m1 * c2 + n1 * g2 + o1 * k2 + p1 * o2 ;
	        _p[15] = m1 * d2 + n1 * h2 + o1 * l2 + p1 * p2 ;

	        this._identityCalculated = false;
	        return this;
	    }

	    function isIdentity() {
	        if(!this._identityCalculated){
	            this._identity = !(this.props[0] !== 1 || this.props[1] !== 0 || this.props[2] !== 0 || this.props[3] !== 0 || this.props[4] !== 0 || this.props[5] !== 1 || this.props[6] !== 0 || this.props[7] !== 0 || this.props[8] !== 0 || this.props[9] !== 0 || this.props[10] !== 1 || this.props[11] !== 0 || this.props[12] !== 0 || this.props[13] !== 0 || this.props[14] !== 0 || this.props[15] !== 1);
	            this._identityCalculated = true;
	        }
	        return this._identity;
	    }

	    function equals(matr){
	        var i = 0;
	        while (i < 16) {
	            if(matr.props[i] !== this.props[i]) {
	                return false;
	            }
	            i+=1;
	        }
	        return true;
	    }

	    function clone(matr){
	        var i;
	        for(i=0;i<16;i+=1){
	            matr.props[i] = this.props[i];
	        }
	    }

	    function cloneFromProps(props){
	        var i;
	        for(i=0;i<16;i+=1){
	            this.props[i] = props[i];
	        }
	    }

	    function applyToPoint(x, y, z) {

	        return {
	            x: x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12],
	            y: x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13],
	            z: x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14]
	        };
	        /*return {
	         x: x * me.a + y * me.c + me.e,
	         y: x * me.b + y * me.d + me.f
	         };*/
	    }
	    function applyToX(x, y, z) {
	        return x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12];
	    }
	    function applyToY(x, y, z) {
	        return x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13];
	    }
	    function applyToZ(x, y, z) {
	        return x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14];
	    }

	    function getInverseMatrix() {
	        var determinant = this.props[0] * this.props[5] - this.props[1] * this.props[4];
	        var a = this.props[5]/determinant;
	        var b = - this.props[1]/determinant;
	        var c = - this.props[4]/determinant;
	        var d = this.props[0]/determinant;
	        var e = (this.props[4] * this.props[13] - this.props[5] * this.props[12])/determinant;
	        var f = - (this.props[0] * this.props[13] - this.props[1] * this.props[12])/determinant;
	        var inverseMatrix = new Matrix();
	        inverseMatrix.props[0] = a;
	        inverseMatrix.props[1] = b;
	        inverseMatrix.props[4] = c;
	        inverseMatrix.props[5] = d;
	        inverseMatrix.props[12] = e;
	        inverseMatrix.props[13] = f;
	        return inverseMatrix;
	    }

	    function inversePoint(pt) {
	        var inverseMatrix = this.getInverseMatrix();
	        return inverseMatrix.applyToPointArray(pt[0], pt[1], pt[2] || 0)
	    }

	    function inversePoints(pts){
	        var i, len = pts.length, retPts = [];
	        for(i=0;i<len;i+=1){
	            retPts[i] = inversePoint(pts[i]);
	        }
	        return retPts;
	    }

	    function applyToTriplePoints(pt1, pt2, pt3) {
	        var arr = createTypedArray('float32', 6);
	        if(this.isIdentity()) {
	            arr[0] = pt1[0];
	            arr[1] = pt1[1];
	            arr[2] = pt2[0];
	            arr[3] = pt2[1];
	            arr[4] = pt3[0];
	            arr[5] = pt3[1];
	        } else {
	            var p0 = this.props[0], p1 = this.props[1], p4 = this.props[4], p5 = this.props[5], p12 = this.props[12], p13 = this.props[13];
	            arr[0] = pt1[0] * p0 + pt1[1] * p4 + p12;
	            arr[1] = pt1[0] * p1 + pt1[1] * p5 + p13;
	            arr[2] = pt2[0] * p0 + pt2[1] * p4 + p12;
	            arr[3] = pt2[0] * p1 + pt2[1] * p5 + p13;
	            arr[4] = pt3[0] * p0 + pt3[1] * p4 + p12;
	            arr[5] = pt3[0] * p1 + pt3[1] * p5 + p13;
	        }
	        return arr;
	    }

	    function applyToPointArray(x,y,z){
	        var arr;
	        if(this.isIdentity()) {
	            arr = [x,y,z];
	        } else {
	            arr = [x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12],x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13],x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14]];
	        }
	        return arr;
	    }

	    function applyToPointStringified(x, y) {
	        if(this.isIdentity()) {
	            return x + ',' + y;
	        }
	        var _p = this.props;
	        return Math.round((x * _p[0] + y * _p[4] + _p[12]) * 100) / 100+','+ Math.round((x * _p[1] + y * _p[5] + _p[13]) * 100) / 100;
	    }

	    function toCSS() {
	        //Doesn't make much sense to add this optimization. If it is an identity matrix, it's very likely this will get called only once since it won't be keyframed.
	        /*if(this.isIdentity()) {
	            return '';
	        }*/
	        var i = 0;
	        var props = this.props;
	        var cssValue = 'matrix3d(';
	        var v = 10000;
	        while(i<16){
	            cssValue += _rnd(props[i]*v)/v;
	            cssValue += i === 15 ? ')':',';
	            i += 1;
	        }
	        return cssValue;
	    }

	    function roundMatrixProperty(val) {
	        var v = 10000;
	        if((val < 0.000001 && val > 0) || (val > -0.000001 && val < 0)) {
	            return _rnd(val * v) / v;
	        }
	        return val;
	    }

	    function to2dCSS() {
	        //Doesn't make much sense to add this optimization. If it is an identity matrix, it's very likely this will get called only once since it won't be keyframed.
	        /*if(this.isIdentity()) {
	            return '';
	        }*/
	        var props = this.props;
	        var _a = roundMatrixProperty(props[0]);
	        var _b = roundMatrixProperty(props[1]);
	        var _c = roundMatrixProperty(props[4]);
	        var _d = roundMatrixProperty(props[5]);
	        var _e = roundMatrixProperty(props[12]);
	        var _f = roundMatrixProperty(props[13]);
	        return "matrix(" + _a + ',' + _b + ',' + _c + ',' + _d + ',' + _e + ',' + _f + ")";
	    }

	    return function(){
	        this.reset = reset;
	        this.rotate = rotate;
	        this.rotateX = rotateX;
	        this.rotateY = rotateY;
	        this.rotateZ = rotateZ;
	        this.skew = skew;
	        this.skewFromAxis = skewFromAxis;
	        this.shear = shear;
	        this.scale = scale;
	        this.setTransform = setTransform;
	        this.translate = translate;
	        this.transform = transform;
	        this.applyToPoint = applyToPoint;
	        this.applyToX = applyToX;
	        this.applyToY = applyToY;
	        this.applyToZ = applyToZ;
	        this.applyToPointArray = applyToPointArray;
	        this.applyToTriplePoints = applyToTriplePoints;
	        this.applyToPointStringified = applyToPointStringified;
	        this.toCSS = toCSS;
	        this.to2dCSS = to2dCSS;
	        this.clone = clone;
	        this.cloneFromProps = cloneFromProps;
	        this.equals = equals;
	        this.inversePoints = inversePoints;
	        this.inversePoint = inversePoint;
	        this.getInverseMatrix = getInverseMatrix;
	        this._t = this.transform;
	        this.isIdentity = isIdentity;
	        this._identity = true;
	        this._identityCalculated = false;

	        this.props = createTypedArray('float32', 16);
	        this.reset();
	    };
	}());

	/*
	 Copyright 2014 David Bau.

	 Permission is hereby granted, free of charge, to any person obtaining
	 a copy of this software and associated documentation files (the
	 "Software"), to deal in the Software without restriction, including
	 without limitation the rights to use, copy, modify, merge, publish,
	 distribute, sublicense, and/or sell copies of the Software, and to
	 permit persons to whom the Software is furnished to do so, subject to
	 the following conditions:

	 The above copyright notice and this permission notice shall be
	 included in all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	 IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	 CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	 TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	 SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

	 */

	(function (pool, math) {
	//
	// The following constants are related to IEEE 754 limits.
	//
	    var global = this,
	        width = 256,        // each RC4 output is 0 <= x < 256
	        chunks = 6,         // at least six RC4 outputs for each double
	        digits = 52,        // there are 52 significant digits in a double
	        rngname = 'random', // rngname: name for Math.random and Math.seedrandom
	        startdenom = math.pow(width, chunks),
	        significance = math.pow(2, digits),
	        overflow = significance * 2,
	        mask = width - 1,
	        nodecrypto;         // node.js crypto module, initialized at the bottom.

	//
	// seedrandom()
	// This is the seedrandom function described above.
	//
	    function seedrandom(seed, options, callback) {
	        var key = [];
	        options = (options === true) ? { entropy: true } : (options || {});

	        // Flatten the seed string or build one from local entropy if needed.
	        var shortseed = mixkey(flatten(
	            options.entropy ? [seed, tostring(pool)] :
	                (seed === null) ? autoseed() : seed, 3), key);

	        // Use the seed to initialize an ARC4 generator.
	        var arc4 = new ARC4(key);

	        // This function returns a random double in [0, 1) that contains
	        // randomness in every bit of the mantissa of the IEEE 754 value.
	        var prng = function() {
	            var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48
	                d = startdenom,                 //   and denominator d = 2 ^ 48.
	                x = 0;                          //   and no 'extra last byte'.
	            while (n < significance) {          // Fill up all significant digits by
	                n = (n + x) * width;              //   shifting numerator and
	                d *= width;                       //   denominator and generating a
	                x = arc4.g(1);                    //   new least-significant-byte.
	            }
	            while (n >= overflow) {             // To avoid rounding up, before adding
	                n /= 2;                           //   last byte, shift everything
	                d /= 2;                           //   right using integer math until
	                x >>>= 1;                         //   we have exactly the desired bits.
	            }
	            return (n + x) / d;                 // Form the number within [0, 1).
	        };

	        prng.int32 = function() { return arc4.g(4) | 0; };
	        prng.quick = function() { return arc4.g(4) / 0x100000000; };
	        prng.double = prng;

	        // Mix the randomness into accumulated entropy.
	        mixkey(tostring(arc4.S), pool);

	        // Calling convention: what to return as a function of prng, seed, is_math.
	        return (options.pass || callback ||
	        function(prng, seed, is_math_call, state) {
	            if (state) {
	                // Load the arc4 state from the given state if it has an S array.
	                if (state.S) { copy(state, arc4); }
	                // Only provide the .state method if requested via options.state.
	                prng.state = function() { return copy(arc4, {}); };
	            }

	            // If called as a method of Math (Math.seedrandom()), mutate
	            // Math.random because that is how seedrandom.js has worked since v1.0.
	            if (is_math_call) { math[rngname] = prng; return seed; }

	            // Otherwise, it is a newer calling convention, so return the
	            // prng directly.
	            else return prng;
	        })(
	            prng,
	            shortseed,
	            'global' in options ? options.global : (this == math),
	            options.state);
	    }
	    math['seed' + rngname] = seedrandom;

	//
	// ARC4
	//
	// An ARC4 implementation.  The constructor takes a key in the form of
	// an array of at most (width) integers that should be 0 <= x < (width).
	//
	// The g(count) method returns a pseudorandom integer that concatenates
	// the next (count) outputs from ARC4.  Its return value is a number x
	// that is in the range 0 <= x < (width ^ count).
	//
	    function ARC4(key) {
	        var t, keylen = key.length,
	            me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];

	        // The empty key [] is treated as [0].
	        if (!keylen) { key = [keylen++]; }

	        // Set up S using the standard key scheduling algorithm.
	        while (i < width) {
	            s[i] = i++;
	        }
	        for (i = 0; i < width; i++) {
	            s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
	            s[j] = t;
	        }

	        // The "g" method returns the next (count) outputs as one number.
	        me.g = function(count) {
	            // Using instance members instead of closure state nearly doubles speed.
	            var t, r = 0,
	                i = me.i, j = me.j, s = me.S;
	            while (count--) {
	                t = s[i = mask & (i + 1)];
	                r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
	            }
	            me.i = i; me.j = j;
	            return r;
	            // For robust unpredictability, the function call below automatically
	            // discards an initial batch of values.  This is called RC4-drop[256].
	            // See http://google.com/search?q=rsa+fluhrer+response&btnI
	        };
	    }

	//
	// copy()
	// Copies internal state of ARC4 to or from a plain object.
	//
	    function copy(f, t) {
	        t.i = f.i;
	        t.j = f.j;
	        t.S = f.S.slice();
	        return t;
	    }

	//
	// flatten()
	// Converts an object tree to nested arrays of strings.
	//
	    function flatten(obj, depth) {
	        var result = [], typ = (typeof obj), prop;
	        if (depth && typ == 'object') {
	            for (prop in obj) {
	                try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
	            }
	        }
	        return (result.length ? result : typ == 'string' ? obj : obj + '\0');
	    }

	//
	// mixkey()
	// Mixes a string seed into a key that is an array of integers, and
	// returns a shortened string seed that is equivalent to the result key.
	//
	    function mixkey(seed, key) {
	        var stringseed = seed + '', smear, j = 0;
	        while (j < stringseed.length) {
	            key[mask & j] =
	                mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
	        }
	        return tostring(key);
	    }

	//
	// autoseed()
	// Returns an object for autoseeding, using window.crypto and Node crypto
	// module if available.
	//
	    function autoseed() {
	        try {
	            if (nodecrypto) { return tostring(nodecrypto.randomBytes(width)); }
	            var out = new Uint8Array(width);
	            (global.crypto || global.msCrypto).getRandomValues(out);
	            return tostring(out);
	        } catch (e) {
	            var browser = global.navigator,
	                plugins = browser && browser.plugins;
	            return [+new Date(), global, plugins, global.screen, tostring(pool)];
	        }
	    }

	//
	// tostring()
	// Converts an array of charcodes to a string
	//
	    function tostring(a) {
	        return String.fromCharCode.apply(0, a);
	    }

	//
	// When seedrandom.js is loaded, we immediately mix a few bits
	// from the built-in RNG into the entropy pool.  Because we do
	// not want to interfere with deterministic PRNG state later,
	// seedrandom will not call math.random on its own again after
	// initialization.
	//
	    mixkey(math.random(), pool);

	//
	// Nodejs and AMD support: export the implementation as a module using
	// either convention.
	//

	// End anonymous scope, and pass initial values.
	})(
	    [],     // pool: entropy pool starts empty
	    BMMath    // math: package containing random, pow, and seedrandom
	);
	var BezierFactory = (function(){
	    /**
	     * BezierEasing - use bezier curve for transition easing function
	     * by Gaëtan Renaudeau 2014 - 2015 – MIT License
	     *
	     * Credits: is based on Firefox's nsSMILKeySpline.cpp
	     * Usage:
	     * var spline = BezierEasing([ 0.25, 0.1, 0.25, 1.0 ])
	     * spline.get(x) => returns the easing value | x must be in [0, 1] range
	     *
	     */

	        var ob = {};
	    ob.getBezierEasing = getBezierEasing;
	    var beziers = {};

	    function getBezierEasing(a,b,c,d,nm){
	        var str = nm || ('bez_' + a+'_'+b+'_'+c+'_'+d).replace(/\./g, 'p');
	        if(beziers[str]){
	            return beziers[str];
	        }
	        var bezEasing = new BezierEasing([a,b,c,d]);
	        beziers[str] = bezEasing;
	        return bezEasing;
	    }

	// These values are established by empiricism with tests (tradeoff: performance VS precision)
	    var NEWTON_ITERATIONS = 4;
	    var NEWTON_MIN_SLOPE = 0.001;
	    var SUBDIVISION_PRECISION = 0.0000001;
	    var SUBDIVISION_MAX_ITERATIONS = 10;

	    var kSplineTableSize = 11;
	    var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);

	    var float32ArraySupported = typeof Float32Array === "function";

	    function A (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }
	    function B (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }
	    function C (aA1)      { return 3.0 * aA1; }

	// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
	    function calcBezier (aT, aA1, aA2) {
	        return ((A(aA1, aA2)*aT + B(aA1, aA2))*aT + C(aA1))*aT;
	    }

	// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.
	    function getSlope (aT, aA1, aA2) {
	        return 3.0 * A(aA1, aA2)*aT*aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
	    }

	    function binarySubdivide (aX, aA, aB, mX1, mX2) {
	        var currentX, currentT, i = 0;
	        do {
	            currentT = aA + (aB - aA) / 2.0;
	            currentX = calcBezier(currentT, mX1, mX2) - aX;
	            if (currentX > 0.0) {
	                aB = currentT;
	            } else {
	                aA = currentT;
	            }
	        } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
	        return currentT;
	    }

	    function newtonRaphsonIterate (aX, aGuessT, mX1, mX2) {
	        for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
	            var currentSlope = getSlope(aGuessT, mX1, mX2);
	            if (currentSlope === 0.0) return aGuessT;
	            var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
	            aGuessT -= currentX / currentSlope;
	        }
	        return aGuessT;
	    }

	    /**
	     * points is an array of [ mX1, mY1, mX2, mY2 ]
	     */
	    function BezierEasing (points) {
	        this._p = points;
	        this._mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
	        this._precomputed = false;

	        this.get = this.get.bind(this);
	    }

	    BezierEasing.prototype = {

	        get: function (x) {
	            var mX1 = this._p[0],
	                mY1 = this._p[1],
	                mX2 = this._p[2],
	                mY2 = this._p[3];
	            if (!this._precomputed) this._precompute();
	            if (mX1 === mY1 && mX2 === mY2) return x; // linear
	            // Because JavaScript number are imprecise, we should guarantee the extremes are right.
	            if (x === 0) return 0;
	            if (x === 1) return 1;
	            return calcBezier(this._getTForX(x), mY1, mY2);
	        },

	        // Private part

	        _precompute: function () {
	            var mX1 = this._p[0],
	                mY1 = this._p[1],
	                mX2 = this._p[2],
	                mY2 = this._p[3];
	            this._precomputed = true;
	            if (mX1 !== mY1 || mX2 !== mY2)
	                this._calcSampleValues();
	        },

	        _calcSampleValues: function () {
	            var mX1 = this._p[0],
	                mX2 = this._p[2];
	            for (var i = 0; i < kSplineTableSize; ++i) {
	                this._mSampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
	            }
	        },

	        /**
	         * getTForX chose the fastest heuristic to determine the percentage value precisely from a given X projection.
	         */
	        _getTForX: function (aX) {
	            var mX1 = this._p[0],
	                mX2 = this._p[2],
	                mSampleValues = this._mSampleValues;

	            var intervalStart = 0.0;
	            var currentSample = 1;
	            var lastSample = kSplineTableSize - 1;

	            for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
	                intervalStart += kSampleStepSize;
	            }
	            --currentSample;

	            // Interpolate to provide an initial guess for t
	            var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample+1] - mSampleValues[currentSample]);
	            var guessForT = intervalStart + dist * kSampleStepSize;

	            var initialSlope = getSlope(guessForT, mX1, mX2);
	            if (initialSlope >= NEWTON_MIN_SLOPE) {
	                return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
	            } else if (initialSlope === 0.0) {
	                return guessForT;
	            } else {
	                return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
	            }
	        }
	    };

	    return ob;

	}());
	(function () {
	    var lastTime = 0;
	    var vendors = ['ms', 'moz', 'webkit', 'o'];
	    for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
	        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
	        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
	    }
	    if(!window.requestAnimationFrame)
	        window.requestAnimationFrame = function (callback, element) {
	            var currTime = new Date().getTime();
	            var timeToCall = Math.max(0, 16 - (currTime - lastTime));
	            var id = setTimeout(function () {
	                    callback(currTime + timeToCall);
	                },
	                timeToCall);
	            lastTime = currTime + timeToCall;
	            return id;
	        };
	    if(!window.cancelAnimationFrame)
	        window.cancelAnimationFrame = function (id) {
	            clearTimeout(id);
	        };
	}());

	function extendPrototype(sources,destination){
	    var i, len = sources.length, sourcePrototype;
	    for (i = 0;i < len;i += 1) {
	        sourcePrototype = sources[i].prototype;
	        for (var attr in sourcePrototype) {
	            if (sourcePrototype.hasOwnProperty(attr)) destination.prototype[attr] = sourcePrototype[attr];
	        }
	    }
	}

	function getDescriptor(object, prop) {
	    return Object.getOwnPropertyDescriptor(object, prop);
	}

	function createProxyFunction(prototype) {
		function ProxyFunction(){}
		ProxyFunction.prototype = prototype;
		return ProxyFunction;
	}
	function bezFunction(){

	    function pointOnLine2D(x1,y1, x2,y2, x3,y3){
	        var det1 = (x1*y2) + (y1*x3) + (x2*y3) - (x3*y2) - (y3*x1) - (x2*y1);
	        return det1 > -0.001 && det1 < 0.001;
	    }

	    function pointOnLine3D(x1,y1,z1, x2,y2,z2, x3,y3,z3){
	        if(z1 === 0 && z2 === 0 && z3 === 0) {
	            return pointOnLine2D(x1,y1, x2,y2, x3,y3);
	        }
	        var dist1 = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2) + Math.pow(z2 - z1, 2));
	        var dist2 = Math.sqrt(Math.pow(x3 - x1, 2) + Math.pow(y3 - y1, 2) + Math.pow(z3 - z1, 2));
	        var dist3 = Math.sqrt(Math.pow(x3 - x2, 2) + Math.pow(y3 - y2, 2) + Math.pow(z3 - z2, 2));
	        var diffDist;
	        if(dist1 > dist2){
	            if(dist1 > dist3){
	                diffDist = dist1 - dist2 - dist3;
	            } else {
	                diffDist = dist3 - dist2 - dist1;
	            }
	        } else if(dist3 > dist2){
	            diffDist = dist3 - dist2 - dist1;
	        } else {
	            diffDist = dist2 - dist1 - dist3;
	        }
	        return diffDist > -0.0001 && diffDist < 0.0001;
	    }

	    var getBezierLength = (function(){

	        return function(pt1,pt2,pt3,pt4){
	            var curveSegments = defaultCurveSegments;
	            var k;
	            var i, len;
	            var ptCoord,perc,addedLength = 0;
	            var ptDistance;
	            var point = [],lastPoint = [];
	            var lengthData = bezier_length_pool.newElement();
	            len = pt3.length;
	            for(k=0;k<curveSegments;k+=1){
	                perc = k/(curveSegments-1);
	                ptDistance = 0;
	                for(i=0;i<len;i+=1){
	                    ptCoord = bm_pow(1-perc,3)*pt1[i]+3*bm_pow(1-perc,2)*perc*pt3[i]+3*(1-perc)*bm_pow(perc,2)*pt4[i]+bm_pow(perc,3)*pt2[i];
	                    point[i] = ptCoord;
	                    if(lastPoint[i] !== null){
	                        ptDistance += bm_pow(point[i] - lastPoint[i],2);
	                    }
	                    lastPoint[i] = point[i];
	                }
	                if(ptDistance){
	                    ptDistance = bm_sqrt(ptDistance);
	                    addedLength += ptDistance;
	                }
	                lengthData.percents[k] = perc;
	                lengthData.lengths[k] = addedLength;
	            }
	            lengthData.addedLength = addedLength;
	            return lengthData;
	        };
	    }());

	    function getSegmentsLength(shapeData) {
	        var segmentsLength = segments_length_pool.newElement();
	        var closed = shapeData.c;
	        var pathV = shapeData.v;
	        var pathO = shapeData.o;
	        var pathI = shapeData.i;
	        var i, len = shapeData._length;
	        var lengths = segmentsLength.lengths;
	        var totalLength = 0;
	        for(i=0;i<len-1;i+=1){
	            lengths[i] = getBezierLength(pathV[i],pathV[i+1],pathO[i],pathI[i+1]);
	            totalLength += lengths[i].addedLength;
	        }
	        if(closed && len){
	            lengths[i] = getBezierLength(pathV[i],pathV[0],pathO[i],pathI[0]);
	            totalLength += lengths[i].addedLength;
	        }
	        segmentsLength.totalLength = totalLength;
	        return segmentsLength;
	    }

	    function BezierData(length){
	        this.segmentLength = 0;
	        this.points = new Array(length);
	    }

	    function PointData(partial,point){
	        this.partialLength = partial;
	        this.point = point;
	    }

	    var buildBezierData = (function(){

	        var storedData = {};

	        return function (pt1, pt2, pt3, pt4){
	            var bezierName = (pt1[0]+'_'+pt1[1]+'_'+pt2[0]+'_'+pt2[1]+'_'+pt3[0]+'_'+pt3[1]+'_'+pt4[0]+'_'+pt4[1]).replace(/\./g, 'p');
	            if(!storedData[bezierName]){
	                var curveSegments = defaultCurveSegments;
	                var k, i, len;
	                var ptCoord,perc,addedLength = 0;
	                var ptDistance;
	                var point,lastPoint = null;
	                if (pt1.length === 2 && (pt1[0] != pt2[0] || pt1[1] != pt2[1]) && pointOnLine2D(pt1[0],pt1[1],pt2[0],pt2[1],pt1[0]+pt3[0],pt1[1]+pt3[1]) && pointOnLine2D(pt1[0],pt1[1],pt2[0],pt2[1],pt2[0]+pt4[0],pt2[1]+pt4[1])){
	                    curveSegments = 2;
	                }
	                var bezierData = new BezierData(curveSegments);
	                len = pt3.length;
	                for (k = 0; k < curveSegments; k += 1) {
	                    point = createSizedArray(len);
	                    perc = k / (curveSegments - 1);
	                    ptDistance = 0;
	                    for (i = 0; i < len; i += 1){
	                        ptCoord = bm_pow(1-perc,3)*pt1[i]+3*bm_pow(1-perc,2)*perc*(pt1[i] + pt3[i])+3*(1-perc)*bm_pow(perc,2)*(pt2[i] + pt4[i])+bm_pow(perc,3)*pt2[i];
	                        point[i] = ptCoord;
	                        if(lastPoint !== null){
	                            ptDistance += bm_pow(point[i] - lastPoint[i],2);
	                        }
	                    }
	                    ptDistance = bm_sqrt(ptDistance);
	                    addedLength += ptDistance;
	                    bezierData.points[k] = new PointData(ptDistance, point);
	                    lastPoint = point;
	                }
	                bezierData.segmentLength = addedLength;
	                storedData[bezierName] = bezierData;
	            }
	            return storedData[bezierName];
	        };
	    }());

	    function getDistancePerc(perc,bezierData){
	        var percents = bezierData.percents;
	        var lengths = bezierData.lengths;
	        var len = percents.length;
	        var initPos = bm_floor((len-1)*perc);
	        var lengthPos = perc*bezierData.addedLength;
	        var lPerc = 0;
	        if(initPos === len - 1 || initPos === 0 || lengthPos === lengths[initPos]){
	            return percents[initPos];
	        }else {
	            var dir = lengths[initPos] > lengthPos ? -1 : 1;
	            var flag = true;
	            while(flag){
	                if(lengths[initPos] <= lengthPos && lengths[initPos+1] > lengthPos){
	                    lPerc = (lengthPos - lengths[initPos]) / (lengths[initPos+1] - lengths[initPos]);
	                    flag = false;
	                }else {
	                    initPos += dir;
	                }
	                if(initPos < 0 || initPos >= len - 1){
	                    //FIX for TypedArrays that don't store floating point values with enough accuracy
	                    if(initPos === len - 1) {
	                        return percents[initPos];
	                    }
	                    flag = false;
	                }
	            }
	            return percents[initPos] + (percents[initPos+1] - percents[initPos])*lPerc;
	        }
	    }

	    function getPointInSegment(pt1, pt2, pt3, pt4, percent, bezierData) {
	        var t1 = getDistancePerc(percent,bezierData);
	        var u1 = 1 - t1;
	        var ptX = Math.round((u1*u1*u1* pt1[0] + (t1*u1*u1 + u1*t1*u1 + u1*u1*t1)* pt3[0] + (t1*t1*u1 + u1*t1*t1 + t1*u1*t1)*pt4[0] + t1*t1*t1* pt2[0])* 1000) / 1000;
	        var ptY = Math.round((u1*u1*u1* pt1[1] + (t1*u1*u1 + u1*t1*u1 + u1*u1*t1)* pt3[1] + (t1*t1*u1 + u1*t1*t1 + t1*u1*t1)*pt4[1] + t1*t1*t1* pt2[1])* 1000) / 1000;
	        return [ptX, ptY];
	    }

	    var bezier_segment_points = createTypedArray('float32', 8);

	    function getNewSegment(pt1,pt2,pt3,pt4,startPerc,endPerc, bezierData){

	        startPerc = startPerc < 0 ? 0 : startPerc > 1 ? 1 : startPerc;
	        var t0 = getDistancePerc(startPerc,bezierData);
	        endPerc = endPerc > 1 ? 1 : endPerc;
	        var t1 = getDistancePerc(endPerc,bezierData);
	        var i, len = pt1.length;
	        var u0 = 1 - t0;
	        var u1 = 1 - t1;
	        var u0u0u0 = u0*u0*u0;
	        var t0u0u0_3 = t0*u0*u0*3;
	        var t0t0u0_3 = t0*t0*u0*3;
	        var t0t0t0 = t0*t0*t0;
	        //
	        var u0u0u1 = u0*u0*u1;
	        var t0u0u1_3 = t0*u0*u1 + u0*t0*u1 + u0*u0*t1;
	        var t0t0u1_3 = t0*t0*u1 + u0*t0*t1 + t0*u0*t1;
	        var t0t0t1 = t0*t0*t1;
	        //
	        var u0u1u1 = u0*u1*u1;
	        var t0u1u1_3 = t0*u1*u1 + u0*t1*u1 + u0*u1*t1;
	        var t0t1u1_3 = t0*t1*u1 + u0*t1*t1 + t0*u1*t1;
	        var t0t1t1 = t0*t1*t1;
	        //
	        var u1u1u1 = u1*u1*u1;
	        var t1u1u1_3 = t1*u1*u1 + u1*t1*u1 + u1*u1*t1;
	        var t1t1u1_3 = t1*t1*u1 + u1*t1*t1 + t1*u1*t1;
	        var t1t1t1 = t1*t1*t1;
	        for(i=0;i<len;i+=1){
	            bezier_segment_points[i * 4] = Math.round((u0u0u0 * pt1[i] + t0u0u0_3 * pt3[i] + t0t0u0_3 * pt4[i] + t0t0t0 * pt2[i]) * 1000) / 1000;
	            bezier_segment_points[i * 4 + 1] = Math.round((u0u0u1 * pt1[i] + t0u0u1_3 * pt3[i] + t0t0u1_3 * pt4[i] + t0t0t1 * pt2[i]) * 1000) / 1000;
	            bezier_segment_points[i * 4 + 2] = Math.round((u0u1u1 * pt1[i] + t0u1u1_3 * pt3[i] + t0t1u1_3 * pt4[i] + t0t1t1 * pt2[i]) * 1000) / 1000;
	            bezier_segment_points[i * 4 + 3] = Math.round((u1u1u1 * pt1[i] + t1u1u1_3 * pt3[i] + t1t1u1_3 * pt4[i] + t1t1t1 * pt2[i]) * 1000) / 1000;
	        }

	        return bezier_segment_points;
	    }

	    return {
	        getSegmentsLength : getSegmentsLength,
	        getNewSegment : getNewSegment,
	        getPointInSegment : getPointInSegment,
	        buildBezierData : buildBezierData,
	        pointOnLine2D : pointOnLine2D,
	        pointOnLine3D : pointOnLine3D
	    };
	}

	var bez = bezFunction();
	function dataFunctionManager(){

	    //var tCanvasHelper = createTag('canvas').getContext('2d');

	    function completeLayers(layers, comps, fontManager){
	        var layerData;
	        var i, len = layers.length;
	        var j, jLen, k, kLen;
	        for(i=0;i<len;i+=1){
	            layerData = layers[i];
	            if(!('ks' in layerData) || layerData.completed){
	                continue;
	            }
	            layerData.completed = true;
	            if(layerData.tt){
	                layers[i-1].td = layerData.tt;
	            }
	            if(layerData.hasMask){
	                var maskProps = layerData.masksProperties;
	                jLen = maskProps.length;
	                for(j=0;j<jLen;j+=1){
	                    if(maskProps[j].pt.k.i){
	                        convertPathsToAbsoluteValues(maskProps[j].pt.k);
	                    }else {
	                        kLen = maskProps[j].pt.k.length;
	                        for(k=0;k<kLen;k+=1){
	                            if(maskProps[j].pt.k[k].s){
	                                convertPathsToAbsoluteValues(maskProps[j].pt.k[k].s[0]);
	                            }
	                            if(maskProps[j].pt.k[k].e){
	                                convertPathsToAbsoluteValues(maskProps[j].pt.k[k].e[0]);
	                            }
	                        }
	                    }
	                }
	            }
	            if(layerData.ty===0){
	                layerData.layers = findCompLayers(layerData.refId, comps);
	                completeLayers(layerData.layers,comps);
	            }else if(layerData.ty === 4){
	                completeShapes(layerData.shapes);
	            }else if(layerData.ty == 5){
	                completeText(layerData);
	            }
	        }
	    }

	    function findCompLayers(id,comps){
	        var i = 0, len = comps.length;
	        while(i<len){
	            if(comps[i].id === id){
	                if(!comps[i].layers.__used) {
	                    comps[i].layers.__used = true;
	                    return comps[i].layers;
	                }
	                return JSON.parse(JSON.stringify(comps[i].layers));
	            }
	            i += 1;
	        }
	    }

	    function completeShapes(arr){
	        var i, len = arr.length;
	        var j, jLen;
	        for(i=len-1;i>=0;i-=1){
	            if(arr[i].ty == 'sh'){
	                if(arr[i].ks.k.i){
	                    convertPathsToAbsoluteValues(arr[i].ks.k);
	                }else {
	                    jLen = arr[i].ks.k.length;
	                    for(j=0;j<jLen;j+=1){
	                        if(arr[i].ks.k[j].s){
	                            convertPathsToAbsoluteValues(arr[i].ks.k[j].s[0]);
	                        }
	                        if(arr[i].ks.k[j].e){
	                            convertPathsToAbsoluteValues(arr[i].ks.k[j].e[0]);
	                        }
	                    }
	                }
	            }else if(arr[i].ty == 'gr'){
	                completeShapes(arr[i].it);
	            }
	        }
	        /*if(hasPaths){
	            //mx: distance
	            //ss: sensitivity
	            //dc: decay
	            arr.splice(arr.length-1,0,{
	                "ty": "ms",
	                "mx":20,
	                "ss":10,
	                 "dc":0.001,
	                "maxDist":200
	            });
	        }*/
	    }

	    function convertPathsToAbsoluteValues(path){
	        var i, len = path.i.length;
	        for(i=0;i<len;i+=1){
	            path.i[i][0] += path.v[i][0];
	            path.i[i][1] += path.v[i][1];
	            path.o[i][0] += path.v[i][0];
	            path.o[i][1] += path.v[i][1];
	        }
	    }

	    function checkVersion(minimum,animVersionString){
	        var animVersion = animVersionString ? animVersionString.split('.') : [100,100,100];
	        if(minimum[0]>animVersion[0]){
	            return true;
	        } else if(animVersion[0] > minimum[0]){
	            return false;
	        }
	        if(minimum[1]>animVersion[1]){
	            return true;
	        } else if(animVersion[1] > minimum[1]){
	            return false;
	        }
	        if(minimum[2]>animVersion[2]){
	            return true;
	        } else if(animVersion[2] > minimum[2]){
	            return false;
	        }
	    }

	    var checkText = (function(){
	        var minimumVersion = [4,4,14];

	        function updateTextLayer(textLayer){
	            var documentData = textLayer.t.d;
	            textLayer.t.d = {
	                k: [
	                    {
	                        s:documentData,
	                        t:0
	                    }
	                ]
	            };
	        }

	        function iterateLayers(layers){
	            var i, len = layers.length;
	            for(i=0;i<len;i+=1){
	                if(layers[i].ty === 5){
	                    updateTextLayer(layers[i]);
	                }
	            }
	        }

	        return function (animationData){
	            if(checkVersion(minimumVersion,animationData.v)){
	                iterateLayers(animationData.layers);
	                if(animationData.assets){
	                    var i, len = animationData.assets.length;
	                    for(i=0;i<len;i+=1){
	                        if(animationData.assets[i].layers){
	                            iterateLayers(animationData.assets[i].layers);

	                        }
	                    }
	                }
	            }
	        };
	    }());

	    var checkChars = (function() {
	        var minimumVersion = [4,7,99];
	        return function (animationData){
	            if(animationData.chars && !checkVersion(minimumVersion,animationData.v)){
	                var i, len = animationData.chars.length, j, jLen;
	                var pathData, paths;
	                for(i = 0; i < len; i += 1) {
	                    if(animationData.chars[i].data && animationData.chars[i].data.shapes) {
	                        paths = animationData.chars[i].data.shapes[0].it;
	                        jLen = paths.length;

	                        for(j = 0; j < jLen; j += 1) {
	                            pathData = paths[j].ks.k;
	                            if(!pathData.__converted) {
	                                convertPathsToAbsoluteValues(paths[j].ks.k);
	                                pathData.__converted = true;
	                            }
	                        }
	                    }
	                }
	            }
	        };
	    }());

	    var checkColors = (function(){
	        var minimumVersion = [4,1,9];

	        function iterateShapes(shapes){
	            var i, len = shapes.length;
	            var j, jLen;
	            for(i=0;i<len;i+=1){
	                if(shapes[i].ty === 'gr'){
	                    iterateShapes(shapes[i].it);
	                }else if(shapes[i].ty === 'fl' || shapes[i].ty === 'st'){
	                    if(shapes[i].c.k && shapes[i].c.k[0].i){
	                        jLen = shapes[i].c.k.length;
	                        for(j=0;j<jLen;j+=1){
	                            if(shapes[i].c.k[j].s){
	                                shapes[i].c.k[j].s[0] /= 255;
	                                shapes[i].c.k[j].s[1] /= 255;
	                                shapes[i].c.k[j].s[2] /= 255;
	                                shapes[i].c.k[j].s[3] /= 255;
	                            }
	                            if(shapes[i].c.k[j].e){
	                                shapes[i].c.k[j].e[0] /= 255;
	                                shapes[i].c.k[j].e[1] /= 255;
	                                shapes[i].c.k[j].e[2] /= 255;
	                                shapes[i].c.k[j].e[3] /= 255;
	                            }
	                        }
	                    } else {
	                        shapes[i].c.k[0] /= 255;
	                        shapes[i].c.k[1] /= 255;
	                        shapes[i].c.k[2] /= 255;
	                        shapes[i].c.k[3] /= 255;
	                    }
	                }
	            }
	        }

	        function iterateLayers(layers){
	            var i, len = layers.length;
	            for(i=0;i<len;i+=1){
	                if(layers[i].ty === 4){
	                    iterateShapes(layers[i].shapes);
	                }
	            }
	        }

	        return function (animationData){
	            if(checkVersion(minimumVersion,animationData.v)){
	                iterateLayers(animationData.layers);
	                if(animationData.assets){
	                    var i, len = animationData.assets.length;
	                    for(i=0;i<len;i+=1){
	                        if(animationData.assets[i].layers){
	                            iterateLayers(animationData.assets[i].layers);

	                        }
	                    }
	                }
	            }
	        };
	    }());

	    var checkShapes = (function(){
	        var minimumVersion = [4,4,18];



	        function completeShapes(arr){
	            var i, len = arr.length;
	            var j, jLen;
	            for(i=len-1;i>=0;i-=1){
	                if(arr[i].ty == 'sh'){
	                    if(arr[i].ks.k.i){
	                        arr[i].ks.k.c = arr[i].closed;
	                    }else {
	                        jLen = arr[i].ks.k.length;
	                        for(j=0;j<jLen;j+=1){
	                            if(arr[i].ks.k[j].s){
	                                arr[i].ks.k[j].s[0].c = arr[i].closed;
	                            }
	                            if(arr[i].ks.k[j].e){
	                                arr[i].ks.k[j].e[0].c = arr[i].closed;
	                            }
	                        }
	                    }
	                }else if(arr[i].ty == 'gr'){
	                    completeShapes(arr[i].it);
	                }
	            }
	        }

	        function iterateLayers(layers){
	            var layerData;
	            var i, len = layers.length;
	            var j, jLen, k, kLen;
	            for(i=0;i<len;i+=1){
	                layerData = layers[i];
	                if(layerData.hasMask){
	                    var maskProps = layerData.masksProperties;
	                    jLen = maskProps.length;
	                    for(j=0;j<jLen;j+=1){
	                        if(maskProps[j].pt.k.i){
	                            maskProps[j].pt.k.c = maskProps[j].cl;
	                        }else {
	                            kLen = maskProps[j].pt.k.length;
	                            for(k=0;k<kLen;k+=1){
	                                if(maskProps[j].pt.k[k].s){
	                                    maskProps[j].pt.k[k].s[0].c = maskProps[j].cl;
	                                }
	                                if(maskProps[j].pt.k[k].e){
	                                    maskProps[j].pt.k[k].e[0].c = maskProps[j].cl;
	                                }
	                            }
	                        }
	                    }
	                }
	                if(layerData.ty === 4){
	                    completeShapes(layerData.shapes);
	                }
	            }
	        }

	        return function (animationData){
	            if(checkVersion(minimumVersion,animationData.v)){
	                iterateLayers(animationData.layers);
	                if(animationData.assets){
	                    var i, len = animationData.assets.length;
	                    for(i=0;i<len;i+=1){
	                        if(animationData.assets[i].layers){
	                            iterateLayers(animationData.assets[i].layers);

	                        }
	                    }
	                }
	            }
	        };
	    }());

	    function completeData(animationData, fontManager){
	        if(animationData.__complete){
	            return;
	        }
	        checkColors(animationData);
	        checkText(animationData);
	        checkChars(animationData);
	        checkShapes(animationData);
	        completeLayers(animationData.layers, animationData.assets);
	        animationData.__complete = true;
	        //blitAnimation(animationData, animationData.assets, fontManager);
	    }

	    function completeText(data, fontManager){
	        if(data.t.a.length === 0 && !('m' in data.t.p)){
	            data.singleShape = true;
	        }
	    }

	    var moduleOb = {};
	    moduleOb.completeData = completeData;
	    moduleOb.checkColors = checkColors;
	    moduleOb.checkChars = checkChars;
	    moduleOb.checkShapes = checkShapes;
	    moduleOb.completeLayers = completeLayers;

	    return moduleOb;
	}

	var dataManager = dataFunctionManager();

	var FontManager = (function(){

	    var maxWaitingTime = 5000;
	    var emptyChar = {
	        w: 0,
	        size:0,
	        shapes:[]
	    };
	    var combinedCharacters = [];
	    //Hindi characters
	    combinedCharacters = combinedCharacters.concat([2304, 2305, 2306, 2307, 2362, 2363, 2364, 2364, 2366
	    , 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379
	    , 2380, 2381, 2382, 2383, 2387, 2388, 2389, 2390, 2391, 2402, 2403]);

	    function trimFontOptions(font) {
	        var familyArray = font.split(',');
	        var i, len = familyArray.length;
	        var enabledFamilies = [];
	        for (i = 0; i < len; i += 1) {
	            if (familyArray[i] !== 'sans-serif' && familyArray[i] !== 'monospace') {
	                enabledFamilies.push(familyArray[i]);
	            }
	        }
	        return enabledFamilies.join(',');
	    }

	    function setUpNode(font, family){
	        var parentNode = createTag('span');
	        parentNode.style.fontFamily    = family;
	        var node = createTag('span');
	        // Characters that vary significantly among different fonts
	        node.innerHTML = 'giItT1WQy@!-/#';
	        // Visible - so we can measure it - but not on the screen
	        parentNode.style.position      = 'absolute';
	        parentNode.style.left          = '-10000px';
	        parentNode.style.top           = '-10000px';
	        // Large font size makes even subtle changes obvious
	        parentNode.style.fontSize      = '300px';
	        // Reset any font properties
	        parentNode.style.fontVariant   = 'normal';
	        parentNode.style.fontStyle     = 'normal';
	        parentNode.style.fontWeight    = 'normal';
	        parentNode.style.letterSpacing = '0';
	        parentNode.appendChild(node);
	        document.body.appendChild(parentNode);

	        // Remember width with no applied web font
	        var width = node.offsetWidth;
	        node.style.fontFamily = trimFontOptions(font) + ', ' + family;
	        return {node:node, w:width, parent:parentNode};
	    }

	    function checkLoadedFonts() {
	        var i, len = this.fonts.length;
	        var node, w;
	        var loadedCount = len;
	        for(i=0;i<len; i+= 1){
	            if(this.fonts[i].loaded){
	                loadedCount -= 1;
	                continue;
	            }
	            if(this.fonts[i].fOrigin === 'n' || this.fonts[i].origin === 0){
	                this.fonts[i].loaded = true;
	            } else {
	                node = this.fonts[i].monoCase.node;
	                w = this.fonts[i].monoCase.w;
	                if(node.offsetWidth !== w){
	                    loadedCount -= 1;
	                    this.fonts[i].loaded = true;
	                }else {
	                    node = this.fonts[i].sansCase.node;
	                    w = this.fonts[i].sansCase.w;
	                    if(node.offsetWidth !== w){
	                        loadedCount -= 1;
	                        this.fonts[i].loaded = true;
	                    }
	                }
	                if(this.fonts[i].loaded){
	                    this.fonts[i].sansCase.parent.parentNode.removeChild(this.fonts[i].sansCase.parent);
	                    this.fonts[i].monoCase.parent.parentNode.removeChild(this.fonts[i].monoCase.parent);
	                }
	            }
	        }

	        if(loadedCount !== 0 && Date.now() - this.initTime < maxWaitingTime){
	            setTimeout(this.checkLoadedFontsBinded, 20);
	        }else {
	            setTimeout(this.setIsLoadedBinded, 10);

	        }
	    }

	    function createHelper(def, fontData){
	        var tHelper = createNS('text');
	        tHelper.style.fontSize = '100px';
	        //tHelper.style.fontFamily = fontData.fFamily;
	        tHelper.setAttribute('font-family', fontData.fFamily);
	        tHelper.setAttribute('font-style', fontData.fStyle);
	        tHelper.setAttribute('font-weight', fontData.fWeight);
	        tHelper.textContent = '1';
	        if(fontData.fClass){
	            tHelper.style.fontFamily = 'inherit';
	            tHelper.setAttribute('class', fontData.fClass);
	        } else {
	            tHelper.style.fontFamily = fontData.fFamily;
	        }
	        def.appendChild(tHelper);
	        var tCanvasHelper = createTag('canvas').getContext('2d');
	        tCanvasHelper.font = fontData.fWeight + ' ' + fontData.fStyle + ' 100px '+ fontData.fFamily;
	        //tCanvasHelper.font = ' 100px '+ fontData.fFamily;
	        return tHelper;
	    }

	    function addFonts(fontData, defs){
	        if(!fontData){
	            this.isLoaded = true;
	            return;
	        }
	        if(this.chars){
	            this.isLoaded = true;
	            this.fonts = fontData.list;
	            return;
	        }


	        var fontArr = fontData.list;
	        var i, len = fontArr.length;
	        var _pendingFonts = len;
	        for(i=0; i<len; i+= 1){
	            var shouldLoadFont = true;
	            var loadedSelector;
	            var j;
	            fontArr[i].loaded = false;
	            fontArr[i].monoCase = setUpNode(fontArr[i].fFamily,'monospace');
	            fontArr[i].sansCase = setUpNode(fontArr[i].fFamily,'sans-serif');
	            if(!fontArr[i].fPath) {
	                fontArr[i].loaded = true;
	                _pendingFonts -= 1;
	            }else if(fontArr[i].fOrigin === 'p' || fontArr[i].origin === 3){
	                loadedSelector = document.querySelectorAll('style[f-forigin="p"][f-family="'+ fontArr[i].fFamily +'"], style[f-origin="3"][f-family="'+ fontArr[i].fFamily +'"]');

	                if (loadedSelector.length > 0) {
	                    shouldLoadFont = false;
	                }

	                if (shouldLoadFont) {
	                    var s = createTag('style');
	                    s.setAttribute('f-forigin', fontArr[i].fOrigin);
	                    s.setAttribute('f-origin', fontArr[i].origin);
	                    s.setAttribute('f-family', fontArr[i].fFamily);
	                    s.type = "text/css";
	                    s.innerHTML = "@font-face {" + "font-family: "+fontArr[i].fFamily+"; font-style: normal; src: url('"+fontArr[i].fPath+"');}";
	                    defs.appendChild(s);
	                }
	            } else if(fontArr[i].fOrigin === 'g' || fontArr[i].origin === 1){
	                loadedSelector = document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]');

	                for (j = 0; j < loadedSelector.length; j++) {
	                    if (loadedSelector[j].href.indexOf(fontArr[i].fPath) !== -1) {
	                        // Font is already loaded
	                        shouldLoadFont = false;
	                    }
	                }

	                if (shouldLoadFont) {
	                    var l = createTag('link');
	                    l.setAttribute('f-forigin', fontArr[i].fOrigin);
	                    l.setAttribute('f-origin', fontArr[i].origin);
	                    l.type = "text/css";
	                    l.rel = "stylesheet";
	                    l.href = fontArr[i].fPath;
	                    document.body.appendChild(l);
	                }
	            } else if(fontArr[i].fOrigin === 't' || fontArr[i].origin === 2){
	                loadedSelector = document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]');

	                for (j = 0; j < loadedSelector.length; j++) {
	                    if (fontArr[i].fPath === loadedSelector[j].src) {
	                        // Font is already loaded
	                        shouldLoadFont = false;
	                    }
	                }

	                if (shouldLoadFont) {
	                    var sc = createTag('link');
	                    sc.setAttribute('f-forigin', fontArr[i].fOrigin);
	                    sc.setAttribute('f-origin', fontArr[i].origin);
	                    sc.setAttribute('rel','stylesheet');
	                    sc.setAttribute('href',fontArr[i].fPath);
	                    defs.appendChild(sc);
	                }
	            }
	            fontArr[i].helper = createHelper(defs,fontArr[i]);
	            fontArr[i].cache = {};
	            this.fonts.push(fontArr[i]);
	        }
	        if (_pendingFonts === 0) {
	            this.isLoaded = true;
	        } else {
	            //On some cases even if the font is loaded, it won't load correctly when measuring text on canvas.
	            //Adding this timeout seems to fix it
	           setTimeout(this.checkLoadedFonts.bind(this), 100);
	        }
	    }

	    function addChars(chars){
	        if(!chars){
	            return;
	        }
	        if(!this.chars){
	            this.chars = [];
	        }
	        var i, len = chars.length;
	        var j, jLen = this.chars.length, found;
	        for(i=0;i<len;i+=1){
	            j = 0;
	            found = false;
	            while(j<jLen){
	                if(this.chars[j].style === chars[i].style && this.chars[j].fFamily === chars[i].fFamily && this.chars[j].ch === chars[i].ch){
	                    found = true;
	                }
	                j += 1;
	            }
	            if(!found){
	                this.chars.push(chars[i]);
	                jLen += 1;
	            }
	        }
	    }

	    function getCharData(char, style, font){
	        var i = 0, len = this.chars.length;
	        while( i < len) {
	            if(this.chars[i].ch === char && this.chars[i].style === style && this.chars[i].fFamily === font){

	                return this.chars[i];
	            }
	            i+= 1;
	        }
	        if((typeof char === 'string' && char.charCodeAt(0) !== 13 || !char) && console && console.warn) {
	            console.warn('Missing character from exported characters list: ', char, style, font);
	        }
	        return emptyChar;
	    }

	    function measureText(char, fontName, size) {
	        var fontData = this.getFontByName(fontName);
	        var index = char.charCodeAt(0);
	        if(!fontData.cache[index + 1]) {
	            var tHelper = fontData.helper;
	            //Canvas version
	            //fontData.cache[index] = tHelper.measureText(char).width / 100;
	            //SVG version
	            //console.log(tHelper.getBBox().width)
	            if (char === ' ') {
	                tHelper.textContent = '|' + char + '|';
	                var doubleSize = tHelper.getComputedTextLength();
	                tHelper.textContent = '||';
	                var singleSize = tHelper.getComputedTextLength();
	                fontData.cache[index + 1] = (doubleSize - singleSize)/100;
	            } else {
	                tHelper.textContent = char;
	                fontData.cache[index + 1] = (tHelper.getComputedTextLength())/100;
	            }
	        }
	        return fontData.cache[index + 1] * size;
	    }

	    function getFontByName(name){
	        var i = 0, len = this.fonts.length;
	        while(i<len){
	            if(this.fonts[i].fName === name) {
	                return this.fonts[i];
	            }
	            i += 1;
	        }
	        return this.fonts[0];
	    }

	    function getCombinedCharacterCodes() {
	        return combinedCharacters;
	    }

	    function setIsLoaded() {
	        this.isLoaded = true;
	    }

	    var Font = function(){
	        this.fonts = [];
	        this.chars = null;
	        this.typekitLoaded = 0;
	        this.isLoaded = false;
	        this.initTime = Date.now();
	        this.setIsLoadedBinded = this.setIsLoaded.bind(this);
	        this.checkLoadedFontsBinded = this.checkLoadedFonts.bind(this);
	    };
	    //TODO: for now I'm adding these methods to the Class and not the prototype. Think of a better way to implement it. 
	    Font.getCombinedCharacterCodes = getCombinedCharacterCodes;

	    var fontPrototype = {
	        addChars: addChars,
	        addFonts: addFonts,
	        getCharData: getCharData,
	        getFontByName: getFontByName,
	        measureText: measureText,
	        checkLoadedFonts: checkLoadedFonts,
	        setIsLoaded: setIsLoaded,
	    };

	    Font.prototype = fontPrototype;

	    return Font;

	}());
	var PropertyFactory = (function(){

	    var initFrame = initialDefaultFrame;
	    var math_abs = Math.abs;

	    function interpolateValue(frameNum, caching) {
	        var offsetTime = this.offsetTime;
	        var newValue;
	        if (this.propType === 'multidimensional') {
	            newValue = createTypedArray('float32', this.pv.length);
	        }
	        var iterationIndex = caching.lastIndex;
	        var i = iterationIndex;
	        var len = this.keyframes.length - 1, flag = true;
	        var keyData, nextKeyData;

	        while (flag) {
	            keyData = this.keyframes[i];
	            nextKeyData = this.keyframes[i + 1];
	            if (i === len - 1 && frameNum >= nextKeyData.t - offsetTime){
	                if(keyData.h){
	                    keyData = nextKeyData;
	                }
	                iterationIndex = 0;
	                break;
	            }
	            if ((nextKeyData.t - offsetTime) > frameNum){
	                iterationIndex = i;
	                break;
	            }
	            if (i < len - 1){
	                i += 1;
	            } else {
	                iterationIndex = 0;
	                flag = false;
	            }
	        }

	        var k, kLen, perc, jLen, j, fnc;
	        var nextKeyTime = nextKeyData.t - offsetTime;
	        var keyTime = keyData.t - offsetTime;
	        var endValue;
	        if (keyData.to) {
	            if (!keyData.bezierData) {
	                keyData.bezierData = bez.buildBezierData(keyData.s, nextKeyData.s || keyData.e, keyData.to, keyData.ti);
	            }
	            var bezierData = keyData.bezierData;
	            if (frameNum >= nextKeyTime || frameNum < keyTime) {
	                var ind = frameNum >= nextKeyTime ? bezierData.points.length - 1 : 0;
	                kLen = bezierData.points[ind].point.length;
	                for (k = 0; k < kLen; k += 1) {
	                    newValue[k] = bezierData.points[ind].point[k];
	                }
	                // caching._lastKeyframeIndex = -1;
	            } else {
	                if (keyData.__fnct) {
	                    fnc = keyData.__fnct;
	                } else {
	                    fnc = BezierFactory.getBezierEasing(keyData.o.x, keyData.o.y, keyData.i.x, keyData.i.y, keyData.n).get;
	                    keyData.__fnct = fnc;
	                }
	                perc = fnc((frameNum - keyTime) / (nextKeyTime - keyTime));
	                var distanceInLine = bezierData.segmentLength*perc;

	                var segmentPerc;
	                var addedLength =  (caching.lastFrame < frameNum && caching._lastKeyframeIndex === i) ? caching._lastAddedLength : 0;
	                j =  (caching.lastFrame < frameNum && caching._lastKeyframeIndex === i) ? caching._lastPoint : 0;
	                flag = true;
	                jLen = bezierData.points.length;
	                while (flag) {
	                    addedLength += bezierData.points[j].partialLength;
	                    if (distanceInLine === 0 || perc === 0 || j === bezierData.points.length - 1) {
	                        kLen = bezierData.points[j].point.length;
	                        for (k = 0; k < kLen; k += 1) {
	                            newValue[k] = bezierData.points[j].point[k];
	                        }
	                        break;
	                    } else if (distanceInLine >= addedLength && distanceInLine < addedLength + bezierData.points[j + 1].partialLength) {
	                        segmentPerc = (distanceInLine - addedLength) / bezierData.points[j + 1].partialLength;
	                        kLen = bezierData.points[j].point.length;
	                        for (k = 0; k < kLen; k += 1) {
	                            newValue[k] = bezierData.points[j].point[k] + (bezierData.points[j + 1].point[k] - bezierData.points[j].point[k]) * segmentPerc;
	                        }
	                        break;
	                    }
	                    if (j < jLen - 1){
	                        j += 1;
	                    } else {
	                        flag = false;
	                    }
	                }
	                caching._lastPoint = j;
	                caching._lastAddedLength = addedLength - bezierData.points[j].partialLength;
	                caching._lastKeyframeIndex = i;
	            }
	        } else {
	            var outX, outY, inX, inY, keyValue;
	            len = keyData.s.length;
	            endValue = nextKeyData.s || keyData.e;
	            if (this.sh && keyData.h !== 1) {
	                if (frameNum >= nextKeyTime) {
	                    newValue[0] = endValue[0];
	                    newValue[1] = endValue[1];
	                    newValue[2] = endValue[2];
	                } else if (frameNum <= keyTime) {
	                    newValue[0] = keyData.s[0];
	                    newValue[1] = keyData.s[1];
	                    newValue[2] = keyData.s[2];
	                } else {
	                    var quatStart = createQuaternion(keyData.s);
	                    var quatEnd = createQuaternion(endValue);
	                    var time = (frameNum - keyTime) / (nextKeyTime - keyTime);
	                    quaternionToEuler(newValue, slerp(quatStart, quatEnd, time));
	                }
	                
	            } else {
	                for(i = 0; i < len; i += 1) {
	                    if (keyData.h !== 1) {
	                        if (frameNum >= nextKeyTime) {
	                            perc = 1;
	                        } else if(frameNum < keyTime) {
	                            perc = 0;
	                        } else {
	                            if(keyData.o.x.constructor === Array) {
	                                if (!keyData.__fnct) {
	                                    keyData.__fnct = [];
	                                }
	                                if (!keyData.__fnct[i]) {
	                                    outX = (typeof keyData.o.x[i] === 'undefined') ? keyData.o.x[0] : keyData.o.x[i];
	                                    outY = (typeof keyData.o.y[i] === 'undefined') ? keyData.o.y[0] : keyData.o.y[i];
	                                    inX = (typeof keyData.i.x[i] === 'undefined') ? keyData.i.x[0] : keyData.i.x[i];
	                                    inY = (typeof keyData.i.y[i] === 'undefined') ? keyData.i.y[0] : keyData.i.y[i];
	                                    fnc = BezierFactory.getBezierEasing(outX, outY, inX, inY).get;
	                                    keyData.__fnct[i] = fnc;
	                                } else {
	                                    fnc = keyData.__fnct[i];
	                                }
	                            } else {
	                                if (!keyData.__fnct) {
	                                    outX = keyData.o.x;
	                                    outY = keyData.o.y;
	                                    inX = keyData.i.x;
	                                    inY = keyData.i.y;
	                                    fnc = BezierFactory.getBezierEasing(outX, outY, inX, inY).get;
	                                    keyData.__fnct = fnc;
	                                } else {
	                                    fnc = keyData.__fnct;
	                                }
	                            }
	                            perc = fnc((frameNum - keyTime) / (nextKeyTime - keyTime ));
	                        }
	                    }

	                    endValue = nextKeyData.s || keyData.e;
	                    keyValue = keyData.h === 1 ? keyData.s[i] : keyData.s[i] + (endValue[i] - keyData.s[i]) * perc;

	                    if (this.propType === 'multidimensional') {
	                        newValue[i] = keyValue;
	                    } else {
	                        newValue = keyValue;
	                    }
	                }
	            }
	        }
	        caching.lastIndex = iterationIndex;
	        return newValue;
	    }

	    //based on @Toji's https://github.com/toji/gl-matrix/
	    function slerp(a, b, t) {
	        var out = [];
	        var ax = a[0], ay = a[1], az = a[2], aw = a[3],
	        bx = b[0], by = b[1], bz = b[2], bw = b[3];

	        var omega, cosom, sinom, scale0, scale1;

	        cosom = ax * bx + ay * by + az * bz + aw * bw;
	        if (cosom < 0.0) {
	            cosom = -cosom;
	            bx = -bx;
	            by = -by;
	            bz = -bz;
	            bw = -bw;
	        }
	        if ((1.0 - cosom) > 0.000001) {
	            omega = Math.acos(cosom);
	            sinom = Math.sin(omega);
	            scale0 = Math.sin((1.0 - t) * omega) / sinom;
	            scale1 = Math.sin(t * omega) / sinom;
	        } else {
	            scale0 = 1.0 - t;
	            scale1 = t;
	        }
	        out[0] = scale0 * ax + scale1 * bx;
	        out[1] = scale0 * ay + scale1 * by;
	        out[2] = scale0 * az + scale1 * bz;
	        out[3] = scale0 * aw + scale1 * bw;

	        return out;
	    }

	    function quaternionToEuler(out, quat) {
	        var qx = quat[0];
	        var qy = quat[1];
	        var qz = quat[2];
	        var qw = quat[3];
	        var heading = Math.atan2(2*qy*qw-2*qx*qz , 1 - 2*qy*qy - 2*qz*qz);
	        var attitude = Math.asin(2*qx*qy + 2*qz*qw); 
	        var bank = Math.atan2(2*qx*qw-2*qy*qz , 1 - 2*qx*qx - 2*qz*qz);
	        out[0] = heading/degToRads;
	        out[1] = attitude/degToRads;
	        out[2] = bank/degToRads;
	    }

	    function createQuaternion(values) {
	        var heading = values[0] * degToRads;
	        var attitude = values[1] * degToRads;
	        var bank = values[2] * degToRads;
	        var c1 = Math.cos(heading / 2);
	        var c2 = Math.cos(attitude / 2);
	        var c3 = Math.cos(bank / 2);
	        var s1 = Math.sin(heading / 2);
	        var s2 = Math.sin(attitude / 2);
	        var s3 = Math.sin(bank / 2);
	        var w = c1 * c2 * c3 - s1 * s2 * s3;
	        var x = s1 * s2 * c3 + c1 * c2 * s3;
	        var y = s1 * c2 * c3 + c1 * s2 * s3;
	        var z = c1 * s2 * c3 - s1 * c2 * s3;

	        return [x,y,z,w];
	    }

	    function getValueAtCurrentTime(){
	        var frameNum = this.comp.renderedFrame - this.offsetTime;
	        var initTime = this.keyframes[0].t - this.offsetTime;
	        var endTime = this.keyframes[this.keyframes.length- 1].t-this.offsetTime;
	        if(!(frameNum === this._caching.lastFrame || (this._caching.lastFrame !== initFrame && ((this._caching.lastFrame >= endTime && frameNum >= endTime) || (this._caching.lastFrame < initTime && frameNum < initTime))))){
	            if(this._caching.lastFrame >= frameNum) {
	                this._caching._lastKeyframeIndex = -1;
	                this._caching.lastIndex = 0;
	            }

	            var renderResult = this.interpolateValue(frameNum, this._caching);
	            this.pv = renderResult;
	        }
	        this._caching.lastFrame = frameNum;
	        return this.pv;
	    }

	    function setVValue(val) {
	        var multipliedValue;
	        if(this.propType === 'unidimensional') {
	            multipliedValue = val * this.mult;
	            if(math_abs(this.v - multipliedValue) > 0.00001) {
	                this.v = multipliedValue;
	                this._mdf = true;
	            }
	        } else {
	            var i = 0, len = this.v.length;
	            while (i < len) {
	                multipliedValue = val[i] * this.mult;
	                if (math_abs(this.v[i] - multipliedValue) > 0.00001) {
	                    this.v[i] = multipliedValue;
	                    this._mdf = true;
	                }
	                i += 1;
	            }
	        }
	    }

	    function processEffectsSequence() {
	        if (this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) {
	            return;
	        }
	        if(this.lock) {
	            this.setVValue(this.pv);
	            return;
	        }
	        this.lock = true;
	        this._mdf = this._isFirstFrame;
	        var i, len = this.effectsSequence.length;
	        var finalValue = this.kf ? this.pv : this.data.k;
	        for(i = 0; i < len; i += 1) {
	            finalValue = this.effectsSequence[i](finalValue);
	        }
	        this.setVValue(finalValue);
	        this._isFirstFrame = false;
	        this.lock = false;
	        this.frameId = this.elem.globalData.frameId;
	    }

	    function addEffect(effectFunction) {
	        this.effectsSequence.push(effectFunction);
	        this.container.addDynamicProperty(this);
	    }

	    function ValueProperty(elem, data, mult, container){
	        this.propType = 'unidimensional';
	        this.mult = mult || 1;
	        this.data = data;
	        this.v = mult ? data.k * mult : data.k;
	        this.pv = data.k;
	        this._mdf = false;
	        this.elem = elem;
	        this.container = container;
	        this.comp = elem.comp;
	        this.k = false;
	        this.kf = false;
	        this.vel = 0;
	        this.effectsSequence = [];
	        this._isFirstFrame = true;
	        this.getValue = processEffectsSequence;
	        this.setVValue = setVValue;
	        this.addEffect = addEffect;
	    }

	    function MultiDimensionalProperty(elem, data, mult, container) {
	        this.propType = 'multidimensional';
	        this.mult = mult || 1;
	        this.data = data;
	        this._mdf = false;
	        this.elem = elem;
	        this.container = container;
	        this.comp = elem.comp;
	        this.k = false;
	        this.kf = false;
	        this.frameId = -1;
	        var i, len = data.k.length;
	        this.v = createTypedArray('float32', len);
	        this.pv = createTypedArray('float32', len);
	        var arr = createTypedArray('float32', len);
	        this.vel = createTypedArray('float32', len);
	        for (i = 0; i < len; i += 1) {
	            this.v[i] = data.k[i] * this.mult;
	            this.pv[i] = data.k[i];
	        }
	        this._isFirstFrame = true;
	        this.effectsSequence = [];
	        this.getValue = processEffectsSequence;
	        this.setVValue = setVValue;
	        this.addEffect = addEffect;
	    }

	    function KeyframedValueProperty(elem, data, mult, container) {
	        this.propType = 'unidimensional';
	        this.keyframes = data.k;
	        this.offsetTime = elem.data.st;
	        this.frameId = -1;
	        this._caching = {lastFrame: initFrame, lastIndex: 0, value: 0, _lastKeyframeIndex: -1};
	        this.k = true;
	        this.kf = true;
	        this.data = data;
	        this.mult = mult || 1;
	        this.elem = elem;
	        this.container = container;
	        this.comp = elem.comp;
	        this.v = initFrame;
	        this.pv = initFrame;
	        this._isFirstFrame = true;
	        this.getValue = processEffectsSequence;
	        this.setVValue = setVValue;
	        this.interpolateValue = interpolateValue;
	        this.effectsSequence = [getValueAtCurrentTime.bind(this)];
	        this.addEffect = addEffect;
	    }

	    function KeyframedMultidimensionalProperty(elem, data, mult, container){
	        this.propType = 'multidimensional';
	        var i, len = data.k.length;
	        var s, e,to,ti;
	        for (i = 0; i < len - 1; i += 1) {
	            if (data.k[i].to && data.k[i].s && data.k[i + 1] && data.k[i + 1].s) {
	                s = data.k[i].s;
	                e = data.k[i + 1].s;
	                to = data.k[i].to;
	                ti = data.k[i].ti;
	                if((s.length === 2 && !(s[0] === e[0] && s[1] === e[1]) && bez.pointOnLine2D(s[0],s[1],e[0],e[1],s[0] + to[0],s[1] + to[1]) && bez.pointOnLine2D(s[0],s[1],e[0],e[1],e[0] + ti[0],e[1] + ti[1])) || (s.length === 3 && !(s[0] === e[0] && s[1] === e[1] && s[2] === e[2]) && bez.pointOnLine3D(s[0],s[1],s[2],e[0],e[1],e[2],s[0] + to[0],s[1] + to[1],s[2] + to[2]) && bez.pointOnLine3D(s[0],s[1],s[2],e[0],e[1],e[2],e[0] + ti[0],e[1] + ti[1],e[2] + ti[2]))){
	                    data.k[i].to = null;
	                    data.k[i].ti = null;
	                }
	                if(s[0] === e[0] && s[1] === e[1] && to[0] === 0 && to[1] === 0 && ti[0] === 0 && ti[1] === 0) {
	                    if(s.length === 2 || (s[2] === e[2] && to[2] === 0 && ti[2] === 0)) {
	                        data.k[i].to = null;
	                        data.k[i].ti = null;
	                    }
	                }
	            }
	        }
	        this.effectsSequence = [getValueAtCurrentTime.bind(this)];
	        this.keyframes = data.k;
	        this.offsetTime = elem.data.st;
	        this.k = true;
	        this.kf = true;
	        this._isFirstFrame = true;
	        this.mult = mult || 1;
	        this.elem = elem;
	        this.container = container;
	        this.comp = elem.comp;
	        this.getValue = processEffectsSequence;
	        this.setVValue = setVValue;
	        this.interpolateValue = interpolateValue;
	        this.frameId = -1;
	        var arrLen = data.k[0].s.length;
	        this.v = createTypedArray('float32', arrLen);
	        this.pv = createTypedArray('float32', arrLen);
	        for (i = 0; i < arrLen; i += 1) {
	            this.v[i] = initFrame;
	            this.pv[i] = initFrame;
	        }
	        this._caching={lastFrame:initFrame,lastIndex:0,value:createTypedArray('float32', arrLen)};
	        this.addEffect = addEffect;
	    }

	    function getProp(elem,data,type, mult, container) {
	        var p;
	        if(!data.k.length){
	            p = new ValueProperty(elem,data, mult, container);
	        }else if(typeof(data.k[0]) === 'number'){
	            p = new MultiDimensionalProperty(elem,data, mult, container);
	        }else {
	            switch(type){
	                case 0:
	                    p = new KeyframedValueProperty(elem,data,mult, container);
	                    break;
	                case 1:
	                    p = new KeyframedMultidimensionalProperty(elem,data,mult, container);
	                    break;
	            }
	        }
	        if(p.effectsSequence.length){
	            container.addDynamicProperty(p);
	        }
	        return p;
	    }

	    var ob = {
	        getProp: getProp
	    };
	    return ob;
	}());
	var TransformPropertyFactory = (function() {

	    var defaultVector = [0,0];

	    function applyToMatrix(mat) {
	        var _mdf = this._mdf;
	        this.iterateDynamicProperties();
	        this._mdf = this._mdf || _mdf;
	        if (this.a) {
	            mat.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
	        }
	        if (this.s) {
	            mat.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
	        }
	        if (this.sk) {
	            mat.skewFromAxis(-this.sk.v, this.sa.v);
	        }
	        if (this.r) {
	            mat.rotate(-this.r.v);
	        } else {
	            mat.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
	        }
	        if (this.data.p.s) {
	            if (this.data.p.z) {
	                mat.translate(this.px.v, this.py.v, -this.pz.v);
	            } else {
	                mat.translate(this.px.v, this.py.v, 0);
	            }
	        } else {
	            mat.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);
	        }
	    }
	    function processKeys(forceRender){
	        if (this.elem.globalData.frameId === this.frameId) {
	            return;
	        }
	        if(this._isDirty) {
	            this.precalculateMatrix();
	            this._isDirty = false;
	        }

	        this.iterateDynamicProperties();

	        if (this._mdf || forceRender) {
	            this.v.cloneFromProps(this.pre.props);
	            if (this.appliedTransformations < 1) {
	                this.v.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
	            }
	            if(this.appliedTransformations < 2) {
	                this.v.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
	            }
	            if (this.sk && this.appliedTransformations < 3) {
	                this.v.skewFromAxis(-this.sk.v, this.sa.v);
	            }
	            if (this.r && this.appliedTransformations < 4) {
	                this.v.rotate(-this.r.v);
	            } else if (!this.r && this.appliedTransformations < 4){
	                this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
	            }
	            if (this.autoOriented) {
	                var v1,v2, frameRate = this.elem.globalData.frameRate;
	                if(this.p && this.p.keyframes && this.p.getValueAtTime) {
	                    if (this.p._caching.lastFrame+this.p.offsetTime <= this.p.keyframes[0].t) {
	                        v1 = this.p.getValueAtTime((this.p.keyframes[0].t + 0.01) / frameRate,0);
	                        v2 = this.p.getValueAtTime(this.p.keyframes[0].t / frameRate, 0);
	                    } else if(this.p._caching.lastFrame+this.p.offsetTime >= this.p.keyframes[this.p.keyframes.length - 1].t) {
	                        v1 = this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length - 1].t / frameRate), 0);
	                        v2 = this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length - 1].t - 0.05) / frameRate, 0);
	                    } else {
	                        v1 = this.p.pv;
	                        v2 = this.p.getValueAtTime((this.p._caching.lastFrame+this.p.offsetTime - 0.01) / frameRate, this.p.offsetTime);
	                    }
	                } else if(this.px && this.px.keyframes && this.py.keyframes && this.px.getValueAtTime && this.py.getValueAtTime) {
	                    v1 = [];
	                    v2 = [];
	                    var px = this.px, py = this.py, frameRate;
	                    if (px._caching.lastFrame+px.offsetTime <= px.keyframes[0].t) {
	                        v1[0] = px.getValueAtTime((px.keyframes[0].t + 0.01) / frameRate,0);
	                        v1[1] = py.getValueAtTime((py.keyframes[0].t + 0.01) / frameRate,0);
	                        v2[0] = px.getValueAtTime((px.keyframes[0].t) / frameRate,0);
	                        v2[1] = py.getValueAtTime((py.keyframes[0].t) / frameRate,0);
	                    } else if(px._caching.lastFrame+px.offsetTime >= px.keyframes[px.keyframes.length - 1].t) {
	                        v1[0] = px.getValueAtTime((px.keyframes[px.keyframes.length - 1].t / frameRate),0);
	                        v1[1] = py.getValueAtTime((py.keyframes[py.keyframes.length - 1].t / frameRate),0);
	                        v2[0] = px.getValueAtTime((px.keyframes[px.keyframes.length - 1].t - 0.01) / frameRate,0);
	                        v2[1] = py.getValueAtTime((py.keyframes[py.keyframes.length - 1].t - 0.01) / frameRate,0);
	                    } else {
	                        v1 = [px.pv, py.pv];
	                        v2[0] = px.getValueAtTime((px._caching.lastFrame+px.offsetTime - 0.01) / frameRate,px.offsetTime);
	                        v2[1] = py.getValueAtTime((py._caching.lastFrame+py.offsetTime - 0.01) / frameRate,py.offsetTime);
	                    }
	                } else {
	                    v1 = v2 = defaultVector;
	                }
	                this.v.rotate(-Math.atan2(v1[1] - v2[1], v1[0] - v2[0]));
	            }
	            if(this.data.p && this.data.p.s){
	                if(this.data.p.z) {
	                    this.v.translate(this.px.v, this.py.v, -this.pz.v);
	                } else {
	                    this.v.translate(this.px.v, this.py.v, 0);
	                }
	            }else {
	                this.v.translate(this.p.v[0],this.p.v[1],-this.p.v[2]);
	            }
	        }
	        this.frameId = this.elem.globalData.frameId;
	    }

	    function precalculateMatrix() {
	        if(!this.a.k) {
	            this.pre.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
	            this.appliedTransformations = 1;
	        } else {
	            return;
	        }
	        if(!this.s.effectsSequence.length) {
	            this.pre.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
	            this.appliedTransformations = 2;
	        } else {
	            return;
	        }
	        if(this.sk) {
	            if(!this.sk.effectsSequence.length && !this.sa.effectsSequence.length) {
	                this.pre.skewFromAxis(-this.sk.v, this.sa.v);
	            this.appliedTransformations = 3;
	            } else {
	                return;
	            }
	        }
	        if (this.r) {
	            if(!this.r.effectsSequence.length) {
	                this.pre.rotate(-this.r.v);
	                this.appliedTransformations = 4;
	            } else {
	                return;
	            }
	        } else if(!this.rz.effectsSequence.length && !this.ry.effectsSequence.length && !this.rx.effectsSequence.length && !this.or.effectsSequence.length) {
	            this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
	            this.appliedTransformations = 4;
	        }
	    }

	    function autoOrient(){
	        //
	        //var prevP = this.getValueAtTime();
	    }

	    function addDynamicProperty(prop) {
	        this._addDynamicProperty(prop);
	        this.elem.addDynamicProperty(prop);
	        this._isDirty = true;
	    }

	    function TransformProperty(elem,data,container){
	        this.elem = elem;
	        this.frameId = -1;
	        this.propType = 'transform';
	        this.data = data;
	        this.v = new Matrix();
	        //Precalculated matrix with non animated properties
	        this.pre = new Matrix();
	        this.appliedTransformations = 0;
	        this.initDynamicPropertyContainer(container || elem);
	        if(data.p && data.p.s){
	            this.px = PropertyFactory.getProp(elem,data.p.x,0,0,this);
	            this.py = PropertyFactory.getProp(elem,data.p.y,0,0,this);
	            if(data.p.z){
	                this.pz = PropertyFactory.getProp(elem,data.p.z,0,0,this);
	            }
	        }else {
	            this.p = PropertyFactory.getProp(elem,data.p || {k:[0,0,0]},1,0,this);
	        }
	        if(data.rx) {
	            this.rx = PropertyFactory.getProp(elem, data.rx, 0, degToRads, this);
	            this.ry = PropertyFactory.getProp(elem, data.ry, 0, degToRads, this);
	            this.rz = PropertyFactory.getProp(elem, data.rz, 0, degToRads, this);
	            if(data.or.k[0].ti) {
	                var i, len = data.or.k.length;
	                for(i=0;i<len;i+=1) {
	                    data.or.k[i].to = data.or.k[i].ti = null;
	                }
	            }
	            this.or = PropertyFactory.getProp(elem, data.or, 1, degToRads, this);
	            //sh Indicates it needs to be capped between -180 and 180
	            this.or.sh = true;
	        } else {
	            this.r = PropertyFactory.getProp(elem, data.r || {k: 0}, 0, degToRads, this);
	        }
	        if(data.sk){
	            this.sk = PropertyFactory.getProp(elem, data.sk, 0, degToRads, this);
	            this.sa = PropertyFactory.getProp(elem, data.sa, 0, degToRads, this);
	        }
	        this.a = PropertyFactory.getProp(elem,data.a || {k:[0,0,0]},1,0,this);
	        this.s = PropertyFactory.getProp(elem,data.s || {k:[100,100,100]},1,0.01,this);
	        // Opacity is not part of the transform properties, that's why it won't use this.dynamicProperties. That way transforms won't get updated if opacity changes.
	        if(data.o){
	            this.o = PropertyFactory.getProp(elem,data.o,0,0.01,elem);
	        } else {
	            this.o = {_mdf:false,v:1};
	        }
	        this._isDirty = true;
	        if(!this.dynamicProperties.length){
	            this.getValue(true);
	        }
	    }

	    TransformProperty.prototype = {
	        applyToMatrix: applyToMatrix,
	        getValue: processKeys,
	        precalculateMatrix: precalculateMatrix,
	        autoOrient: autoOrient
	    };

	    extendPrototype([DynamicPropertyContainer], TransformProperty);
	    TransformProperty.prototype.addDynamicProperty = addDynamicProperty;
	    TransformProperty.prototype._addDynamicProperty = DynamicPropertyContainer.prototype.addDynamicProperty;

	    function getTransformProperty(elem,data,container){
	        return new TransformProperty(elem,data,container);
	    }

	    return {
	        getTransformProperty: getTransformProperty
	    };

	}());
	function ShapePath(){
		this.c = false;
		this._length = 0;
		this._maxLength = 8;
		this.v = createSizedArray(this._maxLength);
		this.o = createSizedArray(this._maxLength);
		this.i = createSizedArray(this._maxLength);
	}

	ShapePath.prototype.setPathData = function(closed, len) {
		this.c = closed;
		this.setLength(len);
		var i = 0;
		while(i < len){
			this.v[i] = point_pool.newElement();
			this.o[i] = point_pool.newElement();
			this.i[i] = point_pool.newElement();
			i += 1;
		}
	};

	ShapePath.prototype.setLength = function(len) {
		while(this._maxLength < len) {
			this.doubleArrayLength();
		}
		this._length = len;
	};

	ShapePath.prototype.doubleArrayLength = function() {
		this.v = this.v.concat(createSizedArray(this._maxLength));
		this.i = this.i.concat(createSizedArray(this._maxLength));
		this.o = this.o.concat(createSizedArray(this._maxLength));
		this._maxLength *= 2;
	};

	ShapePath.prototype.setXYAt = function(x, y, type, pos, replace) {
		var arr;
		this._length = Math.max(this._length, pos + 1);
		if(this._length >= this._maxLength) {
			this.doubleArrayLength();
		}
		switch(type){
			case 'v':
				arr = this.v;
				break;
			case 'i':
				arr = this.i;
				break;
			case 'o':
				arr = this.o;
				break;
		}
		if(!arr[pos] || (arr[pos] && !replace)){
			arr[pos] = point_pool.newElement();
		}
		arr[pos][0] = x;
		arr[pos][1] = y;
	};

	ShapePath.prototype.setTripleAt = function(vX,vY,oX,oY,iX,iY,pos, replace) {
		this.setXYAt(vX,vY,'v',pos, replace);
		this.setXYAt(oX,oY,'o',pos, replace);
		this.setXYAt(iX,iY,'i',pos, replace);
	};

	ShapePath.prototype.reverse = function() {
		var newPath = new ShapePath();
		newPath.setPathData(this.c, this._length);
		var vertices = this.v, outPoints = this.o, inPoints = this.i;
		var init = 0;
		if (this.c) {
			newPath.setTripleAt(vertices[0][0], vertices[0][1], inPoints[0][0], inPoints[0][1], outPoints[0][0], outPoints[0][1], 0, false);
	        init = 1;
	    }
	    var cnt = this._length - 1;
	    var len = this._length;

	    var i;
	    for (i = init; i < len; i += 1) {
	    	newPath.setTripleAt(vertices[cnt][0], vertices[cnt][1], inPoints[cnt][0], inPoints[cnt][1], outPoints[cnt][0], outPoints[cnt][1], i, false);
	        cnt -= 1;
	    }
	    return newPath;
	};
	var ShapePropertyFactory = (function(){

	    var initFrame = -999999;

	    function interpolateShape(frameNum, previousValue, caching) {
	        var iterationIndex = caching.lastIndex;
	        var keyPropS,keyPropE,isHold, j, k, jLen, kLen, perc, vertexValue;
	        var kf = this.keyframes;
	        if(frameNum < kf[0].t-this.offsetTime){
	            keyPropS = kf[0].s[0];
	            isHold = true;
	            iterationIndex = 0;
	        }else if(frameNum >= kf[kf.length - 1].t-this.offsetTime){
	            keyPropS = kf[kf.length - 1].s ? kf[kf.length - 1].s[0] : kf[kf.length - 2].e[0];
	            /*if(kf[kf.length - 1].s){
	                keyPropS = kf[kf.length - 1].s[0];
	            }else{
	                keyPropS = kf[kf.length - 2].e[0];
	            }*/
	            isHold = true;
	        }else {
	            var i = iterationIndex;
	            var len = kf.length- 1,flag = true,keyData,nextKeyData;
	            while(flag){
	                keyData = kf[i];
	                nextKeyData = kf[i+1];
	                if((nextKeyData.t - this.offsetTime) > frameNum){
	                    break;
	                }
	                if(i < len - 1){
	                    i += 1;
	                }else {
	                    flag = false;
	                }
	            }
	            isHold = keyData.h === 1;
	            iterationIndex = i;
	            if(!isHold){
	                if(frameNum >= nextKeyData.t-this.offsetTime){
	                    perc = 1;
	                }else if(frameNum < keyData.t-this.offsetTime){
	                    perc = 0;
	                }else {
	                    var fnc;
	                    if(keyData.__fnct){
	                        fnc = keyData.__fnct;
	                    }else {
	                        fnc = BezierFactory.getBezierEasing(keyData.o.x,keyData.o.y,keyData.i.x,keyData.i.y).get;
	                        keyData.__fnct = fnc;
	                    }
	                    perc = fnc((frameNum-(keyData.t-this.offsetTime))/((nextKeyData.t-this.offsetTime)-(keyData.t-this.offsetTime)));
	                }
	                keyPropE = nextKeyData.s ? nextKeyData.s[0] : keyData.e[0];
	            }
	            keyPropS = keyData.s[0];
	        }
	        jLen = previousValue._length;
	        kLen = keyPropS.i[0].length;
	        caching.lastIndex = iterationIndex;

	        for(j=0;j<jLen;j+=1){
	            for(k=0;k<kLen;k+=1){
	                vertexValue = isHold ? keyPropS.i[j][k] :  keyPropS.i[j][k]+(keyPropE.i[j][k]-keyPropS.i[j][k])*perc;
	                previousValue.i[j][k] = vertexValue;
	                vertexValue = isHold ? keyPropS.o[j][k] :  keyPropS.o[j][k]+(keyPropE.o[j][k]-keyPropS.o[j][k])*perc;
	                previousValue.o[j][k] = vertexValue;
	                vertexValue = isHold ? keyPropS.v[j][k] :  keyPropS.v[j][k]+(keyPropE.v[j][k]-keyPropS.v[j][k])*perc;
	                previousValue.v[j][k] = vertexValue;
	            }
	        }
	    }

	    function interpolateShapeCurrentTime(){
	        var frameNum = this.comp.renderedFrame - this.offsetTime;
	        var initTime = this.keyframes[0].t - this.offsetTime;
	        var endTime = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;
	        var lastFrame = this._caching.lastFrame;
	        if(!(lastFrame !== initFrame && ((lastFrame < initTime && frameNum < initTime) || (lastFrame > endTime && frameNum > endTime)))){
	            ////
	            this._caching.lastIndex = lastFrame < frameNum ? this._caching.lastIndex : 0;
	            this.interpolateShape(frameNum, this.pv, this._caching);
	            ////
	        }
	        this._caching.lastFrame = frameNum;
	        return this.pv;
	    }

	    function resetShape(){
	        this.paths = this.localShapeCollection;
	    }

	    function shapesEqual(shape1, shape2) {
	        if(shape1._length !== shape2._length || shape1.c !== shape2.c){
	            return false;
	        }
	        var i, len = shape1._length;
	        for(i = 0; i < len; i += 1) {
	            if(shape1.v[i][0] !== shape2.v[i][0] 
	            || shape1.v[i][1] !== shape2.v[i][1] 
	            || shape1.o[i][0] !== shape2.o[i][0] 
	            || shape1.o[i][1] !== shape2.o[i][1] 
	            || shape1.i[i][0] !== shape2.i[i][0] 
	            || shape1.i[i][1] !== shape2.i[i][1]) {
	                return false;
	            }
	        }
	        return true;
	    }

	    function setVValue(newPath) {
	        if(!shapesEqual(this.v, newPath)) {
	            this.v = shape_pool.clone(newPath);
	            this.localShapeCollection.releaseShapes();
	            this.localShapeCollection.addShape(this.v);
	            this._mdf = true;
	            this.paths = this.localShapeCollection;
	        }
	    }

	    function processEffectsSequence() {
	        if (this.elem.globalData.frameId === this.frameId) {
	            return;
	        } else if (!this.effectsSequence.length) {
	            this._mdf = false;
	            return;
	        }
	        if (this.lock) {
	            this.setVValue(this.pv);
	            return;
	        }
	        this.lock = true;
	        this._mdf = false;
	        var finalValue = this.kf ? this.pv : this.data.ks ? this.data.ks.k : this.data.pt.k;
	        var i, len = this.effectsSequence.length;
	        for(i = 0; i < len; i += 1) {
	            finalValue = this.effectsSequence[i](finalValue);
	        }
	        this.setVValue(finalValue);
	        this.lock = false;
	        this.frameId = this.elem.globalData.frameId;
	    }
	    function ShapeProperty(elem, data, type){
	        this.propType = 'shape';
	        this.comp = elem.comp;
	        this.container = elem;
	        this.elem = elem;
	        this.data = data;
	        this.k = false;
	        this.kf = false;
	        this._mdf = false;
	        var pathData = type === 3 ? data.pt.k : data.ks.k;
	        this.v = shape_pool.clone(pathData);
	        this.pv = shape_pool.clone(this.v);
	        this.localShapeCollection = shapeCollection_pool.newShapeCollection();
	        this.paths = this.localShapeCollection;
	        this.paths.addShape(this.v);
	        this.reset = resetShape;
	        this.effectsSequence = [];
	    }

	    function addEffect(effectFunction) {
	        this.effectsSequence.push(effectFunction);
	        this.container.addDynamicProperty(this);
	    }

	    ShapeProperty.prototype.interpolateShape = interpolateShape;
	    ShapeProperty.prototype.getValue = processEffectsSequence;
	    ShapeProperty.prototype.setVValue = setVValue;
	    ShapeProperty.prototype.addEffect = addEffect;

	    function KeyframedShapeProperty(elem,data,type){
	        this.propType = 'shape';
	        this.comp = elem.comp;
	        this.elem = elem;
	        this.container = elem;
	        this.offsetTime = elem.data.st;
	        this.keyframes = type === 3 ? data.pt.k : data.ks.k;
	        this.k = true;
	        this.kf = true;
	        var len = this.keyframes[0].s[0].i.length;
	        var jLen = this.keyframes[0].s[0].i[0].length;
	        this.v = shape_pool.newElement();
	        this.v.setPathData(this.keyframes[0].s[0].c, len);
	        this.pv = shape_pool.clone(this.v);
	        this.localShapeCollection = shapeCollection_pool.newShapeCollection();
	        this.paths = this.localShapeCollection;
	        this.paths.addShape(this.v);
	        this.lastFrame = initFrame;
	        this.reset = resetShape;
	        this._caching = {lastFrame: initFrame, lastIndex: 0};
	        this.effectsSequence = [interpolateShapeCurrentTime.bind(this)];
	    }
	    KeyframedShapeProperty.prototype.getValue = processEffectsSequence;
	    KeyframedShapeProperty.prototype.interpolateShape = interpolateShape;
	    KeyframedShapeProperty.prototype.setVValue = setVValue;
	    KeyframedShapeProperty.prototype.addEffect = addEffect;

	    var EllShapeProperty = (function(){

	        var cPoint = roundCorner;

	        function EllShapeProperty(elem,data) {
	            /*this.v = {
	                v: createSizedArray(4),
	                i: createSizedArray(4),
	                o: createSizedArray(4),
	                c: true
	            };*/
	            this.v = shape_pool.newElement();
	            this.v.setPathData(true, 4);
	            this.localShapeCollection = shapeCollection_pool.newShapeCollection();
	            this.paths = this.localShapeCollection;
	            this.localShapeCollection.addShape(this.v);
	            this.d = data.d;
	            this.elem = elem;
	            this.comp = elem.comp;
	            this.frameId = -1;
	            this.initDynamicPropertyContainer(elem);
	            this.p = PropertyFactory.getProp(elem,data.p,1,0,this);
	            this.s = PropertyFactory.getProp(elem,data.s,1,0,this);
	            if(this.dynamicProperties.length){
	                this.k = true;
	            }else {
	                this.k = false;
	                this.convertEllToPath();
	            }
	        }
	        EllShapeProperty.prototype = {
	            reset: resetShape,
	            getValue: function (){
	                if(this.elem.globalData.frameId === this.frameId){
	                    return;
	                }
	                this.frameId = this.elem.globalData.frameId;
	                this.iterateDynamicProperties();

	                if(this._mdf){
	                    this.convertEllToPath();
	                }
	            },
	            convertEllToPath: function() {
	                var p0 = this.p.v[0], p1 = this.p.v[1], s0 = this.s.v[0]/2, s1 = this.s.v[1]/2;
	                var _cw = this.d !== 3;
	                var _v = this.v;
	                _v.v[0][0] = p0;
	                _v.v[0][1] = p1 - s1;
	                _v.v[1][0] = _cw ? p0 + s0 : p0 - s0;
	                _v.v[1][1] = p1;
	                _v.v[2][0] = p0;
	                _v.v[2][1] = p1 + s1;
	                _v.v[3][0] = _cw ? p0 - s0 : p0 + s0;
	                _v.v[3][1] = p1;
	                _v.i[0][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
	                _v.i[0][1] = p1 - s1;
	                _v.i[1][0] = _cw ? p0 + s0 : p0 - s0;
	                _v.i[1][1] = p1 - s1 * cPoint;
	                _v.i[2][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
	                _v.i[2][1] = p1 + s1;
	                _v.i[3][0] = _cw ? p0 - s0 : p0 + s0;
	                _v.i[3][1] = p1 + s1 * cPoint;
	                _v.o[0][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
	                _v.o[0][1] = p1 - s1;
	                _v.o[1][0] = _cw ? p0 + s0 : p0 - s0;
	                _v.o[1][1] = p1 + s1 * cPoint;
	                _v.o[2][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
	                _v.o[2][1] = p1 + s1;
	                _v.o[3][0] = _cw ? p0 - s0 : p0 + s0;
	                _v.o[3][1] = p1 - s1 * cPoint;
	            }
	        };

	        extendPrototype([DynamicPropertyContainer], EllShapeProperty);

	        return EllShapeProperty;
	    }());

	    var StarShapeProperty = (function() {

	        function StarShapeProperty(elem,data) {
	            this.v = shape_pool.newElement();
	            this.v.setPathData(true, 0);
	            this.elem = elem;
	            this.comp = elem.comp;
	            this.data = data;
	            this.frameId = -1;
	            this.d = data.d;
	            this.initDynamicPropertyContainer(elem);
	            if(data.sy === 1){
	                this.ir = PropertyFactory.getProp(elem,data.ir,0,0,this);
	                this.is = PropertyFactory.getProp(elem,data.is,0,0.01,this);
	                this.convertToPath = this.convertStarToPath;
	            } else {
	                this.convertToPath = this.convertPolygonToPath;
	            }
	            this.pt = PropertyFactory.getProp(elem,data.pt,0,0,this);
	            this.p = PropertyFactory.getProp(elem,data.p,1,0,this);
	            this.r = PropertyFactory.getProp(elem,data.r,0,degToRads,this);
	            this.or = PropertyFactory.getProp(elem,data.or,0,0,this);
	            this.os = PropertyFactory.getProp(elem,data.os,0,0.01,this);
	            this.localShapeCollection = shapeCollection_pool.newShapeCollection();
	            this.localShapeCollection.addShape(this.v);
	            this.paths = this.localShapeCollection;
	            if(this.dynamicProperties.length){
	                this.k = true;
	            }else {
	                this.k = false;
	                this.convertToPath();
	            }
	        }
	        StarShapeProperty.prototype = {
	            reset: resetShape,
	            getValue: function() {
	                if(this.elem.globalData.frameId === this.frameId){
	                    return;
	                }
	                this.frameId = this.elem.globalData.frameId;
	                this.iterateDynamicProperties();
	                if(this._mdf){
	                    this.convertToPath();
	                }
	            },
	            convertStarToPath: function() {
	                var numPts = Math.floor(this.pt.v)*2;
	                var angle = Math.PI*2/numPts;
	                /*this.v.v.length = numPts;
	                this.v.i.length = numPts;
	                this.v.o.length = numPts;*/
	                var longFlag = true;
	                var longRad = this.or.v;
	                var shortRad = this.ir.v;
	                var longRound = this.os.v;
	                var shortRound = this.is.v;
	                var longPerimSegment = 2*Math.PI*longRad/(numPts*2);
	                var shortPerimSegment = 2*Math.PI*shortRad/(numPts*2);
	                var i, rad,roundness,perimSegment, currentAng = -Math.PI/ 2;
	                currentAng += this.r.v;
	                var dir = this.data.d === 3 ? -1 : 1;
	                this.v._length = 0;
	                for(i=0;i<numPts;i+=1){
	                    rad = longFlag ? longRad : shortRad;
	                    roundness = longFlag ? longRound : shortRound;
	                    perimSegment = longFlag ? longPerimSegment : shortPerimSegment;
	                    var x = rad * Math.cos(currentAng);
	                    var y = rad * Math.sin(currentAng);
	                    var ox = x === 0 && y === 0 ? 0 : y/Math.sqrt(x*x + y*y);
	                    var oy = x === 0 && y === 0 ? 0 : -x/Math.sqrt(x*x + y*y);
	                    x +=  + this.p.v[0];
	                    y +=  + this.p.v[1];
	                    this.v.setTripleAt(x,y,x-ox*perimSegment*roundness*dir,y-oy*perimSegment*roundness*dir,x+ox*perimSegment*roundness*dir,y+oy*perimSegment*roundness*dir, i, true);

	                    /*this.v.v[i] = [x,y];
	                    this.v.i[i] = [x+ox*perimSegment*roundness*dir,y+oy*perimSegment*roundness*dir];
	                    this.v.o[i] = [x-ox*perimSegment*roundness*dir,y-oy*perimSegment*roundness*dir];
	                    this.v._length = numPts;*/
	                    longFlag = !longFlag;
	                    currentAng += angle*dir;
	                }
	            },
	            convertPolygonToPath: function() {
	                var numPts = Math.floor(this.pt.v);
	                var angle = Math.PI*2/numPts;
	                var rad = this.or.v;
	                var roundness = this.os.v;
	                var perimSegment = 2*Math.PI*rad/(numPts*4);
	                var i, currentAng = -Math.PI/ 2;
	                var dir = this.data.d === 3 ? -1 : 1;
	                currentAng += this.r.v;
	                this.v._length = 0;
	                for(i=0;i<numPts;i+=1){
	                    var x = rad * Math.cos(currentAng);
	                    var y = rad * Math.sin(currentAng);
	                    var ox = x === 0 && y === 0 ? 0 : y/Math.sqrt(x*x + y*y);
	                    var oy = x === 0 && y === 0 ? 0 : -x/Math.sqrt(x*x + y*y);
	                    x +=  + this.p.v[0];
	                    y +=  + this.p.v[1];
	                    this.v.setTripleAt(x,y,x-ox*perimSegment*roundness*dir,y-oy*perimSegment*roundness*dir,x+ox*perimSegment*roundness*dir,y+oy*perimSegment*roundness*dir, i, true);
	                    currentAng += angle*dir;
	                }
	                this.paths.length = 0;
	                this.paths[0] = this.v;
	            }

	        };
	        extendPrototype([DynamicPropertyContainer], StarShapeProperty);

	        return StarShapeProperty;
	    }());

	    var RectShapeProperty = (function() {

	         function RectShapeProperty(elem,data) {
	            this.v = shape_pool.newElement();
	            this.v.c = true;
	            this.localShapeCollection = shapeCollection_pool.newShapeCollection();
	            this.localShapeCollection.addShape(this.v);
	            this.paths = this.localShapeCollection;
	            this.elem = elem;
	            this.comp = elem.comp;
	            this.frameId = -1;
	            this.d = data.d;
	            this.initDynamicPropertyContainer(elem);
	            this.p = PropertyFactory.getProp(elem,data.p,1,0,this);
	            this.s = PropertyFactory.getProp(elem,data.s,1,0,this);
	            this.r = PropertyFactory.getProp(elem,data.r,0,0,this);
	            if(this.dynamicProperties.length){
	                this.k = true;
	            }else {
	                this.k = false;
	                this.convertRectToPath();
	            }
	        }
	        RectShapeProperty.prototype = {
	            convertRectToPath: function (){
	                var p0 = this.p.v[0], p1 = this.p.v[1], v0 = this.s.v[0]/2, v1 = this.s.v[1]/2;
	                var round = bm_min(v0,v1,this.r.v);
	                var cPoint = round*(1-roundCorner);
	                this.v._length = 0;

	                if(this.d === 2 || this.d === 1) {
	                    this.v.setTripleAt(p0+v0, p1-v1+round,p0+v0, p1-v1+round,p0+v0,p1-v1+cPoint,0, true);
	                    this.v.setTripleAt(p0+v0, p1+v1-round,p0+v0, p1+v1-cPoint,p0+v0, p1+v1-round,1, true);
	                    if(round!== 0){
	                        this.v.setTripleAt(p0+v0-round, p1+v1,p0+v0-round,p1+v1,p0+v0-cPoint,p1+v1,2, true);
	                        this.v.setTripleAt(p0-v0+round,p1+v1,p0-v0+cPoint,p1+v1,p0-v0+round,p1+v1,3, true);
	                        this.v.setTripleAt(p0-v0,p1+v1-round,p0-v0,p1+v1-round,p0-v0,p1+v1-cPoint,4, true);
	                        this.v.setTripleAt(p0-v0,p1-v1+round,p0-v0,p1-v1+cPoint,p0-v0,p1-v1+round,5, true);
	                        this.v.setTripleAt(p0-v0+round,p1-v1,p0-v0+round,p1-v1,p0-v0+cPoint,p1-v1,6, true);
	                        this.v.setTripleAt(p0+v0-round,p1-v1,p0+v0-cPoint,p1-v1,p0+v0-round,p1-v1,7, true);
	                    } else {
	                        this.v.setTripleAt(p0-v0,p1+v1,p0-v0+cPoint,p1+v1,p0-v0,p1+v1,2);
	                        this.v.setTripleAt(p0-v0,p1-v1,p0-v0,p1-v1+cPoint,p0-v0,p1-v1,3);
	                    }
	                }else {
	                    this.v.setTripleAt(p0+v0,p1-v1+round,p0+v0,p1-v1+cPoint,p0+v0,p1-v1+round,0, true);
	                    if(round!== 0){
	                        this.v.setTripleAt(p0+v0-round,p1-v1,p0+v0-round,p1-v1,p0+v0-cPoint,p1-v1,1, true);
	                        this.v.setTripleAt(p0-v0+round,p1-v1,p0-v0+cPoint,p1-v1,p0-v0+round,p1-v1,2, true);
	                        this.v.setTripleAt(p0-v0,p1-v1+round,p0-v0,p1-v1+round,p0-v0,p1-v1+cPoint,3, true);
	                        this.v.setTripleAt(p0-v0,p1+v1-round,p0-v0,p1+v1-cPoint,p0-v0,p1+v1-round,4, true);
	                        this.v.setTripleAt(p0-v0+round,p1+v1,p0-v0+round,p1+v1,p0-v0+cPoint,p1+v1,5, true);
	                        this.v.setTripleAt(p0+v0-round,p1+v1,p0+v0-cPoint,p1+v1,p0+v0-round,p1+v1,6, true);
	                        this.v.setTripleAt(p0+v0,p1+v1-round,p0+v0,p1+v1-round,p0+v0,p1+v1-cPoint,7, true);
	                    } else {
	                        this.v.setTripleAt(p0-v0,p1-v1,p0-v0+cPoint,p1-v1,p0-v0,p1-v1,1, true);
	                        this.v.setTripleAt(p0-v0,p1+v1,p0-v0,p1+v1-cPoint,p0-v0,p1+v1,2, true);
	                        this.v.setTripleAt(p0+v0,p1+v1,p0+v0-cPoint,p1+v1,p0+v0,p1+v1,3, true);

	                    }
	                }
	            },
	            getValue: function(frameNum){
	                if(this.elem.globalData.frameId === this.frameId){
	                    return;
	                }
	                this.frameId = this.elem.globalData.frameId;
	                this.iterateDynamicProperties();
	                if(this._mdf){
	                    this.convertRectToPath();
	                }

	            },
	            reset: resetShape
	        };
	        extendPrototype([DynamicPropertyContainer], RectShapeProperty);

	        return RectShapeProperty;
	    }());

	    function getShapeProp(elem,data,type){
	        var prop;
	        if(type === 3 || type === 4){
	            var dataProp = type === 3 ? data.pt : data.ks;
	            var keys = dataProp.k;
	            if(keys.length){
	                prop = new KeyframedShapeProperty(elem, data, type);
	            }else {
	                prop = new ShapeProperty(elem, data, type);
	            }
	        }else if(type === 5){
	            prop = new RectShapeProperty(elem, data);
	        }else if(type === 6){
	            prop = new EllShapeProperty(elem, data);
	        }else if(type === 7){
	            prop = new StarShapeProperty(elem, data);
	        }
	        if(prop.k){
	            elem.addDynamicProperty(prop);
	        }
	        return prop;
	    }

	    function getConstructorFunction() {
	        return ShapeProperty;
	    }

	    function getKeyframedConstructorFunction() {
	        return KeyframedShapeProperty;
	    }

	    var ob = {};
	    ob.getShapeProp = getShapeProp;
	    ob.getConstructorFunction = getConstructorFunction;
	    ob.getKeyframedConstructorFunction = getKeyframedConstructorFunction;
	    return ob;
	}());
	var ShapeModifiers = (function(){
	    var ob = {};
	    var modifiers = {};
	    ob.registerModifier = registerModifier;
	    ob.getModifier = getModifier;

	    function registerModifier(nm,factory){
	        if(!modifiers[nm]){
	            modifiers[nm] = factory;
	        }
	    }

	    function getModifier(nm,elem, data){
	        return new modifiers[nm](elem, data);
	    }

	    return ob;
	}());

	function ShapeModifier(){}
	ShapeModifier.prototype.initModifierProperties = function(){};
	ShapeModifier.prototype.addShapeToModifier = function(){};
	ShapeModifier.prototype.addShape = function(data){
	    if (!this.closed) {
	        // Adding shape to dynamic properties. It covers the case where a shape has no effects applied, to reset it's _mdf state on every tick.
	        data.sh.container.addDynamicProperty(data.sh);
	        var shapeData = {shape:data.sh, data: data, localShapeCollection:shapeCollection_pool.newShapeCollection()};
	        this.shapes.push(shapeData);
	        this.addShapeToModifier(shapeData);
	        if (this._isAnimated) {
	            data.setAsAnimated();
	        }
	    }
	};
	ShapeModifier.prototype.init = function(elem,data){
	    this.shapes = [];
	    this.elem = elem;
	    this.initDynamicPropertyContainer(elem);
	    this.initModifierProperties(elem,data);
	    this.frameId = initialDefaultFrame;
	    this.closed = false;
	    this.k = false;
	    if(this.dynamicProperties.length){
	        this.k = true;
	    }else {
	        this.getValue(true);
	    }
	};
	ShapeModifier.prototype.processKeys = function(){
	    if(this.elem.globalData.frameId === this.frameId){
	        return;
	    }
	    this.frameId = this.elem.globalData.frameId;
	    this.iterateDynamicProperties();
	};

	extendPrototype([DynamicPropertyContainer], ShapeModifier);
	function TrimModifier(){
	}
	extendPrototype([ShapeModifier], TrimModifier);
	TrimModifier.prototype.initModifierProperties = function(elem, data) {
	    this.s = PropertyFactory.getProp(elem, data.s, 0, 0.01, this);
	    this.e = PropertyFactory.getProp(elem, data.e, 0, 0.01, this);
	    this.o = PropertyFactory.getProp(elem, data.o, 0, 0, this);
	    this.sValue = 0;
	    this.eValue = 0;
	    this.getValue = this.processKeys;
	    this.m = data.m;
	    this._isAnimated = !!this.s.effectsSequence.length || !!this.e.effectsSequence.length || !!this.o.effectsSequence.length;
	};

	TrimModifier.prototype.addShapeToModifier = function(shapeData){
	    shapeData.pathsData = [];
	};

	TrimModifier.prototype.calculateShapeEdges = function(s, e, shapeLength, addedLength, totalModifierLength) {
	    var segments = [];
	    if (e <= 1) {
	        segments.push({
	            s: s,
	            e: e
	        });
	    } else if (s >= 1) {
	        segments.push({
	            s: s - 1,
	            e: e - 1
	        });
	    } else {
	        segments.push({
	            s: s,
	            e: 1
	        });
	        segments.push({
	            s: 0,
	            e: e - 1
	        });
	    }
	    var shapeSegments = [];
	    var i, len = segments.length, segmentOb;
	    for (i = 0; i < len; i += 1) {
	        segmentOb = segments[i];
	        if (segmentOb.e * totalModifierLength < addedLength || segmentOb.s * totalModifierLength > addedLength + shapeLength) ; else {
	            var shapeS, shapeE;
	            if (segmentOb.s * totalModifierLength <= addedLength) {
	                shapeS = 0;
	            } else {
	                shapeS = (segmentOb.s * totalModifierLength - addedLength) / shapeLength;
	            }
	            if(segmentOb.e * totalModifierLength >= addedLength + shapeLength) {
	                shapeE = 1;
	            } else {
	                shapeE = ((segmentOb.e * totalModifierLength - addedLength) / shapeLength);
	            }
	            shapeSegments.push([shapeS, shapeE]);
	        }
	    }
	    if (!shapeSegments.length) {
	        shapeSegments.push([0, 0]);
	    }
	    return shapeSegments;
	};

	TrimModifier.prototype.releasePathsData = function(pathsData) {
	    var i, len = pathsData.length;
	    for (i = 0; i < len; i += 1) {
	        segments_length_pool.release(pathsData[i]);
	    }
	    pathsData.length = 0;
	    return pathsData;
	};

	TrimModifier.prototype.processShapes = function(_isFirstFrame) {
	    var s, e;
	    if (this._mdf || _isFirstFrame) {
	        var o = (this.o.v % 360) / 360;
	        if (o < 0) {
	            o += 1;
	        }
	        s = (this.s.v > 1 ? 1 : this.s.v < 0 ? 0 : this.s.v) + o;
	        e = (this.e.v > 1 ? 1 : this.e.v < 0 ? 0 : this.e.v) + o;
	        if (s > e) {
	            var _s = s;
	            s = e;
	            e = _s;
	        }
	        s = Math.round(s * 10000) * 0.0001;
	        e = Math.round(e * 10000) * 0.0001;
	        this.sValue = s;
	        this.eValue = e;
	    } else {
	        s = this.sValue;
	        e = this.eValue;
	    }
	    var shapePaths;
	    var i, len = this.shapes.length, j, jLen;
	    var pathsData, pathData, totalShapeLength, totalModifierLength = 0;

	    if (e === s) {
	        for (i = 0; i < len; i += 1) {
	            this.shapes[i].localShapeCollection.releaseShapes();
	            this.shapes[i].shape._mdf = true;
	            this.shapes[i].shape.paths = this.shapes[i].localShapeCollection;
	            if (this._mdf) {
	                this.shapes[i].pathsData.length = 0;
	            }
	        }
	    } else if (!((e === 1 && s === 0) || (e===0 && s === 1))){
	        var segments = [], shapeData, localShapeCollection;
	        for (i = 0; i < len; i += 1) {
	            shapeData = this.shapes[i];
	            // if shape hasn't changed and trim properties haven't changed, cached previous path can be used
	            if (!shapeData.shape._mdf && !this._mdf && !_isFirstFrame && this.m !== 2) {
	                shapeData.shape.paths = shapeData.localShapeCollection;
	            } else {
	                shapePaths = shapeData.shape.paths;
	                jLen = shapePaths._length;
	                totalShapeLength = 0;
	                if (!shapeData.shape._mdf && shapeData.pathsData.length) {
	                    totalShapeLength = shapeData.totalShapeLength;
	                } else {
	                    pathsData = this.releasePathsData(shapeData.pathsData);
	                    for (j = 0; j < jLen; j += 1) {
	                        pathData = bez.getSegmentsLength(shapePaths.shapes[j]);
	                        pathsData.push(pathData);
	                        totalShapeLength += pathData.totalLength;
	                    }
	                    shapeData.totalShapeLength = totalShapeLength;
	                    shapeData.pathsData = pathsData;
	                }

	                totalModifierLength += totalShapeLength;
	                shapeData.shape._mdf = true;
	            }
	        }
	        var shapeS = s, shapeE = e, addedLength = 0, edges;
	        for (i = len - 1; i >= 0; i -= 1) {
	            shapeData = this.shapes[i];
	            if (shapeData.shape._mdf) {
	                localShapeCollection = shapeData.localShapeCollection;
	                localShapeCollection.releaseShapes();
	                //if m === 2 means paths are trimmed individually so edges need to be found for this specific shape relative to whoel group
	                if (this.m === 2 && len > 1) {
	                    edges = this.calculateShapeEdges(s, e, shapeData.totalShapeLength, addedLength, totalModifierLength);
	                    addedLength += shapeData.totalShapeLength;
	                } else {
	                    edges = [[shapeS, shapeE]];
	                }
	                jLen = edges.length;
	                for (j = 0; j < jLen; j += 1) {
	                    shapeS = edges[j][0];
	                    shapeE = edges[j][1];
	                    segments.length = 0;
	                    if (shapeE <= 1) {
	                        segments.push({
	                            s:shapeData.totalShapeLength * shapeS,
	                            e:shapeData.totalShapeLength * shapeE
	                        });
	                    } else if (shapeS >= 1) {
	                        segments.push({
	                            s:shapeData.totalShapeLength * (shapeS - 1),
	                            e:shapeData.totalShapeLength * (shapeE - 1)
	                        });
	                    } else {
	                        segments.push({
	                            s:shapeData.totalShapeLength * shapeS,
	                            e:shapeData.totalShapeLength
	                        });
	                        segments.push({
	                            s:0,
	                            e:shapeData.totalShapeLength * (shapeE - 1)
	                        });
	                    }
	                    var newShapesData = this.addShapes(shapeData,segments[0]);
	                    if (segments[0].s !== segments[0].e) {
	                        if (segments.length > 1) {
	                            var lastShapeInCollection = shapeData.shape.paths.shapes[shapeData.shape.paths._length - 1];
	                            if (lastShapeInCollection.c) {
	                                var lastShape = newShapesData.pop();
	                                this.addPaths(newShapesData, localShapeCollection);
	                                newShapesData = this.addShapes(shapeData, segments[1], lastShape);
	                            } else {
	                                this.addPaths(newShapesData, localShapeCollection);
	                                newShapesData = this.addShapes(shapeData, segments[1]);
	                            }
	                        } 
	                        this.addPaths(newShapesData, localShapeCollection);
	                    }
	                    
	                }
	                shapeData.shape.paths = localShapeCollection;
	            }
	        }
	    } else if (this._mdf) {
	        for (i = 0; i < len; i += 1) {
	            //Releasign Trim Cached paths data when no trim applied in case shapes are modified inbetween.
	            //Don't remove this even if it's losing cached info.
	            this.shapes[i].pathsData.length = 0;
	            this.shapes[i].shape._mdf = true;
	        }
	    }
	};

	TrimModifier.prototype.addPaths = function(newPaths, localShapeCollection) {
	    var i, len = newPaths.length;
	    for (i = 0; i < len; i += 1) {
	        localShapeCollection.addShape(newPaths[i]);
	    }
	};

	TrimModifier.prototype.addSegment = function(pt1, pt2, pt3, pt4, shapePath, pos, newShape) {
	    shapePath.setXYAt(pt2[0], pt2[1], 'o', pos);
	    shapePath.setXYAt(pt3[0], pt3[1], 'i', pos + 1);
	    if(newShape){
	        shapePath.setXYAt(pt1[0], pt1[1], 'v', pos);
	    }
	    shapePath.setXYAt(pt4[0], pt4[1], 'v', pos + 1);
	};

	TrimModifier.prototype.addSegmentFromArray = function(points, shapePath, pos, newShape) {
	    shapePath.setXYAt(points[1], points[5], 'o', pos);
	    shapePath.setXYAt(points[2], points[6], 'i', pos + 1);
	    if(newShape){
	        shapePath.setXYAt(points[0], points[4], 'v', pos);
	    }
	    shapePath.setXYAt(points[3], points[7], 'v', pos + 1);
	};

	TrimModifier.prototype.addShapes = function(shapeData, shapeSegment, shapePath) {
	    var pathsData = shapeData.pathsData;
	    var shapePaths = shapeData.shape.paths.shapes;
	    var i, len = shapeData.shape.paths._length, j, jLen;
	    var addedLength = 0;
	    var currentLengthData,segmentCount;
	    var lengths;
	    var segment;
	    var shapes = [];
	    var initPos;
	    var newShape = true;
	    if (!shapePath) {
	        shapePath = shape_pool.newElement();
	        segmentCount = 0;
	        initPos = 0;
	    } else {
	        segmentCount = shapePath._length;
	        initPos = shapePath._length;
	    }
	    shapes.push(shapePath);
	    for (i = 0; i < len; i += 1) {
	        lengths = pathsData[i].lengths;
	        shapePath.c = shapePaths[i].c;
	        jLen = shapePaths[i].c ? lengths.length : lengths.length + 1;
	        for (j = 1; j < jLen; j +=1) {
	            currentLengthData = lengths[j-1];
	            if (addedLength + currentLengthData.addedLength < shapeSegment.s) {
	                addedLength += currentLengthData.addedLength;
	                shapePath.c = false;
	            } else if(addedLength > shapeSegment.e) {
	                shapePath.c = false;
	                break;
	            } else {
	                if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + currentLengthData.addedLength) {
	                    this.addSegment(shapePaths[i].v[j - 1], shapePaths[i].o[j - 1], shapePaths[i].i[j], shapePaths[i].v[j], shapePath, segmentCount, newShape);
	                    newShape = false;
	                } else {
	                    segment = bez.getNewSegment(shapePaths[i].v[j - 1], shapePaths[i].v[j], shapePaths[i].o[j - 1], shapePaths[i].i[j], (shapeSegment.s - addedLength)/currentLengthData.addedLength,(shapeSegment.e - addedLength)/currentLengthData.addedLength, lengths[j-1]);
	                    this.addSegmentFromArray(segment, shapePath, segmentCount, newShape);
	                    // this.addSegment(segment.pt1, segment.pt3, segment.pt4, segment.pt2, shapePath, segmentCount, newShape);
	                    newShape = false;
	                    shapePath.c = false;
	                }
	                addedLength += currentLengthData.addedLength;
	                segmentCount += 1;
	            }
	        }
	        if (shapePaths[i].c && lengths.length) {
	            currentLengthData = lengths[j - 1];
	            if (addedLength <= shapeSegment.e) {
	                var segmentLength = lengths[j - 1].addedLength;
	                if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + segmentLength) {
	                    this.addSegment(shapePaths[i].v[j - 1], shapePaths[i].o[j - 1], shapePaths[i].i[0], shapePaths[i].v[0], shapePath, segmentCount, newShape);
	                    newShape = false;
	                } else {
	                    segment = bez.getNewSegment(shapePaths[i].v[j - 1], shapePaths[i].v[0], shapePaths[i].o[j - 1], shapePaths[i].i[0], (shapeSegment.s - addedLength) / segmentLength, (shapeSegment.e - addedLength) / segmentLength, lengths[j - 1]);
	                    this.addSegmentFromArray(segment, shapePath, segmentCount, newShape);
	                    // this.addSegment(segment.pt1, segment.pt3, segment.pt4, segment.pt2, shapePath, segmentCount, newShape);
	                    newShape = false;
	                    shapePath.c = false;
	                }
	            } else {
	                shapePath.c = false;
	            }
	            addedLength += currentLengthData.addedLength;
	            segmentCount += 1;
	        }
	        if (shapePath._length) {
	            shapePath.setXYAt(shapePath.v[initPos][0], shapePath.v[initPos][1], 'i', initPos);
	            shapePath.setXYAt(shapePath.v[shapePath._length - 1][0], shapePath.v[shapePath._length - 1][1],'o', shapePath._length - 1);
	        }
	        if (addedLength > shapeSegment.e) {
	            break;
	        }
	        if (i < len - 1) {
	            shapePath = shape_pool.newElement();
	            newShape = true;
	            shapes.push(shapePath);
	            segmentCount = 0;
	        }
	    }
	    return shapes;
	};


	ShapeModifiers.registerModifier('tm', TrimModifier);
	function RoundCornersModifier(){}
	extendPrototype([ShapeModifier],RoundCornersModifier);
	RoundCornersModifier.prototype.initModifierProperties = function(elem,data){
	    this.getValue = this.processKeys;
	    this.rd = PropertyFactory.getProp(elem,data.r,0,null,this);
	    this._isAnimated = !!this.rd.effectsSequence.length;
	};

	RoundCornersModifier.prototype.processPath = function(path, round){
	    var cloned_path = shape_pool.newElement();
	    cloned_path.c = path.c;
	    var i, len = path._length;
	    var currentV,currentI,currentO,closerV, distance,newPosPerc,index = 0;
	    var vX,vY,oX,oY,iX,iY;
	    for(i=0;i<len;i+=1){
	        currentV = path.v[i];
	        currentO = path.o[i];
	        currentI = path.i[i];
	        if(currentV[0]===currentO[0] && currentV[1]===currentO[1] && currentV[0]===currentI[0] && currentV[1]===currentI[1]){
	            if((i===0 || i === len - 1) && !path.c){
	                cloned_path.setTripleAt(currentV[0],currentV[1],currentO[0],currentO[1],currentI[0],currentI[1],index);
	                /*cloned_path.v[index] = currentV;
	                cloned_path.o[index] = currentO;
	                cloned_path.i[index] = currentI;*/
	                index += 1;
	            } else {
	                if(i===0){
	                    closerV = path.v[len-1];
	                } else {
	                    closerV = path.v[i-1];
	                }
	                distance = Math.sqrt(Math.pow(currentV[0]-closerV[0],2)+Math.pow(currentV[1]-closerV[1],2));
	                newPosPerc = distance ? Math.min(distance/2,round)/distance : 0;
	                vX = iX = currentV[0]+(closerV[0]-currentV[0])*newPosPerc;
	                vY = iY = currentV[1]-(currentV[1]-closerV[1])*newPosPerc;
	                oX = vX-(vX-currentV[0])*roundCorner;
	                oY = vY-(vY-currentV[1])*roundCorner;
	                cloned_path.setTripleAt(vX,vY,oX,oY,iX,iY,index);
	                index += 1;

	                if(i === len - 1){
	                    closerV = path.v[0];
	                } else {
	                    closerV = path.v[i+1];
	                }
	                distance = Math.sqrt(Math.pow(currentV[0]-closerV[0],2)+Math.pow(currentV[1]-closerV[1],2));
	                newPosPerc = distance ? Math.min(distance/2,round)/distance : 0;
	                vX = oX = currentV[0]+(closerV[0]-currentV[0])*newPosPerc;
	                vY = oY = currentV[1]+(closerV[1]-currentV[1])*newPosPerc;
	                iX = vX-(vX-currentV[0])*roundCorner;
	                iY = vY-(vY-currentV[1])*roundCorner;
	                cloned_path.setTripleAt(vX,vY,oX,oY,iX,iY,index);
	                index += 1;
	            }
	        } else {
	            cloned_path.setTripleAt(path.v[i][0],path.v[i][1],path.o[i][0],path.o[i][1],path.i[i][0],path.i[i][1],index);
	            index += 1;
	        }
	    }
	    return cloned_path;
	};

	RoundCornersModifier.prototype.processShapes = function(_isFirstFrame){
	    var shapePaths;
	    var i, len = this.shapes.length;
	    var j, jLen;
	    var rd = this.rd.v;

	    if(rd !== 0){
	        var shapeData, newPaths, localShapeCollection;
	        for(i=0;i<len;i+=1){
	            shapeData = this.shapes[i];
	            newPaths = shapeData.shape.paths;
	            localShapeCollection = shapeData.localShapeCollection;
	            if(!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)){
	                localShapeCollection.releaseShapes();
	                shapeData.shape._mdf = true;
	                shapePaths = shapeData.shape.paths.shapes;
	                jLen = shapeData.shape.paths._length;
	                for(j=0;j<jLen;j+=1){
	                    localShapeCollection.addShape(this.processPath(shapePaths[j],rd));
	                }
	            }
	            shapeData.shape.paths = shapeData.localShapeCollection;
	        }

	    }
	    if(!this.dynamicProperties.length){
	        this._mdf = false;
	    }
	};

	ShapeModifiers.registerModifier('rd',RoundCornersModifier);
	function PuckerAndBloatModifier(){}
	extendPrototype([ShapeModifier],PuckerAndBloatModifier);
	PuckerAndBloatModifier.prototype.initModifierProperties = function(elem,data){
	    this.getValue = this.processKeys;
	    this.amount = PropertyFactory.getProp(elem,data.a,0,null,this);
	    this._isAnimated = !!this.amount.effectsSequence.length;
	};

	PuckerAndBloatModifier.prototype.processPath = function(path, amount){
	    var percent = amount / 100;
	    var centerPoint = [0, 0];
	    var pathLength = path._length, i = 0;
	    for (i = 0; i < pathLength; i += 1) {
	        centerPoint[0] += path.v[i][0];
	        centerPoint[1] += path.v[i][1];
	    }
	    centerPoint[0] /= pathLength;
	    centerPoint[1] /= pathLength;
	    var cloned_path = shape_pool.newElement();
	    cloned_path.c = path.c;
	    var vX, vY, oX, oY, iX, iY;
	    for(i = 0; i < pathLength; i += 1) {
	        vX = path.v[i][0] + (centerPoint[0] - path.v[i][0]) * percent;
	        vY = path.v[i][1] + (centerPoint[1] - path.v[i][1]) * percent;
	        oX = path.o[i][0] + (centerPoint[0] - path.o[i][0]) * -percent;
	        oY = path.o[i][1] + (centerPoint[1] - path.o[i][1]) * -percent;
	        iX = path.i[i][0] + (centerPoint[0] - path.i[i][0]) * -percent;
	        iY = path.i[i][1] + (centerPoint[1] - path.i[i][1]) * -percent;
	        cloned_path.setTripleAt(vX, vY, oX, oY, iX, iY, i);
	    }
	    return cloned_path;
	};

	PuckerAndBloatModifier.prototype.processShapes = function(_isFirstFrame){
	    var shapePaths;
	    var i, len = this.shapes.length;
	    var j, jLen;
	    var amount = this.amount.v;

	    if(amount !== 0){
	        var shapeData, newPaths, localShapeCollection;
	        for(i=0;i<len;i+=1){
	            shapeData = this.shapes[i];
	            newPaths = shapeData.shape.paths;
	            localShapeCollection = shapeData.localShapeCollection;
	            if(!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)){
	                localShapeCollection.releaseShapes();
	                shapeData.shape._mdf = true;
	                shapePaths = shapeData.shape.paths.shapes;
	                jLen = shapeData.shape.paths._length;
	                for(j=0;j<jLen;j+=1){
	                    localShapeCollection.addShape(this.processPath(shapePaths[j], amount));
	                }
	            }
	            shapeData.shape.paths = shapeData.localShapeCollection;
	        }
	    }
	    if(!this.dynamicProperties.length){
	        this._mdf = false;
	    }
	};
	ShapeModifiers.registerModifier('pb',PuckerAndBloatModifier);
	function RepeaterModifier(){}
	extendPrototype([ShapeModifier], RepeaterModifier);

	RepeaterModifier.prototype.initModifierProperties = function(elem,data){
	    this.getValue = this.processKeys;
	    this.c = PropertyFactory.getProp(elem,data.c,0,null,this);
	    this.o = PropertyFactory.getProp(elem,data.o,0,null,this);
	    this.tr = TransformPropertyFactory.getTransformProperty(elem,data.tr,this);
	    this.so = PropertyFactory.getProp(elem,data.tr.so,0,0.01,this);
	    this.eo = PropertyFactory.getProp(elem,data.tr.eo,0,0.01,this);
	    this.data = data;
	    if(!this.dynamicProperties.length){
	        this.getValue(true);
	    }
	    this._isAnimated = !!this.dynamicProperties.length;
	    this.pMatrix = new Matrix();
	    this.rMatrix = new Matrix();
	    this.sMatrix = new Matrix();
	    this.tMatrix = new Matrix();
	    this.matrix = new Matrix();
	};

	RepeaterModifier.prototype.applyTransforms = function(pMatrix, rMatrix, sMatrix, transform, perc, inv){
	    var dir = inv ? -1 : 1;
	    var scaleX = transform.s.v[0] + (1 - transform.s.v[0]) * (1 - perc);
	    var scaleY = transform.s.v[1] + (1 - transform.s.v[1]) * (1 - perc);
	    pMatrix.translate(transform.p.v[0] * dir * perc, transform.p.v[1] * dir * perc, transform.p.v[2]);
	    rMatrix.translate(-transform.a.v[0], -transform.a.v[1], transform.a.v[2]);
	    rMatrix.rotate(-transform.r.v * dir * perc);
	    rMatrix.translate(transform.a.v[0], transform.a.v[1], transform.a.v[2]);
	    sMatrix.translate(-transform.a.v[0], -transform.a.v[1], transform.a.v[2]);
	    sMatrix.scale(inv ? 1/scaleX : scaleX, inv ? 1/scaleY : scaleY);
	    sMatrix.translate(transform.a.v[0], transform.a.v[1], transform.a.v[2]);
	};

	RepeaterModifier.prototype.init = function(elem, arr, pos, elemsData) {
	    this.elem = elem;
	    this.arr = arr;
	    this.pos = pos;
	    this.elemsData = elemsData;
	    this._currentCopies = 0;
	    this._elements = [];
	    this._groups = [];
	    this.frameId = -1;
	    this.initDynamicPropertyContainer(elem);
	    this.initModifierProperties(elem,arr[pos]);
	    while(pos>0){
	        pos -= 1;
	        //this._elements.unshift(arr.splice(pos,1)[0]);
	        this._elements.unshift(arr[pos]);
	    }
	    if(this.dynamicProperties.length){
	        this.k = true;
	    }else {
	        this.getValue(true);
	    }
	};

	RepeaterModifier.prototype.resetElements = function(elements){
	    var i, len = elements.length;
	    for(i = 0; i < len; i += 1) {
	        elements[i]._processed = false;
	        if(elements[i].ty === 'gr'){
	            this.resetElements(elements[i].it);
	        }
	    }
	};

	RepeaterModifier.prototype.cloneElements = function(elements){
	    var len = elements.length;
	    var newElements = JSON.parse(JSON.stringify(elements));
	    this.resetElements(newElements);
	    return newElements;
	};

	RepeaterModifier.prototype.changeGroupRender = function(elements, renderFlag) {
	    var i, len = elements.length;
	    for(i = 0; i < len; i += 1) {
	        elements[i]._render = renderFlag;
	        if(elements[i].ty === 'gr') {
	            this.changeGroupRender(elements[i].it, renderFlag);
	        }
	    }
	};

	RepeaterModifier.prototype.processShapes = function(_isFirstFrame) {
	    var items, itemsTransform, i, dir, cont;
	    if(this._mdf || _isFirstFrame){
	        var copies = Math.ceil(this.c.v);
	        if(this._groups.length < copies){
	            while(this._groups.length < copies){
	                var group = {
	                    it:this.cloneElements(this._elements),
	                    ty:'gr'
	                };
	                group.it.push({"a":{"a":0,"ix":1,"k":[0,0]},"nm":"Transform","o":{"a":0,"ix":7,"k":100},"p":{"a":0,"ix":2,"k":[0,0]},"r":{"a":1,"ix":6,"k":[{s:0,e:0,t:0},{s:0,e:0,t:1}]},"s":{"a":0,"ix":3,"k":[100,100]},"sa":{"a":0,"ix":5,"k":0},"sk":{"a":0,"ix":4,"k":0},"ty":"tr"});
	                
	                this.arr.splice(0,0,group);
	                this._groups.splice(0,0,group);
	                this._currentCopies += 1;
	            }
	            this.elem.reloadShapes();
	        }
	        cont = 0;
	        var renderFlag;
	        for(i = 0; i  <= this._groups.length - 1; i += 1){
	            renderFlag = cont < copies;
	            this._groups[i]._render = renderFlag;
	            this.changeGroupRender(this._groups[i].it, renderFlag);
	            cont += 1;
	        }
	        
	        this._currentCopies = copies;
	        ////

	        var offset = this.o.v;
	        var offsetModulo = offset%1;
	        var roundOffset = offset > 0 ? Math.floor(offset) : Math.ceil(offset);
	        var tMat = this.tr.v.props;
	        var pProps = this.pMatrix.props;
	        var rProps = this.rMatrix.props;
	        var sProps = this.sMatrix.props;
	        this.pMatrix.reset();
	        this.rMatrix.reset();
	        this.sMatrix.reset();
	        this.tMatrix.reset();
	        this.matrix.reset();
	        var iteration = 0;

	        if(offset > 0) {
	            while(iteration<roundOffset){
	                this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);
	                iteration += 1;
	            }
	            if(offsetModulo){
	                this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, offsetModulo, false);
	                iteration += offsetModulo;
	            }
	        } else if(offset < 0) {
	            while(iteration>roundOffset){
	                this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, true);
	                iteration -= 1;
	            }
	            if(offsetModulo){
	                this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, - offsetModulo, true);
	                iteration -= offsetModulo;
	            }
	        }
	        i = this.data.m === 1 ? 0 : this._currentCopies - 1;
	        dir = this.data.m === 1 ? 1 : -1;
	        cont = this._currentCopies;
	        var j, jLen;
	        while(cont){
	            items = this.elemsData[i].it;
	            itemsTransform = items[items.length - 1].transform.mProps.v.props;
	            jLen = itemsTransform.length;
	            items[items.length - 1].transform.mProps._mdf = true;
	            items[items.length - 1].transform.op._mdf = true;
	            items[items.length - 1].transform.op.v = this.so.v + (this.eo.v - this.so.v) * (i / (this._currentCopies - 1));
	            if(iteration !== 0){
	                if((i !== 0 && dir === 1) || (i !== this._currentCopies - 1 && dir === -1)){
	                    this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);
	                }
	                this.matrix.transform(rProps[0],rProps[1],rProps[2],rProps[3],rProps[4],rProps[5],rProps[6],rProps[7],rProps[8],rProps[9],rProps[10],rProps[11],rProps[12],rProps[13],rProps[14],rProps[15]);
	                this.matrix.transform(sProps[0],sProps[1],sProps[2],sProps[3],sProps[4],sProps[5],sProps[6],sProps[7],sProps[8],sProps[9],sProps[10],sProps[11],sProps[12],sProps[13],sProps[14],sProps[15]);
	                this.matrix.transform(pProps[0],pProps[1],pProps[2],pProps[3],pProps[4],pProps[5],pProps[6],pProps[7],pProps[8],pProps[9],pProps[10],pProps[11],pProps[12],pProps[13],pProps[14],pProps[15]);
	                
	                for(j=0;j<jLen;j+=1) {
	                    itemsTransform[j] = this.matrix.props[j];
	                }
	                this.matrix.reset();
	            } else {
	                this.matrix.reset();
	                for(j=0;j<jLen;j+=1) {
	                    itemsTransform[j] = this.matrix.props[j];
	                }
	            }
	            iteration += 1;
	            cont -= 1;
	            i += dir;
	        }
	    } else {
	        cont = this._currentCopies;
	        i = 0;
	        dir = 1;
	        while(cont){
	            items = this.elemsData[i].it;
	            itemsTransform = items[items.length - 1].transform.mProps.v.props;
	            items[items.length - 1].transform.mProps._mdf = false;
	            items[items.length - 1].transform.op._mdf = false;
	            cont -= 1;
	            i += dir;
	        }
	    }
	};

	RepeaterModifier.prototype.addShape = function(){};

	ShapeModifiers.registerModifier('rp',RepeaterModifier);
	function ShapeCollection(){
		this._length = 0;
		this._maxLength = 4;
		this.shapes = createSizedArray(this._maxLength);
	}

	ShapeCollection.prototype.addShape = function(shapeData){
		if(this._length === this._maxLength){
			this.shapes = this.shapes.concat(createSizedArray(this._maxLength));
			this._maxLength *= 2;
		}
		this.shapes[this._length] = shapeData;
		this._length += 1;
	};

	ShapeCollection.prototype.releaseShapes = function(){
		var i;
		for(i = 0; i < this._length; i += 1) {
			shape_pool.release(this.shapes[i]);
		}
		this._length = 0;
	};
	function DashProperty(elem, data, renderer, container) {
	    this.elem = elem;
	    this.frameId = -1;
	    this.dataProps = createSizedArray(data.length);
	    this.renderer = renderer;
	    this.k = false;
	    this.dashStr = '';
	    this.dashArray = createTypedArray('float32',  data.length ? data.length - 1 : 0);
	    this.dashoffset = createTypedArray('float32',  1);
	    this.initDynamicPropertyContainer(container);
	    var i, len = data.length || 0, prop;
	    for(i = 0; i < len; i += 1) {
	        prop = PropertyFactory.getProp(elem,data[i].v,0, 0, this);
	        this.k = prop.k || this.k;
	        this.dataProps[i] = {n:data[i].n,p:prop};
	    }
	    if(!this.k){
	        this.getValue(true);
	    }
	    this._isAnimated = this.k;
	}

	DashProperty.prototype.getValue = function(forceRender) {
	    if(this.elem.globalData.frameId === this.frameId && !forceRender){
	        return;
	    }
	    this.frameId = this.elem.globalData.frameId;
	    this.iterateDynamicProperties();
	    this._mdf = this._mdf || forceRender;
	    if (this._mdf) {
	        var i = 0, len = this.dataProps.length;
	        if(this.renderer === 'svg') {
	            this.dashStr = '';
	        }
	        for(i=0;i<len;i+=1){
	            if(this.dataProps[i].n != 'o'){
	                if(this.renderer === 'svg') {
	                    this.dashStr += ' ' + this.dataProps[i].p.v;
	                }else {
	                    this.dashArray[i] = this.dataProps[i].p.v;
	                }
	            }else {
	                this.dashoffset[0] = this.dataProps[i].p.v;
	            }
	        }
	    }
	};
	extendPrototype([DynamicPropertyContainer], DashProperty);
	function GradientProperty(elem,data,container){
	    this.data = data;
	    this.c = createTypedArray('uint8c', data.p*4);
	    var cLength = data.k.k[0].s ? (data.k.k[0].s.length - data.p*4) : data.k.k.length - data.p*4;
	    this.o = createTypedArray('float32', cLength);
	    this._cmdf = false;
	    this._omdf = false;
	    this._collapsable = this.checkCollapsable();
	    this._hasOpacity = cLength;
	    this.initDynamicPropertyContainer(container);
	    this.prop = PropertyFactory.getProp(elem,data.k,1,null,this);
	    this.k = this.prop.k;
	    this.getValue(true);
	}

	GradientProperty.prototype.comparePoints = function(values, points) {
	    var i = 0, len = this.o.length/2, diff;
	    while(i < len) {
	        diff = Math.abs(values[i*4] - values[points*4 + i*2]);
	        if(diff > 0.01){
	            return false;
	        }
	        i += 1;
	    }
	    return true;
	};

	GradientProperty.prototype.checkCollapsable = function() {
	    if (this.o.length/2 !== this.c.length/4) {
	        return false;
	    }
	    if (this.data.k.k[0].s) {
	        var i = 0, len = this.data.k.k.length;
	        while (i < len) {
	            if (!this.comparePoints(this.data.k.k[i].s, this.data.p)) {
	                return false;
	            }
	            i += 1;
	        }
	    } else if(!this.comparePoints(this.data.k.k, this.data.p)) {
	        return false;
	    }
	    return true;
	};

	GradientProperty.prototype.getValue = function(forceRender){
	    this.prop.getValue();
	    this._mdf = false;
	    this._cmdf = false;
	    this._omdf = false;
	    if(this.prop._mdf || forceRender){
	        var i, len = this.data.p*4;
	        var mult, val;
	        for(i=0;i<len;i+=1){
	            mult = i%4 === 0 ? 100 : 255;
	            val = Math.round(this.prop.v[i]*mult);
	            if(this.c[i] !== val){
	                this.c[i] = val;
	                this._cmdf = !forceRender;
	            }
	        }
	        if(this.o.length){
	            len = this.prop.v.length;
	            for(i=this.data.p*4;i<len;i+=1){
	                mult = i%2 === 0 ? 100 : 1;
	                val = i%2 === 0 ?  Math.round(this.prop.v[i]*100):this.prop.v[i];
	                if(this.o[i-this.data.p*4] !== val){
	                    this.o[i-this.data.p*4] = val;
	                    this._omdf = !forceRender;
	                }
	            }
	        }
	        this._mdf = !forceRender;
	    }
	};

	extendPrototype([DynamicPropertyContainer], GradientProperty);
	var buildShapeString = function(pathNodes, length, closed, mat) {
		if(length === 0) {
	            return '';
	        }
	        var _o = pathNodes.o;
	        var _i = pathNodes.i;
	        var _v = pathNodes.v;
	        var i, shapeString = " M" + mat.applyToPointStringified(_v[0][0], _v[0][1]);
	        for(i = 1; i < length; i += 1) {
	            shapeString += " C" + mat.applyToPointStringified(_o[i - 1][0], _o[i - 1][1]) + " " + mat.applyToPointStringified(_i[i][0], _i[i][1]) + " " + mat.applyToPointStringified(_v[i][0], _v[i][1]);
	        }
	        if (closed && length) {
	            shapeString += " C" + mat.applyToPointStringified(_o[i - 1][0], _o[i - 1][1]) + " " + mat.applyToPointStringified(_i[0][0], _i[0][1]) + " " + mat.applyToPointStringified(_v[0][0], _v[0][1]);
	            shapeString += 'z';
	        }
	        return shapeString;
	};
	var ImagePreloader = (function(){

	    var proxyImage = (function(){
	        var canvas = createTag('canvas');
	        canvas.width = 1;
	        canvas.height = 1;
	        var ctx = canvas.getContext('2d');
	        ctx.fillStyle = 'rgba(0,0,0,0)';
	        ctx.fillRect(0, 0, 1, 1);
	        return canvas;
	    }());

	    function imageLoaded(){
	        this.loadedAssets += 1;
	        if(this.loadedAssets === this.totalImages){
	            if(this.imagesLoadedCb) {
	                this.imagesLoadedCb(null);
	            }
	        }
	    }

	    function getAssetsPath(assetData, assetsPath, original_path) {
	        var path = '';
	        if (assetData.e) {
	            path = assetData.p;
	        } else if(assetsPath) {
	            var imagePath = assetData.p;
	            if (imagePath.indexOf('images/') !== -1) {
	                imagePath = imagePath.split('/')[1];
	            }
	            path = assetsPath + imagePath;
	        } else {
	            path = original_path;
	            path += assetData.u ? assetData.u : '';
	            path += assetData.p;
	        }
	        return path;
	    }

	    function createImageData(assetData) {
	        var path = getAssetsPath(assetData, this.assetsPath, this.path);
	        var img = createNS('image');
	        img.addEventListener('load', this._imageLoaded, false);
	        img.addEventListener('error', function() {
	            ob.img = proxyImage;
	            this._imageLoaded();
	        }.bind(this), false);
	        img.setAttributeNS('http://www.w3.org/1999/xlink','href', path);
	        var ob = {
	            img: img,
	            assetData: assetData
	        };
	        return ob;
	    }

	    function createImgData(assetData) {
	        var path = getAssetsPath(assetData, this.assetsPath, this.path);
	        var img = createTag('img');
	        img.crossOrigin = 'anonymous';
	        img.addEventListener('load', this._imageLoaded, false);
	        img.addEventListener('error', function() {
	            ob.img = proxyImage;
	            this._imageLoaded();
	        }.bind(this), false);
	        img.src = path;
	        var ob = {
	            img: img,
	            assetData: assetData
	        };
	        return ob;
	    }

	    function loadAssets(assets, cb){
	        this.imagesLoadedCb = cb;
	        var i, len = assets.length;
	        for (i = 0; i < len; i += 1) {
	            if(!assets[i].layers){
	                this.totalImages += 1;
	                this.images.push(this._createImageData(assets[i]));
	            }
	        }
	    }

	    function setPath(path){
	        this.path = path || '';
	    }

	    function setAssetsPath(path){
	        this.assetsPath = path || '';
	    }

	    function getImage(assetData) {
	        var i = 0, len = this.images.length;
	        while (i < len) {
	            if (this.images[i].assetData === assetData) {
	                return this.images[i].img;
	            }
	            i += 1;
	        }
	    }

	    function destroy() {
	        this.imagesLoadedCb = null;
	        this.images.length = 0;
	    }

	    function loaded() {
	        return this.totalImages === this.loadedAssets;
	    }

	    function setCacheType(type) {
	        if (type === 'svg') {
	            this._createImageData = this.createImageData.bind(this);
	        } else {
	            this._createImageData = this.createImgData.bind(this);
	        }
	    }

	    function ImagePreloader(type){
	        this._imageLoaded = imageLoaded.bind(this);
	        this.assetsPath = '';
	        this.path = '';
	        this.totalImages = 0;
	        this.loadedAssets = 0;
	        this.imagesLoadedCb = null;
	        this.images = [];
	    }
	    ImagePreloader.prototype = {
	        loadAssets: loadAssets,
	        setAssetsPath: setAssetsPath,
	        setPath: setPath,
	        loaded: loaded,
	        destroy: destroy,
	        getImage: getImage,
	        createImgData: createImgData,
	        createImageData: createImageData,
	        imageLoaded: imageLoaded,
	        setCacheType: setCacheType,
	    };

	    return ImagePreloader;
	}());
	var featureSupport = (function(){
		var ob = {
			maskType: true
		};
		if (/MSIE 10/i.test(navigator.userAgent) || /MSIE 9/i.test(navigator.userAgent) || /rv:11.0/i.test(navigator.userAgent) || /Edge\/\d./i.test(navigator.userAgent)) {
		   ob.maskType = false;
		}
		return ob;
	}());
	var filtersFactory = (function(){
		var ob = {};
		ob.createFilter = createFilter;
		ob.createAlphaToLuminanceFilter = createAlphaToLuminanceFilter;

		function createFilter(filId){
	        	var fil = createNS('filter');
	        	fil.setAttribute('id',filId);
	                fil.setAttribute('filterUnits','objectBoundingBox');
	                fil.setAttribute('x','0%');
	                fil.setAttribute('y','0%');
	                fil.setAttribute('width','100%');
	                fil.setAttribute('height','100%');
	                return fil;
		}

		function createAlphaToLuminanceFilter(){
	                var feColorMatrix = createNS('feColorMatrix');
	                feColorMatrix.setAttribute('type','matrix');
	                feColorMatrix.setAttribute('color-interpolation-filters','sRGB');
	                feColorMatrix.setAttribute('values','0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1');
	                return feColorMatrix;
		}

		return ob;
	}());
	var assetLoader = (function(){

		function formatResponse(xhr) {
			if(xhr.response && typeof xhr.response === 'object') {
				return xhr.response;
			} else if(xhr.response && typeof xhr.response === 'string') {
				return JSON.parse(xhr.response);
			} else if(xhr.responseText) {
				return JSON.parse(xhr.responseText);
			}
		}

		function loadAsset(path, callback, errorCallback) {
			var response;
			var xhr = new XMLHttpRequest();
			xhr.open('GET', path, true);
			// set responseType after calling open or IE will break.
			try {
			    // This crashes on Android WebView prior to KitKat
			    xhr.responseType = "json";
			} catch (err) {}
		    xhr.send();
		    xhr.onreadystatechange = function () {
		        if (xhr.readyState == 4) {
		            if(xhr.status == 200){
		            	response = formatResponse(xhr);
		            	callback(response);
		            }else {
		                try{
		            		response = formatResponse(xhr);
		            		callback(response);
		                }catch(err){
		                	if(errorCallback) {
		                		errorCallback(err);
		                	}
		                }
		            }
		        }
		    };
		}
		return {
			load: loadAsset
		}
	}());

	function TextAnimatorProperty(textData, renderType, elem){
	    this._isFirstFrame = true;
		this._hasMaskedPath = false;
		this._frameId = -1;
		this._textData = textData;
		this._renderType = renderType;
	    this._elem = elem;
		this._animatorsData = createSizedArray(this._textData.a.length);
		this._pathData = {};
		this._moreOptions = {
			alignment: {}
		};
		this.renderedLetters = [];
	    this.lettersChangedFlag = false;
	    this.initDynamicPropertyContainer(elem);

	}

	TextAnimatorProperty.prototype.searchProperties = function(){
	    var i, len = this._textData.a.length, animatorProps;
	    var getProp = PropertyFactory.getProp;
	    for(i=0;i<len;i+=1){
	        animatorProps = this._textData.a[i];
	        this._animatorsData[i] = new TextAnimatorDataProperty(this._elem, animatorProps, this);
	    }
	    if(this._textData.p && 'm' in this._textData.p){
	        this._pathData = {
	            f: getProp(this._elem,this._textData.p.f,0,0,this),
	            l: getProp(this._elem,this._textData.p.l,0,0,this),
	            r: this._textData.p.r,
	            m: this._elem.maskManager.getMaskProperty(this._textData.p.m)
	        };
	        this._hasMaskedPath = true;
	    } else {
	        this._hasMaskedPath = false;
	    }
	    this._moreOptions.alignment = getProp(this._elem,this._textData.m.a,1,0,this);
	};

	TextAnimatorProperty.prototype.getMeasures = function(documentData, lettersChangedFlag){
	    this.lettersChangedFlag = lettersChangedFlag;
	    if(!this._mdf && !this._isFirstFrame && !lettersChangedFlag && (!this._hasMaskedPath || !this._pathData.m._mdf)) {
	        return;
	    }
	    this._isFirstFrame = false;
	    var alignment = this._moreOptions.alignment.v;
	    var animators = this._animatorsData;
	    var textData = this._textData;
	    var matrixHelper = this.mHelper;
	    var renderType = this._renderType;
	    var renderedLettersCount = this.renderedLetters.length;
	    var data = this.data;
	    var xPos,yPos;
	    var i, len;
	    var letters = documentData.l, pathInfo, currentLength, currentPoint, segmentLength, flag, pointInd, segmentInd, prevPoint, points, segments, partialLength, totalLength, perc, tanAngle, mask;
	    if(this._hasMaskedPath) {
	        mask = this._pathData.m;
	        if(!this._pathData.n || this._pathData._mdf){
	            var paths = mask.v;
	            if(this._pathData.r){
	                paths = paths.reverse();
	            }
	            // TODO: release bezier data cached from previous pathInfo: this._pathData.pi
	            pathInfo = {
	                tLength: 0,
	                segments: []
	            };
	            len = paths._length - 1;
	            var bezierData;
	            totalLength = 0;
	            for (i = 0; i < len; i += 1) {
	                bezierData = bez.buildBezierData(paths.v[i]
	                    , paths.v[i + 1]
	                    , [paths.o[i][0] - paths.v[i][0], paths.o[i][1] - paths.v[i][1]]
	                    , [paths.i[i + 1][0] - paths.v[i + 1][0], paths.i[i + 1][1] - paths.v[i + 1][1]]);
	                pathInfo.tLength += bezierData.segmentLength;
	                pathInfo.segments.push(bezierData);
	                totalLength += bezierData.segmentLength;
	            }
	            i = len;
	            if (mask.v.c) {
	                bezierData = bez.buildBezierData(paths.v[i]
	                    , paths.v[0]
	                    , [paths.o[i][0] - paths.v[i][0], paths.o[i][1] - paths.v[i][1]]
	                    , [paths.i[0][0] - paths.v[0][0], paths.i[0][1] - paths.v[0][1]]);
	                pathInfo.tLength += bezierData.segmentLength;
	                pathInfo.segments.push(bezierData);
	                totalLength += bezierData.segmentLength;
	            }
	            this._pathData.pi = pathInfo;
	        }
	        pathInfo = this._pathData.pi;

	        currentLength = this._pathData.f.v;
	        segmentInd = 0;
	        pointInd = 1;
	        segmentLength = 0;
	        flag = true;
	        segments = pathInfo.segments;
	        if (currentLength < 0 && mask.v.c) {
	            if (pathInfo.tLength < Math.abs(currentLength)) {
	                currentLength = -Math.abs(currentLength) % pathInfo.tLength;
	            }
	            segmentInd = segments.length - 1;
	            points = segments[segmentInd].points;
	            pointInd = points.length - 1;
	            while (currentLength < 0) {
	                currentLength += points[pointInd].partialLength;
	                pointInd -= 1;
	                if (pointInd < 0) {
	                    segmentInd -= 1;
	                    points = segments[segmentInd].points;
	                    pointInd = points.length - 1;
	                }
	            }

	        }
	        points = segments[segmentInd].points;
	        prevPoint = points[pointInd - 1];
	        currentPoint = points[pointInd];
	        partialLength = currentPoint.partialLength;
	    }


	    len = letters.length;
	    xPos = 0;
	    yPos = 0;
	    var yOff = documentData.finalSize * 1.2 * 0.714;
	    var firstLine = true;
	    var animatorProps, animatorSelector;
	    var j, jLen;
	    var letterValue;

	    jLen = animators.length;

	    var mult, ind = -1, offf, xPathPos, yPathPos;
	    var initPathPos = currentLength,initSegmentInd = segmentInd, initPointInd = pointInd, currentLine = -1;
	    var elemOpacity;
	    var sc,sw,fc,k;
	    var lineLength = 0;
	    var letterSw, letterSc, letterFc, letterM = '', letterP = this.defaultPropsArray, letterO;

	    //
	    if(documentData.j === 2 || documentData.j === 1) {
	        var animatorJustifyOffset = 0;
	        var animatorFirstCharOffset = 0;
	        var justifyOffsetMult = documentData.j === 2 ? -0.5 : -1;
	        var lastIndex = 0;
	        var isNewLine = true;

	        for (i = 0; i < len; i += 1) {
	            if (letters[i].n) {
	                if(animatorJustifyOffset) {
	                    animatorJustifyOffset += animatorFirstCharOffset;
	                }
	                while (lastIndex < i) {
	                    letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
	                    lastIndex += 1;
	                }
	                animatorJustifyOffset = 0;
	                isNewLine = true;
	            } else {
	                for (j = 0; j < jLen; j += 1) {
	                    animatorProps = animators[j].a;
	                    if (animatorProps.t.propType) {
	                        if (isNewLine && documentData.j === 2) {
	                            animatorFirstCharOffset += animatorProps.t.v * justifyOffsetMult;
	                        }
	                        animatorSelector = animators[j].s;
	                        mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
	                        if (mult.length) {
	                            animatorJustifyOffset += animatorProps.t.v*mult[0] * justifyOffsetMult;
	                        } else {
	                            animatorJustifyOffset += animatorProps.t.v*mult * justifyOffsetMult;
	                        }
	                    }
	                }
	                isNewLine = false;
	            }
	        }
	        if(animatorJustifyOffset) {
	            animatorJustifyOffset += animatorFirstCharOffset;
	        }
	        while(lastIndex < i) {
	            letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
	            lastIndex += 1;
	        }
	    }
	    //

	    for( i = 0; i < len; i += 1) {

	        matrixHelper.reset();
	        elemOpacity = 1;
	        if(letters[i].n) {
	            xPos = 0;
	            yPos += documentData.yOffset;
	            yPos += firstLine ? 1 : 0;
	            currentLength = initPathPos ;
	            firstLine = false;
	            lineLength = 0;
	            if(this._hasMaskedPath) {
	                segmentInd = initSegmentInd;
	                pointInd = initPointInd;
	                points = segments[segmentInd].points;
	                prevPoint = points[pointInd - 1];
	                currentPoint = points[pointInd];
	                partialLength = currentPoint.partialLength;
	                segmentLength = 0;
	            }
	            letterO = letterSw = letterFc = letterM = '';
	            letterP = this.defaultPropsArray;
	        }else {
	            if(this._hasMaskedPath) {
	                if(currentLine !== letters[i].line){
	                    switch(documentData.j){
	                        case 1:
	                            currentLength += totalLength - documentData.lineWidths[letters[i].line];
	                            break;
	                        case 2:
	                            currentLength += (totalLength - documentData.lineWidths[letters[i].line])/2;
	                            break;
	                    }
	                    currentLine = letters[i].line;
	                }
	                if (ind !== letters[i].ind) {
	                    if (letters[ind]) {
	                        currentLength += letters[ind].extra;
	                    }
	                    currentLength += letters[i].an / 2;
	                    ind = letters[i].ind;
	                }
	                currentLength += alignment[0] * letters[i].an / 200;
	                var animatorOffset = 0;
	                for (j = 0; j < jLen; j += 1) {
	                    animatorProps = animators[j].a;
	                    if (animatorProps.p.propType) {
	                        animatorSelector = animators[j].s;
	                        mult = animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);
	                        if(mult.length){
	                            animatorOffset += animatorProps.p.v[0] * mult[0];
	                        } else {
	                            animatorOffset += animatorProps.p.v[0] * mult;
	                        }

	                    }
	                    if (animatorProps.a.propType) {
	                        animatorSelector = animators[j].s;
	                        mult = animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);
	                        if(mult.length){
	                            animatorOffset += animatorProps.a.v[0] * mult[0];
	                        } else {
	                            animatorOffset += animatorProps.a.v[0] * mult;
	                        }

	                    }
	                }
	                flag = true;
	                while (flag) {
	                    if (segmentLength + partialLength >= currentLength + animatorOffset || !points) {
	                        perc = (currentLength + animatorOffset - segmentLength) / currentPoint.partialLength;
	                        xPathPos = prevPoint.point[0] + (currentPoint.point[0] - prevPoint.point[0]) * perc;
	                        yPathPos = prevPoint.point[1] + (currentPoint.point[1] - prevPoint.point[1]) * perc;
	                        matrixHelper.translate(-alignment[0]*letters[i].an/200, -(alignment[1] * yOff / 100));
	                        flag = false;
	                    } else if (points) {
	                        segmentLength += currentPoint.partialLength;
	                        pointInd += 1;
	                        if (pointInd >= points.length) {
	                            pointInd = 0;
	                            segmentInd += 1;
	                            if (!segments[segmentInd]) {
	                                if (mask.v.c) {
	                                    pointInd = 0;
	                                    segmentInd = 0;
	                                    points = segments[segmentInd].points;
	                                } else {
	                                    segmentLength -= currentPoint.partialLength;
	                                    points = null;
	                                }
	                            } else {
	                                points = segments[segmentInd].points;
	                            }
	                        }
	                        if (points) {
	                            prevPoint = currentPoint;
	                            currentPoint = points[pointInd];
	                            partialLength = currentPoint.partialLength;
	                        }
	                    }
	                }
	                offf = letters[i].an / 2 - letters[i].add;
	                matrixHelper.translate(-offf, 0, 0);
	            } else {
	                offf = letters[i].an/2 - letters[i].add;
	                matrixHelper.translate(-offf,0,0);

	                // Grouping alignment
	                matrixHelper.translate(-alignment[0]*letters[i].an/200, -alignment[1]*yOff/100, 0);
	            }

	            lineLength += letters[i].l/2;
	            for(j=0;j<jLen;j+=1){
	                animatorProps = animators[j].a;
	                if (animatorProps.t.propType) {
	                    animatorSelector = animators[j].s;
	                    mult = animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);
	                    //This condition is to prevent applying tracking to first character in each line. Might be better to use a boolean "isNewLine"
	                    if(xPos !== 0 || documentData.j !== 0) {
	                        if(this._hasMaskedPath) {
	                            if(mult.length) {
	                                currentLength += animatorProps.t.v*mult[0];
	                            } else {
	                                currentLength += animatorProps.t.v*mult;
	                            }
	                        }else {
	                            if(mult.length) {
	                                xPos += animatorProps.t.v*mult[0];
	                            } else {
	                                xPos += animatorProps.t.v*mult;
	                            }
	                        }
	                    }
	                }
	            }
	            lineLength += letters[i].l/2;
	            if(documentData.strokeWidthAnim) {
	                sw = documentData.sw || 0;
	            }
	            if(documentData.strokeColorAnim) {
	                if(documentData.sc){
	                    sc = [documentData.sc[0], documentData.sc[1], documentData.sc[2]];
	                }else {
	                    sc = [0,0,0];
	                }
	            }
	            if(documentData.fillColorAnim && documentData.fc) {
	                fc = [documentData.fc[0], documentData.fc[1], documentData.fc[2]];
	            }
	            for(j=0;j<jLen;j+=1){
	                animatorProps = animators[j].a;
	                if (animatorProps.a.propType) {
	                    animatorSelector = animators[j].s;
	                    mult = animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);

	                    if(mult.length){
	                        matrixHelper.translate(-animatorProps.a.v[0]*mult[0], -animatorProps.a.v[1]*mult[1], animatorProps.a.v[2]*mult[2]);
	                    } else {
	                        matrixHelper.translate(-animatorProps.a.v[0]*mult, -animatorProps.a.v[1]*mult, animatorProps.a.v[2]*mult);
	                    }
	                }
	            }
	            for(j=0;j<jLen;j+=1){
	                animatorProps = animators[j].a;
	                if (animatorProps.s.propType) {
	                    animatorSelector = animators[j].s;
	                    mult = animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);
	                    if(mult.length){
	                        matrixHelper.scale(1+((animatorProps.s.v[0]-1)*mult[0]),1+((animatorProps.s.v[1]-1)*mult[1]),1);
	                    } else {
	                        matrixHelper.scale(1+((animatorProps.s.v[0]-1)*mult),1+((animatorProps.s.v[1]-1)*mult),1);
	                    }
	                }
	            }
	            for(j=0;j<jLen;j+=1) {
	                animatorProps = animators[j].a;
	                animatorSelector = animators[j].s;
	                mult = animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);
	                if (animatorProps.sk.propType) {
	                    if(mult.length) {
	                        matrixHelper.skewFromAxis(-animatorProps.sk.v * mult[0], animatorProps.sa.v * mult[1]);
	                    } else {
	                        matrixHelper.skewFromAxis(-animatorProps.sk.v * mult, animatorProps.sa.v * mult);
	                    }
	                }
	                if (animatorProps.r.propType) {
	                    if(mult.length) {
	                        matrixHelper.rotateZ(-animatorProps.r.v * mult[2]);
	                    } else {
	                        matrixHelper.rotateZ(-animatorProps.r.v * mult);
	                    }
	                }
	                if (animatorProps.ry.propType) {

	                    if(mult.length) {
	                        matrixHelper.rotateY(animatorProps.ry.v*mult[1]);
	                    }else {
	                        matrixHelper.rotateY(animatorProps.ry.v*mult);
	                    }
	                }
	                if (animatorProps.rx.propType) {
	                    if(mult.length) {
	                        matrixHelper.rotateX(animatorProps.rx.v*mult[0]);
	                    } else {
	                        matrixHelper.rotateX(animatorProps.rx.v*mult);
	                    }
	                }
	                if (animatorProps.o.propType) {
	                    if(mult.length) {
	                        elemOpacity += ((animatorProps.o.v)*mult[0] - elemOpacity)*mult[0];
	                    } else {
	                        elemOpacity += ((animatorProps.o.v)*mult - elemOpacity)*mult;
	                    }
	                }
	                if (documentData.strokeWidthAnim && animatorProps.sw.propType) {
	                    if(mult.length) {
	                        sw += animatorProps.sw.v*mult[0];
	                    } else {
	                        sw += animatorProps.sw.v*mult;
	                    }
	                }
	                if (documentData.strokeColorAnim && animatorProps.sc.propType) {
	                    for(k=0;k<3;k+=1){
	                        if(mult.length) {
	                            sc[k] = sc[k] + (animatorProps.sc.v[k] - sc[k])*mult[0];
	                        } else {
	                            sc[k] = sc[k] + (animatorProps.sc.v[k] - sc[k])*mult;
	                        }
	                    }
	                }
	                if (documentData.fillColorAnim && documentData.fc) {
	                    if(animatorProps.fc.propType){
	                        for(k=0;k<3;k+=1){
	                            if(mult.length) {
	                                fc[k] = fc[k] + (animatorProps.fc.v[k] - fc[k])*mult[0];
	                            } else {
	                                fc[k] = fc[k] + (animatorProps.fc.v[k] - fc[k])*mult;
	                            }
	                        }
	                    }
	                    if(animatorProps.fh.propType){
	                        if(mult.length) {
	                            fc = addHueToRGB(fc,animatorProps.fh.v*mult[0]);
	                        } else {
	                            fc = addHueToRGB(fc,animatorProps.fh.v*mult);
	                        }
	                    }
	                    if(animatorProps.fs.propType){
	                        if(mult.length) {
	                            fc = addSaturationToRGB(fc,animatorProps.fs.v*mult[0]);
	                        } else {
	                            fc = addSaturationToRGB(fc,animatorProps.fs.v*mult);
	                        }
	                    }
	                    if(animatorProps.fb.propType){
	                        if(mult.length) {
	                            fc = addBrightnessToRGB(fc,animatorProps.fb.v*mult[0]);
	                        } else {
	                            fc = addBrightnessToRGB(fc,animatorProps.fb.v*mult);
	                        }
	                    }
	                }
	            }

	            for(j=0;j<jLen;j+=1){
	                animatorProps = animators[j].a;

	                if (animatorProps.p.propType) {
	                    animatorSelector = animators[j].s;
	                    mult = animatorSelector.getMult(letters[i].anIndexes[j],textData.a[j].s.totalChars);
	                    if(this._hasMaskedPath) {
	                        if(mult.length) {
	                            matrixHelper.translate(0, animatorProps.p.v[1] * mult[0], -animatorProps.p.v[2] * mult[1]);
	                        } else {
	                            matrixHelper.translate(0, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);
	                        }
	                    }else {
	                        if(mult.length) {
	                            matrixHelper.translate(animatorProps.p.v[0] * mult[0], animatorProps.p.v[1] * mult[1], -animatorProps.p.v[2] * mult[2]);
	                        } else {
	                            matrixHelper.translate(animatorProps.p.v[0] * mult, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);
	                        
	                        }
	                    }
	                }
	            }
	            if(documentData.strokeWidthAnim){
	                letterSw = sw < 0 ? 0 : sw;
	            }
	            if(documentData.strokeColorAnim){
	                letterSc = 'rgb('+Math.round(sc[0]*255)+','+Math.round(sc[1]*255)+','+Math.round(sc[2]*255)+')';
	            }
	            if(documentData.fillColorAnim && documentData.fc){
	                letterFc = 'rgb('+Math.round(fc[0]*255)+','+Math.round(fc[1]*255)+','+Math.round(fc[2]*255)+')';
	            }

	            if(this._hasMaskedPath) {
	                matrixHelper.translate(0,-documentData.ls);

	                matrixHelper.translate(0, alignment[1]*yOff/100 + yPos,0);
	                if (textData.p.p) {
	                    tanAngle = (currentPoint.point[1] - prevPoint.point[1]) / (currentPoint.point[0] - prevPoint.point[0]);
	                    var rot = Math.atan(tanAngle) * 180 / Math.PI;
	                    if (currentPoint.point[0] < prevPoint.point[0]) {
	                        rot += 180;
	                    }
	                    matrixHelper.rotate(-rot * Math.PI / 180);
	                }
	                matrixHelper.translate(xPathPos, yPathPos, 0);
	                currentLength -= alignment[0]*letters[i].an/200;
	                if(letters[i+1] && ind !== letters[i+1].ind){
	                    currentLength += letters[i].an / 2;
	                    currentLength += documentData.tr/1000*documentData.finalSize;
	                }
	            }else {

	                matrixHelper.translate(xPos,yPos,0);

	                if(documentData.ps){
	                    //matrixHelper.translate(documentData.ps[0],documentData.ps[1],0);
	                    matrixHelper.translate(documentData.ps[0],documentData.ps[1] + documentData.ascent,0);
	                }
	                switch(documentData.j){
	                    case 1:
	                        matrixHelper.translate(letters[i].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i].line]),0,0);
	                        break;
	                    case 2:
	                        matrixHelper.translate(letters[i].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i].line])/2,0,0);
	                        break;
	                }
	                matrixHelper.translate(0,-documentData.ls);
	                matrixHelper.translate(offf,0,0);
	                matrixHelper.translate(alignment[0]*letters[i].an/200,alignment[1]*yOff/100,0);
	                xPos += letters[i].l + documentData.tr/1000*documentData.finalSize;
	            }
	            if(renderType === 'html'){
	                letterM = matrixHelper.toCSS();
	            }else if(renderType === 'svg'){
	                letterM = matrixHelper.to2dCSS();
	            }else {
	                letterP = [matrixHelper.props[0],matrixHelper.props[1],matrixHelper.props[2],matrixHelper.props[3],matrixHelper.props[4],matrixHelper.props[5],matrixHelper.props[6],matrixHelper.props[7],matrixHelper.props[8],matrixHelper.props[9],matrixHelper.props[10],matrixHelper.props[11],matrixHelper.props[12],matrixHelper.props[13],matrixHelper.props[14],matrixHelper.props[15]];
	            }
	            letterO = elemOpacity;
	        }

	        if(renderedLettersCount <= i) {
	            letterValue = new LetterProps(letterO,letterSw,letterSc,letterFc,letterM,letterP);
	            this.renderedLetters.push(letterValue);
	            renderedLettersCount += 1;
	            this.lettersChangedFlag = true;
	        } else {
	            letterValue = this.renderedLetters[i];
	            this.lettersChangedFlag = letterValue.update(letterO, letterSw, letterSc, letterFc, letterM, letterP) || this.lettersChangedFlag;
	        }
	    }
	};

	TextAnimatorProperty.prototype.getValue = function(){
		if(this._elem.globalData.frameId === this._frameId){
	        return;
	    }
	    this._frameId = this._elem.globalData.frameId;
	    this.iterateDynamicProperties();
	};

	TextAnimatorProperty.prototype.mHelper = new Matrix();
	TextAnimatorProperty.prototype.defaultPropsArray = [];
	extendPrototype([DynamicPropertyContainer], TextAnimatorProperty);
	function TextAnimatorDataProperty(elem, animatorProps, container) {
		var defaultData = {propType:false};
		var getProp = PropertyFactory.getProp;
		var textAnimator_animatables = animatorProps.a;
		this.a = {
			r: textAnimator_animatables.r ? getProp(elem, textAnimator_animatables.r, 0, degToRads, container) : defaultData,
			rx: textAnimator_animatables.rx ? getProp(elem, textAnimator_animatables.rx, 0, degToRads, container) : defaultData,
			ry: textAnimator_animatables.ry ? getProp(elem, textAnimator_animatables.ry, 0, degToRads, container) : defaultData,
			sk: textAnimator_animatables.sk ? getProp(elem, textAnimator_animatables.sk, 0, degToRads, container) : defaultData,
			sa: textAnimator_animatables.sa ? getProp(elem, textAnimator_animatables.sa, 0, degToRads, container) : defaultData,
			s: textAnimator_animatables.s ? getProp(elem, textAnimator_animatables.s, 1, 0.01, container) : defaultData,
			a: textAnimator_animatables.a ? getProp(elem, textAnimator_animatables.a, 1, 0, container) : defaultData,
			o: textAnimator_animatables.o ? getProp(elem, textAnimator_animatables.o, 0, 0.01, container) : defaultData,
			p: textAnimator_animatables.p ? getProp(elem,textAnimator_animatables.p, 1, 0, container) : defaultData,
			sw: textAnimator_animatables.sw ? getProp(elem, textAnimator_animatables.sw, 0, 0, container) : defaultData,
			sc: textAnimator_animatables.sc ? getProp(elem, textAnimator_animatables.sc, 1, 0, container) : defaultData,
			fc: textAnimator_animatables.fc ? getProp(elem, textAnimator_animatables.fc, 1, 0, container) : defaultData,
			fh: textAnimator_animatables.fh ? getProp(elem, textAnimator_animatables.fh, 0, 0, container) : defaultData,
			fs: textAnimator_animatables.fs ? getProp(elem, textAnimator_animatables.fs, 0, 0.01, container) : defaultData,
			fb: textAnimator_animatables.fb ? getProp(elem, textAnimator_animatables.fb, 0, 0.01, container) : defaultData,
			t: textAnimator_animatables.t ? getProp(elem, textAnimator_animatables.t, 0, 0, container) : defaultData
		};

		this.s = TextSelectorProp.getTextSelectorProp(elem,animatorProps.s, container);
	    this.s.t = animatorProps.s.t;
	}
	function LetterProps(o, sw, sc, fc, m, p){
	    this.o = o;
	    this.sw = sw;
	    this.sc = sc;
	    this.fc = fc;
	    this.m = m;
	    this.p = p;
	    this._mdf = {
	    	o: true,
	    	sw: !!sw,
	    	sc: !!sc,
	    	fc: !!fc,
	    	m: true,
	    	p: true
	    };
	}

	LetterProps.prototype.update = function(o, sw, sc, fc, m, p) {
		this._mdf.o = false;
		this._mdf.sw = false;
		this._mdf.sc = false;
		this._mdf.fc = false;
		this._mdf.m = false;
		this._mdf.p = false;
		var updated = false;

		if(this.o !== o) {
			this.o = o;
			this._mdf.o = true;
			updated = true;
		}
		if(this.sw !== sw) {
			this.sw = sw;
			this._mdf.sw = true;
			updated = true;
		}
		if(this.sc !== sc) {
			this.sc = sc;
			this._mdf.sc = true;
			updated = true;
		}
		if(this.fc !== fc) {
			this.fc = fc;
			this._mdf.fc = true;
			updated = true;
		}
		if(this.m !== m) {
			this.m = m;
			this._mdf.m = true;
			updated = true;
		}
		if(p.length && (this.p[0] !== p[0] || this.p[1] !== p[1] || this.p[4] !== p[4] || this.p[5] !== p[5] || this.p[12] !== p[12] || this.p[13] !== p[13])) {
			this.p = p;
			this._mdf.p = true;
			updated = true;
		}
		return updated;
	};
	function TextProperty(elem, data){
		this._frameId = initialDefaultFrame;
		this.pv = '';
		this.v = '';
		this.kf = false;
		this._isFirstFrame = true;
		this._mdf = false;
	    this.data = data;
		this.elem = elem;
	    this.comp = this.elem.comp;
		this.keysIndex = 0;
	    this.canResize = false;
	    this.minimumFontSize = 1;
	    this.effectsSequence = [];
		this.currentData = {
			ascent: 0,
	        boxWidth: this.defaultBoxWidth,
	        f: '',
	        fStyle: '',
	        fWeight: '',
	        fc: '',
	        j: '',
	        justifyOffset: '',
	        l: [],
	        lh: 0,
	        lineWidths: [],
	        ls: '',
	        of: '',
	        s: '',
	        sc: '',
	        sw: 0,
	        t: 0,
	        tr: 0,
	        sz:0,
	        ps:null,
	        fillColorAnim: false,
	        strokeColorAnim: false,
	        strokeWidthAnim: false,
	        yOffset: 0,
	        finalSize:0,
	        finalText:[],
	        finalLineHeight: 0,
	        __complete: false

		};
	    this.copyData(this.currentData, this.data.d.k[0].s);

	    if(!this.searchProperty()) {
	        this.completeTextData(this.currentData);
	    }
	}

	TextProperty.prototype.defaultBoxWidth = [0,0];

	TextProperty.prototype.copyData = function(obj, data) {
	    for(var s in data) {
	        if(data.hasOwnProperty(s)) {
	            obj[s] = data[s];
	        }
	    }
	    return obj;
	};

	TextProperty.prototype.setCurrentData = function(data){
	    if(!data.__complete) {
	        this.completeTextData(data);
	    }
	    this.currentData = data;
	    this.currentData.boxWidth = this.currentData.boxWidth || this.defaultBoxWidth;
	    this._mdf = true;
	};

	TextProperty.prototype.searchProperty = function() {
	    return this.searchKeyframes();
	};

	TextProperty.prototype.searchKeyframes = function() {
	    this.kf = this.data.d.k.length > 1;
	    if(this.kf) {
	        this.addEffect(this.getKeyframeValue.bind(this));
	    }
	    return this.kf;
	};

	TextProperty.prototype.addEffect = function(effectFunction) {
		this.effectsSequence.push(effectFunction);
	    this.elem.addDynamicProperty(this);
	};

	TextProperty.prototype.getValue = function(_finalValue) {
	    if((this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) && !_finalValue) {
	        return;
	    }
	    this.currentData.t = this.data.d.k[this.keysIndex].s.t;
	    var currentValue = this.currentData;
	    var currentIndex = this.keysIndex;
	    if(this.lock) {
	        this.setCurrentData(this.currentData);
	        return;
	    }
	    this.lock = true;
	    this._mdf = false;
	    var i, len = this.effectsSequence.length;
	    var finalValue = _finalValue || this.data.d.k[this.keysIndex].s;
	    for(i = 0; i < len; i += 1) {
	        //Checking if index changed to prevent creating a new object every time the expression updates.
	        if(currentIndex !== this.keysIndex) {
	            finalValue = this.effectsSequence[i](finalValue, finalValue.t);
	        } else {
	            finalValue = this.effectsSequence[i](this.currentData, finalValue.t);
	        }
	    }
	    if(currentValue !== finalValue) {
	        this.setCurrentData(finalValue);
	    }
	    this.pv = this.v = this.currentData;
	    this.lock = false;
	    this.frameId = this.elem.globalData.frameId;
	};

	TextProperty.prototype.getKeyframeValue = function() {
	    var textKeys = this.data.d.k, textDocumentData;
	    var frameNum = this.elem.comp.renderedFrame;
	    var i = 0, len = textKeys.length;
	    while(i <= len - 1) {
	        textDocumentData = textKeys[i].s;
	        if(i === len - 1 || textKeys[i+1].t > frameNum){
	            break;
	        }
	        i += 1;
	    }
	    if(this.keysIndex !== i) {
	        this.keysIndex = i;
	    }
	    return this.data.d.k[this.keysIndex].s;
	};

	TextProperty.prototype.buildFinalText = function(text) {
	    var combinedCharacters = FontManager.getCombinedCharacterCodes();
	    var charactersArray = [];
	    var i = 0, len = text.length;
	    var charCode;
	    while (i < len) {
	        charCode = text.charCodeAt(i);
	        if (combinedCharacters.indexOf(charCode) !== -1) {
	            charactersArray[charactersArray.length - 1] += text.charAt(i);
	        } else {
	            if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	                charCode = text.charCodeAt(i + 1);
	                if (charCode >= 0xDC00 && charCode <= 0xDFFF) {
	                    charactersArray.push(text.substr(i, 2));
	                    ++i;
	                } else {
	                    charactersArray.push(text.charAt(i));
	                }
	            } else {
	                charactersArray.push(text.charAt(i));
	            }
	        }
	        i += 1;
	    }
	    return charactersArray;
	};

	TextProperty.prototype.completeTextData = function(documentData) {
	    documentData.__complete = true;
	    var fontManager = this.elem.globalData.fontManager;
	    var data = this.data;
	    var letters = [];
	    var i, len;
	    var newLineFlag, index = 0, val;
	    var anchorGrouping = data.m.g;
	    var currentSize = 0, currentPos = 0, currentLine = 0, lineWidths = [];
	    var lineWidth = 0;
	    var maxLineWidth = 0;
	    var j, jLen;
	    var fontData = fontManager.getFontByName(documentData.f);
	    var charData, cLength = 0;
	    var styles = fontData.fStyle ? fontData.fStyle.split(' ') : [];

	    var fWeight = 'normal', fStyle = 'normal';
	    len = styles.length;
	    var styleName;
	    for(i=0;i<len;i+=1){
	        styleName = styles[i].toLowerCase();
	        switch(styleName) {
	            case 'italic':
	            fStyle = 'italic';
	            break;
	            case 'bold':
	            fWeight = '700';
	            break;
	            case 'black':
	            fWeight = '900';
	            break;
	            case 'medium':
	            fWeight = '500';
	            break;
	            case 'regular':
	            case 'normal':
	            fWeight = '400';
	            break;
	            case 'light':
	            case 'thin':
	            fWeight = '200';
	            break;
	        }
	    }
	    documentData.fWeight = fontData.fWeight || fWeight;
	    documentData.fStyle = fStyle;
	    documentData.finalSize = documentData.s;
	    documentData.finalText = this.buildFinalText(documentData.t);
	    len = documentData.finalText.length;
	    documentData.finalLineHeight = documentData.lh;
	    var trackingOffset = documentData.tr/1000*documentData.finalSize;
	    var charCode;
	    if(documentData.sz){
	        var flag = true;
	        var boxWidth = documentData.sz[0];
	        var boxHeight = documentData.sz[1];
	        var currentHeight, finalText;
	        while(flag) {
	            finalText = this.buildFinalText(documentData.t);
	            currentHeight = 0;
	            lineWidth = 0;
	            len = finalText.length;
	            trackingOffset = documentData.tr/1000*documentData.finalSize;
	            var lastSpaceIndex = -1;
	            for(i=0;i<len;i+=1){
	                charCode = finalText[i].charCodeAt(0);
	                newLineFlag = false;
	                if(finalText[i] === ' '){
	                    lastSpaceIndex = i;
	                }else if(charCode === 13 || charCode === 3){
	                    lineWidth = 0;
	                    newLineFlag = true;
	                    currentHeight += documentData.finalLineHeight || documentData.finalSize*1.2;
	                }
	                if(fontManager.chars){
	                    charData = fontManager.getCharData(finalText[i], fontData.fStyle, fontData.fFamily);
	                    cLength = newLineFlag ? 0 : charData.w*documentData.finalSize/100;
	                }else {
	                    //tCanvasHelper.font = documentData.s + 'px '+ fontData.fFamily;
	                    cLength = fontManager.measureText(finalText[i], documentData.f, documentData.finalSize);
	                }
	                if(lineWidth + cLength > boxWidth && finalText[i] !== ' '){
	                    if(lastSpaceIndex === -1){
	                        len += 1;
	                    } else {
	                        i = lastSpaceIndex;
	                    }
	                    currentHeight += documentData.finalLineHeight || documentData.finalSize*1.2;
	                    finalText.splice(i, lastSpaceIndex === i ? 1 : 0,"\r");
	                    //finalText = finalText.substr(0,i) + "\r" + finalText.substr(i === lastSpaceIndex ? i + 1 : i);
	                    lastSpaceIndex = -1;
	                    lineWidth = 0;
	                }else {
	                    lineWidth += cLength;
	                    lineWidth += trackingOffset;
	                }
	            }
	            currentHeight += fontData.ascent*documentData.finalSize/100;
	            if(this.canResize && documentData.finalSize > this.minimumFontSize && boxHeight < currentHeight) {
	                documentData.finalSize -= 1;
	                documentData.finalLineHeight = documentData.finalSize * documentData.lh / documentData.s;
	            } else {
	                documentData.finalText = finalText;
	                len = documentData.finalText.length;
	                flag = false;
	            }
	        }

	    }
	    lineWidth = - trackingOffset;
	    cLength = 0;
	    var uncollapsedSpaces = 0;
	    var currentChar;
	    for (i = 0;i < len ;i += 1) {
	        newLineFlag = false;
	        currentChar = documentData.finalText[i];
	        charCode = currentChar.charCodeAt(0);
	        if (charCode === 13 || charCode === 3) {
	            uncollapsedSpaces = 0;
	            lineWidths.push(lineWidth);
	            maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
	            lineWidth = - 2 * trackingOffset;
	            val = '';
	            newLineFlag = true;
	            currentLine += 1;
	        }else {
	            val = currentChar;
	        }
	        if(fontManager.chars){
	            charData = fontManager.getCharData(currentChar, fontData.fStyle, fontManager.getFontByName(documentData.f).fFamily);
	            cLength = newLineFlag ? 0 : charData.w*documentData.finalSize/100;
	        }else {
	            //var charWidth = fontManager.measureText(val, documentData.f, documentData.finalSize);
	            //tCanvasHelper.font = documentData.finalSize + 'px '+ fontManager.getFontByName(documentData.f).fFamily;
	            cLength = fontManager.measureText(val, documentData.f, documentData.finalSize);
	        }

	        //
	        if(currentChar === ' '){
	            uncollapsedSpaces += cLength + trackingOffset;
	        } else {
	            lineWidth += cLength + trackingOffset + uncollapsedSpaces;
	            uncollapsedSpaces = 0;
	        }
	        letters.push({l:cLength,an:cLength,add:currentSize,n:newLineFlag, anIndexes:[], val: val, line: currentLine, animatorJustifyOffset: 0});
	        if(anchorGrouping == 2){
	            currentSize += cLength;
	            if(val === '' || val === ' ' || i === len - 1){
	                if(val === '' || val === ' '){
	                    currentSize -= cLength;
	                }
	                while(currentPos<=i){
	                    letters[currentPos].an = currentSize;
	                    letters[currentPos].ind = index;
	                    letters[currentPos].extra = cLength;
	                    currentPos += 1;
	                }
	                index += 1;
	                currentSize = 0;
	            }
	        }else if(anchorGrouping == 3){
	            currentSize += cLength;
	            if(val === '' || i === len - 1){
	                if(val === ''){
	                    currentSize -= cLength;
	                }
	                while(currentPos<=i){
	                    letters[currentPos].an = currentSize;
	                    letters[currentPos].ind = index;
	                    letters[currentPos].extra = cLength;
	                    currentPos += 1;
	                }
	                currentSize = 0;
	                index += 1;
	            }
	        }else {
	            letters[index].ind = index;
	            letters[index].extra = 0;
	            index += 1;
	        }
	    }
	    documentData.l = letters;
	    maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
	    lineWidths.push(lineWidth);
	    if(documentData.sz){
	        documentData.boxWidth = documentData.sz[0];
	        documentData.justifyOffset = 0;
	    }else {
	        documentData.boxWidth = maxLineWidth;
	        switch(documentData.j){
	            case 1:
	                documentData.justifyOffset = - documentData.boxWidth;
	                break;
	            case 2:
	                documentData.justifyOffset = - documentData.boxWidth/2;
	                break;
	            default:
	                documentData.justifyOffset = 0;
	        }
	    }
	    documentData.lineWidths = lineWidths;

	    var animators = data.a, animatorData, letterData;
	    jLen = animators.length;
	    var based, ind, indexes = [];
	    for(j=0;j<jLen;j+=1){
	        animatorData = animators[j];
	        if(animatorData.a.sc){
	            documentData.strokeColorAnim = true;
	        }
	        if(animatorData.a.sw){
	            documentData.strokeWidthAnim = true;
	        }
	        if(animatorData.a.fc || animatorData.a.fh || animatorData.a.fs || animatorData.a.fb){
	            documentData.fillColorAnim = true;
	        }
	        ind = 0;
	        based = animatorData.s.b;
	        for(i=0;i<len;i+=1){
	            letterData = letters[i];
	            letterData.anIndexes[j] = ind;
	            if((based == 1 && letterData.val !== '') || (based == 2 && letterData.val !== '' && letterData.val !== ' ') || (based == 3 && (letterData.n || letterData.val == ' ' || i == len - 1)) || (based == 4 && (letterData.n || i == len - 1))){
	                if(animatorData.s.rn === 1){
	                    indexes.push(ind);
	                }
	                ind += 1;
	            }
	        }
	        data.a[j].s.totalChars = ind;
	        var currentInd = -1, newInd;
	        if(animatorData.s.rn === 1){
	            for(i = 0; i < len; i += 1){
	                letterData = letters[i];
	                if(currentInd != letterData.anIndexes[j]){
	                    currentInd = letterData.anIndexes[j];
	                    newInd = indexes.splice(Math.floor(Math.random()*indexes.length),1)[0];
	                }
	                letterData.anIndexes[j] = newInd;
	            }
	        }
	    }
	    documentData.yOffset = documentData.finalLineHeight || documentData.finalSize*1.2;
	    documentData.ls = documentData.ls || 0;
	    documentData.ascent = fontData.ascent*documentData.finalSize/100;
	};

	TextProperty.prototype.updateDocumentData = function(newData, index) {
		index = index === undefined ? this.keysIndex : index;
	    var dData = this.copyData({}, this.data.d.k[index].s);
	    dData = this.copyData(dData, newData);
	    this.data.d.k[index].s = dData;
	    this.recalculate(index);
	    this.elem.addDynamicProperty(this);
	};

	TextProperty.prototype.recalculate = function(index) {
	    var dData = this.data.d.k[index].s;
	    dData.__complete = false;
	    this.keysIndex = 0;
	    this._isFirstFrame = true;
	    this.getValue(dData);
	};

	TextProperty.prototype.canResizeFont = function(_canResize) {
	    this.canResize = _canResize;
	    this.recalculate(this.keysIndex);
	    this.elem.addDynamicProperty(this);
	};

	TextProperty.prototype.setMinimumFontSize = function(_fontValue) {
	    this.minimumFontSize = Math.floor(_fontValue) || 1;
	    this.recalculate(this.keysIndex);
	    this.elem.addDynamicProperty(this);
	};

	var TextSelectorProp = (function(){
	    var max = Math.max;
	    var min = Math.min;
	    var floor = Math.floor;

	    function TextSelectorProp(elem,data){
	        this._currentTextLength = -1;
	        this.k = false;
	        this.data = data;
	        this.elem = elem;
	        this.comp = elem.comp;
	        this.finalS = 0;
	        this.finalE = 0;
	        this.initDynamicPropertyContainer(elem);
	        this.s = PropertyFactory.getProp(elem,data.s || {k:0},0,0,this);
	        if('e' in data){
	            this.e = PropertyFactory.getProp(elem,data.e,0,0,this);
	        }else {
	            this.e = {v:100};
	        }
	        this.o = PropertyFactory.getProp(elem,data.o || {k:0},0,0,this);
	        this.xe = PropertyFactory.getProp(elem,data.xe || {k:0},0,0,this);
	        this.ne = PropertyFactory.getProp(elem,data.ne || {k:0},0,0,this);
	        this.a = PropertyFactory.getProp(elem,data.a,0,0.01,this);
	        if(!this.dynamicProperties.length){
	            this.getValue();
	        }
	    }

	    TextSelectorProp.prototype = {
	        getMult: function(ind) {
	            if(this._currentTextLength !== this.elem.textProperty.currentData.l.length) {
	                this.getValue();
	            }
	            //var easer = bez.getEasingCurve(this.ne.v/100,0,1-this.xe.v/100,1);
	            var x1 = 0;
	            var y1 = 0;
	            var x2 = 1;
	            var y2 = 1;
	            if(this.ne.v > 0) {
	                x1 = this.ne.v / 100.0;
	            }
	            else {
	                y1 = -this.ne.v / 100.0;
	            }
	            if(this.xe.v > 0) {
	                x2 = 1.0 - this.xe.v / 100.0;
	            }
	            else {
	                y2 = 1.0 + this.xe.v / 100.0;
	            }
	            var easer = BezierFactory.getBezierEasing(x1, y1, x2, y2).get;

	            var mult = 0;
	            var s = this.finalS;
	            var e = this.finalE;
	            var type = this.data.sh;
	            if (type === 2){
	                if (e === s) {
	                    mult = ind >= e ? 1 : 0;
	                } else {
	                    mult = max(0, min(0.5 / (e - s) + (ind - s) / (e - s), 1));
	                }
	                mult = easer(mult);
	            } else if(type === 3) {
	                if (e === s) {
	                    mult = ind >= e ? 0 : 1;
	                }else {
	                    mult = 1 - max(0, min(0.5 / (e - s) + (ind - s) / (e - s),1));
	                }

	                mult = easer(mult);
	            } else if (type === 4) {
	                if (e === s) {
	                    mult = 0;
	                } else {
	                    mult = max(0, min(0.5 / (e - s) + (ind - s) / (e - s), 1));
	                    if (mult < 0.5) {
	                        mult *= 2;
	                    } else {
	                        mult = 1 - 2 * (mult - 0.5);
	                    }
	                }
	                mult = easer(mult);
	            } else if (type === 5) {
	                if (e === s){
	                    mult = 0;
	                } else {
	                    var tot = e - s;
	                    /*ind += 0.5;
	                    mult = -4/(tot*tot)*(ind*ind)+(4/tot)*ind;*/
	                    ind = min(max(0, ind + 0.5 - s), e - s);
	                    var x = -tot/2+ind;
	                    var a = tot/2;
	                    mult = Math.sqrt(1 - (x * x) / (a * a));
	                }
	                mult = easer(mult);
	            } else if (type === 6) {
	                if (e === s){
	                    mult = 0;
	                } else {
	                    ind = min(max(0, ind + 0.5 - s), e - s);
	                    mult = (1 + (Math.cos((Math.PI + Math.PI * 2 * (ind) / (e - s))))) / 2;
	                }
	                mult = easer(mult);
	            } else {
	                if (ind >= floor(s)) {
	                    if (ind - s < 0) {
	                        mult = max(0, min(min(e, 1) - (s - ind), 1));
	                    } else {
	                        mult = max(0, min(e - ind, 1));
	                    }
	                }
	                mult = easer(mult);
	            }
	            return mult*this.a.v;
	        },
	        getValue: function(newCharsFlag) {
	            this.iterateDynamicProperties();
	            this._mdf = newCharsFlag || this._mdf;
	            this._currentTextLength = this.elem.textProperty.currentData.l.length || 0;
	            if(newCharsFlag && this.data.r === 2) {
	                this.e.v = this._currentTextLength;
	            }
	            var divisor = this.data.r === 2 ? 1 : 100 / this.data.totalChars;
	            var o = this.o.v/divisor;
	            var s = this.s.v/divisor + o;
	            var e = (this.e.v/divisor) + o;
	            if(s>e){
	                var _s = s;
	                s = e;
	                e = _s;
	            }
	            this.finalS = s;
	            this.finalE = e;
	        }
	    };
	    extendPrototype([DynamicPropertyContainer], TextSelectorProp);

	    function getTextSelectorProp(elem, data,arr) {
	        return new TextSelectorProp(elem, data, arr);
	    }

	    return {
	        getTextSelectorProp: getTextSelectorProp
	    };
	}());

	    
	var pool_factory = (function() {
		return function(initialLength, _create, _release, _clone) {

			var _length = 0;
			var _maxLength = initialLength;
			var pool = createSizedArray(_maxLength);

			var ob = {
				newElement: newElement,
				release: release
			};

			function newElement(){
				var element;
				if(_length){
					_length -= 1;
					element = pool[_length];
				} else {
					element = _create();
				}
				return element;
			}

			function release(element) {
				if(_length === _maxLength) {
					pool = pooling.double(pool);
					_maxLength = _maxLength*2;
				}
				if (_release) {
					_release(element);
				}
				pool[_length] = element;
				_length += 1;
			}

			return ob;
		};
	}());

	var pooling = (function(){

		function double(arr){
			return arr.concat(createSizedArray(arr.length));
		}

		return {
			double: double
		};
	}());
	var point_pool = (function(){

		function create() {
			return createTypedArray('float32', 2);
		}
		return pool_factory(8, create);
	}());
	var shape_pool = (function(){

		function create() {
			return new ShapePath();
		}

		function release(shapePath) {
			var len = shapePath._length, i;
			for(i = 0; i < len; i += 1) {
				point_pool.release(shapePath.v[i]);
				point_pool.release(shapePath.i[i]);
				point_pool.release(shapePath.o[i]);
				shapePath.v[i] = null;
				shapePath.i[i] = null;
				shapePath.o[i] = null;
			}
			shapePath._length = 0;
			shapePath.c = false;
		}

		function clone(shape) {
			var cloned = factory.newElement();
			var i, len = shape._length === undefined ? shape.v.length : shape._length;
			cloned.setLength(len);
			cloned.c = shape.c;
			
			for(i = 0; i < len; i += 1) {
				cloned.setTripleAt(shape.v[i][0],shape.v[i][1],shape.o[i][0],shape.o[i][1],shape.i[i][0],shape.i[i][1], i);
			}
			return cloned;
		}

		var factory = pool_factory(4, create, release);
		factory.clone = clone;

		return factory;
	}());
	var shapeCollection_pool = (function(){
		var ob = {
			newShapeCollection: newShapeCollection,
			release: release
		};

		var _length = 0;
		var _maxLength = 4;
		var pool = createSizedArray(_maxLength);

		function newShapeCollection(){
			var shapeCollection;
			if(_length){
				_length -= 1;
				shapeCollection = pool[_length];
			} else {
				shapeCollection = new ShapeCollection();
			}
			return shapeCollection;
		}

		function release(shapeCollection) {
			var i, len = shapeCollection._length;
			for(i = 0; i < len; i += 1) {
				shape_pool.release(shapeCollection.shapes[i]);
			}
			shapeCollection._length = 0;

			if(_length === _maxLength) {
				pool = pooling.double(pool);
				_maxLength = _maxLength*2;
			}
			pool[_length] = shapeCollection;
			_length += 1;
		}

		return ob;
	}());
	var segments_length_pool = (function(){

		function create() {
			return {
				lengths: [],
				totalLength: 0
			};
		}

		function release(element) {
			var i, len = element.lengths.length;
			for(i=0;i<len;i+=1) {
				bezier_length_pool.release(element.lengths[i]);
			}
			element.lengths.length = 0;
		}

		return pool_factory(8, create, release);
	}());
	var bezier_length_pool = (function(){

		function create() {
			return {
	            addedLength: 0,
	            percents: createTypedArray('float32', defaultCurveSegments),
	            lengths: createTypedArray('float32', defaultCurveSegments),
	        };
		}
		return pool_factory(8, create);
	}());
	function BaseRenderer(){}
	BaseRenderer.prototype.checkLayers = function(num){
	    var i, len = this.layers.length, data;
	    this.completeLayers = true;
	    for (i = len - 1; i >= 0; i--) {
	        if (!this.elements[i]) {
	            data = this.layers[i];
	            if(data.ip - data.st <= (num - this.layers[i].st) && data.op - data.st > (num - this.layers[i].st))
	            {
	                this.buildItem(i);
	            }
	        }
	        this.completeLayers = this.elements[i] ? this.completeLayers:false;
	    }
	    this.checkPendingElements();
	};

	BaseRenderer.prototype.createItem = function(layer){
	    switch(layer.ty){
	        case 2:
	            return this.createImage(layer);
	        case 0:
	            return this.createComp(layer);
	        case 1:
	            return this.createSolid(layer);
	        case 3:
	            return this.createNull(layer);
	        case 4:
	            return this.createShape(layer);
	        case 5:
	            return this.createText(layer);
	        case 13:
	            return this.createCamera(layer);
	    }
	    return this.createNull(layer);
	};

	BaseRenderer.prototype.createCamera = function(){
	    throw new Error('You\'re using a 3d camera. Try the html renderer.');
	};

	BaseRenderer.prototype.buildAllItems = function(){
	    var i, len = this.layers.length;
	    for(i=0;i<len;i+=1){
	        this.buildItem(i);
	    }
	    this.checkPendingElements();
	};

	BaseRenderer.prototype.includeLayers = function(newLayers){
	    this.completeLayers = false;
	    var i, len = newLayers.length;
	    var j, jLen = this.layers.length;
	    for(i=0;i<len;i+=1){
	        j = 0;
	        while(j<jLen){
	            if(this.layers[j].id == newLayers[i].id){
	                this.layers[j] = newLayers[i];
	                break;
	            }
	            j += 1;
	        }
	    }
	};

	BaseRenderer.prototype.setProjectInterface = function(pInterface){
	    this.globalData.projectInterface = pInterface;
	};

	BaseRenderer.prototype.initItems = function(){
	    if(!this.globalData.progressiveLoad){
	        this.buildAllItems();
	    }
	};
	BaseRenderer.prototype.buildElementParenting = function(element, parentName, hierarchy) {
	    var elements = this.elements;
	    var layers = this.layers;
	    var i=0, len = layers.length;
	    while (i < len) {
	        if (layers[i].ind == parentName) {
	            if (!elements[i] || elements[i] === true) {
	                this.buildItem(i);
	                this.addPendingElement(element);
	            } else {
	                hierarchy.push(elements[i]);
	                elements[i].setAsParent();
	                if(layers[i].parent !== undefined) {
	                    this.buildElementParenting(element, layers[i].parent, hierarchy);
	                } else {
	                    element.setHierarchy(hierarchy);
	                }
	            }
	        }
	        i += 1;
	    }
	};

	BaseRenderer.prototype.addPendingElement = function(element){
	    this.pendingElements.push(element);
	};

	BaseRenderer.prototype.searchExtraCompositions = function(assets){
	    var i, len = assets.length;
	    for(i=0;i<len;i+=1){
	        if(assets[i].xt){
	            var comp = this.createComp(assets[i]);
	            comp.initExpressions();
	            this.globalData.projectInterface.registerComposition(comp);
	        }
	    }
	};

	BaseRenderer.prototype.setupGlobalData = function(animData, fontsContainer) {
	    this.globalData.fontManager = new FontManager();
	    this.globalData.fontManager.addChars(animData.chars);
	    this.globalData.fontManager.addFonts(animData.fonts, fontsContainer);
	    this.globalData.getAssetData = this.animationItem.getAssetData.bind(this.animationItem);
	    this.globalData.getAssetsPath = this.animationItem.getAssetsPath.bind(this.animationItem);
	    this.globalData.imageLoader = this.animationItem.imagePreloader;
	    this.globalData.frameId = 0;
	    this.globalData.frameRate = animData.fr;
	    this.globalData.nm = animData.nm;
	    this.globalData.compSize = {
	        w: animData.w,
	        h: animData.h
	    };
	};
	function SVGRenderer(animationItem, config){
	    this.animationItem = animationItem;
	    this.layers = null;
	    this.renderedFrame = -1;
	    this.svgElement = createNS('svg');
	    var ariaLabel = '';
	    if (config && config.title) {
	        var titleElement = createNS('title');
	        var titleId = createElementID();
	        titleElement.setAttribute('id', titleId);
	        titleElement.textContent = config.title;
	        this.svgElement.appendChild(titleElement);
	        ariaLabel += titleId;
	    }
	    if (config && config.description) {
	        var descElement = createNS('desc');
	        var descId = createElementID();
	        descElement.setAttribute('id', descId);
	        descElement.textContent = config.description;
	        this.svgElement.appendChild(descElement);
	        ariaLabel += ' ' + descId;
	    }
	    if (ariaLabel) {
	        this.svgElement.setAttribute('aria-labelledby', ariaLabel);
	    }
	    var defs = createNS( 'defs');
	    this.svgElement.appendChild(defs);
	    var maskElement = createNS('g');
	    this.svgElement.appendChild(maskElement);
	    this.layerElement = maskElement;
	    this.renderConfig = {
	        preserveAspectRatio: (config && config.preserveAspectRatio) || 'xMidYMid meet',
	        imagePreserveAspectRatio: (config && config.imagePreserveAspectRatio) || 'xMidYMid slice',
	        progressiveLoad: (config && config.progressiveLoad) || false,
	        hideOnTransparent: (config && config.hideOnTransparent === false) ? false : true,
	        viewBoxOnly: (config && config.viewBoxOnly) || false,
	        viewBoxSize: (config && config.viewBoxSize) || false,
	        className: (config && config.className) || '',
	        id: (config && config.id) || '',
	        focusable: config && config.focusable,
	        filterSize: {
	            width: config && config.filterSize && config.filterSize.width || '100%',
	            height: config && config.filterSize && config.filterSize.height || '100%',
	            x: config && config.filterSize && config.filterSize.x || '0%',
	            y: config && config.filterSize && config.filterSize.y || '0%',
	        }
	    };

	    this.globalData = {
	        _mdf: false,
	        frameNum: -1,
	        defs: defs,
	        renderConfig: this.renderConfig
	    };
	    this.elements = [];
	    this.pendingElements = [];
	    this.destroyed = false;
	    this.rendererType = 'svg';

	}

	extendPrototype([BaseRenderer],SVGRenderer);

	SVGRenderer.prototype.createNull = function (data) {
	    return new NullElement(data,this.globalData,this);
	};

	SVGRenderer.prototype.createShape = function (data) {
	    return new SVGShapeElement(data,this.globalData,this);
	};

	SVGRenderer.prototype.createText = function (data) {
	    return new SVGTextElement(data,this.globalData,this);

	};

	SVGRenderer.prototype.createImage = function (data) {
	    return new IImageElement(data,this.globalData,this);
	};

	SVGRenderer.prototype.createComp = function (data) {
	    return new SVGCompElement(data,this.globalData,this);

	};

	SVGRenderer.prototype.createSolid = function (data) {
	    return new ISolidElement(data,this.globalData,this);
	};

	SVGRenderer.prototype.configAnimation = function(animData){
	    this.svgElement.setAttribute('xmlns','http://www.w3.org/2000/svg');
	    if(this.renderConfig.viewBoxSize) {
	        this.svgElement.setAttribute('viewBox',this.renderConfig.viewBoxSize);
	    } else {
	        this.svgElement.setAttribute('viewBox','0 0 '+animData.w+' '+animData.h);
	    }

	    if(!this.renderConfig.viewBoxOnly) {
	        this.svgElement.setAttribute('width',animData.w);
	        this.svgElement.setAttribute('height',animData.h);
	        this.svgElement.style.width = '100%';
	        this.svgElement.style.height = '100%';
	        this.svgElement.style.transform = 'translate3d(0,0,0)';
	    }
	    if (this.renderConfig.className) {
	        this.svgElement.setAttribute('class', this.renderConfig.className);
	    }
	    if (this.renderConfig.id) {
	        this.svgElement.setAttribute('id', this.renderConfig.id);
	    }
	    if (this.renderConfig.focusable !== undefined) {
	        this.svgElement.setAttribute('focusable', this.renderConfig.focusable);
	    }
	    this.svgElement.setAttribute('preserveAspectRatio',this.renderConfig.preserveAspectRatio);
	    //this.layerElement.style.transform = 'translate3d(0,0,0)';
	    //this.layerElement.style.transformOrigin = this.layerElement.style.mozTransformOrigin = this.layerElement.style.webkitTransformOrigin = this.layerElement.style['-webkit-transform'] = "0px 0px 0px";
	    this.animationItem.wrapper.appendChild(this.svgElement);
	    //Mask animation
	    var defs = this.globalData.defs;

	    this.setupGlobalData(animData, defs);
	    this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;
	    this.data = animData;

	    var maskElement = createNS( 'clipPath');
	    var rect = createNS('rect');
	    rect.setAttribute('width',animData.w);
	    rect.setAttribute('height',animData.h);
	    rect.setAttribute('x',0);
	    rect.setAttribute('y',0);
	    var maskId = createElementID();
	    maskElement.setAttribute('id', maskId);
	    maskElement.appendChild(rect);
	    this.layerElement.setAttribute("clip-path", "url(" + locationHref + "#"+maskId+")");

	    defs.appendChild(maskElement);
	    this.layers = animData.layers;
	    this.elements = createSizedArray(animData.layers.length);
	};


	SVGRenderer.prototype.destroy = function () {
	    this.animationItem.wrapper.innerHTML = '';
	    this.layerElement = null;
	    this.globalData.defs = null;
	    var i, len = this.layers ? this.layers.length : 0;
	    for (i = 0; i < len; i++) {
	        if(this.elements[i]){
	            this.elements[i].destroy();
	        }
	    }
	    this.elements.length = 0;
	    this.destroyed = true;
	    this.animationItem = null;
	};

	SVGRenderer.prototype.updateContainerSize = function () {
	};

	SVGRenderer.prototype.buildItem  = function(pos){
	    var elements = this.elements;
	    if(elements[pos] || this.layers[pos].ty == 99){
	        return;
	    }
	    elements[pos] = true;
	    var element = this.createItem(this.layers[pos]);

	    elements[pos] = element;
	    if(expressionsPlugin){
	        if(this.layers[pos].ty === 0){
	            this.globalData.projectInterface.registerComposition(element);
	        }
	        element.initExpressions();
	    }
	    this.appendElementInPos(element,pos);
	    if(this.layers[pos].tt){
	        if(!this.elements[pos - 1] || this.elements[pos - 1] === true){
	            this.buildItem(pos - 1);
	            this.addPendingElement(element);
	        } else {
	            element.setMatte(elements[pos - 1].layerId);
	        }
	    }
	};

	SVGRenderer.prototype.checkPendingElements  = function(){
	    while(this.pendingElements.length){
	        var element = this.pendingElements.pop();
	        element.checkParenting();
	        if(element.data.tt){
	            var i = 0, len = this.elements.length;
	            while(i<len){
	                if(this.elements[i] === element){
	                    element.setMatte(this.elements[i - 1].layerId);
	                    break;
	                }
	                i += 1;
	            }
	        }
	    }
	};

	SVGRenderer.prototype.renderFrame = function(num){
	    if(this.renderedFrame === num || this.destroyed){
	        return;
	    }
	    if(num === null){
	        num = this.renderedFrame;
	    }else {
	        this.renderedFrame = num;
	    }
	    // console.log('-------');
	    // console.log('FRAME ',num);
	    this.globalData.frameNum = num;
	    this.globalData.frameId += 1;
	    this.globalData.projectInterface.currentFrame = num;
	    this.globalData._mdf = false;
	    var i, len = this.layers.length;
	    if(!this.completeLayers){
	        this.checkLayers(num);
	    }
	    for (i = len - 1; i >= 0; i--) {
	        if(this.completeLayers || this.elements[i]){
	            this.elements[i].prepareFrame(num - this.layers[i].st);
	        }
	    }
	    if(this.globalData._mdf) {
	        for (i = 0; i < len; i += 1) {
	            if(this.completeLayers || this.elements[i]){
	                this.elements[i].renderFrame();
	            }
	        }
	    }
	};

	SVGRenderer.prototype.appendElementInPos = function(element, pos){
	    var newElement = element.getBaseElement();
	    if(!newElement){
	        return;
	    }
	    var i = 0;
	    var nextElement;
	    while(i<pos){
	        if(this.elements[i] && this.elements[i]!== true && this.elements[i].getBaseElement()){
	            nextElement = this.elements[i].getBaseElement();
	        }
	        i += 1;
	    }
	    if(nextElement){
	        this.layerElement.insertBefore(newElement, nextElement);
	    } else {
	        this.layerElement.appendChild(newElement);
	    }
	};

	SVGRenderer.prototype.hide = function(){
	    this.layerElement.style.display = 'none';
	};

	SVGRenderer.prototype.show = function(){
	    this.layerElement.style.display = 'block';
	};

	function CanvasRenderer(animationItem, config){
	    this.animationItem = animationItem;
	    this.renderConfig = {
	        clearCanvas: (config && config.clearCanvas !== undefined) ? config.clearCanvas : true,
	        context: (config && config.context) || null,
	        progressiveLoad: (config && config.progressiveLoad) || false,
	        preserveAspectRatio: (config && config.preserveAspectRatio) || 'xMidYMid meet',
	        imagePreserveAspectRatio: (config && config.imagePreserveAspectRatio) || 'xMidYMid slice',
	        className: (config && config.className) || '',
	        id: (config && config.id) || '',
	    };
	    this.renderConfig.dpr = (config && config.dpr) || 1;
	    if (this.animationItem.wrapper) {
	        this.renderConfig.dpr = (config && config.dpr) || window.devicePixelRatio || 1;
	    }
	    this.renderedFrame = -1;
	    this.globalData = {
	        frameNum: -1,
	        _mdf: false,
	        renderConfig: this.renderConfig,
	        currentGlobalAlpha: -1
	    };
	    this.contextData = new CVContextData();
	    this.elements = [];
	    this.pendingElements = [];
	    this.transformMat = new Matrix();
	    this.completeLayers = false;
	    this.rendererType = 'canvas';
	}
	extendPrototype([BaseRenderer],CanvasRenderer);

	CanvasRenderer.prototype.createShape = function (data) {
	    return new CVShapeElement(data, this.globalData, this);
	};

	CanvasRenderer.prototype.createText = function (data) {
	    return new CVTextElement(data, this.globalData, this);
	};

	CanvasRenderer.prototype.createImage = function (data) {
	    return new CVImageElement(data, this.globalData, this);
	};

	CanvasRenderer.prototype.createComp = function (data) {
	    return new CVCompElement(data, this.globalData, this);
	};

	CanvasRenderer.prototype.createSolid = function (data) {
	    return new CVSolidElement(data, this.globalData, this);
	};

	CanvasRenderer.prototype.createNull = SVGRenderer.prototype.createNull;

	CanvasRenderer.prototype.ctxTransform = function(props){
	    if(props[0] === 1 && props[1] === 0 && props[4] === 0 && props[5] === 1 && props[12] === 0 && props[13] === 0){
	        return;
	    }
	    if(!this.renderConfig.clearCanvas){
	        this.canvasContext.transform(props[0],props[1],props[4],props[5],props[12],props[13]);
	        return;
	    }
	    this.transformMat.cloneFromProps(props);
	    var cProps = this.contextData.cTr.props;
	    this.transformMat.transform(cProps[0],cProps[1],cProps[2],cProps[3],cProps[4],cProps[5],cProps[6],cProps[7],cProps[8],cProps[9],cProps[10],cProps[11],cProps[12],cProps[13],cProps[14],cProps[15]);
	    //this.contextData.cTr.transform(props[0],props[1],props[2],props[3],props[4],props[5],props[6],props[7],props[8],props[9],props[10],props[11],props[12],props[13],props[14],props[15]);
	    this.contextData.cTr.cloneFromProps(this.transformMat.props);
	    var trProps = this.contextData.cTr.props;
	    this.canvasContext.setTransform(trProps[0],trProps[1],trProps[4],trProps[5],trProps[12],trProps[13]);
	};

	CanvasRenderer.prototype.ctxOpacity = function(op){
	    /*if(op === 1){
	        return;
	    }*/
	    if(!this.renderConfig.clearCanvas){
	        this.canvasContext.globalAlpha *= op < 0 ? 0 : op;
	        this.globalData.currentGlobalAlpha = this.contextData.cO;
	        return;
	    }
	    this.contextData.cO *= op < 0 ? 0 : op;
	    if(this.globalData.currentGlobalAlpha !== this.contextData.cO) {
	        this.canvasContext.globalAlpha = this.contextData.cO;
	        this.globalData.currentGlobalAlpha = this.contextData.cO;
	    }
	};

	CanvasRenderer.prototype.reset = function(){
	    if(!this.renderConfig.clearCanvas){
	        this.canvasContext.restore();
	        return;
	    }
	    this.contextData.reset();
	};

	CanvasRenderer.prototype.save = function(actionFlag){
	    if(!this.renderConfig.clearCanvas){
	        this.canvasContext.save();
	        return;
	    }
	    if(actionFlag){
	        this.canvasContext.save();
	    }
	    var props = this.contextData.cTr.props;
	    if(this.contextData._length <= this.contextData.cArrPos) {
	        this.contextData.duplicate();
	    }
	    var i, arr = this.contextData.saved[this.contextData.cArrPos];
	    for (i = 0; i < 16; i += 1) {
	        arr[i] = props[i];
	    }
	    this.contextData.savedOp[this.contextData.cArrPos] = this.contextData.cO;
	    this.contextData.cArrPos += 1;
	};

	CanvasRenderer.prototype.restore = function(actionFlag){
	    if(!this.renderConfig.clearCanvas){
	        this.canvasContext.restore();
	        return;
	    }
	    if(actionFlag){
	        this.canvasContext.restore();
	        this.globalData.blendMode = 'source-over';
	    }
	    this.contextData.cArrPos -= 1;
	    var popped = this.contextData.saved[this.contextData.cArrPos];
	    var i,arr = this.contextData.cTr.props;
	    for(i=0;i<16;i+=1){
	        arr[i] = popped[i];
	    }
	    this.canvasContext.setTransform(popped[0],popped[1],popped[4],popped[5],popped[12],popped[13]);
	    popped = this.contextData.savedOp[this.contextData.cArrPos];
	    this.contextData.cO = popped;
	    if(this.globalData.currentGlobalAlpha !== popped) {
	        this.canvasContext.globalAlpha = popped;
	        this.globalData.currentGlobalAlpha = popped;
	    }
	};

	CanvasRenderer.prototype.configAnimation = function(animData){
	    if(this.animationItem.wrapper){
	        this.animationItem.container = createTag('canvas');
	        this.animationItem.container.style.width = '100%';
	        this.animationItem.container.style.height = '100%';
	        //this.animationItem.container.style.transform = 'translate3d(0,0,0)';
	        //this.animationItem.container.style.webkitTransform = 'translate3d(0,0,0)';
	        this.animationItem.container.style.transformOrigin = this.animationItem.container.style.mozTransformOrigin = this.animationItem.container.style.webkitTransformOrigin = this.animationItem.container.style['-webkit-transform'] = "0px 0px 0px";
	        this.animationItem.wrapper.appendChild(this.animationItem.container);
	        this.canvasContext = this.animationItem.container.getContext('2d');
	        if(this.renderConfig.className) {
	            this.animationItem.container.setAttribute('class', this.renderConfig.className);
	        }
	        if(this.renderConfig.id) {
	            this.animationItem.container.setAttribute('id', this.renderConfig.id);
	        }
	    }else {
	        this.canvasContext = this.renderConfig.context;
	    }
	    this.data = animData;
	    this.layers = animData.layers;
	    this.transformCanvas = {
	        w: animData.w,
	        h:animData.h,
	        sx:0,
	        sy:0,
	        tx:0,
	        ty:0
	    };
	    this.setupGlobalData(animData, document.body);
	    this.globalData.canvasContext = this.canvasContext;
	    this.globalData.renderer = this;
	    this.globalData.isDashed = false;
	    this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;
	    this.globalData.transformCanvas = this.transformCanvas;
	    this.elements = createSizedArray(animData.layers.length);

	    this.updateContainerSize();
	};

	CanvasRenderer.prototype.updateContainerSize = function () {
	    this.reset();
	    var elementWidth,elementHeight;
	    if(this.animationItem.wrapper && this.animationItem.container){
	        elementWidth = this.animationItem.wrapper.offsetWidth;
	        elementHeight = this.animationItem.wrapper.offsetHeight;
	        this.animationItem.container.setAttribute('width',elementWidth * this.renderConfig.dpr );
	        this.animationItem.container.setAttribute('height',elementHeight * this.renderConfig.dpr);
	    }else {
	        elementWidth = this.canvasContext.canvas.width * this.renderConfig.dpr;
	        elementHeight = this.canvasContext.canvas.height * this.renderConfig.dpr;
	    }
	    var elementRel,animationRel;
	    if(this.renderConfig.preserveAspectRatio.indexOf('meet') !== -1 || this.renderConfig.preserveAspectRatio.indexOf('slice') !== -1){
	        var par = this.renderConfig.preserveAspectRatio.split(' ');
	        var fillType = par[1] || 'meet';
	        var pos = par[0] || 'xMidYMid';
	        var xPos = pos.substr(0,4);
	        var yPos = pos.substr(4);
	        elementRel = elementWidth/elementHeight;
	        animationRel = this.transformCanvas.w/this.transformCanvas.h;
	        if(animationRel>elementRel && fillType === 'meet' || animationRel<elementRel && fillType === 'slice'){
	            this.transformCanvas.sx = elementWidth/(this.transformCanvas.w/this.renderConfig.dpr);
	            this.transformCanvas.sy = elementWidth/(this.transformCanvas.w/this.renderConfig.dpr);
	        }else {
	            this.transformCanvas.sx = elementHeight/(this.transformCanvas.h / this.renderConfig.dpr);
	            this.transformCanvas.sy = elementHeight/(this.transformCanvas.h / this.renderConfig.dpr);
	        }

	        if(xPos === 'xMid' && ((animationRel<elementRel && fillType==='meet') || (animationRel>elementRel && fillType === 'slice'))){
	            this.transformCanvas.tx = (elementWidth-this.transformCanvas.w*(elementHeight/this.transformCanvas.h))/2*this.renderConfig.dpr;
	        } else if(xPos === 'xMax' && ((animationRel<elementRel && fillType==='meet') || (animationRel>elementRel && fillType === 'slice'))){
	            this.transformCanvas.tx = (elementWidth-this.transformCanvas.w*(elementHeight/this.transformCanvas.h))*this.renderConfig.dpr;
	        } else {
	            this.transformCanvas.tx = 0;
	        }
	        if(yPos === 'YMid' && ((animationRel>elementRel && fillType==='meet') || (animationRel<elementRel && fillType === 'slice'))){
	            this.transformCanvas.ty = ((elementHeight-this.transformCanvas.h*(elementWidth/this.transformCanvas.w))/2)*this.renderConfig.dpr;
	        } else if(yPos === 'YMax' && ((animationRel>elementRel && fillType==='meet') || (animationRel<elementRel && fillType === 'slice'))){
	            this.transformCanvas.ty = ((elementHeight-this.transformCanvas.h*(elementWidth/this.transformCanvas.w)))*this.renderConfig.dpr;
	        } else {
	            this.transformCanvas.ty = 0;
	        }

	    }else if(this.renderConfig.preserveAspectRatio == 'none'){
	        this.transformCanvas.sx = elementWidth/(this.transformCanvas.w/this.renderConfig.dpr);
	        this.transformCanvas.sy = elementHeight/(this.transformCanvas.h/this.renderConfig.dpr);
	        this.transformCanvas.tx = 0;
	        this.transformCanvas.ty = 0;
	    }else {
	        this.transformCanvas.sx = this.renderConfig.dpr;
	        this.transformCanvas.sy = this.renderConfig.dpr;
	        this.transformCanvas.tx = 0;
	        this.transformCanvas.ty = 0;
	    }
	    this.transformCanvas.props = [this.transformCanvas.sx,0,0,0,0,this.transformCanvas.sy,0,0,0,0,1,0,this.transformCanvas.tx,this.transformCanvas.ty,0,1];
	    /*var i, len = this.elements.length;
	    for(i=0;i<len;i+=1){
	        if(this.elements[i] && this.elements[i].data.ty === 0){
	            this.elements[i].resize(this.globalData.transformCanvas);
	        }
	    }*/
	    this.ctxTransform(this.transformCanvas.props);
	    this.canvasContext.beginPath();
	    this.canvasContext.rect(0,0,this.transformCanvas.w,this.transformCanvas.h);
	    this.canvasContext.closePath();
	    this.canvasContext.clip();

	    this.renderFrame(this.renderedFrame, true);
	};

	CanvasRenderer.prototype.destroy = function () {
	    if(this.renderConfig.clearCanvas) {
	        this.animationItem.wrapper.innerHTML = '';
	    }
	    var i, len = this.layers ? this.layers.length : 0;
	    for (i = len - 1; i >= 0; i-=1) {
	        if(this.elements[i]) {
	            this.elements[i].destroy();
	        }
	    }
	    this.elements.length = 0;
	    this.globalData.canvasContext = null;
	    this.animationItem.container = null;
	    this.destroyed = true;
	};

	CanvasRenderer.prototype.renderFrame = function(num, forceRender){
	    if((this.renderedFrame === num && this.renderConfig.clearCanvas === true && !forceRender) || this.destroyed || num === -1){
	        return;
	    }
	    this.renderedFrame = num;
	    this.globalData.frameNum = num - this.animationItem._isFirstFrame;
	    this.globalData.frameId += 1;
	    this.globalData._mdf = !this.renderConfig.clearCanvas || forceRender;
	    this.globalData.projectInterface.currentFrame = num;

	     // console.log('--------');
	     // console.log('NEW: ',num);
	    var i, len = this.layers.length;
	    if(!this.completeLayers){
	        this.checkLayers(num);
	    }

	    for (i = 0; i < len; i++) {
	        if(this.completeLayers || this.elements[i]){
	            this.elements[i].prepareFrame(num - this.layers[i].st);
	        }
	    }
	    if(this.globalData._mdf) {
	        if(this.renderConfig.clearCanvas === true){
	            this.canvasContext.clearRect(0, 0, this.transformCanvas.w, this.transformCanvas.h);
	        }else {
	            this.save();
	        }
	        for (i = len - 1; i >= 0; i-=1) {
	            if(this.completeLayers || this.elements[i]){
	                this.elements[i].renderFrame();
	            }
	        }
	        if(this.renderConfig.clearCanvas !== true){
	            this.restore();
	        }
	    }
	};

	CanvasRenderer.prototype.buildItem = function(pos){
	    var elements = this.elements;
	    if(elements[pos] || this.layers[pos].ty == 99){
	        return;
	    }
	    var element = this.createItem(this.layers[pos], this,this.globalData);
	    elements[pos] = element;
	    element.initExpressions();
	    /*if(this.layers[pos].ty === 0){
	        element.resize(this.globalData.transformCanvas);
	    }*/
	};

	CanvasRenderer.prototype.checkPendingElements  = function(){
	    while(this.pendingElements.length){
	        var element = this.pendingElements.pop();
	        element.checkParenting();
	    }
	};

	CanvasRenderer.prototype.hide = function(){
	    this.animationItem.container.style.display = 'none';
	};

	CanvasRenderer.prototype.show = function(){
	    this.animationItem.container.style.display = 'block';
	};

	function HybridRenderer(animationItem, config){
	    this.animationItem = animationItem;
	    this.layers = null;
	    this.renderedFrame = -1;
	    this.renderConfig = {
	        className: (config && config.className) || '',
	        imagePreserveAspectRatio: (config && config.imagePreserveAspectRatio) || 'xMidYMid slice',
	        hideOnTransparent: (config && config.hideOnTransparent === false) ? false : true,
	        filterSize: {
	            width: config && config.filterSize && config.filterSize.width || '400%',
	            height: config && config.filterSize && config.filterSize.height || '400%',
	            x: config && config.filterSize && config.filterSize.x || '-100%',
	            y: config && config.filterSize && config.filterSize.y || '-100%',
	        }
	    };
	    this.globalData = {
	        _mdf: false,
	        frameNum: -1,
	        renderConfig: this.renderConfig
	    };
	    this.pendingElements = [];
	    this.elements = [];
	    this.threeDElements = [];
	    this.destroyed = false;
	    this.camera = null;
	    this.supports3d = true;
	    this.rendererType = 'html';

	}

	extendPrototype([BaseRenderer],HybridRenderer);

	HybridRenderer.prototype.buildItem = SVGRenderer.prototype.buildItem;

	HybridRenderer.prototype.checkPendingElements  = function(){
	    while(this.pendingElements.length){
	        var element = this.pendingElements.pop();
	        element.checkParenting();
	    }
	};

	HybridRenderer.prototype.appendElementInPos = function(element, pos){
	    var newDOMElement = element.getBaseElement();
	    if(!newDOMElement){
	        return;
	    }
	    var layer = this.layers[pos];
	    if(!layer.ddd || !this.supports3d){
	        if(this.threeDElements) {
	            this.addTo3dContainer(newDOMElement,pos);
	        } else {
	            var i = 0;
	            var nextDOMElement, nextLayer, tmpDOMElement;
	            while(i<pos){
	                if(this.elements[i] && this.elements[i]!== true && this.elements[i].getBaseElement){
	                    nextLayer = this.elements[i];
	                    tmpDOMElement = this.layers[i].ddd ? this.getThreeDContainerByPos(i) : nextLayer.getBaseElement();
	                    nextDOMElement = tmpDOMElement || nextDOMElement;
	                }
	                i += 1;
	            }
	            if(nextDOMElement){
	                if(!layer.ddd || !this.supports3d){
	                    this.layerElement.insertBefore(newDOMElement, nextDOMElement);
	                }
	            } else {
	                if(!layer.ddd || !this.supports3d){
	                    this.layerElement.appendChild(newDOMElement);
	                }
	            }
	        }
	        
	    } else {
	        this.addTo3dContainer(newDOMElement,pos);
	    }
	};

	HybridRenderer.prototype.createShape = function (data) {
	    if(!this.supports3d){
	        return new SVGShapeElement(data, this.globalData, this);
	    }
	    return new HShapeElement(data, this.globalData, this);
	};

	HybridRenderer.prototype.createText = function (data) {
	    if(!this.supports3d){
	        return new SVGTextElement(data, this.globalData, this);
	    }
	    return new HTextElement(data, this.globalData, this);
	};

	HybridRenderer.prototype.createCamera = function (data) {
	    this.camera = new HCameraElement(data, this.globalData, this);
	    return this.camera;
	};

	HybridRenderer.prototype.createImage = function (data) {
	    if(!this.supports3d){
	        return new IImageElement(data, this.globalData, this);
	    }
	    return new HImageElement(data, this.globalData, this);
	};

	HybridRenderer.prototype.createComp = function (data) {
	    if(!this.supports3d){
	        return new SVGCompElement(data, this.globalData, this);
	    }
	    return new HCompElement(data, this.globalData, this);

	};

	HybridRenderer.prototype.createSolid = function (data) {
	    if(!this.supports3d){
	        return new ISolidElement(data, this.globalData, this);
	    }
	    return new HSolidElement(data, this.globalData, this);
	};

	HybridRenderer.prototype.createNull = SVGRenderer.prototype.createNull;

	HybridRenderer.prototype.getThreeDContainerByPos = function(pos){
	    var i = 0, len = this.threeDElements.length;
	    while(i<len) {
	        if(this.threeDElements[i].startPos <= pos && this.threeDElements[i].endPos >= pos) {
	            return this.threeDElements[i].perspectiveElem;
	        }
	        i += 1;
	    }
	};

	HybridRenderer.prototype.createThreeDContainer = function(pos, type){
	    var perspectiveElem = createTag('div');
	    styleDiv(perspectiveElem);
	    var container = createTag('div');
	    styleDiv(container);
	    if(type === '3d') {
	        perspectiveElem.style.width = this.globalData.compSize.w+'px';
	        perspectiveElem.style.height = this.globalData.compSize.h+'px';
	        perspectiveElem.style.transformOrigin = perspectiveElem.style.mozTransformOrigin = perspectiveElem.style.webkitTransformOrigin = "50% 50%";
	        container.style.transform = container.style.webkitTransform = 'matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)';
	    }
	    
	    perspectiveElem.appendChild(container);
	    //this.resizerElem.appendChild(perspectiveElem);
	    var threeDContainerData = {
	        container:container,
	        perspectiveElem:perspectiveElem,
	        startPos: pos,
	        endPos: pos,
	        type: type
	    };
	    this.threeDElements.push(threeDContainerData);
	    return threeDContainerData;
	};

	HybridRenderer.prototype.build3dContainers = function(){
	    var i, len = this.layers.length;
	    var lastThreeDContainerData;
	    var currentContainer = '';
	    for(i=0;i<len;i+=1){
	        if(this.layers[i].ddd && this.layers[i].ty !== 3){
	            if(currentContainer !== '3d'){
	                currentContainer = '3d';
	                lastThreeDContainerData = this.createThreeDContainer(i,'3d');
	            }
	            lastThreeDContainerData.endPos = Math.max(lastThreeDContainerData.endPos,i);
	        } else {
	            if(currentContainer !== '2d'){
	                currentContainer = '2d';
	                lastThreeDContainerData = this.createThreeDContainer(i,'2d');
	            }
	            lastThreeDContainerData.endPos = Math.max(lastThreeDContainerData.endPos,i);
	        }
	    }
	    len = this.threeDElements.length;
	    for(i = len - 1; i >= 0; i --) {
	        this.resizerElem.appendChild(this.threeDElements[i].perspectiveElem);
	    }
	};

	HybridRenderer.prototype.addTo3dContainer = function(elem,pos){
	    var i = 0, len = this.threeDElements.length;
	    while(i<len){
	        if(pos <= this.threeDElements[i].endPos){
	            var j = this.threeDElements[i].startPos;
	            var nextElement;
	            while(j<pos){
	                if(this.elements[j] && this.elements[j].getBaseElement){
	                    nextElement = this.elements[j].getBaseElement();
	                }
	                j += 1;
	            }
	            if(nextElement){
	                this.threeDElements[i].container.insertBefore(elem, nextElement);
	            } else {
	                this.threeDElements[i].container.appendChild(elem);
	            }
	            break;
	        }
	        i += 1;
	    }
	};

	HybridRenderer.prototype.configAnimation = function(animData){
	    var resizerElem = createTag('div');
	    var wrapper = this.animationItem.wrapper;
	    resizerElem.style.width = animData.w+'px';
	    resizerElem.style.height = animData.h+'px';
	    this.resizerElem = resizerElem;
	    styleDiv(resizerElem);
	    resizerElem.style.transformStyle = resizerElem.style.webkitTransformStyle = resizerElem.style.mozTransformStyle = "flat";
	    if(this.renderConfig.className) {
	      resizerElem.setAttribute('class', this.renderConfig.className);
	    }
	    wrapper.appendChild(resizerElem);

	    resizerElem.style.overflow = 'hidden';
	    var svg = createNS('svg');
	    svg.setAttribute('width','1');
	    svg.setAttribute('height','1');
	    styleDiv(svg);
	    this.resizerElem.appendChild(svg);
	    var defs = createNS('defs');
	    svg.appendChild(defs);
	    this.data = animData;
	    //Mask animation
	    this.setupGlobalData(animData, svg);
	    this.globalData.defs = defs;
	    this.layers = animData.layers;
	    this.layerElement = this.resizerElem;
	    this.build3dContainers();
	    this.updateContainerSize();
	};

	HybridRenderer.prototype.destroy = function () {
	    this.animationItem.wrapper.innerHTML = '';
	    this.animationItem.container = null;
	    this.globalData.defs = null;
	    var i, len = this.layers ? this.layers.length : 0;
	    for (i = 0; i < len; i++) {
	        this.elements[i].destroy();
	    }
	    this.elements.length = 0;
	    this.destroyed = true;
	    this.animationItem = null;
	};

	HybridRenderer.prototype.updateContainerSize = function () {
	    var elementWidth = this.animationItem.wrapper.offsetWidth;
	    var elementHeight = this.animationItem.wrapper.offsetHeight;
	    var elementRel = elementWidth/elementHeight;
	    var animationRel = this.globalData.compSize.w/this.globalData.compSize.h;
	    var sx,sy,tx,ty;
	    if(animationRel>elementRel){
	        sx = elementWidth/(this.globalData.compSize.w);
	        sy = elementWidth/(this.globalData.compSize.w);
	        tx = 0;
	        ty = ((elementHeight-this.globalData.compSize.h*(elementWidth/this.globalData.compSize.w))/2);
	    }else {
	        sx = elementHeight/(this.globalData.compSize.h);
	        sy = elementHeight/(this.globalData.compSize.h);
	        tx = (elementWidth-this.globalData.compSize.w*(elementHeight/this.globalData.compSize.h))/2;
	        ty = 0;
	    }
	    this.resizerElem.style.transform = this.resizerElem.style.webkitTransform = 'matrix3d(' + sx + ',0,0,0,0,'+sy+',0,0,0,0,1,0,'+tx+','+ty+',0,1)';
	};

	HybridRenderer.prototype.renderFrame = SVGRenderer.prototype.renderFrame;

	HybridRenderer.prototype.hide = function(){
	    this.resizerElem.style.display = 'none';
	};

	HybridRenderer.prototype.show = function(){
	    this.resizerElem.style.display = 'block';
	};

	HybridRenderer.prototype.initItems = function(){
	    this.buildAllItems();
	    if(this.camera){
	        this.camera.setup();
	    } else {
	        var cWidth = this.globalData.compSize.w;
	        var cHeight = this.globalData.compSize.h;
	        var i, len = this.threeDElements.length;
	        for(i=0;i<len;i+=1){
	            this.threeDElements[i].perspectiveElem.style.perspective = this.threeDElements[i].perspectiveElem.style.webkitPerspective = Math.sqrt(Math.pow(cWidth,2) + Math.pow(cHeight,2)) + 'px';
	        }
	    }
	};

	HybridRenderer.prototype.searchExtraCompositions = function(assets){
	    var i, len = assets.length;
	    var floatingContainer = createTag('div');
	    for(i=0;i<len;i+=1){
	        if(assets[i].xt){
	            var comp = this.createComp(assets[i],floatingContainer,this.globalData.comp,null);
	            comp.initExpressions();
	            this.globalData.projectInterface.registerComposition(comp);
	        }
	    }
	};

	function MaskElement(data,element,globalData) {
	    this.data = data;
	    this.element = element;
	    this.globalData = globalData;
	    this.storedData = [];
	    this.masksProperties = this.data.masksProperties || [];
	    this.maskElement = null;
	    var defs = this.globalData.defs;
	    var i, len = this.masksProperties ? this.masksProperties.length : 0;
	    this.viewData = createSizedArray(len);
	    this.solidPath = '';


	    var path, properties = this.masksProperties;
	    var count = 0;
	    var currentMasks = [];
	    var j, jLen;
	    var layerId = createElementID();
	    var rect, expansor, feMorph,x;
	    var maskType = 'clipPath', maskRef = 'clip-path';
	    for (i = 0; i < len; i++) {
	        if((properties[i].mode !== 'a' && properties[i].mode !== 'n')|| properties[i].inv || properties[i].o.k !== 100 || properties[i].o.x){
	            maskType = 'mask';
	            maskRef = 'mask';
	        }

	        if((properties[i].mode == 's' || properties[i].mode == 'i') && count === 0){
	            rect = createNS( 'rect');
	            rect.setAttribute('fill', '#ffffff');
	            rect.setAttribute('width', this.element.comp.data.w || 0);
	            rect.setAttribute('height', this.element.comp.data.h || 0);
	            currentMasks.push(rect);
	        } else {
	            rect = null;
	        }

	        path = createNS( 'path');
	        if(properties[i].mode == 'n') {
	            // TODO move this to a factory or to a constructor
	            this.viewData[i] = {
	                op: PropertyFactory.getProp(this.element,properties[i].o,0,0.01,this.element),
	                prop: ShapePropertyFactory.getShapeProp(this.element,properties[i],3),
	                elem: path,
	                lastPath: ''
	            };
	            defs.appendChild(path);
	            continue;
	        }
	        count += 1;

	        path.setAttribute('fill', properties[i].mode === 's' ? '#000000':'#ffffff');
	        path.setAttribute('clip-rule','nonzero');
	        var filterID;

	        if (properties[i].x.k !== 0) {
	            maskType = 'mask';
	            maskRef = 'mask';
	            x = PropertyFactory.getProp(this.element,properties[i].x,0,null,this.element);
	            filterID = createElementID();
	            expansor = createNS('filter');
	            expansor.setAttribute('id',filterID);
	            feMorph = createNS('feMorphology');
	            feMorph.setAttribute('operator','erode');
	            feMorph.setAttribute('in','SourceGraphic');
	            feMorph.setAttribute('radius','0');
	            expansor.appendChild(feMorph);
	            defs.appendChild(expansor);
	            path.setAttribute('stroke', properties[i].mode === 's' ? '#000000':'#ffffff');
	        } else {
	            feMorph = null;
	            x = null;
	        }

	        // TODO move this to a factory or to a constructor
	        this.storedData[i] = {
	             elem: path,
	             x: x,
	             expan: feMorph,
	            lastPath: '',
	            lastOperator:'',
	            filterId:filterID,
	            lastRadius:0
	        };
	        if(properties[i].mode == 'i'){
	            jLen = currentMasks.length;
	            var g = createNS('g');
	            for(j=0;j<jLen;j+=1){
	                g.appendChild(currentMasks[j]);
	            }
	            var mask = createNS('mask');
	            mask.setAttribute('mask-type','alpha');
	            mask.setAttribute('id',layerId+'_'+count);
	            mask.appendChild(path);
	            defs.appendChild(mask);
	            g.setAttribute('mask','url(' + locationHref + '#'+layerId+'_'+count+')');

	            currentMasks.length = 0;
	            currentMasks.push(g);
	        }else {
	            currentMasks.push(path);
	        }
	        if(properties[i].inv && !this.solidPath){
	            this.solidPath = this.createLayerSolidPath();
	        }
	        // TODO move this to a factory or to a constructor
	        this.viewData[i] = {
	            elem: path,
	            lastPath: '',
	            op: PropertyFactory.getProp(this.element,properties[i].o,0,0.01,this.element),
	            prop:ShapePropertyFactory.getShapeProp(this.element,properties[i],3),
	            invRect: rect
	        };
	        if(!this.viewData[i].prop.k){
	            this.drawPath(properties[i],this.viewData[i].prop.v,this.viewData[i]);
	        }
	    }

	    this.maskElement = createNS( maskType);

	    len = currentMasks.length;
	    for(i=0;i<len;i+=1){
	        this.maskElement.appendChild(currentMasks[i]);
	    }

	    if(count > 0){
	        this.maskElement.setAttribute('id', layerId);
	        this.element.maskedElement.setAttribute(maskRef, "url(" + locationHref + "#" + layerId + ")");
	        defs.appendChild(this.maskElement);
	    }
	    if (this.viewData.length) {
	        this.element.addRenderableComponent(this);
	    }

	}

	MaskElement.prototype.getMaskProperty = function(pos){
	    return this.viewData[pos].prop;
	};

	MaskElement.prototype.renderFrame = function (isFirstFrame) {
	    var finalMat = this.element.finalTransform.mat;
	    var i, len = this.masksProperties.length;
	    for (i = 0; i < len; i++) {
	        if(this.viewData[i].prop._mdf || isFirstFrame){
	            this.drawPath(this.masksProperties[i],this.viewData[i].prop.v,this.viewData[i]);
	        }
	        if(this.viewData[i].op._mdf || isFirstFrame){
	            this.viewData[i].elem.setAttribute('fill-opacity',this.viewData[i].op.v);
	        }
	        if(this.masksProperties[i].mode !== 'n'){
	            if(this.viewData[i].invRect && (this.element.finalTransform.mProp._mdf || isFirstFrame)){
	                this.viewData[i].invRect.setAttribute('transform', finalMat.getInverseMatrix().to2dCSS());
	            }
	            if(this.storedData[i].x && (this.storedData[i].x._mdf || isFirstFrame)){
	                var feMorph = this.storedData[i].expan;
	                if(this.storedData[i].x.v < 0){
	                    if(this.storedData[i].lastOperator !== 'erode'){
	                        this.storedData[i].lastOperator = 'erode';
	                        this.storedData[i].elem.setAttribute('filter','url(' + locationHref + '#'+this.storedData[i].filterId+')');
	                    }
	                    feMorph.setAttribute('radius',-this.storedData[i].x.v);
	                }else {
	                    if(this.storedData[i].lastOperator !== 'dilate'){
	                        this.storedData[i].lastOperator = 'dilate';
	                        this.storedData[i].elem.setAttribute('filter',null);
	                    }
	                    this.storedData[i].elem.setAttribute('stroke-width', this.storedData[i].x.v*2);

	                }
	            }
	        }
	    }
	};

	MaskElement.prototype.getMaskelement = function () {
	    return this.maskElement;
	};

	MaskElement.prototype.createLayerSolidPath = function(){
	    var path = 'M0,0 ';
	    path += ' h' + this.globalData.compSize.w ;
	    path += ' v' + this.globalData.compSize.h ;
	    path += ' h-' + this.globalData.compSize.w ;
	    path += ' v-' + this.globalData.compSize.h + ' ';
	    return path;
	};

	MaskElement.prototype.drawPath = function(pathData,pathNodes,viewData){
	    var pathString = " M"+pathNodes.v[0][0]+','+pathNodes.v[0][1];
	    var i, len;
	    len = pathNodes._length;
	    for(i=1;i<len;i+=1){
	        //pathString += " C"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + " "+pathNodes.i[i][0]+','+pathNodes.i[i][1] + " "+pathNodes.v[i][0]+','+pathNodes.v[i][1];
	        pathString += " C"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + " "+pathNodes.i[i][0]+','+pathNodes.i[i][1] + " "+pathNodes.v[i][0]+','+pathNodes.v[i][1];
	    }
	        //pathString += " C"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + " "+pathNodes.i[0][0]+','+pathNodes.i[0][1] + " "+pathNodes.v[0][0]+','+pathNodes.v[0][1];
	    if(pathNodes.c && len > 1){
	        pathString += " C"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + " "+pathNodes.i[0][0]+','+pathNodes.i[0][1] + " "+pathNodes.v[0][0]+','+pathNodes.v[0][1];
	    }
	    //pathNodes.__renderedString = pathString;

	    if(viewData.lastPath !== pathString){
	        var pathShapeValue = '';
	        if(viewData.elem){
	            if(pathNodes.c){
	                pathShapeValue = pathData.inv ? this.solidPath + pathString : pathString;
	            }
	            viewData.elem.setAttribute('d',pathShapeValue);
	        }
	        viewData.lastPath = pathString;
	    }
	};

	MaskElement.prototype.destroy = function(){
	    this.element = null;
	    this.globalData = null;
	    this.maskElement = null;
	    this.data = null;
	    this.masksProperties = null;
	};

	/**
	 * @file 
	 * Handles AE's layer parenting property.
	 *
	 */

	function HierarchyElement(){}

	HierarchyElement.prototype = {
		/**
	     * @function 
	     * Initializes hierarchy properties
	     *
	     */
		initHierarchy: function() {
			//element's parent list
		    this.hierarchy = [];
		    //if element is parent of another layer _isParent will be true
		    this._isParent = false;
		    this.checkParenting();
		},
		/**
	     * @function 
	     * Sets layer's hierarchy.
	     * @param {array} hierarch
	     * layer's parent list
	     *
	     */ 
		setHierarchy: function(hierarchy){
		    this.hierarchy = hierarchy;
		},
		/**
	     * @function 
	     * Sets layer as parent.
	     *
	     */ 
		setAsParent: function() {
		    this._isParent = true;
		},
		/**
	     * @function 
	     * Searches layer's parenting chain
	     *
	     */ 
		checkParenting: function(){
		    if (this.data.parent !== undefined){
		        this.comp.buildElementParenting(this, this.data.parent, []);
		    }
		}
	};
	/**
	 * @file 
	 * Handles element's layer frame update.
	 * Checks layer in point and out point
	 *
	 */

	function FrameElement(){}

	FrameElement.prototype = {
	    /**
	     * @function 
	     * Initializes frame related properties.
	     *
	     */
	    initFrame: function(){
	        //set to true when inpoint is rendered
	        this._isFirstFrame = false;
	        //list of animated properties
	        this.dynamicProperties = [];
	        // If layer has been modified in current tick this will be true
	        this._mdf = false;
	    },
	    /**
	     * @function 
	     * Calculates all dynamic values
	     *
	     * @param {number} num
	     * current frame number in Layer's time
	     * @param {boolean} isVisible
	     * if layers is currently in range
	     * 
	     */
	    prepareProperties: function(num, isVisible) {
	        var i, len = this.dynamicProperties.length;
	        for (i = 0;i < len; i += 1) {
	            if (isVisible || (this._isParent && this.dynamicProperties[i].propType === 'transform')) {
	                this.dynamicProperties[i].getValue();
	                if (this.dynamicProperties[i]._mdf) {
	                    this.globalData._mdf = true;
	                    this._mdf = true;
	                }
	            }
	        }
	    },
	    addDynamicProperty: function(prop) {
	        if(this.dynamicProperties.indexOf(prop) === -1) {
	            this.dynamicProperties.push(prop);
	        }
	    }
	};
	function TransformElement(){}

	TransformElement.prototype = {
	    initTransform: function() {
	        this.finalTransform = {
	            mProp: this.data.ks ? TransformPropertyFactory.getTransformProperty(this, this.data.ks, this) : {o:0},
	            _matMdf: false,
	            _opMdf: false,
	            mat: new Matrix()
	        };
	        if (this.data.ao) {
	            this.finalTransform.mProp.autoOriented = true;
	        }

	        //TODO: check TYPE 11: Guided elements
	        if (this.data.ty !== 11) ;
	    },
	    renderTransform: function() {

	        this.finalTransform._opMdf = this.finalTransform.mProp.o._mdf || this._isFirstFrame;
	        this.finalTransform._matMdf = this.finalTransform.mProp._mdf || this._isFirstFrame;

	        if (this.hierarchy) {
	            var mat;
	            var finalMat = this.finalTransform.mat;
	            var i = 0, len = this.hierarchy.length;
	            //Checking if any of the transformation matrices in the hierarchy chain has changed.
	            if (!this.finalTransform._matMdf) {
	                while (i < len) {
	                    if (this.hierarchy[i].finalTransform.mProp._mdf) {
	                        this.finalTransform._matMdf = true;
	                        break;
	                    }
	                    i += 1;
	                }
	            }
	            
	            if (this.finalTransform._matMdf) {
	                mat = this.finalTransform.mProp.v.props;
	                finalMat.cloneFromProps(mat);
	                for (i = 0; i < len; i += 1) {
	                    mat = this.hierarchy[i].finalTransform.mProp.v.props;
	                    finalMat.transform(mat[0], mat[1], mat[2], mat[3], mat[4], mat[5], mat[6], mat[7], mat[8], mat[9], mat[10], mat[11], mat[12], mat[13], mat[14], mat[15]);
	                }
	            }
	        }
	    },
	    globalToLocal: function(pt) {
	        var transforms = [];
	        transforms.push(this.finalTransform);
	        var flag = true;
	        var comp = this.comp;
	        while (flag) {
	            if (comp.finalTransform) {
	                if (comp.data.hasMask) {
	                    transforms.splice(0, 0, comp.finalTransform);
	                }
	                comp = comp.comp;
	            } else {
	                flag = false;
	            }
	        }
	        var i, len = transforms.length,ptNew;
	        for (i = 0; i < len; i += 1) {
	            ptNew = transforms[i].mat.applyToPointArray(0, 0, 0);
	            //ptNew = transforms[i].mat.applyToPointArray(pt[0],pt[1],pt[2]);
	            pt = [pt[0] - ptNew[0], pt[1] - ptNew[1], 0];
	        }
	        return pt;
	    },
	    mHelper: new Matrix()
	};
	function RenderableElement(){

	}

	RenderableElement.prototype = {
	    initRenderable: function() {
	        //layer's visibility related to inpoint and outpoint. Rename isVisible to isInRange
	        this.isInRange = false;
	        //layer's display state
	        this.hidden = false;
	        // If layer's transparency equals 0, it can be hidden
	        this.isTransparent = false;
	        //list of animated components
	        this.renderableComponents = [];
	    },
	    addRenderableComponent: function(component) {
	        if(this.renderableComponents.indexOf(component) === -1) {
	            this.renderableComponents.push(component);
	        }
	    },
	    removeRenderableComponent: function(component) {
	        if(this.renderableComponents.indexOf(component) !== -1) {
	            this.renderableComponents.splice(this.renderableComponents.indexOf(component), 1);
	        }
	    },
	    prepareRenderableFrame: function(num) {
	        this.checkLayerLimits(num);
	    },
	    checkTransparency: function(){
	        if(this.finalTransform.mProp.o.v <= 0) {
	            if(!this.isTransparent && this.globalData.renderConfig.hideOnTransparent){
	                this.isTransparent = true;
	                this.hide();
	            }
	        } else if(this.isTransparent) {
	            this.isTransparent = false;
	            this.show();
	        }
	    },
	    /**
	     * @function 
	     * Initializes frame related properties.
	     *
	     * @param {number} num
	     * current frame number in Layer's time
	     * 
	     */
	    checkLayerLimits: function(num) {
	        if(this.data.ip - this.data.st <= num && this.data.op - this.data.st > num)
	        {
	            if(this.isInRange !== true){
	                this.globalData._mdf = true;
	                this._mdf = true;
	                this.isInRange = true;
	                this.show();
	            }
	        } else {
	            if(this.isInRange !== false){
	                this.globalData._mdf = true;
	                this.isInRange = false;
	                this.hide();
	            }
	        }
	    },
	    renderRenderable: function() {
	        var i, len = this.renderableComponents.length;
	        for(i = 0; i < len; i += 1) {
	            this.renderableComponents[i].renderFrame(this._isFirstFrame);
	        }
	        /*this.maskManager.renderFrame(this.finalTransform.mat);
	        this.renderableEffectsManager.renderFrame(this._isFirstFrame);*/
	    },
	    sourceRectAtTime: function(){
	        return {
	            top:0,
	            left:0,
	            width:100,
	            height:100
	        };
	    },
	    getLayerSize: function(){
	        if(this.data.ty === 5){
	            return {w:this.data.textData.width,h:this.data.textData.height};
	        }else {
	            return {w:this.data.width,h:this.data.height};
	        }
	    }
	};
	function RenderableDOMElement() {}

	(function(){
	    var _prototype = {
	        initElement: function(data,globalData,comp) {
	            this.initFrame();
	            this.initBaseData(data, globalData, comp);
	            this.initTransform(data, globalData, comp);
	            this.initHierarchy();
	            this.initRenderable();
	            this.initRendererElement();
	            this.createContainerElements();
	            this.createRenderableComponents();
	            this.createContent();
	            this.hide();
	        },
	        hide: function(){
	            if (!this.hidden && (!this.isInRange || this.isTransparent)) {
	                var elem = this.baseElement || this.layerElement;
	                elem.style.display = 'none';
	                this.hidden = true;
	            }
	        },
	        show: function(){
	            if (this.isInRange && !this.isTransparent){
	                if (!this.data.hd) {
	                    var elem = this.baseElement || this.layerElement;
	                    elem.style.display = 'block';
	                }
	                this.hidden = false;
	                this._isFirstFrame = true;
	            }
	        },
	        renderFrame: function() {
	            //If it is exported as hidden (data.hd === true) no need to render
	            //If it is not visible no need to render
	            if (this.data.hd || this.hidden) {
	                return;
	            }
	            this.renderTransform();
	            this.renderRenderable();
	            this.renderElement();
	            this.renderInnerContent();
	            if (this._isFirstFrame) {
	                this._isFirstFrame = false;
	            }
	        },
	        renderInnerContent: function() {},
	        prepareFrame: function(num) {
	            this._mdf = false;
	            this.prepareRenderableFrame(num);
	            this.prepareProperties(num, this.isInRange);
	            this.checkTransparency();
	        },
	        destroy: function(){
	            this.innerElem =  null;
	            this.destroyBaseElement();
	        }
	    };
	    extendPrototype([RenderableElement, createProxyFunction(_prototype)], RenderableDOMElement);
	}());
	function ProcessedElement(element, position) {
		this.elem = element;
		this.pos = position;
	}
	function SVGStyleData(data, level) {
		this.data = data;
		this.type = data.ty;
		this.d = '';
		this.lvl = level;
		this._mdf = false;
		this.closed = data.hd === true;
		this.pElem = createNS('path');
		this.msElem = null;
	}

	SVGStyleData.prototype.reset = function() {
		this.d = '';
		this._mdf = false;
	};
	function SVGShapeData(transformers, level, shape) {
	    this.caches = [];
	    this.styles = [];
	    this.transformers = transformers;
	    this.lStr = '';
	    this.sh = shape;
	    this.lvl = level;
	    //TODO find if there are some cases where _isAnimated can be false. 
	    // For now, since shapes add up with other shapes. They have to be calculated every time.
	    // One way of finding out is checking if all styles associated to this shape depend only of this shape
	    this._isAnimated = !!shape.k;
	    // TODO: commenting this for now since all shapes are animated
	    var i = 0, len = transformers.length;
	    while(i < len) {
	    	if(transformers[i].mProps.dynamicProperties.length) {
	    		this._isAnimated = true;
	    		break;
	    	}
	    	i += 1;
	    }
	}

	SVGShapeData.prototype.setAsAnimated = function() {
	    this._isAnimated = true;
	};
	function SVGTransformData(mProps, op, container) {
		this.transform = {
			mProps: mProps,
			op: op,
			container: container
		};
		this.elements = [];
	    this._isAnimated = this.transform.mProps.dynamicProperties.length || this.transform.op.effectsSequence.length;
	}
	function SVGStrokeStyleData(elem, data, styleOb){
		this.initDynamicPropertyContainer(elem);
		this.getValue = this.iterateDynamicProperties;
		this.o = PropertyFactory.getProp(elem,data.o,0,0.01,this);
		this.w = PropertyFactory.getProp(elem,data.w,0,null,this);
		this.d = new DashProperty(elem,data.d||{},'svg',this);
		this.c = PropertyFactory.getProp(elem,data.c,1,255,this);
		this.style = styleOb;
	    this._isAnimated = !!this._isAnimated;
	}

	extendPrototype([DynamicPropertyContainer], SVGStrokeStyleData);
	function SVGFillStyleData(elem, data, styleOb){
		this.initDynamicPropertyContainer(elem);
		this.getValue = this.iterateDynamicProperties;
		this.o = PropertyFactory.getProp(elem,data.o,0,0.01,this);
		this.c = PropertyFactory.getProp(elem,data.c,1,255,this);
		this.style = styleOb;
	}

	extendPrototype([DynamicPropertyContainer], SVGFillStyleData);
	function SVGGradientFillStyleData(elem, data, styleOb){
	    this.initDynamicPropertyContainer(elem);
	    this.getValue = this.iterateDynamicProperties;
	    this.initGradientData(elem, data, styleOb);
	}

	SVGGradientFillStyleData.prototype.initGradientData = function(elem, data, styleOb){
	    this.o = PropertyFactory.getProp(elem,data.o,0,0.01,this);
	    this.s = PropertyFactory.getProp(elem,data.s,1,null,this);
	    this.e = PropertyFactory.getProp(elem,data.e,1,null,this);
	    this.h = PropertyFactory.getProp(elem,data.h||{k:0},0,0.01,this);
	    this.a = PropertyFactory.getProp(elem,data.a||{k:0},0,degToRads,this);
	    this.g = new GradientProperty(elem,data.g,this);
	    this.style = styleOb;
	    this.stops = [];
	    this.setGradientData(styleOb.pElem, data);
	    this.setGradientOpacity(data, styleOb);
	    this._isAnimated = !!this._isAnimated;

	};

	SVGGradientFillStyleData.prototype.setGradientData = function(pathElement,data){

	    var gradientId = createElementID();
	    var gfill = createNS(data.t === 1 ? 'linearGradient' : 'radialGradient');
	    gfill.setAttribute('id',gradientId);
	    gfill.setAttribute('spreadMethod','pad');
	    gfill.setAttribute('gradientUnits','userSpaceOnUse');
	    var stops = [];
	    var stop, j, jLen;
	    jLen = data.g.p*4;
	    for(j=0;j<jLen;j+=4){
	        stop = createNS('stop');
	        gfill.appendChild(stop);
	        stops.push(stop);
	    }
	    pathElement.setAttribute( data.ty === 'gf' ? 'fill':'stroke','url(' + locationHref + '#'+gradientId+')');
	    
	    this.gf = gfill;
	    this.cst = stops;
	};

	SVGGradientFillStyleData.prototype.setGradientOpacity = function(data, styleOb){
	    if(this.g._hasOpacity && !this.g._collapsable){
	        var stop, j, jLen;
	        var mask = createNS("mask");
	        var maskElement = createNS( 'path');
	        mask.appendChild(maskElement);
	        var opacityId = createElementID();
	        var maskId = createElementID();
	        mask.setAttribute('id',maskId);
	        var opFill = createNS(data.t === 1 ? 'linearGradient' : 'radialGradient');
	        opFill.setAttribute('id',opacityId);
	        opFill.setAttribute('spreadMethod','pad');
	        opFill.setAttribute('gradientUnits','userSpaceOnUse');
	        jLen = data.g.k.k[0].s ? data.g.k.k[0].s.length : data.g.k.k.length;
	        var stops = this.stops;
	        for(j=data.g.p*4;j<jLen;j+=2){
	            stop = createNS('stop');
	            stop.setAttribute('stop-color','rgb(255,255,255)');
	            opFill.appendChild(stop);
	            stops.push(stop);
	        }
	        maskElement.setAttribute( data.ty === 'gf' ? 'fill':'stroke','url(' + locationHref + '#'+opacityId+')');
	        this.of = opFill;
	        this.ms = mask;
	        this.ost = stops;
	        this.maskId = maskId;
	        styleOb.msElem = maskElement;
	    }
	};

	extendPrototype([DynamicPropertyContainer], SVGGradientFillStyleData);
	function SVGGradientStrokeStyleData(elem, data, styleOb){
		this.initDynamicPropertyContainer(elem);
		this.getValue = this.iterateDynamicProperties;
		this.w = PropertyFactory.getProp(elem,data.w,0,null,this);
		this.d = new DashProperty(elem,data.d||{},'svg',this);
	    this.initGradientData(elem, data, styleOb);
	    this._isAnimated = !!this._isAnimated;
	}

	extendPrototype([SVGGradientFillStyleData, DynamicPropertyContainer], SVGGradientStrokeStyleData);
	function ShapeGroupData() {
		this.it = [];
	    this.prevViewData = [];
	    this.gr = createNS('g');
	}
	var SVGElementsRenderer = (function() {
		var _identityMatrix = new Matrix();
		var _matrixHelper = new Matrix();

		var ob = {
			createRenderFunction: createRenderFunction
		};

		function createRenderFunction(data) {
		    var ty = data.ty;
		    switch(data.ty) {
		        case 'fl':
		        return renderFill;
		        case 'gf':
		        return renderGradient;
		        case 'gs':
		        return renderGradientStroke;
		        case 'st':
		        return renderStroke;
		        case 'sh':
		        case 'el':
		        case 'rc':
		        case 'sr':
		        return renderPath;
		        case 'tr':
		        return renderContentTransform;
		    }
		}

		function renderContentTransform(styleData, itemData, isFirstFrame) {
		    if(isFirstFrame || itemData.transform.op._mdf){
		        itemData.transform.container.setAttribute('opacity',itemData.transform.op.v);
		    }
		    if(isFirstFrame || itemData.transform.mProps._mdf){
		        itemData.transform.container.setAttribute('transform',itemData.transform.mProps.v.to2dCSS());
		    }
		}

		function renderPath(styleData, itemData, isFirstFrame) {
		    var j, jLen,pathStringTransformed,redraw,pathNodes,l, lLen = itemData.styles.length;
		    var lvl = itemData.lvl;
		    var paths, mat, props, iterations, k;
		    for(l=0;l<lLen;l+=1){
		        redraw = itemData.sh._mdf || isFirstFrame;
		        if(itemData.styles[l].lvl < lvl){
		            mat = _matrixHelper.reset();
		            iterations = lvl - itemData.styles[l].lvl;
		            k = itemData.transformers.length-1;
		            while(!redraw && iterations > 0) {
		                redraw = itemData.transformers[k].mProps._mdf || redraw;
		                iterations --;
		                k --;
		            }
		            if(redraw) {
		                iterations = lvl - itemData.styles[l].lvl;
		                k = itemData.transformers.length-1;
		                while(iterations > 0) {
		                    props = itemData.transformers[k].mProps.v.props;
		                    mat.transform(props[0],props[1],props[2],props[3],props[4],props[5],props[6],props[7],props[8],props[9],props[10],props[11],props[12],props[13],props[14],props[15]);
		                    iterations --;
		                    k --;
		                }
		            }
		        } else {
		            mat = _identityMatrix;
		        }
		        paths = itemData.sh.paths;
		        jLen = paths._length;
		        if(redraw){
		            pathStringTransformed = '';
		            for(j=0;j<jLen;j+=1){
		                pathNodes = paths.shapes[j];
		                if(pathNodes && pathNodes._length){
		                    pathStringTransformed += buildShapeString(pathNodes, pathNodes._length, pathNodes.c, mat);
		                }
		            }
		            itemData.caches[l] = pathStringTransformed;
		        } else {
		            pathStringTransformed = itemData.caches[l];
		        }
		        itemData.styles[l].d += styleData.hd === true ? '' : pathStringTransformed;
		        itemData.styles[l]._mdf = redraw || itemData.styles[l]._mdf;
		    }
		}

		function renderFill (styleData,itemData, isFirstFrame){
		    var styleElem = itemData.style;

		    if(itemData.c._mdf || isFirstFrame){
		        styleElem.pElem.setAttribute('fill','rgb('+bm_floor(itemData.c.v[0])+','+bm_floor(itemData.c.v[1])+','+bm_floor(itemData.c.v[2])+')');
		    }
		    if(itemData.o._mdf || isFirstFrame){
		        styleElem.pElem.setAttribute('fill-opacity',itemData.o.v);
		    }
		}
		function renderGradientStroke (styleData, itemData, isFirstFrame) {
		    renderGradient(styleData, itemData, isFirstFrame);
		    renderStroke(styleData, itemData, isFirstFrame);
		}

		function renderGradient(styleData, itemData, isFirstFrame) {
		    var gfill = itemData.gf;
		    var hasOpacity = itemData.g._hasOpacity;
		    var pt1 = itemData.s.v, pt2 = itemData.e.v;

		    if (itemData.o._mdf || isFirstFrame) {
		        var attr = styleData.ty === 'gf' ? 'fill-opacity' : 'stroke-opacity';
		        itemData.style.pElem.setAttribute(attr, itemData.o.v);
		    }
		    if (itemData.s._mdf || isFirstFrame) {
		        var attr1 = styleData.t === 1 ? 'x1' : 'cx';
		        var attr2 = attr1 === 'x1' ? 'y1' : 'cy';
		        gfill.setAttribute(attr1, pt1[0]);
		        gfill.setAttribute(attr2, pt1[1]);
		        if (hasOpacity && !itemData.g._collapsable) {
		            itemData.of.setAttribute(attr1, pt1[0]);
		            itemData.of.setAttribute(attr2, pt1[1]);
		        }
		    }
		    var stops, i, len, stop;
		    if (itemData.g._cmdf || isFirstFrame) {
		        stops = itemData.cst;
		        var cValues = itemData.g.c;
		        len = stops.length;
		        for (i = 0; i < len; i += 1){
		            stop = stops[i];
		            stop.setAttribute('offset', cValues[i * 4] + '%');
		            stop.setAttribute('stop-color','rgb('+ cValues[i * 4 + 1] + ',' + cValues[i * 4 + 2] + ','+cValues[i * 4 + 3] + ')');
		        }
		    }
		    if (hasOpacity && (itemData.g._omdf || isFirstFrame)) {
		        var oValues = itemData.g.o;
		        if(itemData.g._collapsable) {
		            stops = itemData.cst;
		        } else {
		            stops = itemData.ost;
		        }
		        len = stops.length;
		        for (i = 0; i < len; i += 1) {
		            stop = stops[i];
		            if(!itemData.g._collapsable) {
		                stop.setAttribute('offset', oValues[i * 2] + '%');
		            }
		            stop.setAttribute('stop-opacity', oValues[i * 2 + 1]);
		        }
		    }
		    if (styleData.t === 1) {
		        if (itemData.e._mdf  || isFirstFrame) {
		            gfill.setAttribute('x2', pt2[0]);
		            gfill.setAttribute('y2', pt2[1]);
		            if (hasOpacity && !itemData.g._collapsable) {
		                itemData.of.setAttribute('x2', pt2[0]);
		                itemData.of.setAttribute('y2', pt2[1]);
		            }
		        }
		    } else {
		        var rad;
		        if (itemData.s._mdf || itemData.e._mdf || isFirstFrame) {
		            rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
		            gfill.setAttribute('r', rad);
		            if(hasOpacity && !itemData.g._collapsable){
		                itemData.of.setAttribute('r', rad);
		            }
		        }
		        if (itemData.e._mdf || itemData.h._mdf || itemData.a._mdf || isFirstFrame) {
		            if (!rad) {
		                rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
		            }
		            var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);

		            var percent = itemData.h.v >= 1 ? 0.99 : itemData.h.v <= -1 ? -0.99: itemData.h.v;
		            var dist = rad * percent;
		            var x = Math.cos(ang + itemData.a.v) * dist + pt1[0];
		            var y = Math.sin(ang + itemData.a.v) * dist + pt1[1];
		            gfill.setAttribute('fx', x);
		            gfill.setAttribute('fy', y);
		            if (hasOpacity && !itemData.g._collapsable) {
		                itemData.of.setAttribute('fx', x);
		                itemData.of.setAttribute('fy', y);
		            }
		        }
		        //gfill.setAttribute('fy','200');
		    }
		}
		function renderStroke(styleData, itemData, isFirstFrame) {
		    var styleElem = itemData.style;
		    var d = itemData.d;
		    if (d && (d._mdf || isFirstFrame) && d.dashStr) {
		        styleElem.pElem.setAttribute('stroke-dasharray', d.dashStr);
		        styleElem.pElem.setAttribute('stroke-dashoffset', d.dashoffset[0]);
		    }
		    if(itemData.c && (itemData.c._mdf || isFirstFrame)){
		        styleElem.pElem.setAttribute('stroke','rgb(' + bm_floor(itemData.c.v[0]) + ',' + bm_floor(itemData.c.v[1]) + ',' + bm_floor(itemData.c.v[2]) + ')');
		    }
		    if(itemData.o._mdf || isFirstFrame){
		        styleElem.pElem.setAttribute('stroke-opacity', itemData.o.v);
		    }
		    if(itemData.w._mdf || isFirstFrame){
		        styleElem.pElem.setAttribute('stroke-width', itemData.w.v);
		        if(styleElem.msElem){
		            styleElem.msElem.setAttribute('stroke-width', itemData.w.v);
		        }
		    }
		}
		return ob;
	}());
	function ShapeTransformManager() {
		this.sequences = {};
		this.sequenceList = [];
	    this.transform_key_count = 0;
	}

	ShapeTransformManager.prototype = {
		addTransformSequence: function(transforms) {
			var i, len = transforms.length;
			var key = '_';
			for(i = 0; i < len; i += 1) {
				key += transforms[i].transform.key + '_';
			}
			var sequence = this.sequences[key];
			if(!sequence) {
				sequence = {
					transforms: [].concat(transforms),
					finalTransform: new Matrix(),
					_mdf: false
				};
				this.sequences[key] = sequence;
				this.sequenceList.push(sequence);
			}
			return sequence;
		},
		processSequence: function(sequence, isFirstFrame) {
			var i = 0, len = sequence.transforms.length, _mdf = isFirstFrame;
			while (i < len && !isFirstFrame) {
				if (sequence.transforms[i].transform.mProps._mdf) {
					_mdf = true;
					break;
				}
				i += 1;
			}
			if (_mdf) {
				var props;
				sequence.finalTransform.reset();
				for (i = len - 1; i >= 0; i -= 1) {
			        props = sequence.transforms[i].transform.mProps.v.props;
			        sequence.finalTransform.transform(props[0],props[1],props[2],props[3],props[4],props[5],props[6],props[7],props[8],props[9],props[10],props[11],props[12],props[13],props[14],props[15]);
				}
			}
			sequence._mdf = _mdf;
			
		},
		processSequences: function(isFirstFrame) {
			var i, len = this.sequenceList.length;
			for (i = 0; i < len; i += 1) {
				this.processSequence(this.sequenceList[i], isFirstFrame);
			}

		},
		getNewKey: function() {
			return '_' + this.transform_key_count++;
		}
	};
	function CVShapeData(element, data, styles, transformsManager) {
	    this.styledShapes = [];
	    this.tr = [0,0,0,0,0,0];
	    var ty = 4;
	    if(data.ty == 'rc'){
	        ty = 5;
	    }else if(data.ty == 'el'){
	        ty = 6;
	    }else if(data.ty == 'sr'){
	        ty = 7;
	    }
	    this.sh = ShapePropertyFactory.getShapeProp(element,data,ty,element);
	    var i , len = styles.length,styledShape;
	    for (i = 0; i < len; i += 1) {
	        if (!styles[i].closed) {
	            styledShape = {
	                transforms: transformsManager.addTransformSequence(styles[i].transforms),
	                trNodes: []
	            };
	            this.styledShapes.push(styledShape);
	            styles[i].elements.push(styledShape);
	        }
	    }
	}

	CVShapeData.prototype.setAsAnimated = SVGShapeData.prototype.setAsAnimated;
	function BaseElement(){
	}

	BaseElement.prototype = {
	    checkMasks: function(){
	        if(!this.data.hasMask){
	            return false;
	        }
	        var i = 0, len = this.data.masksProperties.length;
	        while(i<len) {
	            if((this.data.masksProperties[i].mode !== 'n' && this.data.masksProperties[i].cl !== false)) {
	                return true;
	            }
	            i += 1;
	        }
	        return false;
	    },
	    initExpressions: function(){
	        this.layerInterface = LayerExpressionInterface(this);
	        if(this.data.hasMask && this.maskManager) {
	            this.layerInterface.registerMaskInterface(this.maskManager);
	        }
	        var effectsInterface = EffectsExpressionInterface.createEffectsInterface(this,this.layerInterface);
	        this.layerInterface.registerEffectsInterface(effectsInterface);

	        if(this.data.ty === 0 || this.data.xt){
	            this.compInterface = CompExpressionInterface(this);
	        } else if(this.data.ty === 4){
	            this.layerInterface.shapeInterface = ShapeExpressionInterface(this.shapesData,this.itemsData,this.layerInterface);
	            this.layerInterface.content = this.layerInterface.shapeInterface;
	        } else if(this.data.ty === 5){
	            this.layerInterface.textInterface = TextExpressionInterface(this);
	            this.layerInterface.text = this.layerInterface.textInterface;
	        }
	    },
	    setBlendMode: function(){
	        var blendModeValue = getBlendMode(this.data.bm);
	        var elem = this.baseElement || this.layerElement;

	        elem.style['mix-blend-mode'] = blendModeValue;
	    },
	    initBaseData: function(data, globalData, comp){
	        this.globalData = globalData;
	        this.comp = comp;
	        this.data = data;
	        this.layerId = createElementID();
	        
	        //Stretch factor for old animations missing this property.
	        if(!this.data.sr){
	            this.data.sr = 1;
	        }
	        // effects manager
	        this.effectsManager = new EffectsManager(this.data,this,this.dynamicProperties);
	        
	    },
	    getType: function(){
	        return this.type;
	    }
	    ,sourceRectAtTime: function(){}
	};
	function NullElement(data,globalData,comp){
	    this.initFrame();
		this.initBaseData(data, globalData, comp);
	    this.initFrame();
	    this.initTransform(data, globalData, comp);
	    this.initHierarchy();
	}

	NullElement.prototype.prepareFrame = function(num) {
	    this.prepareProperties(num, true);
	};

	NullElement.prototype.renderFrame = function() {
	};

	NullElement.prototype.getBaseElement = function() {
		return null;
	};

	NullElement.prototype.destroy = function() {
	};

	NullElement.prototype.sourceRectAtTime = function() {
	};

	NullElement.prototype.hide = function() {
	};

	extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement], NullElement);

	function SVGBaseElement(){
	}

	SVGBaseElement.prototype = {
	    initRendererElement: function() {
	        this.layerElement = createNS('g');
	    },
	    createContainerElements: function(){
	        this.matteElement = createNS('g');
	        this.transformedElement = this.layerElement;
	        this.maskedElement = this.layerElement;
	        this._sizeChanged = false;
	        var layerElementParent = null;
	        //If this layer acts as a mask for the following layer
	        var filId, fil, gg;
	        if (this.data.td) {
	            if (this.data.td == 3 || this.data.td == 1) {
	                var masker = createNS('mask');
	                masker.setAttribute('id', this.layerId);
	                masker.setAttribute('mask-type', this.data.td == 3 ? 'luminance' : 'alpha');
	                masker.appendChild(this.layerElement);
	                layerElementParent = masker;
	                this.globalData.defs.appendChild(masker);
	                // This is only for IE and Edge when mask if of type alpha
	                if (!featureSupport.maskType && this.data.td == 1) {
	                    masker.setAttribute('mask-type', 'luminance');
	                    filId = createElementID();
	                    fil = filtersFactory.createFilter(filId);
	                    this.globalData.defs.appendChild(fil);
	                    fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
	                    gg = createNS('g');
	                    gg.appendChild(this.layerElement);
	                    layerElementParent = gg;
	                    masker.appendChild(gg);
	                    gg.setAttribute('filter','url(' + locationHref + '#' + filId + ')');
	                }
	            } else if(this.data.td == 2) {
	                var maskGroup = createNS('mask');
	                maskGroup.setAttribute('id', this.layerId);
	                maskGroup.setAttribute('mask-type','alpha');
	                var maskGrouper = createNS('g');
	                maskGroup.appendChild(maskGrouper);
	                filId = createElementID();
	                fil = filtersFactory.createFilter(filId);
	                ////

	                // This solution doesn't work on Android when meta tag with viewport attribute is set
	                /*var feColorMatrix = createNS('feColorMatrix');
	                feColorMatrix.setAttribute('type', 'matrix');
	                feColorMatrix.setAttribute('color-interpolation-filters', 'sRGB');
	                feColorMatrix.setAttribute('values','1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 -1 1');
	                fil.appendChild(feColorMatrix);*/
	                ////
	                var feCTr = createNS('feComponentTransfer');
	                feCTr.setAttribute('in','SourceGraphic');
	                fil.appendChild(feCTr);
	                var feFunc = createNS('feFuncA');
	                feFunc.setAttribute('type','table');
	                feFunc.setAttribute('tableValues','1.0 0.0');
	                feCTr.appendChild(feFunc);
	                ////
	                this.globalData.defs.appendChild(fil);
	                var alphaRect = createNS('rect');
	                alphaRect.setAttribute('width',  this.comp.data.w);
	                alphaRect.setAttribute('height', this.comp.data.h);
	                alphaRect.setAttribute('x','0');
	                alphaRect.setAttribute('y','0');
	                alphaRect.setAttribute('fill','#ffffff');
	                alphaRect.setAttribute('opacity','0');
	                maskGrouper.setAttribute('filter', 'url(' + locationHref + '#'+filId+')');
	                maskGrouper.appendChild(alphaRect);
	                maskGrouper.appendChild(this.layerElement);
	                layerElementParent = maskGrouper;
	                if (!featureSupport.maskType) {
	                    maskGroup.setAttribute('mask-type', 'luminance');
	                    fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
	                    gg = createNS('g');
	                    maskGrouper.appendChild(alphaRect);
	                    gg.appendChild(this.layerElement);
	                    layerElementParent = gg;
	                    maskGrouper.appendChild(gg);
	                }
	                this.globalData.defs.appendChild(maskGroup);
	            }
	        } else if (this.data.tt) {
	            this.matteElement.appendChild(this.layerElement);
	            layerElementParent = this.matteElement;
	            this.baseElement = this.matteElement;
	        } else {
	            this.baseElement = this.layerElement;
	        }
	        if (this.data.ln) {
	            this.layerElement.setAttribute('id', this.data.ln);
	        }
	        if (this.data.cl) {
	            this.layerElement.setAttribute('class', this.data.cl);
	        }
	        //Clipping compositions to hide content that exceeds boundaries. If collapsed transformations is on, component should not be clipped
	        if (this.data.ty === 0 && !this.data.hd) {
	            var cp = createNS( 'clipPath');
	            var pt = createNS('path');
	            pt.setAttribute('d','M0,0 L' + this.data.w + ',0' + ' L' + this.data.w + ',' + this.data.h + ' L0,' + this.data.h + 'z');
	            var clipId = createElementID();
	            cp.setAttribute('id',clipId);
	            cp.appendChild(pt);
	            this.globalData.defs.appendChild(cp);

	            if (this.checkMasks()) {
	                var cpGroup = createNS('g');
	                cpGroup.setAttribute('clip-path','url(' + locationHref + '#'+clipId + ')');
	                cpGroup.appendChild(this.layerElement);
	                this.transformedElement = cpGroup;
	                if (layerElementParent) {
	                    layerElementParent.appendChild(this.transformedElement);
	                } else {
	                    this.baseElement = this.transformedElement;
	                }
	            } else {
	                this.layerElement.setAttribute('clip-path','url(' + locationHref + '#'+clipId+')');
	            }
	            
	        }
	        if (this.data.bm !== 0) {
	            this.setBlendMode();
	        }

	    },
	    renderElement: function() {
	        if (this.finalTransform._matMdf) {
	            this.transformedElement.setAttribute('transform', this.finalTransform.mat.to2dCSS());
	        }
	        if (this.finalTransform._opMdf) {
	            this.transformedElement.setAttribute('opacity', this.finalTransform.mProp.o.v);
	        }
	    },
	    destroyBaseElement: function() {
	        this.layerElement = null;
	        this.matteElement = null;
	        this.maskManager.destroy();
	    },
	    getBaseElement: function() {
	        if (this.data.hd) {
	            return null;
	        }
	        return this.baseElement;
	    },
	    createRenderableComponents: function() {
	        this.maskManager = new MaskElement(this.data, this, this.globalData);
	        this.renderableEffectsManager = new SVGEffects(this);
	    },
	    setMatte: function(id) {
	        if (!this.matteElement) {
	            return;
	        }
	        this.matteElement.setAttribute("mask", "url(" + locationHref + "#" + id + ")");
	    }
	};
	function IShapeElement(){
	}

	IShapeElement.prototype = {
	    addShapeToModifiers: function(data) {
	        var i, len = this.shapeModifiers.length;
	        for(i=0;i<len;i+=1){
	            this.shapeModifiers[i].addShape(data);
	        }
	    },
	    isShapeInAnimatedModifiers: function(data) {
	        var i = 0, len = this.shapeModifiers.length;
	        while(i < len) {
	            if(this.shapeModifiers[i].isAnimatedWithShape(data)) {
	                return true;
	            }
	        }
	        return false;
	    },
	    renderModifiers: function() {
	        if(!this.shapeModifiers.length){
	            return;
	        }
	        var i, len = this.shapes.length;
	        for(i=0;i<len;i+=1){
	            this.shapes[i].sh.reset();
	        }

	        len = this.shapeModifiers.length;
	        for(i=len-1;i>=0;i-=1){
	            this.shapeModifiers[i].processShapes(this._isFirstFrame);
	        }
	    },
	    lcEnum: {
	        '1': 'butt',
	        '2': 'round',
	        '3': 'square'
	    },
	    ljEnum: {
	        '1': 'miter',
	        '2': 'round',
	        '3': 'bevel'
	    },
	    searchProcessedElement: function(elem){
	        var elements = this.processedElements;
	        var i = 0, len = elements.length;
	        while (i < len) {
	            if (elements[i].elem === elem) {
	                return elements[i].pos;
	            }
	            i += 1;
	        }
	        return 0;
	    },
	    addProcessedElement: function(elem, pos){
	        var elements = this.processedElements;
	        var i = elements.length;
	        while(i) {
	            i -= 1;
	            if (elements[i].elem === elem) {
	                elements[i].pos = pos;
	                return;
	            }
	        }
	        elements.push(new ProcessedElement(elem, pos));
	    },
	    prepareFrame: function(num) {
	        this.prepareRenderableFrame(num);
	        this.prepareProperties(num, this.isInRange);
	    }
	};
	function ITextElement(){
	}

	ITextElement.prototype.initElement = function(data,globalData,comp){
	    this.lettersChangedFlag = true;
	    this.initFrame();
	    this.initBaseData(data, globalData, comp);
	    this.textProperty = new TextProperty(this, data.t, this.dynamicProperties);
	    this.textAnimator = new TextAnimatorProperty(data.t, this.renderType, this);
	    this.initTransform(data, globalData, comp);
	    this.initHierarchy();
	    this.initRenderable();
	    this.initRendererElement();
	    this.createContainerElements();
	    this.createRenderableComponents();
	    this.createContent();
	    this.hide();
	    this.textAnimator.searchProperties(this.dynamicProperties);
	};

	ITextElement.prototype.prepareFrame = function(num) {
	    this._mdf = false;
	    this.prepareRenderableFrame(num);
	    this.prepareProperties(num, this.isInRange);
	    if(this.textProperty._mdf || this.textProperty._isFirstFrame) {
	        this.buildNewText();
	        this.textProperty._isFirstFrame = false;
	        this.textProperty._mdf = false;
	    }
	};

	ITextElement.prototype.createPathShape = function(matrixHelper, shapes) {
	    var j,jLen = shapes.length;
	    var pathNodes;
	    var shapeStr = '';
	    for(j=0;j<jLen;j+=1){
	        pathNodes = shapes[j].ks.k;
	        shapeStr += buildShapeString(pathNodes, pathNodes.i.length, true, matrixHelper);
	    }
	    return shapeStr;
	};

	ITextElement.prototype.updateDocumentData = function(newData, index) {
	    this.textProperty.updateDocumentData(newData, index);
	};

	ITextElement.prototype.canResizeFont = function(_canResize) {
	    this.textProperty.canResizeFont(_canResize);
	};

	ITextElement.prototype.setMinimumFontSize = function(_fontSize) {
	    this.textProperty.setMinimumFontSize(_fontSize);
	};

	ITextElement.prototype.applyTextPropertiesToMatrix = function(documentData, matrixHelper, lineNumber, xPos, yPos) {
	    if(documentData.ps){
	        matrixHelper.translate(documentData.ps[0],documentData.ps[1] + documentData.ascent,0);
	    }
	    matrixHelper.translate(0,-documentData.ls,0);
	    switch(documentData.j){
	        case 1:
	            matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber]),0,0);
	            break;
	        case 2:
	            matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber] )/2,0,0);
	            break;
	    }
	    matrixHelper.translate(xPos, yPos, 0);
	};


	ITextElement.prototype.buildColor = function(colorData) {
	    return 'rgb(' + Math.round(colorData[0]*255) + ',' + Math.round(colorData[1]*255) + ',' + Math.round(colorData[2]*255) + ')';
	};

	ITextElement.prototype.emptyProp = new LetterProps();

	ITextElement.prototype.destroy = function(){
	    
	};
	function ICompElement(){}

	extendPrototype([BaseElement, TransformElement, HierarchyElement, FrameElement, RenderableDOMElement], ICompElement);

	ICompElement.prototype.initElement = function(data,globalData,comp) {
	    this.initFrame();
	    this.initBaseData(data, globalData, comp);
	    this.initTransform(data, globalData, comp);
	    this.initRenderable();
	    this.initHierarchy();
	    this.initRendererElement();
	    this.createContainerElements();
	    this.createRenderableComponents();
	    if(this.data.xt || !globalData.progressiveLoad){
	        this.buildAllItems();
	    }
	    this.hide();
	};

	/*ICompElement.prototype.hide = function(){
	    if(!this.hidden){
	        this.hideElement();
	        var i,len = this.elements.length;
	        for( i = 0; i < len; i+=1 ){
	            if(this.elements[i]){
	                this.elements[i].hide();
	            }
	        }
	    }
	};*/

	ICompElement.prototype.prepareFrame = function(num){
	    this._mdf = false;
	    this.prepareRenderableFrame(num);
	    this.prepareProperties(num, this.isInRange);
	    if(!this.isInRange && !this.data.xt){
	        return;
	    }

	    if (!this.tm._placeholder) {
	        var timeRemapped = this.tm.v;
	        if(timeRemapped === this.data.op){
	            timeRemapped = this.data.op - 1;
	        }
	        this.renderedFrame = timeRemapped;
	    } else {
	        this.renderedFrame = num/this.data.sr;
	    }
	    var i,len = this.elements.length;
	    if(!this.completeLayers){
	        this.checkLayers(this.renderedFrame);
	    }
	    //This iteration needs to be backwards because of how expressions connect between each other
	    for( i = len - 1; i >= 0; i -= 1 ){
	        if(this.completeLayers || this.elements[i]){
	            this.elements[i].prepareFrame(this.renderedFrame - this.layers[i].st);
	            if(this.elements[i]._mdf) {
	                this._mdf = true;
	            }
	        }
	    }
	};

	ICompElement.prototype.renderInnerContent = function() {
	    var i,len = this.layers.length;
	    for( i = 0; i < len; i += 1 ){
	        if(this.completeLayers || this.elements[i]){
	            this.elements[i].renderFrame();
	        }
	    }
	};

	ICompElement.prototype.setElements = function(elems){
	    this.elements = elems;
	};

	ICompElement.prototype.getElements = function(){
	    return this.elements;
	};

	ICompElement.prototype.destroyElements = function(){
	    var i,len = this.layers.length;
	    for( i = 0; i < len; i+=1 ){
	        if(this.elements[i]){
	            this.elements[i].destroy();
	        }
	    }
	};

	ICompElement.prototype.destroy = function(){
	    this.destroyElements();
	    this.destroyBaseElement();
	};

	function IImageElement(data,globalData,comp){
	    this.assetData = globalData.getAssetData(data.refId);
	    this.initElement(data,globalData,comp);
	    this.sourceRect = {top:0,left:0,width:this.assetData.w,height:this.assetData.h};
	}

	extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement], IImageElement);

	IImageElement.prototype.createContent = function(){

	    var assetPath = this.globalData.getAssetsPath(this.assetData);

	    this.innerElem = createNS('image');
	    this.innerElem.setAttribute('width',this.assetData.w+"px");
	    this.innerElem.setAttribute('height',this.assetData.h+"px");
	    this.innerElem.setAttribute('preserveAspectRatio',this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio);
	    this.innerElem.setAttributeNS('http://www.w3.org/1999/xlink','href',assetPath);
	    
	    this.layerElement.appendChild(this.innerElem);
	};

	IImageElement.prototype.sourceRectAtTime = function() {
		return this.sourceRect;
	};
	function ISolidElement(data,globalData,comp){
	    this.initElement(data,globalData,comp);
	}
	extendPrototype([IImageElement], ISolidElement);

	ISolidElement.prototype.createContent = function(){

	    var rect = createNS('rect');
	    ////rect.style.width = this.data.sw;
	    ////rect.style.height = this.data.sh;
	    ////rect.style.fill = this.data.sc;
	    rect.setAttribute('width',this.data.sw);
	    rect.setAttribute('height',this.data.sh);
	    rect.setAttribute('fill',this.data.sc);
	    this.layerElement.appendChild(rect);
	};
	function SVGCompElement(data,globalData,comp){
	    this.layers = data.layers;
	    this.supports3d = true;
	    this.completeLayers = false;
	    this.pendingElements = [];
	    this.elements = this.layers ? createSizedArray(this.layers.length) : [];
	    //this.layerElement = createNS('g');
	    this.initElement(data,globalData,comp);
	    this.tm = data.tm ? PropertyFactory.getProp(this,data.tm,0,globalData.frameRate,this) : {_placeholder:true};
	}

	extendPrototype([SVGRenderer, ICompElement, SVGBaseElement], SVGCompElement);
	function SVGTextElement(data,globalData,comp){
	    this.textSpans = [];
	    this.renderType = 'svg';
	    this.initElement(data,globalData,comp);
	}

	extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement], SVGTextElement);

	SVGTextElement.prototype.createContent = function(){

	    if (this.data.singleShape && !this.globalData.fontManager.chars) {
	        this.textContainer = createNS('text');
	    }
	};

	SVGTextElement.prototype.buildTextContents = function(textArray) {
	    var i = 0, len = textArray.length;
	    var textContents = [], currentTextContent = '';
	    while (i < len) {
	        if(textArray[i] === String.fromCharCode(13) || textArray[i] === String.fromCharCode(3)) {
	            textContents.push(currentTextContent);
	            currentTextContent = '';
	        } else {
	            currentTextContent += textArray[i];
	        }
	        i += 1;
	    }
	    textContents.push(currentTextContent);
	    return textContents;
	};

	SVGTextElement.prototype.buildNewText = function(){
	    var i, len;

	    var documentData = this.textProperty.currentData;
	    this.renderedLetters = createSizedArray(documentData ? documentData.l.length : 0);
	    if(documentData.fc) {
	        this.layerElement.setAttribute('fill', this.buildColor(documentData.fc));
	    }else {
	        this.layerElement.setAttribute('fill', 'rgba(0,0,0,0)');
	    }
	    if(documentData.sc){
	        this.layerElement.setAttribute('stroke', this.buildColor(documentData.sc));
	        this.layerElement.setAttribute('stroke-width', documentData.sw);
	    }
	    this.layerElement.setAttribute('font-size', documentData.finalSize);
	    var fontData = this.globalData.fontManager.getFontByName(documentData.f);
	    if(fontData.fClass){
	        this.layerElement.setAttribute('class',fontData.fClass);
	    } else {
	        this.layerElement.setAttribute('font-family', fontData.fFamily);
	        var fWeight = documentData.fWeight, fStyle = documentData.fStyle;
	        this.layerElement.setAttribute('font-style', fStyle);
	        this.layerElement.setAttribute('font-weight', fWeight);
	    }
	    this.layerElement.setAttribute('aria-label', documentData.t);

	    var letters = documentData.l || [];
	    var usesGlyphs = !!this.globalData.fontManager.chars;
	    len = letters.length;

	    var tSpan;
	    var matrixHelper = this.mHelper;
	    var shapes, shapeStr = '', singleShape = this.data.singleShape;
	    var xPos = 0, yPos = 0, firstLine = true;
	    var trackingOffset = documentData.tr/1000*documentData.finalSize;
	    if(singleShape && !usesGlyphs && !documentData.sz) {
	        var tElement = this.textContainer;
	        var justify = 'start';
	        switch(documentData.j) {
	            case 1:
	                justify = 'end';
	                break;
	            case 2:
	                justify = 'middle';
	                break;
	        }
	        tElement.setAttribute('text-anchor',justify);
	        tElement.setAttribute('letter-spacing',trackingOffset);
	        var textContent = this.buildTextContents(documentData.finalText);
	        len = textContent.length;
	        yPos = documentData.ps ? documentData.ps[1] + documentData.ascent : 0;
	        for ( i = 0; i < len; i += 1) {
	            tSpan = this.textSpans[i] || createNS('tspan');
	            tSpan.textContent = textContent[i];
	            tSpan.setAttribute('x', 0);
	            tSpan.setAttribute('y', yPos);
	            tSpan.style.display = 'inherit';
	            tElement.appendChild(tSpan);
	            this.textSpans[i] = tSpan;
	            yPos += documentData.finalLineHeight;
	        }
	        
	        this.layerElement.appendChild(tElement);
	    } else {
	        var cachedSpansLength = this.textSpans.length;
	        var shapeData, charData;
	        for (i = 0; i < len; i += 1) {
	            if(!usesGlyphs || !singleShape || i === 0){
	                tSpan = cachedSpansLength > i ? this.textSpans[i] : createNS(usesGlyphs?'path':'text');
	                if (cachedSpansLength <= i) {
	                    tSpan.setAttribute('stroke-linecap', 'butt');
	                    tSpan.setAttribute('stroke-linejoin','round');
	                    tSpan.setAttribute('stroke-miterlimit','4');
	                    this.textSpans[i] = tSpan;
	                    this.layerElement.appendChild(tSpan);
	                }
	                tSpan.style.display = 'inherit';
	            }
	            
	            matrixHelper.reset();
	            matrixHelper.scale(documentData.finalSize / 100, documentData.finalSize / 100);
	            if (singleShape) {
	                if(letters[i].n) {
	                    xPos = -trackingOffset;
	                    yPos += documentData.yOffset;
	                    yPos += firstLine ? 1 : 0;
	                    firstLine = false;
	                }
	                this.applyTextPropertiesToMatrix(documentData, matrixHelper, letters[i].line, xPos, yPos);
	                xPos += letters[i].l || 0;
	                //xPos += letters[i].val === ' ' ? 0 : trackingOffset;
	                xPos += trackingOffset;
	            }
	            if(usesGlyphs) {
	                charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
	                shapeData = charData && charData.data || {};
	                shapes = shapeData.shapes ? shapeData.shapes[0].it : [];
	                if(!singleShape){
	                    tSpan.setAttribute('d',this.createPathShape(matrixHelper,shapes));
	                } else {
	                    shapeStr += this.createPathShape(matrixHelper,shapes);
	                }
	            } else {
	                if(singleShape) {
	                    tSpan.setAttribute("transform", "translate(" + matrixHelper.props[12] + "," + matrixHelper.props[13] + ")");
	                }
	                tSpan.textContent = letters[i].val;
	                tSpan.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space","preserve");
	            }
	            //
	        }
	        if (singleShape && tSpan) {
	            tSpan.setAttribute('d',shapeStr);
	        }
	    }
	    while (i < this.textSpans.length){
	        this.textSpans[i].style.display = 'none';
	        i += 1;
	    }
	    
	    this._sizeChanged = true;
	};

	SVGTextElement.prototype.sourceRectAtTime = function(time){
	    this.prepareFrame(this.comp.renderedFrame - this.data.st);
	    this.renderInnerContent();
	    if(this._sizeChanged){
	        this._sizeChanged = false;
	        var textBox = this.layerElement.getBBox();
	        this.bbox = {
	            top: textBox.y,
	            left: textBox.x,
	            width: textBox.width,
	            height: textBox.height
	        };
	    }
	    return this.bbox;
	};

	SVGTextElement.prototype.renderInnerContent = function(){

	    if(!this.data.singleShape){
	        this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
	        if(this.lettersChangedFlag || this.textAnimator.lettersChangedFlag){
	            this._sizeChanged = true;
	            var  i,len;
	            var renderedLetters = this.textAnimator.renderedLetters;

	            var letters = this.textProperty.currentData.l;

	            len = letters.length;
	            var renderedLetter, textSpan;
	            for(i=0;i<len;i+=1){
	                if(letters[i].n){
	                    continue;
	                }
	                renderedLetter = renderedLetters[i];
	                textSpan = this.textSpans[i];
	                if(renderedLetter._mdf.m) {
	                    textSpan.setAttribute('transform',renderedLetter.m);
	                }
	                if(renderedLetter._mdf.o) {
	                    textSpan.setAttribute('opacity',renderedLetter.o);
	                }
	                if(renderedLetter._mdf.sw){
	                    textSpan.setAttribute('stroke-width',renderedLetter.sw);
	                }
	                if(renderedLetter._mdf.sc){
	                    textSpan.setAttribute('stroke',renderedLetter.sc);
	                }
	                if(renderedLetter._mdf.fc){
	                    textSpan.setAttribute('fill',renderedLetter.fc);
	                }
	            }
	        }
	    }
	};

	function SVGShapeElement(data,globalData,comp){
	    //List of drawable elements
	    this.shapes = [];
	    // Full shape data
	    this.shapesData = data.shapes;
	    //List of styles that will be applied to shapes
	    this.stylesList = [];
	    //List of modifiers that will be applied to shapes
	    this.shapeModifiers = [];
	    //List of items in shape tree
	    this.itemsData = [];
	    //List of items in previous shape tree
	    this.processedElements = [];
	    // List of animated components
	    this.animatedContents = [];
	    this.initElement(data,globalData,comp);
	    //Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
	    // List of elements that have been created
	    this.prevViewData = [];
	    //Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
	}

	extendPrototype([BaseElement,TransformElement,SVGBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableDOMElement], SVGShapeElement);

	SVGShapeElement.prototype.initSecondaryElement = function() {
	};

	SVGShapeElement.prototype.identityMatrix = new Matrix();

	SVGShapeElement.prototype.buildExpressionInterface = function(){};

	SVGShapeElement.prototype.createContent = function(){
	    this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement, 0, [], true);
	    this.filterUniqueShapes();
	};

	/*
	This method searches for multiple shapes that affect a single element and one of them is animated
	*/
	SVGShapeElement.prototype.filterUniqueShapes = function(){
	    var i, len = this.shapes.length, shape;
	    var j, jLen = this.stylesList.length;
	    var style;
	    var tempShapes = [];
	    var areAnimated = false;
	    for(j = 0; j < jLen; j += 1) {
	        style = this.stylesList[j];
	        areAnimated = false;
	        tempShapes.length = 0;
	        for(i = 0; i < len; i += 1) {
	            shape = this.shapes[i];
	            if(shape.styles.indexOf(style) !== -1) {
	                tempShapes.push(shape);
	                areAnimated = shape._isAnimated || areAnimated;
	            }
	        }
	        if(tempShapes.length > 1 && areAnimated) {
	            this.setShapesAsAnimated(tempShapes);
	        }
	    }
	};

	SVGShapeElement.prototype.setShapesAsAnimated = function(shapes){
	    var i, len = shapes.length;
	    for(i = 0; i < len; i += 1) {
	        shapes[i].setAsAnimated();
	    }
	};

	SVGShapeElement.prototype.createStyleElement = function(data, level){
	    //TODO: prevent drawing of hidden styles
	    var elementData;
	    var styleOb = new SVGStyleData(data, level);

	    var pathElement = styleOb.pElem;
	    if(data.ty === 'st') {
	        elementData = new SVGStrokeStyleData(this, data, styleOb);
	    } else if(data.ty === 'fl') {
	        elementData = new SVGFillStyleData(this, data, styleOb);
	    } else if(data.ty === 'gf' || data.ty === 'gs') {
	        var gradientConstructor = data.ty === 'gf' ? SVGGradientFillStyleData : SVGGradientStrokeStyleData;
	        elementData = new gradientConstructor(this, data, styleOb);
	        this.globalData.defs.appendChild(elementData.gf);
	        if (elementData.maskId) {
	            this.globalData.defs.appendChild(elementData.ms);
	            this.globalData.defs.appendChild(elementData.of);
	            pathElement.setAttribute('mask','url(' + locationHref + '#' + elementData.maskId + ')');
	        }
	    }
	    
	    if(data.ty === 'st' || data.ty === 'gs') {
	        pathElement.setAttribute('stroke-linecap', this.lcEnum[data.lc] || 'round');
	        pathElement.setAttribute('stroke-linejoin',this.ljEnum[data.lj] || 'round');
	        pathElement.setAttribute('fill-opacity','0');
	        if(data.lj === 1) {
	            pathElement.setAttribute('stroke-miterlimit',data.ml);
	        }
	    }

	    if(data.r === 2) {
	        pathElement.setAttribute('fill-rule', 'evenodd');
	    }

	    if(data.ln){
	        pathElement.setAttribute('id',data.ln);
	    }
	    if(data.cl){
	        pathElement.setAttribute('class',data.cl);
	    }
	    if(data.bm){
	        pathElement.style['mix-blend-mode'] = getBlendMode(data.bm);
	    }
	    this.stylesList.push(styleOb);
	    this.addToAnimatedContents(data, elementData);
	    return elementData;
	};

	SVGShapeElement.prototype.createGroupElement = function(data) {
	    var elementData = new ShapeGroupData();
	    if(data.ln){
	        elementData.gr.setAttribute('id',data.ln);
	    }
	    if(data.cl){
	        elementData.gr.setAttribute('class',data.cl);
	    }
	    if(data.bm){
	        elementData.gr.style['mix-blend-mode'] = getBlendMode(data.bm);
	    }
	    return elementData;
	};

	SVGShapeElement.prototype.createTransformElement = function(data, container) {
	    var transformProperty = TransformPropertyFactory.getTransformProperty(this,data,this);
	    var elementData = new SVGTransformData(transformProperty, transformProperty.o, container);
	    this.addToAnimatedContents(data, elementData);
	    return elementData;
	};

	SVGShapeElement.prototype.createShapeElement = function(data, ownTransformers, level) {
	    var ty = 4;
	    if(data.ty === 'rc'){
	        ty = 5;
	    }else if(data.ty === 'el'){
	        ty = 6;
	    }else if(data.ty === 'sr'){
	        ty = 7;
	    }
	    var shapeProperty = ShapePropertyFactory.getShapeProp(this,data,ty,this);
	    var elementData = new SVGShapeData(ownTransformers, level, shapeProperty);
	    this.shapes.push(elementData);
	    this.addShapeToModifiers(elementData);
	    this.addToAnimatedContents(data, elementData);
	    return elementData;
	};

	SVGShapeElement.prototype.addToAnimatedContents = function(data, element) {
	    var i = 0, len = this.animatedContents.length;
	    while(i < len) {
	        if(this.animatedContents[i].element === element) {
	            return;
	        }
	        i += 1;
	    }
	    this.animatedContents.push({
	        fn: SVGElementsRenderer.createRenderFunction(data),
	        element: element,
	        data: data
	    });
	};

	SVGShapeElement.prototype.setElementStyles = function(elementData){
	    var arr = elementData.styles;
	    var j, jLen = this.stylesList.length;
	    for (j = 0; j < jLen; j += 1) {
	        if (!this.stylesList[j].closed) {
	            arr.push(this.stylesList[j]);
	        }
	    }
	};

	SVGShapeElement.prototype.reloadShapes = function(){
	    this._isFirstFrame = true;
	    var i, len = this.itemsData.length;
	    for( i = 0; i < len; i += 1) {
	        this.prevViewData[i] = this.itemsData[i];
	    }
	    this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement, 0, [], true);
	    this.filterUniqueShapes();
	    len = this.dynamicProperties.length;
	    for(i = 0; i < len; i += 1) {
	        this.dynamicProperties[i].getValue();
	    }
	    this.renderModifiers();
	};

	SVGShapeElement.prototype.searchShapes = function(arr,itemsData,prevViewData,container, level, transformers, render){
	    var ownTransformers = [].concat(transformers);
	    var i, len = arr.length - 1;
	    var j, jLen;
	    var ownStyles = [], ownModifiers = [], currentTransform, modifier, processedPos;
	    for(i=len;i>=0;i-=1){
	        processedPos = this.searchProcessedElement(arr[i]);
	        if(!processedPos){
	            arr[i]._render = render;
	        } else {
	            itemsData[i] = prevViewData[processedPos - 1];
	        }
	        if(arr[i].ty == 'fl' || arr[i].ty == 'st' || arr[i].ty == 'gf' || arr[i].ty == 'gs'){
	            if(!processedPos){
	                itemsData[i] = this.createStyleElement(arr[i], level);
	            } else {
	                itemsData[i].style.closed = false;
	            }
	            if(arr[i]._render){
	                container.appendChild(itemsData[i].style.pElem);
	            }
	            ownStyles.push(itemsData[i].style);
	        }else if(arr[i].ty == 'gr'){
	            if(!processedPos){
	                itemsData[i] = this.createGroupElement(arr[i]);
	            } else {
	                jLen = itemsData[i].it.length;
	                for(j=0;j<jLen;j+=1){
	                    itemsData[i].prevViewData[j] = itemsData[i].it[j];
	                }
	            }
	            this.searchShapes(arr[i].it,itemsData[i].it,itemsData[i].prevViewData,itemsData[i].gr, level + 1, ownTransformers, render);
	            if(arr[i]._render){
	                container.appendChild(itemsData[i].gr);
	            }
	        }else if(arr[i].ty == 'tr'){
	            if(!processedPos){
	                itemsData[i] = this.createTransformElement(arr[i], container);
	            }
	            currentTransform = itemsData[i].transform;
	            ownTransformers.push(currentTransform);
	        }else if(arr[i].ty == 'sh' || arr[i].ty == 'rc' || arr[i].ty == 'el' || arr[i].ty == 'sr'){
	            if(!processedPos){
	                itemsData[i] = this.createShapeElement(arr[i], ownTransformers, level);
	            }
	            this.setElementStyles(itemsData[i]);

	        }else if(arr[i].ty == 'tm' || arr[i].ty == 'rd' || arr[i].ty == 'ms' || arr[i].ty == 'pb'){
	            if(!processedPos){
	                modifier = ShapeModifiers.getModifier(arr[i].ty);
	                modifier.init(this,arr[i]);
	                itemsData[i] = modifier;
	                this.shapeModifiers.push(modifier);
	            } else {
	                modifier = itemsData[i];
	                modifier.closed = false;
	            }
	            ownModifiers.push(modifier);
	        }else if(arr[i].ty == 'rp'){
	            if(!processedPos){
	                modifier = ShapeModifiers.getModifier(arr[i].ty);
	                itemsData[i] = modifier;
	                modifier.init(this,arr,i,itemsData);
	                this.shapeModifiers.push(modifier);
	                render = false;
	            }else {
	                modifier = itemsData[i];
	                modifier.closed = true;
	            }
	            ownModifiers.push(modifier);
	        }
	        this.addProcessedElement(arr[i], i + 1);
	    }
	    len = ownStyles.length;
	    for(i=0;i<len;i+=1){
	        ownStyles[i].closed = true;
	    }
	    len = ownModifiers.length;
	    for(i=0;i<len;i+=1){
	        ownModifiers[i].closed = true;
	    }
	};

	SVGShapeElement.prototype.renderInnerContent = function() {
	    this.renderModifiers();
	    var i, len = this.stylesList.length;
	    for(i=0;i<len;i+=1){
	        this.stylesList[i].reset();
	    }
	    this.renderShape();

	    for (i = 0; i < len; i += 1) {
	        if (this.stylesList[i]._mdf || this._isFirstFrame) {
	            if(this.stylesList[i].msElem){
	                this.stylesList[i].msElem.setAttribute('d', this.stylesList[i].d);
	                //Adding M0 0 fixes same mask bug on all browsers
	                this.stylesList[i].d = 'M0 0' + this.stylesList[i].d;
	            }
	            this.stylesList[i].pElem.setAttribute('d', this.stylesList[i].d || 'M0 0');
	        }
	    }
	};

	SVGShapeElement.prototype.renderShape = function() {
	    var i, len = this.animatedContents.length;
	    var animatedContent;
	    for(i = 0; i < len; i += 1) {
	        animatedContent = this.animatedContents[i];
	        if((this._isFirstFrame || animatedContent.element._isAnimated) && animatedContent.data !== true) {
	            animatedContent.fn(animatedContent.data, animatedContent.element, this._isFirstFrame);
	        }
	    }
	};

	SVGShapeElement.prototype.destroy = function(){
	    this.destroyBaseElement();
	    this.shapesData = null;
	    this.itemsData = null;
	};

	function SVGTintFilter(filter, filterManager){
	    this.filterManager = filterManager;
	    var feColorMatrix = createNS('feColorMatrix');
	    feColorMatrix.setAttribute('type','matrix');
	    feColorMatrix.setAttribute('color-interpolation-filters','linearRGB');
	    feColorMatrix.setAttribute('values','0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0');
	    feColorMatrix.setAttribute('result','f1');
	    filter.appendChild(feColorMatrix);
	    feColorMatrix = createNS('feColorMatrix');
	    feColorMatrix.setAttribute('type','matrix');
	    feColorMatrix.setAttribute('color-interpolation-filters','sRGB');
	    feColorMatrix.setAttribute('values','1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0');
	    feColorMatrix.setAttribute('result','f2');
	    filter.appendChild(feColorMatrix);
	    this.matrixFilter = feColorMatrix;
	    if(filterManager.effectElements[2].p.v !== 100 || filterManager.effectElements[2].p.k){
	        var feMerge = createNS('feMerge');
	        filter.appendChild(feMerge);
	        var feMergeNode;
	        feMergeNode = createNS('feMergeNode');
	        feMergeNode.setAttribute('in','SourceGraphic');
	        feMerge.appendChild(feMergeNode);
	        feMergeNode = createNS('feMergeNode');
	        feMergeNode.setAttribute('in','f2');
	        feMerge.appendChild(feMergeNode);
	    }
	}

	SVGTintFilter.prototype.renderFrame = function(forceRender){
	    if(forceRender || this.filterManager._mdf){
	        var colorBlack = this.filterManager.effectElements[0].p.v;
	        var colorWhite = this.filterManager.effectElements[1].p.v;
	        var opacity = this.filterManager.effectElements[2].p.v/100;
	        this.matrixFilter.setAttribute('values',(colorWhite[0]- colorBlack[0])+' 0 0 0 '+ colorBlack[0] +' '+ (colorWhite[1]- colorBlack[1]) +' 0 0 0 '+ colorBlack[1] +' '+ (colorWhite[2]- colorBlack[2]) +' 0 0 0 '+ colorBlack[2] +' 0 0 0 ' + opacity + ' 0');
	    }
	};
	function SVGFillFilter(filter, filterManager){
	    this.filterManager = filterManager;
	    var feColorMatrix = createNS('feColorMatrix');
	    feColorMatrix.setAttribute('type','matrix');
	    feColorMatrix.setAttribute('color-interpolation-filters','sRGB');
	    feColorMatrix.setAttribute('values','1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0');
	    filter.appendChild(feColorMatrix);
	    this.matrixFilter = feColorMatrix;
	}
	SVGFillFilter.prototype.renderFrame = function(forceRender){
	    if(forceRender || this.filterManager._mdf){
	        var color = this.filterManager.effectElements[2].p.v;
	        var opacity = this.filterManager.effectElements[6].p.v;
	        this.matrixFilter.setAttribute('values','0 0 0 0 '+color[0]+' 0 0 0 0 '+color[1]+' 0 0 0 0 '+color[2]+' 0 0 0 '+opacity+' 0');
	    }
	};
	function SVGGaussianBlurEffect(filter, filterManager){
	    // Outset the filter region by 100% on all sides to accommodate blur expansion.
	    filter.setAttribute('x','-100%');
	    filter.setAttribute('y','-100%');
	    filter.setAttribute('width','300%');
	    filter.setAttribute('height','300%');

	    this.filterManager = filterManager;
	    var feGaussianBlur = createNS('feGaussianBlur');
	    filter.appendChild(feGaussianBlur);
	    this.feGaussianBlur = feGaussianBlur;
	}

	SVGGaussianBlurEffect.prototype.renderFrame = function(forceRender){
	    if(forceRender || this.filterManager._mdf){
	        // Empirical value, matching AE's blur appearance.
	        var kBlurrinessToSigma = 0.3;
	        var sigma = this.filterManager.effectElements[0].p.v * kBlurrinessToSigma;

	        // Dimensions mapping:
	        //
	        //   1 -> horizontal & vertical
	        //   2 -> horizontal only
	        //   3 -> vertical only
	        //
	        var dimensions = this.filterManager.effectElements[1].p.v;
	        var sigmaX = (dimensions == 3) ? 0 : sigma;
	        var sigmaY = (dimensions == 2) ? 0 : sigma;

	        this.feGaussianBlur.setAttribute('stdDeviation', sigmaX + " " + sigmaY);

	        // Repeat edges mapping:
	        //
	        //   0 -> off -> duplicate
	        //   1 -> on  -> wrap
	        var edgeMode = (this.filterManager.effectElements[2].p.v == 1) ? 'wrap' : 'duplicate';
	        this.feGaussianBlur.setAttribute('edgeMode', edgeMode);
	    }
	};
	function SVGStrokeEffect(elem, filterManager){
	    this.initialized = false;
	    this.filterManager = filterManager;
	    this.elem = elem;
	    this.paths = [];
	}

	SVGStrokeEffect.prototype.initialize = function(){

	    var elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;
	    var path,groupPath, i, len;
	    if(this.filterManager.effectElements[1].p.v === 1){
	        len = this.elem.maskManager.masksProperties.length;
	        i = 0;
	    } else {
	        i = this.filterManager.effectElements[0].p.v - 1;
	        len = i + 1;
	    }
	    groupPath = createNS('g'); 
	    groupPath.setAttribute('fill','none');
	    groupPath.setAttribute('stroke-linecap','round');
	    groupPath.setAttribute('stroke-dashoffset',1);
	    for(i;i<len;i+=1){
	        path = createNS('path');
	        groupPath.appendChild(path);
	        this.paths.push({p:path,m:i});
	    }
	    if(this.filterManager.effectElements[10].p.v === 3){
	        var mask = createNS('mask');
	        var id = createElementID();
	        mask.setAttribute('id',id);
	        mask.setAttribute('mask-type','alpha');
	        mask.appendChild(groupPath);
	        this.elem.globalData.defs.appendChild(mask);
	        var g = createNS('g');
	        g.setAttribute('mask','url(' + locationHref + '#'+id+')');
	        while (elemChildren[0]) {
	            g.appendChild(elemChildren[0]);
	        }
	        this.elem.layerElement.appendChild(g);
	        this.masker = mask;
	        groupPath.setAttribute('stroke','#fff');
	    } else if(this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2){
	        if(this.filterManager.effectElements[10].p.v === 2){
	            elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;
	            while(elemChildren.length){
	                this.elem.layerElement.removeChild(elemChildren[0]);
	            }
	        }
	        this.elem.layerElement.appendChild(groupPath);
	        this.elem.layerElement.removeAttribute('mask');
	        groupPath.setAttribute('stroke','#fff');
	    }
	    this.initialized = true;
	    this.pathMasker = groupPath;
	};

	SVGStrokeEffect.prototype.renderFrame = function(forceRender){
	    if(!this.initialized){
	        this.initialize();
	    }
	    var i, len = this.paths.length;
	    var mask, path;
	    for(i=0;i<len;i+=1){
	        if(this.paths[i].m === -1) {
	            continue;
	        }
	        mask = this.elem.maskManager.viewData[this.paths[i].m];
	        path = this.paths[i].p;
	        if(forceRender || this.filterManager._mdf || mask.prop._mdf){
	            path.setAttribute('d',mask.lastPath);
	        }
	        if(forceRender || this.filterManager.effectElements[9].p._mdf || this.filterManager.effectElements[4].p._mdf || this.filterManager.effectElements[7].p._mdf || this.filterManager.effectElements[8].p._mdf || mask.prop._mdf){
	            var dasharrayValue;
	            if(this.filterManager.effectElements[7].p.v !== 0 || this.filterManager.effectElements[8].p.v !== 100){
	                var s = Math.min(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v)/100;
	                var e = Math.max(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v)/100;
	                var l = path.getTotalLength();
	                dasharrayValue = '0 0 0 ' + l*s + ' ';
	                var lineLength = l*(e-s);
	                var segment = 1+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v/100;
	                var units = Math.floor(lineLength/segment);
	                var j;
	                for(j=0;j<units;j+=1){
	                    dasharrayValue += '1 ' + this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v/100 + ' ';
	                }
	                dasharrayValue += '0 ' + l*10 + ' 0 0';
	            } else {
	                dasharrayValue = '1 ' + this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v/100;
	            }
	            path.setAttribute('stroke-dasharray',dasharrayValue);
	        }
	    }
	    if(forceRender || this.filterManager.effectElements[4].p._mdf){
	        this.pathMasker.setAttribute('stroke-width',this.filterManager.effectElements[4].p.v*2);
	    }
	    
	    if(forceRender || this.filterManager.effectElements[6].p._mdf){
	        this.pathMasker.setAttribute('opacity',this.filterManager.effectElements[6].p.v);
	    }
	    if(this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2){
	        if(forceRender || this.filterManager.effectElements[3].p._mdf){
	            var color = this.filterManager.effectElements[3].p.v;
	            this.pathMasker.setAttribute('stroke','rgb('+bm_floor(color[0]*255)+','+bm_floor(color[1]*255)+','+bm_floor(color[2]*255)+')');
	        }
	    }
	};
	function SVGTritoneFilter(filter, filterManager){
	    this.filterManager = filterManager;
	    var feColorMatrix = createNS('feColorMatrix');
	    feColorMatrix.setAttribute('type','matrix');
	    feColorMatrix.setAttribute('color-interpolation-filters','linearRGB');
	    feColorMatrix.setAttribute('values','0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0');
	    feColorMatrix.setAttribute('result','f1');
	    filter.appendChild(feColorMatrix);
	    var feComponentTransfer = createNS('feComponentTransfer');
	    feComponentTransfer.setAttribute('color-interpolation-filters','sRGB');
	    filter.appendChild(feComponentTransfer);
	    this.matrixFilter = feComponentTransfer;
	    var feFuncR = createNS('feFuncR');
	    feFuncR.setAttribute('type','table');
	    feComponentTransfer.appendChild(feFuncR);
	    this.feFuncR = feFuncR;
	    var feFuncG = createNS('feFuncG');
	    feFuncG.setAttribute('type','table');
	    feComponentTransfer.appendChild(feFuncG);
	    this.feFuncG = feFuncG;
	    var feFuncB = createNS('feFuncB');
	    feFuncB.setAttribute('type','table');
	    feComponentTransfer.appendChild(feFuncB);
	    this.feFuncB = feFuncB;
	}

	SVGTritoneFilter.prototype.renderFrame = function(forceRender){
	    if(forceRender || this.filterManager._mdf){
	        var color1 = this.filterManager.effectElements[0].p.v;
	        var color2 = this.filterManager.effectElements[1].p.v;
	        var color3 = this.filterManager.effectElements[2].p.v;
	        var tableR = color3[0] + ' ' + color2[0] + ' ' + color1[0];
	        var tableG = color3[1] + ' ' + color2[1] + ' ' + color1[1];
	        var tableB = color3[2] + ' ' + color2[2] + ' ' + color1[2];
	        this.feFuncR.setAttribute('tableValues', tableR);
	        this.feFuncG.setAttribute('tableValues', tableG);
	        this.feFuncB.setAttribute('tableValues', tableB);
	        //var opacity = this.filterManager.effectElements[2].p.v/100;
	        //this.matrixFilter.setAttribute('values',(colorWhite[0]- colorBlack[0])+' 0 0 0 '+ colorBlack[0] +' '+ (colorWhite[1]- colorBlack[1]) +' 0 0 0 '+ colorBlack[1] +' '+ (colorWhite[2]- colorBlack[2]) +' 0 0 0 '+ colorBlack[2] +' 0 0 0 ' + opacity + ' 0');
	    }
	};
	function SVGProLevelsFilter(filter, filterManager){
	    this.filterManager = filterManager;
	    var effectElements = this.filterManager.effectElements;
	    var feComponentTransfer = createNS('feComponentTransfer');
	    
	    if(effectElements[10].p.k || effectElements[10].p.v !== 0 || effectElements[11].p.k || effectElements[11].p.v !== 1 || effectElements[12].p.k || effectElements[12].p.v !== 1 || effectElements[13].p.k || effectElements[13].p.v !== 0 || effectElements[14].p.k || effectElements[14].p.v !== 1){
	        this.feFuncR = this.createFeFunc('feFuncR', feComponentTransfer);
	    }
	    if(effectElements[17].p.k || effectElements[17].p.v !== 0 || effectElements[18].p.k || effectElements[18].p.v !== 1 || effectElements[19].p.k || effectElements[19].p.v !== 1 || effectElements[20].p.k || effectElements[20].p.v !== 0 || effectElements[21].p.k || effectElements[21].p.v !== 1){
	        this.feFuncG = this.createFeFunc('feFuncG', feComponentTransfer);
	    }
	    if(effectElements[24].p.k || effectElements[24].p.v !== 0 || effectElements[25].p.k || effectElements[25].p.v !== 1 || effectElements[26].p.k || effectElements[26].p.v !== 1 || effectElements[27].p.k || effectElements[27].p.v !== 0 || effectElements[28].p.k || effectElements[28].p.v !== 1){
	        this.feFuncB = this.createFeFunc('feFuncB', feComponentTransfer);
	    }
	    if(effectElements[31].p.k || effectElements[31].p.v !== 0 || effectElements[32].p.k || effectElements[32].p.v !== 1 || effectElements[33].p.k || effectElements[33].p.v !== 1 || effectElements[34].p.k || effectElements[34].p.v !== 0 || effectElements[35].p.k || effectElements[35].p.v !== 1){
	        this.feFuncA = this.createFeFunc('feFuncA', feComponentTransfer);
	    }
	    
	    if(this.feFuncR || this.feFuncG || this.feFuncB || this.feFuncA){
	        feComponentTransfer.setAttribute('color-interpolation-filters','sRGB');
	        filter.appendChild(feComponentTransfer);
	        feComponentTransfer = createNS('feComponentTransfer');
	    }

	    if(effectElements[3].p.k || effectElements[3].p.v !== 0 || effectElements[4].p.k || effectElements[4].p.v !== 1 || effectElements[5].p.k || effectElements[5].p.v !== 1 || effectElements[6].p.k || effectElements[6].p.v !== 0 || effectElements[7].p.k || effectElements[7].p.v !== 1){

	        feComponentTransfer.setAttribute('color-interpolation-filters','sRGB');
	        filter.appendChild(feComponentTransfer);
	        this.feFuncRComposed = this.createFeFunc('feFuncR', feComponentTransfer);
	        this.feFuncGComposed = this.createFeFunc('feFuncG', feComponentTransfer);
	        this.feFuncBComposed = this.createFeFunc('feFuncB', feComponentTransfer);
	    }
	}

	SVGProLevelsFilter.prototype.createFeFunc = function(type, feComponentTransfer) {
	    var feFunc = createNS(type);
	    feFunc.setAttribute('type','table');
	    feComponentTransfer.appendChild(feFunc);
	    return feFunc;
	};

	SVGProLevelsFilter.prototype.getTableValue = function(inputBlack, inputWhite, gamma, outputBlack, outputWhite) {
	    var cnt = 0;
	    var segments = 256;
	    var perc;
	    var min = Math.min(inputBlack, inputWhite);
	    var max = Math.max(inputBlack, inputWhite);
	    var table = Array.call(null,{length:segments});
	    var colorValue;
	    var pos = 0;
	    var outputDelta = outputWhite - outputBlack; 
	    var inputDelta = inputWhite - inputBlack; 
	    while(cnt <= 256) {
	        perc = cnt/256;
	        if(perc <= min){
	            colorValue = inputDelta < 0 ? outputWhite : outputBlack;
	        } else if(perc >= max){
	            colorValue = inputDelta < 0 ? outputBlack : outputWhite;
	        } else {
	            colorValue = (outputBlack + outputDelta * Math.pow((perc - inputBlack) / inputDelta, 1 / gamma));
	        }
	        table[pos++] = colorValue;
	        cnt += 256/(segments-1);
	    }
	    return table.join(' ');
	};

	SVGProLevelsFilter.prototype.renderFrame = function(forceRender){
	    if(forceRender || this.filterManager._mdf){
	        var val;
	        var effectElements = this.filterManager.effectElements;
	        if(this.feFuncRComposed && (forceRender || effectElements[3].p._mdf || effectElements[4].p._mdf || effectElements[5].p._mdf || effectElements[6].p._mdf || effectElements[7].p._mdf)){
	            val = this.getTableValue(effectElements[3].p.v,effectElements[4].p.v,effectElements[5].p.v,effectElements[6].p.v,effectElements[7].p.v);
	            this.feFuncRComposed.setAttribute('tableValues',val);
	            this.feFuncGComposed.setAttribute('tableValues',val);
	            this.feFuncBComposed.setAttribute('tableValues',val);
	        }


	        if(this.feFuncR && (forceRender || effectElements[10].p._mdf || effectElements[11].p._mdf || effectElements[12].p._mdf || effectElements[13].p._mdf || effectElements[14].p._mdf)){
	            val = this.getTableValue(effectElements[10].p.v,effectElements[11].p.v,effectElements[12].p.v,effectElements[13].p.v,effectElements[14].p.v);
	            this.feFuncR.setAttribute('tableValues',val);
	        }

	        if(this.feFuncG && (forceRender || effectElements[17].p._mdf || effectElements[18].p._mdf || effectElements[19].p._mdf || effectElements[20].p._mdf || effectElements[21].p._mdf)){
	            val = this.getTableValue(effectElements[17].p.v,effectElements[18].p.v,effectElements[19].p.v,effectElements[20].p.v,effectElements[21].p.v);
	            this.feFuncG.setAttribute('tableValues',val);
	        }

	        if(this.feFuncB && (forceRender || effectElements[24].p._mdf || effectElements[25].p._mdf || effectElements[26].p._mdf || effectElements[27].p._mdf || effectElements[28].p._mdf)){
	            val = this.getTableValue(effectElements[24].p.v,effectElements[25].p.v,effectElements[26].p.v,effectElements[27].p.v,effectElements[28].p.v);
	            this.feFuncB.setAttribute('tableValues',val);
	        }

	        if(this.feFuncA && (forceRender || effectElements[31].p._mdf || effectElements[32].p._mdf || effectElements[33].p._mdf || effectElements[34].p._mdf || effectElements[35].p._mdf)){
	            val = this.getTableValue(effectElements[31].p.v,effectElements[32].p.v,effectElements[33].p.v,effectElements[34].p.v,effectElements[35].p.v);
	            this.feFuncA.setAttribute('tableValues',val);
	        }
	        
	    }
	};
	function SVGDropShadowEffect(filter, filterManager) {
	    var filterSize = filterManager.container.globalData.renderConfig.filterSize;
	    filter.setAttribute('x', filterSize.x);
	    filter.setAttribute('y', filterSize.y);
	    filter.setAttribute('width', filterSize.width);
	    filter.setAttribute('height', filterSize.height);
	    this.filterManager = filterManager;

	    var feGaussianBlur = createNS('feGaussianBlur');
	    feGaussianBlur.setAttribute('in','SourceAlpha');
	    feGaussianBlur.setAttribute('result','drop_shadow_1');
	    feGaussianBlur.setAttribute('stdDeviation','0');
	    this.feGaussianBlur = feGaussianBlur;
	    filter.appendChild(feGaussianBlur);

	    var feOffset = createNS('feOffset');
	    feOffset.setAttribute('dx','25');
	    feOffset.setAttribute('dy','0');
	    feOffset.setAttribute('in','drop_shadow_1');
	    feOffset.setAttribute('result','drop_shadow_2');
	    this.feOffset = feOffset;
	    filter.appendChild(feOffset);
	    var feFlood = createNS('feFlood');
	    feFlood.setAttribute('flood-color','#00ff00');
	    feFlood.setAttribute('flood-opacity','1');
	    feFlood.setAttribute('result','drop_shadow_3');
	    this.feFlood = feFlood;
	    filter.appendChild(feFlood);

	    var feComposite = createNS('feComposite');
	    feComposite.setAttribute('in','drop_shadow_3');
	    feComposite.setAttribute('in2','drop_shadow_2');
	    feComposite.setAttribute('operator','in');
	    feComposite.setAttribute('result','drop_shadow_4');
	    filter.appendChild(feComposite);


	    var feMerge = createNS('feMerge');
	    filter.appendChild(feMerge);
	    var feMergeNode;
	    feMergeNode = createNS('feMergeNode');
	    feMerge.appendChild(feMergeNode);
	    feMergeNode = createNS('feMergeNode');
	    feMergeNode.setAttribute('in','SourceGraphic');
	    this.feMergeNode = feMergeNode;
	    this.feMerge = feMerge;
	    this.originalNodeAdded = false;
	    feMerge.appendChild(feMergeNode);
	}

	SVGDropShadowEffect.prototype.renderFrame = function(forceRender){
	    if(forceRender || this.filterManager._mdf){
	        if(forceRender || this.filterManager.effectElements[4].p._mdf){
	            this.feGaussianBlur.setAttribute('stdDeviation', this.filterManager.effectElements[4].p.v / 4);
	        }
	        if(forceRender || this.filterManager.effectElements[0].p._mdf){
	            var col = this.filterManager.effectElements[0].p.v;
	            this.feFlood.setAttribute('flood-color',rgbToHex(Math.round(col[0]*255),Math.round(col[1]*255),Math.round(col[2]*255)));
	        }
	        if(forceRender || this.filterManager.effectElements[1].p._mdf){
	            this.feFlood.setAttribute('flood-opacity',this.filterManager.effectElements[1].p.v/255);
	        }
	        if(forceRender || this.filterManager.effectElements[2].p._mdf || this.filterManager.effectElements[3].p._mdf){
	            var distance = this.filterManager.effectElements[3].p.v;
	            var angle = (this.filterManager.effectElements[2].p.v - 90) * degToRads;
	            var x = distance * Math.cos(angle);
	            var y = distance * Math.sin(angle);
	            this.feOffset.setAttribute('dx', x);
	            this.feOffset.setAttribute('dy', y);
	        }
	        /*if(forceRender || this.filterManager.effectElements[5].p._mdf){
	            if(this.filterManager.effectElements[5].p.v === 1 && this.originalNodeAdded) {
	                this.feMerge.removeChild(this.feMergeNode);
	                this.originalNodeAdded = false;
	            } else if(this.filterManager.effectElements[5].p.v === 0 && !this.originalNodeAdded) {
	                this.feMerge.appendChild(this.feMergeNode);
	                this.originalNodeAdded = true;
	            }
	        }*/
	    }
	};
	var _svgMatteSymbols = [];

	function SVGMatte3Effect(filterElem, filterManager, elem){
	    this.initialized = false;
	    this.filterManager = filterManager;
	    this.filterElem = filterElem;
	    this.elem = elem;
	    elem.matteElement = createNS('g');
	    elem.matteElement.appendChild(elem.layerElement);
	    elem.matteElement.appendChild(elem.transformedElement);
	    elem.baseElement = elem.matteElement;
	}

	SVGMatte3Effect.prototype.findSymbol = function(mask) {
	    var i = 0, len = _svgMatteSymbols.length;
	    while(i < len) {
	        if(_svgMatteSymbols[i] === mask) {
	            return _svgMatteSymbols[i];
	        }
	        i += 1;
	    }
	    return null;
	};

	SVGMatte3Effect.prototype.replaceInParent = function(mask, symbolId) {
	    var parentNode = mask.layerElement.parentNode;
	    if(!parentNode) {
	        return;
	    }
	    var children = parentNode.children;
	    var i = 0, len = children.length;
	    while (i < len) {
	        if (children[i] === mask.layerElement) {
	            break;
	        }
	        i += 1;
	    }
	    var nextChild;
	    if (i <= len - 2) {
	        nextChild = children[i + 1];
	    }
	    var useElem = createNS('use');
	    useElem.setAttribute('href', '#' + symbolId);
	    if(nextChild) {
	        parentNode.insertBefore(useElem, nextChild);
	    } else {
	        parentNode.appendChild(useElem);
	    }
	};

	SVGMatte3Effect.prototype.setElementAsMask = function(elem, mask) {
	    if(!this.findSymbol(mask)) {
	        var symbolId = createElementID();
	        var masker = createNS('mask');
	        masker.setAttribute('id', mask.layerId);
	        masker.setAttribute('mask-type', 'alpha');
	        _svgMatteSymbols.push(mask);
	        var defs = elem.globalData.defs;
	        defs.appendChild(masker);
	        var symbol = createNS('symbol');
	        symbol.setAttribute('id', symbolId);
	        this.replaceInParent(mask, symbolId);
	        symbol.appendChild(mask.layerElement);
	        defs.appendChild(symbol);
	        var useElem = createNS('use');
	        useElem.setAttribute('href', '#' + symbolId);
	        masker.appendChild(useElem);
	        mask.data.hd = false;
	        mask.show();
	    }
	    elem.setMatte(mask.layerId);
	};

	SVGMatte3Effect.prototype.initialize = function() {
	    var ind = this.filterManager.effectElements[0].p.v;
	    var elements = this.elem.comp.elements;
	    var i = 0, len = elements.length;
	    while (i < len) {
	    	if (elements[i] && elements[i].data.ind === ind) {
	    		this.setElementAsMask(this.elem, elements[i]);
	    	}
	    	i += 1;
	    }
	    this.initialized = true;
	};

	SVGMatte3Effect.prototype.renderFrame = function() {
		if(!this.initialized) {
			this.initialize();
		}
	};
	function SVGEffects(elem){
	    var i, len = elem.data.ef ? elem.data.ef.length : 0;
	    var filId = createElementID();
	    var fil = filtersFactory.createFilter(filId);
	    var count = 0;
	    this.filters = [];
	    var filterManager;
	    for(i=0;i<len;i+=1){
	        filterManager = null;
	        if(elem.data.ef[i].ty === 20){
	            count += 1;
	            filterManager = new SVGTintFilter(fil, elem.effectsManager.effectElements[i]);
	        }else if(elem.data.ef[i].ty === 21){
	            count += 1;
	            filterManager = new SVGFillFilter(fil, elem.effectsManager.effectElements[i]);
	        }else if(elem.data.ef[i].ty === 22){
	            filterManager = new SVGStrokeEffect(elem, elem.effectsManager.effectElements[i]);
	        }else if(elem.data.ef[i].ty === 23){
	            count += 1;
	            filterManager = new SVGTritoneFilter(fil, elem.effectsManager.effectElements[i]);
	        }else if(elem.data.ef[i].ty === 24){
	            count += 1;
	            filterManager = new SVGProLevelsFilter(fil, elem.effectsManager.effectElements[i]);
	        }else if(elem.data.ef[i].ty === 25){
	            count += 1;
	            filterManager = new SVGDropShadowEffect(fil, elem.effectsManager.effectElements[i]);
	        }else if(elem.data.ef[i].ty === 28){
	            //count += 1;
	            filterManager = new SVGMatte3Effect(fil, elem.effectsManager.effectElements[i], elem);
	        }else if(elem.data.ef[i].ty === 29){
	            count += 1;
	            filterManager = new SVGGaussianBlurEffect(fil, elem.effectsManager.effectElements[i]);
	        }
	        if(filterManager) {
	            this.filters.push(filterManager);
	        }
	    }
	    if(count){
	        elem.globalData.defs.appendChild(fil);
	        elem.layerElement.setAttribute('filter','url(' + locationHref + '#'+filId+')');
	    }
	    if (this.filters.length) {
	        elem.addRenderableComponent(this);
	    }
	}

	SVGEffects.prototype.renderFrame = function(_isFirstFrame){
	    var i, len = this.filters.length;
	    for(i=0;i<len;i+=1){
	        this.filters[i].renderFrame(_isFirstFrame);
	    }
	};
	function CVContextData() {
		this.saved = [];
	    this.cArrPos = 0;
	    this.cTr = new Matrix();
	    this.cO = 1;
	    var i, len = 15;
	    this.savedOp = createTypedArray('float32', len);
	    for(i=0;i<len;i+=1){
	        this.saved[i] = createTypedArray('float32', 16);
	    }
	    this._length = len;
	}

	CVContextData.prototype.duplicate = function() {
		var newLength = this._length * 2;
		var currentSavedOp = this.savedOp;
	    this.savedOp = createTypedArray('float32', newLength);
	    this.savedOp.set(currentSavedOp);
	    var i = 0;
	    for(i = this._length; i < newLength; i += 1) {
	        this.saved[i] = createTypedArray('float32', 16);
	    }
	    this._length = newLength;
	};

	CVContextData.prototype.reset = function() {
		this.cArrPos = 0;
		this.cTr.reset();
	    this.cO = 1;
	};
	function CVBaseElement(){
	}

	CVBaseElement.prototype = {
	    createElements: function(){},
	    initRendererElement: function(){},
	    createContainerElements: function(){
	        this.canvasContext = this.globalData.canvasContext;
	        this.renderableEffectsManager = new CVEffects(this);
	    },
	    createContent: function(){},
	    setBlendMode: function(){
	        var globalData = this.globalData;
	        if(globalData.blendMode !== this.data.bm) {
	            globalData.blendMode = this.data.bm;
	            var blendModeValue = getBlendMode(this.data.bm);
	            globalData.canvasContext.globalCompositeOperation = blendModeValue;
	        }
	    },
	    createRenderableComponents: function(){
	        this.maskManager = new CVMaskElement(this.data, this);
	    },
	    hideElement: function(){
	        if (!this.hidden && (!this.isInRange || this.isTransparent)) {
	            this.hidden = true;
	        }
	    },
	    showElement: function(){
	        if (this.isInRange && !this.isTransparent){
	            this.hidden = false;
	            this._isFirstFrame = true;
	            this.maskManager._isFirstFrame = true;
	        }
	    },
	    renderFrame: function() {
	        if (this.hidden || this.data.hd) {
	            return;
	        }
	        this.renderTransform();
	        this.renderRenderable();
	        this.setBlendMode();
	        var forceRealStack = this.data.ty === 0;
	        this.globalData.renderer.save(forceRealStack);
	        this.globalData.renderer.ctxTransform(this.finalTransform.mat.props);
	        this.globalData.renderer.ctxOpacity(this.finalTransform.mProp.o.v);
	        this.renderInnerContent();
	        this.globalData.renderer.restore(forceRealStack);
	        if(this.maskManager.hasMasks) {
	            this.globalData.renderer.restore(true);
	        }
	        if (this._isFirstFrame) {
	            this._isFirstFrame = false;
	        }
	    },
	    destroy: function(){
	        this.canvasContext = null;
	        this.data = null;
	        this.globalData = null;
	        this.maskManager.destroy();
	    },
	    mHelper: new Matrix()
	};
	CVBaseElement.prototype.hide = CVBaseElement.prototype.hideElement;
	CVBaseElement.prototype.show = CVBaseElement.prototype.showElement;

	function CVImageElement(data, globalData, comp){
	    this.assetData = globalData.getAssetData(data.refId);
	    this.img = globalData.imageLoader.getImage(this.assetData);
	    this.initElement(data,globalData,comp);
	}
	extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement], CVImageElement);

	CVImageElement.prototype.initElement = SVGShapeElement.prototype.initElement;
	CVImageElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame;

	CVImageElement.prototype.createContent = function(){

	    if (this.img.width && (this.assetData.w !== this.img.width || this.assetData.h !== this.img.height)) {
	        var canvas = createTag('canvas');
	        canvas.width = this.assetData.w;
	        canvas.height = this.assetData.h;
	        var ctx = canvas.getContext('2d');

	        var imgW = this.img.width;
	        var imgH = this.img.height;
	        var imgRel = imgW / imgH;
	        var canvasRel = this.assetData.w/this.assetData.h;
	        var widthCrop, heightCrop;
	        var par = this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio;
	        if((imgRel > canvasRel && par === 'xMidYMid slice') || (imgRel < canvasRel && par !== 'xMidYMid slice')) {
	            heightCrop = imgH;
	            widthCrop = heightCrop*canvasRel;
	        } else {
	            widthCrop = imgW;
	            heightCrop = widthCrop/canvasRel;
	        }
	        ctx.drawImage(this.img,(imgW-widthCrop)/2,(imgH-heightCrop)/2,widthCrop,heightCrop,0,0,this.assetData.w,this.assetData.h);
	        this.img = canvas;
	    }

	};

	CVImageElement.prototype.renderInnerContent = function(parentMatrix){
	    this.canvasContext.drawImage(this.img, 0, 0);
	};

	CVImageElement.prototype.destroy = function(){
	    this.img = null;
	};
	function CVCompElement(data, globalData, comp) {
	    this.completeLayers = false;
	    this.layers = data.layers;
	    this.pendingElements = [];
	    this.elements = createSizedArray(this.layers.length);
	    this.initElement(data, globalData, comp);
	    this.tm = data.tm ? PropertyFactory.getProp(this,data.tm,0,globalData.frameRate, this) : {_placeholder:true};
	}

	extendPrototype([CanvasRenderer, ICompElement, CVBaseElement], CVCompElement);

	CVCompElement.prototype.renderInnerContent = function() {
	    var ctx = this.canvasContext;
	    ctx.beginPath();
	    ctx.moveTo(0, 0);
	    ctx.lineTo(this.data.w, 0);
	    ctx.lineTo(this.data.w, this.data.h);
	    ctx.lineTo(0, this.data.h);
	    ctx.lineTo(0, 0);
	    ctx.clip();
	    var i,len = this.layers.length;
	    for( i = len - 1; i >= 0; i -= 1 ){
	        if(this.completeLayers || this.elements[i]){
	            this.elements[i].renderFrame();
	        }
	    }
	};

	CVCompElement.prototype.destroy = function(){
	    var i,len = this.layers.length;
	    for( i = len - 1; i >= 0; i -= 1 ){
	        if(this.elements[i]) {
	            this.elements[i].destroy();
	        }
	    }
	    this.layers = null;
	    this.elements = null;
	};

	function CVMaskElement(data,element){
	    this.data = data;
	    this.element = element;
	    this.masksProperties = this.data.masksProperties || [];
	    this.viewData = createSizedArray(this.masksProperties.length);
	    var i, len = this.masksProperties.length, hasMasks = false;
	    for (i = 0; i < len; i++) {
	        if(this.masksProperties[i].mode !== 'n'){
	            hasMasks = true;
	        }
	        this.viewData[i] = ShapePropertyFactory.getShapeProp(this.element,this.masksProperties[i],3);
	    }
	    this.hasMasks = hasMasks;
	    if(hasMasks) {
	        this.element.addRenderableComponent(this);
	    }
	}

	CVMaskElement.prototype.renderFrame = function () {
	    if(!this.hasMasks){
	        return;
	    }
	    var transform = this.element.finalTransform.mat;
	    var ctx = this.element.canvasContext;
	    var i, len = this.masksProperties.length;
	    var pt,pts,data;
	    ctx.beginPath();
	    for (i = 0; i < len; i++) {
	        if(this.masksProperties[i].mode !== 'n'){
	            if (this.masksProperties[i].inv) {
	                ctx.moveTo(0, 0);
	                ctx.lineTo(this.element.globalData.compSize.w, 0);
	                ctx.lineTo(this.element.globalData.compSize.w, this.element.globalData.compSize.h);
	                ctx.lineTo(0, this.element.globalData.compSize.h);
	                ctx.lineTo(0, 0);
	            }
	            data = this.viewData[i].v;
	            pt = transform.applyToPointArray(data.v[0][0],data.v[0][1],0);
	            ctx.moveTo(pt[0], pt[1]);
	            var j, jLen = data._length;
	            for (j = 1; j < jLen; j++) {
	                pts = transform.applyToTriplePoints(data.o[j - 1], data.i[j], data.v[j]);
	                ctx.bezierCurveTo(pts[0], pts[1], pts[2], pts[3], pts[4], pts[5]);
	            }
	            pts = transform.applyToTriplePoints(data.o[j - 1], data.i[0], data.v[0]);
	            ctx.bezierCurveTo(pts[0], pts[1], pts[2], pts[3], pts[4], pts[5]);
	        }
	    }
	    this.element.globalData.renderer.save(true);
	    ctx.clip();
	};

	CVMaskElement.prototype.getMaskProperty = MaskElement.prototype.getMaskProperty;

	CVMaskElement.prototype.destroy = function(){
	    this.element = null;
	};
	function CVShapeElement(data, globalData, comp) {
	    this.shapes = [];
	    this.shapesData = data.shapes;
	    this.stylesList = [];
	    this.itemsData = [];
	    this.prevViewData = [];
	    this.shapeModifiers = [];
	    this.processedElements = [];
	    this.transformsManager = new ShapeTransformManager();
	    this.initElement(data, globalData, comp);
	}

	extendPrototype([BaseElement,TransformElement,CVBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableElement], CVShapeElement);

	CVShapeElement.prototype.initElement = RenderableDOMElement.prototype.initElement;

	CVShapeElement.prototype.transformHelper = {opacity:1,_opMdf:false};

	CVShapeElement.prototype.dashResetter = [];

	CVShapeElement.prototype.createContent = function(){
	    this.searchShapes(this.shapesData,this.itemsData,this.prevViewData, true, []);
	};

	CVShapeElement.prototype.createStyleElement = function(data, transforms) {
	    var styleElem = {
	        data: data,
	        type: data.ty,
	        preTransforms: this.transformsManager.addTransformSequence(transforms),
	        transforms: [],
	        elements: [],
	        closed: data.hd === true
	    };
	    var elementData = {};
	    if(data.ty == 'fl' || data.ty == 'st'){
	        elementData.c = PropertyFactory.getProp(this,data.c,1,255,this);
	        if(!elementData.c.k){
	            styleElem.co = 'rgb('+bm_floor(elementData.c.v[0])+','+bm_floor(elementData.c.v[1])+','+bm_floor(elementData.c.v[2])+')';
	        }
	    } else if (data.ty === 'gf' || data.ty === 'gs') {
	        elementData.s = PropertyFactory.getProp(this,data.s,1,null,this);
	        elementData.e = PropertyFactory.getProp(this,data.e,1,null,this);
	        elementData.h = PropertyFactory.getProp(this,data.h||{k:0},0,0.01,this);
	        elementData.a = PropertyFactory.getProp(this,data.a||{k:0},0,degToRads,this);
	        elementData.g = new GradientProperty(this,data.g,this);
	    }
	    elementData.o = PropertyFactory.getProp(this,data.o,0,0.01,this);
	    if(data.ty == 'st' || data.ty == 'gs') {
	        styleElem.lc = this.lcEnum[data.lc] || 'round';
	        styleElem.lj = this.ljEnum[data.lj] || 'round';
	        if(data.lj == 1) {
	            styleElem.ml = data.ml;
	        }
	        elementData.w = PropertyFactory.getProp(this,data.w,0,null,this);
	        if(!elementData.w.k){
	            styleElem.wi = elementData.w.v;
	        }
	        if(data.d){
	            var d = new DashProperty(this,data.d,'canvas', this);
	            elementData.d = d;
	            if(!elementData.d.k){
	                styleElem.da = elementData.d.dashArray;
	                styleElem.do = elementData.d.dashoffset[0];
	            }
	        }
	    } else {
	        styleElem.r = data.r === 2 ? 'evenodd' : 'nonzero';
	    }
	    this.stylesList.push(styleElem);
	    elementData.style = styleElem;
	    return elementData;
	};

	CVShapeElement.prototype.createGroupElement = function(data) {
	    var elementData = {
	        it: [],
	        prevViewData: []
	    };
	    return elementData;
	};

	CVShapeElement.prototype.createTransformElement = function(data) {
	    var elementData = {
	        transform : {
	            opacity: 1,
	            _opMdf:false,
	            key: this.transformsManager.getNewKey(),
	            op: PropertyFactory.getProp(this,data.o,0,0.01,this),
	            mProps: TransformPropertyFactory.getTransformProperty(this,data,this)
	        }
	    };
	    return elementData;
	};

	CVShapeElement.prototype.createShapeElement = function(data) {
	    var elementData = new CVShapeData(this, data, this.stylesList, this.transformsManager);
	    
	    this.shapes.push(elementData);
	    this.addShapeToModifiers(elementData);
	    return elementData;
	};

	CVShapeElement.prototype.reloadShapes = function() {
	    this._isFirstFrame = true;
	    var i, len = this.itemsData.length;
	    for (i = 0; i < len; i += 1) {
	        this.prevViewData[i] = this.itemsData[i];
	    }
	    this.searchShapes(this.shapesData,this.itemsData,this.prevViewData, true, []);
	    len = this.dynamicProperties.length;
	    for (i = 0; i < len; i += 1) {
	        this.dynamicProperties[i].getValue();
	    }
	    this.renderModifiers();
	    this.transformsManager.processSequences(this._isFirstFrame);
	};

	CVShapeElement.prototype.addTransformToStyleList = function(transform) {
	    var i, len = this.stylesList.length;
	    for (i = 0; i < len; i += 1) {
	        if(!this.stylesList[i].closed) {
	            this.stylesList[i].transforms.push(transform);
	        }
	    }
	};

	CVShapeElement.prototype.removeTransformFromStyleList = function() {
	    var i, len = this.stylesList.length;
	    for (i = 0; i < len; i += 1) {
	        if(!this.stylesList[i].closed) {
	            this.stylesList[i].transforms.pop();
	        }
	    }
	};

	CVShapeElement.prototype.closeStyles = function(styles) {
	    var i, len = styles.length;
	    for (i = 0; i < len; i += 1) {
	        styles[i].closed = true;
	    }
	};

	CVShapeElement.prototype.searchShapes = function(arr,itemsData, prevViewData, shouldRender, transforms){
	    var i, len = arr.length - 1;
	    var j, jLen;
	    var ownStyles = [], ownModifiers = [], processedPos, modifier, currentTransform;
	    var ownTransforms = [].concat(transforms);
	    for(i=len;i>=0;i-=1){
	        processedPos = this.searchProcessedElement(arr[i]);
	        if(!processedPos){
	            arr[i]._shouldRender = shouldRender;
	        } else {
	            itemsData[i] = prevViewData[processedPos - 1];
	        }
	        if(arr[i].ty == 'fl' || arr[i].ty == 'st'|| arr[i].ty == 'gf'|| arr[i].ty == 'gs'){
	            if(!processedPos){
	                itemsData[i] = this.createStyleElement(arr[i], ownTransforms);
	            } else {
	                itemsData[i].style.closed = false;
	            }
	            
	            ownStyles.push(itemsData[i].style);
	        }else if(arr[i].ty == 'gr'){
	            if(!processedPos){
	                itemsData[i] = this.createGroupElement(arr[i]);
	            } else {
	                jLen = itemsData[i].it.length;
	                for(j=0;j<jLen;j+=1){
	                    itemsData[i].prevViewData[j] = itemsData[i].it[j];
	                }
	            }
	            this.searchShapes(arr[i].it,itemsData[i].it,itemsData[i].prevViewData, shouldRender, ownTransforms);
	        }else if(arr[i].ty == 'tr'){
	            if(!processedPos){
	                currentTransform = this.createTransformElement(arr[i]);
	                itemsData[i] = currentTransform;
	            }
	            ownTransforms.push(itemsData[i]);
	            this.addTransformToStyleList(itemsData[i]);
	        }else if(arr[i].ty == 'sh' || arr[i].ty == 'rc' || arr[i].ty == 'el' || arr[i].ty == 'sr'){
	            if(!processedPos){
	                itemsData[i] = this.createShapeElement(arr[i]);
	            }
	            
	        }else if(arr[i].ty == 'tm' || arr[i].ty == 'rd' || arr[i].ty == 'pb'){
	            if(!processedPos){
	                modifier = ShapeModifiers.getModifier(arr[i].ty);
	                modifier.init(this,arr[i]);
	                itemsData[i] = modifier;
	                this.shapeModifiers.push(modifier);
	            } else {
	                modifier = itemsData[i];
	                modifier.closed = false;
	            }
	            ownModifiers.push(modifier);
	        } else if(arr[i].ty == 'rp'){
	            if(!processedPos){
	                modifier = ShapeModifiers.getModifier(arr[i].ty);
	                itemsData[i] = modifier;
	                modifier.init(this,arr,i,itemsData);
	                this.shapeModifiers.push(modifier);
	                shouldRender = false;
	            }else {
	                modifier = itemsData[i];
	                modifier.closed = true;
	            }
	            ownModifiers.push(modifier);
	        }
	        this.addProcessedElement(arr[i], i + 1);
	    }
	    this.removeTransformFromStyleList();
	    this.closeStyles(ownStyles);
	    len = ownModifiers.length;
	    for(i=0;i<len;i+=1){
	        ownModifiers[i].closed = true;
	    }
	};

	CVShapeElement.prototype.renderInnerContent = function() {
	    this.transformHelper.opacity = 1;
	    this.transformHelper._opMdf = false;
	    this.renderModifiers();
	    this.transformsManager.processSequences(this._isFirstFrame);
	    this.renderShape(this.transformHelper,this.shapesData,this.itemsData,true);
	};

	CVShapeElement.prototype.renderShapeTransform = function(parentTransform, groupTransform) {
	    if(parentTransform._opMdf || groupTransform.op._mdf || this._isFirstFrame) {
	        groupTransform.opacity = parentTransform.opacity;
	        groupTransform.opacity *= groupTransform.op.v;
	        groupTransform._opMdf = true;
	    }
	};

	CVShapeElement.prototype.drawLayer = function() {
	    var i, len = this.stylesList.length;
	    var j, jLen, k, kLen,elems,nodes, renderer = this.globalData.renderer, ctx = this.globalData.canvasContext, type, currentStyle;
	    for(i=0;i<len;i+=1){
	        currentStyle = this.stylesList[i];
	        type = currentStyle.type;

	        //Skipping style when
	        //Stroke width equals 0
	        //style should not be rendered (extra unused repeaters)
	        //current opacity equals 0
	        //global opacity equals 0
	        if(((type === 'st' || type === 'gs') && currentStyle.wi === 0) || !currentStyle.data._shouldRender || currentStyle.coOp === 0 || this.globalData.currentGlobalAlpha === 0){
	            continue;
	        }
	        renderer.save();
	        elems = currentStyle.elements;
	        if(type === 'st' || type === 'gs'){
	            ctx.strokeStyle = type === 'st' ? currentStyle.co : currentStyle.grd;
	            ctx.lineWidth = currentStyle.wi;
	            ctx.lineCap = currentStyle.lc;
	            ctx.lineJoin = currentStyle.lj;
	            ctx.miterLimit = currentStyle.ml || 0;
	        } else {
	            ctx.fillStyle = type === 'fl' ? currentStyle.co : currentStyle.grd;
	        }
	        renderer.ctxOpacity(currentStyle.coOp);
	        if(type !== 'st' && type !== 'gs'){
	            ctx.beginPath();
	        }
	        renderer.ctxTransform(currentStyle.preTransforms.finalTransform.props);
	        jLen = elems.length;
	        for(j=0;j<jLen;j+=1){
	            if(type === 'st' || type === 'gs'){
	                ctx.beginPath();
	                if(currentStyle.da){
	                    ctx.setLineDash(currentStyle.da);
	                    ctx.lineDashOffset = currentStyle.do;
	                }
	            }
	            nodes = elems[j].trNodes;
	            kLen = nodes.length;

	            for(k=0;k<kLen;k+=1){
	                if(nodes[k].t == 'm'){
	                    ctx.moveTo(nodes[k].p[0],nodes[k].p[1]);
	                }else if(nodes[k].t == 'c'){
	                    ctx.bezierCurveTo(nodes[k].pts[0],nodes[k].pts[1],nodes[k].pts[2],nodes[k].pts[3],nodes[k].pts[4],nodes[k].pts[5]);
	                }else {
	                    ctx.closePath();
	                }
	            }
	            if(type === 'st' || type === 'gs'){
	                ctx.stroke();
	                if(currentStyle.da){
	                    ctx.setLineDash(this.dashResetter);
	                }
	            }
	        }
	        if(type !== 'st' && type !== 'gs'){
	            ctx.fill(currentStyle.r);
	        }
	        renderer.restore();
	    }
	};

	CVShapeElement.prototype.renderShape = function(parentTransform,items,data,isMain){
	    var i, len = items.length - 1;
	    var groupTransform;
	    groupTransform = parentTransform;
	    for(i=len;i>=0;i-=1){
	        if(items[i].ty == 'tr'){
	            groupTransform = data[i].transform;
	            this.renderShapeTransform(parentTransform, groupTransform);
	        }else if(items[i].ty == 'sh' || items[i].ty == 'el' || items[i].ty == 'rc' || items[i].ty == 'sr'){
	            this.renderPath(items[i],data[i]);
	        }else if(items[i].ty == 'fl'){
	            this.renderFill(items[i],data[i],groupTransform);
	        }else if(items[i].ty == 'st'){
	            this.renderStroke(items[i],data[i],groupTransform);
	        }else if(items[i].ty == 'gf' || items[i].ty == 'gs'){
	            this.renderGradientFill(items[i],data[i],groupTransform);
	        }else if(items[i].ty == 'gr'){
	            this.renderShape(groupTransform,items[i].it,data[i].it);
	        }else if(items[i].ty == 'tm');
	    }
	    if(isMain){
	        this.drawLayer();
	    }
	    
	};

	CVShapeElement.prototype.renderStyledShape = function(styledShape, shape){
	    if(this._isFirstFrame || shape._mdf || styledShape.transforms._mdf) {
	        var shapeNodes = styledShape.trNodes;
	        var paths = shape.paths;
	        var i, len, j, jLen = paths._length;
	        shapeNodes.length = 0;
	        var groupTransformMat = styledShape.transforms.finalTransform;
	        for (j = 0; j < jLen; j += 1) {
	            var pathNodes = paths.shapes[j];
	            if(pathNodes && pathNodes.v){
	                len = pathNodes._length;
	                for (i = 1; i < len; i += 1) {
	                    if (i === 1) {
	                        shapeNodes.push({
	                            t: 'm',
	                            p: groupTransformMat.applyToPointArray(pathNodes.v[0][0], pathNodes.v[0][1], 0)
	                        });
	                    }
	                    shapeNodes.push({
	                        t: 'c',
	                        pts: groupTransformMat.applyToTriplePoints(pathNodes.o[i - 1], pathNodes.i[i], pathNodes.v[i])
	                    });
	                }
	                if (len === 1) {
	                    shapeNodes.push({
	                        t: 'm',
	                        p: groupTransformMat.applyToPointArray(pathNodes.v[0][0], pathNodes.v[0][1], 0)
	                    });
	                }
	                if (pathNodes.c && len) {
	                    shapeNodes.push({
	                        t: 'c',
	                        pts: groupTransformMat.applyToTriplePoints(pathNodes.o[i - 1], pathNodes.i[0], pathNodes.v[0])
	                    });
	                    shapeNodes.push({
	                        t: 'z'
	                    });
	                }
	            }
	        }
	        styledShape.trNodes = shapeNodes;
	    }
	};

	CVShapeElement.prototype.renderPath = function(pathData,itemData){
	    if(pathData.hd !== true && pathData._shouldRender) {
	        var i, len = itemData.styledShapes.length;
	        for (i = 0; i < len; i += 1) {
	            this.renderStyledShape(itemData.styledShapes[i], itemData.sh);
	        }
	    }
	};

	CVShapeElement.prototype.renderFill = function(styleData,itemData, groupTransform){
	    var styleElem = itemData.style;

	    if (itemData.c._mdf || this._isFirstFrame) {
	        styleElem.co = 'rgb(' 
	        + bm_floor(itemData.c.v[0]) + ',' 
	        + bm_floor(itemData.c.v[1]) + ',' 
	        + bm_floor(itemData.c.v[2]) + ')';
	    }
	    if (itemData.o._mdf || groupTransform._opMdf || this._isFirstFrame) {
	        styleElem.coOp = itemData.o.v * groupTransform.opacity;
	    }
	};

	CVShapeElement.prototype.renderGradientFill = function(styleData,itemData, groupTransform){
	    var styleElem = itemData.style;
	    if(!styleElem.grd || itemData.g._mdf || itemData.s._mdf || itemData.e._mdf || (styleData.t !== 1 && (itemData.h._mdf || itemData.a._mdf))) {
	        var ctx = this.globalData.canvasContext;
	        var grd;
	        var pt1 = itemData.s.v, pt2 = itemData.e.v;
	        if (styleData.t === 1) {
	            grd = ctx.createLinearGradient(pt1[0], pt1[1], pt2[0], pt2[1]);
	        } else {
	            var rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
	            var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);

	            var percent = itemData.h.v >= 1 ? 0.99 : itemData.h.v <= -1 ? -0.99: itemData.h.v;
	            var dist = rad * percent;
	            var x = Math.cos(ang + itemData.a.v) * dist + pt1[0];
	            var y = Math.sin(ang + itemData.a.v) * dist + pt1[1];
	            var grd = ctx.createRadialGradient(x, y, 0, pt1[0], pt1[1], rad);
	        }

	        var i, len = styleData.g.p;
	        var cValues = itemData.g.c;
	        var opacity = 1;

	        for (i = 0; i < len; i += 1){
	            if(itemData.g._hasOpacity && itemData.g._collapsable) {
	                opacity = itemData.g.o[i*2 + 1];
	            }
	            grd.addColorStop(cValues[i * 4] / 100,'rgba('+ cValues[i * 4 + 1] + ',' + cValues[i * 4 + 2] + ','+cValues[i * 4 + 3] + ',' + opacity + ')');
	        }
	        styleElem.grd = grd;
	    }
	    styleElem.coOp = itemData.o.v*groupTransform.opacity;
	    
	};

	CVShapeElement.prototype.renderStroke = function(styleData,itemData, groupTransform){
	    var styleElem = itemData.style;
	    var d = itemData.d;
	    if(d && (d._mdf  || this._isFirstFrame)){
	        styleElem.da = d.dashArray;
	        styleElem.do = d.dashoffset[0];
	    }
	    if(itemData.c._mdf || this._isFirstFrame){
	        styleElem.co = 'rgb('+bm_floor(itemData.c.v[0])+','+bm_floor(itemData.c.v[1])+','+bm_floor(itemData.c.v[2])+')';
	    }
	    if(itemData.o._mdf || groupTransform._opMdf || this._isFirstFrame){
	        styleElem.coOp = itemData.o.v*groupTransform.opacity;
	    }
	    if(itemData.w._mdf || this._isFirstFrame){
	        styleElem.wi = itemData.w.v;
	    }
	};


	CVShapeElement.prototype.destroy = function(){
	    this.shapesData = null;
	    this.globalData = null;
	    this.canvasContext = null;
	    this.stylesList.length = 0;
	    this.itemsData.length = 0;
	};


	function CVSolidElement(data, globalData, comp) {
	    this.initElement(data,globalData,comp);
	}
	extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement], CVSolidElement);

	CVSolidElement.prototype.initElement = SVGShapeElement.prototype.initElement;
	CVSolidElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame;

	CVSolidElement.prototype.renderInnerContent = function() {
	    var ctx = this.canvasContext;
	    ctx.fillStyle = this.data.sc;
	    ctx.fillRect(0, 0, this.data.sw, this.data.sh);
	    //
	};
	function CVTextElement(data, globalData, comp){
	    this.textSpans = [];
	    this.yOffset = 0;
	    this.fillColorAnim = false;
	    this.strokeColorAnim = false;
	    this.strokeWidthAnim = false;
	    this.stroke = false;
	    this.fill = false;
	    this.justifyOffset = 0;
	    this.currentRender = null;
	    this.renderType = 'canvas';
	    this.values = {
	        fill: 'rgba(0,0,0,0)',
	        stroke: 'rgba(0,0,0,0)',
	        sWidth: 0,
	        fValue: ''
	    };
	    this.initElement(data,globalData,comp);
	}
	extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement,ITextElement], CVTextElement);

	CVTextElement.prototype.tHelper = createTag('canvas').getContext('2d');

	CVTextElement.prototype.buildNewText = function(){
	    var documentData = this.textProperty.currentData;
	    this.renderedLetters = createSizedArray(documentData.l ? documentData.l.length : 0);

	    var hasFill = false;
	    if(documentData.fc) {
	        hasFill = true;
	        this.values.fill = this.buildColor(documentData.fc);
	    }else {
	        this.values.fill = 'rgba(0,0,0,0)';
	    }
	    this.fill = hasFill;
	    var hasStroke = false;
	    if(documentData.sc){
	        hasStroke = true;
	        this.values.stroke = this.buildColor(documentData.sc);
	        this.values.sWidth = documentData.sw;
	    }
	    var fontData = this.globalData.fontManager.getFontByName(documentData.f);
	    var i, len;
	    var letters = documentData.l;
	    var matrixHelper = this.mHelper;
	    this.stroke = hasStroke;
	    this.values.fValue = documentData.finalSize + 'px '+ this.globalData.fontManager.getFontByName(documentData.f).fFamily;
	    len = documentData.finalText.length;
	    //this.tHelper.font = this.values.fValue;
	    var charData, shapeData, k, kLen, shapes, j, jLen, pathNodes, commands, pathArr, singleShape = this.data.singleShape;
	    var trackingOffset = documentData.tr/1000*documentData.finalSize;
	    var xPos = 0, yPos = 0, firstLine = true;
	    var cnt = 0;
	    for (i = 0; i < len; i += 1) {
	        charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
	        shapeData = charData && charData.data || {};
	        matrixHelper.reset();
	        if(singleShape && letters[i].n) {
	            xPos = -trackingOffset;
	            yPos += documentData.yOffset;
	            yPos += firstLine ? 1 : 0;
	            firstLine = false;
	        }

	        shapes = shapeData.shapes ? shapeData.shapes[0].it : [];
	        jLen = shapes.length;
	        matrixHelper.scale(documentData.finalSize/100,documentData.finalSize/100);
	        if(singleShape){
	            this.applyTextPropertiesToMatrix(documentData, matrixHelper, letters[i].line, xPos, yPos);
	        }
	        commands = createSizedArray(jLen);
	        for(j=0;j<jLen;j+=1){
	            kLen = shapes[j].ks.k.i.length;
	            pathNodes = shapes[j].ks.k;
	            pathArr = [];
	            for(k=1;k<kLen;k+=1){
	                if(k==1){
	                    pathArr.push(matrixHelper.applyToX(pathNodes.v[0][0],pathNodes.v[0][1],0),matrixHelper.applyToY(pathNodes.v[0][0],pathNodes.v[0][1],0));
	                }
	                pathArr.push(matrixHelper.applyToX(pathNodes.o[k-1][0],pathNodes.o[k-1][1],0),matrixHelper.applyToY(pathNodes.o[k-1][0],pathNodes.o[k-1][1],0),matrixHelper.applyToX(pathNodes.i[k][0],pathNodes.i[k][1],0),matrixHelper.applyToY(pathNodes.i[k][0],pathNodes.i[k][1],0),matrixHelper.applyToX(pathNodes.v[k][0],pathNodes.v[k][1],0),matrixHelper.applyToY(pathNodes.v[k][0],pathNodes.v[k][1],0));
	            }
	            pathArr.push(matrixHelper.applyToX(pathNodes.o[k-1][0],pathNodes.o[k-1][1],0),matrixHelper.applyToY(pathNodes.o[k-1][0],pathNodes.o[k-1][1],0),matrixHelper.applyToX(pathNodes.i[0][0],pathNodes.i[0][1],0),matrixHelper.applyToY(pathNodes.i[0][0],pathNodes.i[0][1],0),matrixHelper.applyToX(pathNodes.v[0][0],pathNodes.v[0][1],0),matrixHelper.applyToY(pathNodes.v[0][0],pathNodes.v[0][1],0));
	            commands[j] = pathArr;
	        }
	        if(singleShape){
	            xPos += letters[i].l;
	            xPos += trackingOffset;
	        }
	        if(this.textSpans[cnt]){
	            this.textSpans[cnt].elem = commands;
	        } else {
	            this.textSpans[cnt] = {elem: commands};
	        }
	        cnt +=1;
	    }
	};

	CVTextElement.prototype.renderInnerContent = function(){
	    var ctx = this.canvasContext;
	    var finalMat = this.finalTransform.mat.props;
	    ctx.font = this.values.fValue;
	    ctx.lineCap = 'butt';
	    ctx.lineJoin = 'miter';
	    ctx.miterLimit = 4;

	    if(!this.data.singleShape){
	        this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
	    }

	    var  i,len, j, jLen, k, kLen;
	    var renderedLetters = this.textAnimator.renderedLetters;

	    var letters = this.textProperty.currentData.l;

	    len = letters.length;
	    var renderedLetter;
	    var lastFill = null, lastStroke = null, lastStrokeW = null, commands, pathArr;
	    for(i=0;i<len;i+=1){
	        if(letters[i].n){
	            continue;
	        }
	        renderedLetter = renderedLetters[i];
	        if(renderedLetter){
	            this.globalData.renderer.save();
	            this.globalData.renderer.ctxTransform(renderedLetter.p);
	            this.globalData.renderer.ctxOpacity(renderedLetter.o);
	        }
	        if(this.fill){
	            if(renderedLetter && renderedLetter.fc){
	                if(lastFill !== renderedLetter.fc){
	                    lastFill = renderedLetter.fc;
	                    ctx.fillStyle = renderedLetter.fc;
	                }
	            }else if(lastFill !== this.values.fill){
	                lastFill = this.values.fill;
	                ctx.fillStyle = this.values.fill;
	            }
	            commands = this.textSpans[i].elem;
	            jLen = commands.length;
	            this.globalData.canvasContext.beginPath();
	            for(j=0;j<jLen;j+=1) {
	                pathArr = commands[j];
	                kLen = pathArr.length;
	                this.globalData.canvasContext.moveTo(pathArr[0], pathArr[1]);
	                for (k = 2; k < kLen; k += 6) {
	                    this.globalData.canvasContext.bezierCurveTo(pathArr[k], pathArr[k + 1], pathArr[k + 2], pathArr[k + 3], pathArr[k + 4], pathArr[k + 5]);
	                }
	            }
	            this.globalData.canvasContext.closePath();
	            this.globalData.canvasContext.fill();
	            ///ctx.fillText(this.textSpans[i].val,0,0);
	        }
	        if(this.stroke){
	            if(renderedLetter && renderedLetter.sw){
	                if(lastStrokeW !== renderedLetter.sw){
	                    lastStrokeW = renderedLetter.sw;
	                    ctx.lineWidth = renderedLetter.sw;
	                }
	            }else if(lastStrokeW !== this.values.sWidth){
	                lastStrokeW = this.values.sWidth;
	                ctx.lineWidth = this.values.sWidth;
	            }
	            if(renderedLetter && renderedLetter.sc){
	                if(lastStroke !== renderedLetter.sc){
	                    lastStroke = renderedLetter.sc;
	                    ctx.strokeStyle = renderedLetter.sc;
	                }
	            }else if(lastStroke !== this.values.stroke){
	                lastStroke = this.values.stroke;
	                ctx.strokeStyle = this.values.stroke;
	            }
	            commands = this.textSpans[i].elem;
	            jLen = commands.length;
	            this.globalData.canvasContext.beginPath();
	            for(j=0;j<jLen;j+=1) {
	                pathArr = commands[j];
	                kLen = pathArr.length;
	                this.globalData.canvasContext.moveTo(pathArr[0], pathArr[1]);
	                for (k = 2; k < kLen; k += 6) {
	                    this.globalData.canvasContext.bezierCurveTo(pathArr[k], pathArr[k + 1], pathArr[k + 2], pathArr[k + 3], pathArr[k + 4], pathArr[k + 5]);
	                }
	            }
	            this.globalData.canvasContext.closePath();
	            this.globalData.canvasContext.stroke();
	            ///ctx.strokeText(letters[i].val,0,0);
	        }
	        if(renderedLetter) {
	            this.globalData.renderer.restore();
	        }
	    }
	};
	function CVEffects() {

	}
	CVEffects.prototype.renderFrame = function(){};
	function HBaseElement(data,globalData,comp){}
	HBaseElement.prototype = {
	    checkBlendMode: function(){},
	    initRendererElement: function(){
	        this.baseElement = createTag(this.data.tg || 'div');
	        if(this.data.hasMask) {
	            this.svgElement = createNS('svg');
	            this.layerElement = createNS('g');
	            this.maskedElement = this.layerElement;
	            this.svgElement.appendChild(this.layerElement);
	            this.baseElement.appendChild(this.svgElement);
	        } else {
	            this.layerElement = this.baseElement;
	        }
	        styleDiv(this.baseElement);
	    },
	    createContainerElements: function(){
	        this.renderableEffectsManager = new CVEffects(this);
	        this.transformedElement = this.baseElement;
	        this.maskedElement = this.layerElement;
	        if (this.data.ln) {
	            this.layerElement.setAttribute('id',this.data.ln);
	        }
	        if (this.data.cl) {
	            this.layerElement.setAttribute('class', this.data.cl);
	        }
	        if (this.data.bm !== 0) {
	            this.setBlendMode();
	        }
	    },
	    renderElement: function() {
	        if(this.finalTransform._matMdf){
	            this.transformedElement.style.transform = this.transformedElement.style.webkitTransform = this.finalTransform.mat.toCSS();
	        }
	        if(this.finalTransform._opMdf){
	            this.transformedElement.style.opacity = this.finalTransform.mProp.o.v;
	        }
	    },
	    renderFrame: function() {
	        //If it is exported as hidden (data.hd === true) no need to render
	        //If it is not visible no need to render
	        if (this.data.hd || this.hidden) {
	            return;
	        }
	        this.renderTransform();
	        this.renderRenderable();
	        this.renderElement();
	        this.renderInnerContent();
	        if (this._isFirstFrame) {
	            this._isFirstFrame = false;
	        }
	    },
	    destroy: function(){
	        this.layerElement = null;
	        this.transformedElement = null;
	        if(this.matteElement) {
	            this.matteElement = null;
	        }
	        if(this.maskManager) {
	            this.maskManager.destroy();
	            this.maskManager = null;
	        }
	    },
	    createRenderableComponents: function(){
	        this.maskManager = new MaskElement(this.data, this, this.globalData);
	    },
	    addEffects: function(){
	    },
	    setMatte: function(){}
	};
	HBaseElement.prototype.getBaseElement = SVGBaseElement.prototype.getBaseElement;
	HBaseElement.prototype.destroyBaseElement = HBaseElement.prototype.destroy;
	HBaseElement.prototype.buildElementParenting = HybridRenderer.prototype.buildElementParenting;
	function HSolidElement(data,globalData,comp){
	    this.initElement(data,globalData,comp);
	}
	extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement], HSolidElement);

	HSolidElement.prototype.createContent = function(){
	    var rect;
	    if(this.data.hasMask){
	        rect = createNS('rect');
	        rect.setAttribute('width',this.data.sw);
	        rect.setAttribute('height',this.data.sh);
	        rect.setAttribute('fill',this.data.sc);
	        this.svgElement.setAttribute('width',this.data.sw);
	        this.svgElement.setAttribute('height',this.data.sh);
	    } else {
	        rect = createTag('div');
	        rect.style.width = this.data.sw + 'px';
	        rect.style.height = this.data.sh + 'px';
	        rect.style.backgroundColor = this.data.sc;
	    }
	    this.layerElement.appendChild(rect);
	};

	function HCompElement(data,globalData,comp){
	    this.layers = data.layers;
	    this.supports3d = !data.hasMask;
	    this.completeLayers = false;
	    this.pendingElements = [];
	    this.elements = this.layers ? createSizedArray(this.layers.length) : [];
	    this.initElement(data,globalData,comp);
	    this.tm = data.tm ? PropertyFactory.getProp(this,data.tm,0,globalData.frameRate,this) : {_placeholder:true};
	}

	extendPrototype([HybridRenderer, ICompElement, HBaseElement], HCompElement);
	HCompElement.prototype._createBaseContainerElements = HCompElement.prototype.createContainerElements;

	HCompElement.prototype.createContainerElements = function(){
	    this._createBaseContainerElements();
	    //divElement.style.clip = 'rect(0px, '+this.data.w+'px, '+this.data.h+'px, 0px)';
	    if(this.data.hasMask){
	        this.svgElement.setAttribute('width',this.data.w);
	        this.svgElement.setAttribute('height',this.data.h);
	        this.transformedElement = this.baseElement;
	    } else {
	        this.transformedElement = this.layerElement;
	    }
	};

	HCompElement.prototype.addTo3dContainer = function(elem,pos) {
	    var j = 0;
	    var nextElement;
	    while(j<pos){
	        if(this.elements[j] && this.elements[j].getBaseElement){
	            nextElement = this.elements[j].getBaseElement();
	        }
	        j += 1;
	    }
	    if(nextElement){
	        this.layerElement.insertBefore(elem, nextElement);
	    } else {
	        this.layerElement.appendChild(elem);
	    }
	};

	function HShapeElement(data,globalData,comp){
	    //List of drawable elements
	    this.shapes = [];
	    // Full shape data
	    this.shapesData = data.shapes;
	    //List of styles that will be applied to shapes
	    this.stylesList = [];
	    //List of modifiers that will be applied to shapes
	    this.shapeModifiers = [];
	    //List of items in shape tree
	    this.itemsData = [];
	    //List of items in previous shape tree
	    this.processedElements = [];
	    // List of animated components
	    this.animatedContents = [];
	    this.shapesContainer = createNS('g');
	    this.initElement(data,globalData,comp);
	    //Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.
	    // List of elements that have been created
	    this.prevViewData = [];
	    this.currentBBox = {
	        x:999999,
	        y: -999999,
	        h: 0,
	        w: 0
	    };
	}
	extendPrototype([BaseElement,TransformElement,HSolidElement,SVGShapeElement,HBaseElement,HierarchyElement,FrameElement,RenderableElement], HShapeElement);
	HShapeElement.prototype._renderShapeFrame = HShapeElement.prototype.renderInnerContent;

	HShapeElement.prototype.createContent = function(){
	    var cont;
	    this.baseElement.style.fontSize = 0;
	    if (this.data.hasMask) {
	        this.layerElement.appendChild(this.shapesContainer);
	        cont = this.svgElement;
	    } else {
	        cont = createNS('svg');
	        var size = this.comp.data ? this.comp.data : this.globalData.compSize;
	        cont.setAttribute('width',size.w);
	        cont.setAttribute('height',size.h);
	        cont.appendChild(this.shapesContainer);
	        this.layerElement.appendChild(cont);
	    }

	    this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.shapesContainer,0, [], true);
	    this.filterUniqueShapes();
	    this.shapeCont = cont;
	};

	HShapeElement.prototype.getTransformedPoint = function(transformers, point) {
	    var i, len = transformers.length;
	    for(i = 0; i < len; i += 1) {
	        point = transformers[i].mProps.v.applyToPointArray(point[0], point[1], 0);
	    }
	    return point;
	};

	HShapeElement.prototype.calculateShapeBoundingBox = function(item, boundingBox) {
	    var shape = item.sh.v;
	    var transformers = item.transformers;
	    var i, len = shape._length, vPoint, oPoint, nextIPoint, nextVPoint;
	    if (len <= 1) {
	        return;
	    }
	    for (i = 0; i < len - 1; i += 1) {
	        vPoint = this.getTransformedPoint(transformers, shape.v[i]);
	        oPoint = this.getTransformedPoint(transformers, shape.o[i]);
	        nextIPoint = this.getTransformedPoint(transformers, shape.i[i + 1]);
	        nextVPoint = this.getTransformedPoint(transformers, shape.v[i + 1]);
	        this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);
	    }
	    if(shape.c) {
	        vPoint = this.getTransformedPoint(transformers, shape.v[i]);
	        oPoint = this.getTransformedPoint(transformers, shape.o[i]);
	        nextIPoint = this.getTransformedPoint(transformers, shape.i[0]);
	        nextVPoint = this.getTransformedPoint(transformers, shape.v[0]);
	        this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);
	    }
	};

	HShapeElement.prototype.checkBounds = function(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox) {
	    this.getBoundsOfCurve(vPoint, oPoint, nextIPoint, nextVPoint);
	    var bounds = this.shapeBoundingBox;
	    boundingBox.x = bm_min(bounds.left, boundingBox.x);
	    boundingBox.xMax = bm_max(bounds.right, boundingBox.xMax);
	    boundingBox.y = bm_min(bounds.top, boundingBox.y);
	    boundingBox.yMax = bm_max(bounds.bottom, boundingBox.yMax);
	};

	HShapeElement.prototype.shapeBoundingBox = {
	    left:0,
	    right:0,
	    top:0,
	    bottom:0,
	};

	HShapeElement.prototype.tempBoundingBox = {
	    x:0,
	    xMax:0,
	    y:0,
	    yMax:0,
	    width:0,
	    height:0
	};

	HShapeElement.prototype.getBoundsOfCurve = function(p0, p1, p2, p3) {

	    var bounds = [[p0[0],p3[0]], [p0[1],p3[1]]];

	    for (var a, b, c, t, b2ac, t1, t2, i = 0; i < 2; ++i) {

	      b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
	      a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
	      c = 3 * p1[i] - 3 * p0[i];

	      b = b | 0;
	      a = a | 0;
	      c = c | 0;

	      if (a === 0) {

	        if (b === 0) {
	          continue;
	        }

	        t = -c / b;

	        if (0 < t && t < 1) {
	          bounds[i].push(this.calculateF(t,p0,p1,p2,p3,i));
	        }
	        continue;
	      }

	      b2ac = b * b - 4 * c * a;

	      if (b2ac < 0) {
	        continue;
	      }

	      t1 = (-b + bm_sqrt(b2ac))/(2 * a);
	      if (0 < t1 && t1 < 1) bounds[i].push(this.calculateF(t1,p0,p1,p2,p3,i));

	      t2 = (-b - bm_sqrt(b2ac))/(2 * a);
	      if (0 < t2 && t2 < 1) bounds[i].push(this.calculateF(t2,p0,p1,p2,p3,i));

	    }

	    this.shapeBoundingBox.left = bm_min.apply(null, bounds[0]);
	    this.shapeBoundingBox.top = bm_min.apply(null, bounds[1]);
	    this.shapeBoundingBox.right = bm_max.apply(null, bounds[0]);
	    this.shapeBoundingBox.bottom = bm_max.apply(null, bounds[1]);
	  };

	  HShapeElement.prototype.calculateF = function(t, p0, p1, p2, p3, i) {
	    return bm_pow(1-t, 3) * p0[i]
	        + 3 * bm_pow(1-t, 2) * t * p1[i]
	        + 3 * (1-t) * bm_pow(t, 2) * p2[i]
	        + bm_pow(t, 3) * p3[i];
	  };

	HShapeElement.prototype.calculateBoundingBox = function(itemsData, boundingBox) {
	    var i, len = itemsData.length;
	    for(i = 0; i < len; i += 1) {
	        if(itemsData[i] && itemsData[i].sh) {
	            this.calculateShapeBoundingBox(itemsData[i], boundingBox);
	        } else if(itemsData[i] && itemsData[i].it) {
	            this.calculateBoundingBox(itemsData[i].it, boundingBox);
	        }
	    }
	};

	HShapeElement.prototype.currentBoxContains = function(box) {
	    return this.currentBBox.x <= box.x 
	    && this.currentBBox.y <= box.y 
	    && this.currentBBox.width + this.currentBBox.x >= box.x + box.width
	    && this.currentBBox.height + this.currentBBox.y >= box.y + box.height
	};

	HShapeElement.prototype.renderInnerContent = function() {
	    this._renderShapeFrame();

	    if(!this.hidden && (this._isFirstFrame || this._mdf)) {
	        var tempBoundingBox = this.tempBoundingBox;
	        var max = 999999;
	        tempBoundingBox.x = max;
	        tempBoundingBox.xMax = -max;
	        tempBoundingBox.y = max;
	        tempBoundingBox.yMax = -max;
	        this.calculateBoundingBox(this.itemsData, tempBoundingBox);
	        tempBoundingBox.width = tempBoundingBox.xMax < tempBoundingBox.x ? 0 : tempBoundingBox.xMax - tempBoundingBox.x;
	        tempBoundingBox.height = tempBoundingBox.yMax < tempBoundingBox.y ? 0 : tempBoundingBox.yMax - tempBoundingBox.y;
	        //var tempBoundingBox = this.shapeCont.getBBox();
	        if(this.currentBoxContains(tempBoundingBox)) {
	            return;
	        }
	        var changed = false;
	        if(this.currentBBox.w !== tempBoundingBox.width){
	            this.currentBBox.w = tempBoundingBox.width;
	            this.shapeCont.setAttribute('width',tempBoundingBox.width);
	            changed = true;
	        }
	        if(this.currentBBox.h !== tempBoundingBox.height){
	            this.currentBBox.h = tempBoundingBox.height;
	            this.shapeCont.setAttribute('height',tempBoundingBox.height);
	            changed = true;
	        }
	        if(changed  || this.currentBBox.x !== tempBoundingBox.x  || this.currentBBox.y !== tempBoundingBox.y){
	            this.currentBBox.w = tempBoundingBox.width;
	            this.currentBBox.h = tempBoundingBox.height;
	            this.currentBBox.x = tempBoundingBox.x;
	            this.currentBBox.y = tempBoundingBox.y;

	            this.shapeCont.setAttribute('viewBox',this.currentBBox.x+' '+this.currentBBox.y+' '+this.currentBBox.w+' '+this.currentBBox.h);
	            this.shapeCont.style.transform = this.shapeCont.style.webkitTransform = 'translate(' + this.currentBBox.x + 'px,' + this.currentBBox.y + 'px)';
	        }
	    }

	};
	function HTextElement(data,globalData,comp){
	    this.textSpans = [];
	    this.textPaths = [];
	    this.currentBBox = {
	        x:999999,
	        y: -999999,
	        h: 0,
	        w: 0
	    };
	    this.renderType = 'svg';
	    this.isMasked = false;
	    this.initElement(data,globalData,comp);

	}
	extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement], HTextElement);

	HTextElement.prototype.createContent = function(){
	    this.isMasked = this.checkMasks();
	    if(this.isMasked){
	        this.renderType = 'svg';
	        this.compW = this.comp.data.w;
	        this.compH = this.comp.data.h;
	        this.svgElement.setAttribute('width',this.compW);
	        this.svgElement.setAttribute('height',this.compH);
	        var g = createNS('g');
	        this.maskedElement.appendChild(g);
	        this.innerElem = g;
	    } else {
	        this.renderType = 'html';
	        this.innerElem = this.layerElement;
	    }

	    this.checkParenting();

	};

	HTextElement.prototype.buildNewText = function(){
	    var documentData = this.textProperty.currentData;
	    this.renderedLetters = createSizedArray(documentData.l ? documentData.l.length : 0);
	    var innerElemStyle = this.innerElem.style;
	    innerElemStyle.color = innerElemStyle.fill = documentData.fc ? this.buildColor(documentData.fc) : 'rgba(0,0,0,0)';
	    if(documentData.sc){
	        innerElemStyle.stroke = this.buildColor(documentData.sc);
	        innerElemStyle.strokeWidth = documentData.sw+'px';
	    }
	    var fontData = this.globalData.fontManager.getFontByName(documentData.f);
	    if(!this.globalData.fontManager.chars){
	        innerElemStyle.fontSize = documentData.finalSize+'px';
	        innerElemStyle.lineHeight = documentData.finalSize+'px';
	        if(fontData.fClass){
	            this.innerElem.className = fontData.fClass;
	        } else {
	            innerElemStyle.fontFamily = fontData.fFamily;
	            var fWeight = documentData.fWeight, fStyle = documentData.fStyle;
	            innerElemStyle.fontStyle = fStyle;
	            innerElemStyle.fontWeight = fWeight;
	        }
	    }
	    var i, len;

	    var letters = documentData.l;
	    len = letters.length;
	    var tSpan,tParent,tCont;
	    var matrixHelper = this.mHelper;
	    var shapes, shapeStr = '';
	    var cnt = 0;
	    for (i = 0;i < len ;i += 1) {
	        if(this.globalData.fontManager.chars){
	            if(!this.textPaths[cnt]){
	                tSpan = createNS('path');
	                tSpan.setAttribute('stroke-linecap', 'butt');
	                tSpan.setAttribute('stroke-linejoin','round');
	                tSpan.setAttribute('stroke-miterlimit','4');
	            } else {
	                tSpan = this.textPaths[cnt];
	            }
	            if(!this.isMasked){
	                if(this.textSpans[cnt]){
	                    tParent = this.textSpans[cnt];
	                    tCont = tParent.children[0];
	                } else {

	                    tParent = createTag('div');
	                    tParent.style.lineHeight = 0;
	                    tCont = createNS('svg');
	                    tCont.appendChild(tSpan);
	                    styleDiv(tParent);
	                }
	            }
	        }else {
	            if(!this.isMasked){
	                if(this.textSpans[cnt]){
	                    tParent = this.textSpans[cnt];
	                    tSpan = this.textPaths[cnt];
	                } else {
	                    tParent = createTag('span');
	                    styleDiv(tParent);
	                    tSpan = createTag('span');
	                    styleDiv(tSpan);
	                    tParent.appendChild(tSpan);
	                }
	            } else {
	                tSpan = this.textPaths[cnt] ? this.textPaths[cnt] : createNS('text');
	            }
	        }
	        //tSpan.setAttribute('visibility', 'hidden');
	        if(this.globalData.fontManager.chars){
	            var charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
	            var shapeData;
	            if(charData){
	                shapeData = charData.data;
	            } else {
	                shapeData = null;
	            }
	            matrixHelper.reset();
	            if(shapeData && shapeData.shapes){
	                shapes = shapeData.shapes[0].it;
	                matrixHelper.scale(documentData.finalSize/100,documentData.finalSize/100);
	                shapeStr = this.createPathShape(matrixHelper,shapes);
	                tSpan.setAttribute('d',shapeStr);
	            }
	            if(!this.isMasked){
	                this.innerElem.appendChild(tParent);
	                if(shapeData && shapeData.shapes){

	                    //document.body.appendChild is needed to get exact measure of shape
	                    document.body.appendChild(tCont);
	                    var boundingBox = tCont.getBBox();
	                    tCont.setAttribute('width',boundingBox.width + 2);
	                    tCont.setAttribute('height',boundingBox.height + 2);
	                    tCont.setAttribute('viewBox',(boundingBox.x-1)+' '+ (boundingBox.y-1)+' '+ (boundingBox.width+2)+' '+ (boundingBox.height+2));
	                    tCont.style.transform = tCont.style.webkitTransform = 'translate(' + (boundingBox.x-1) + 'px,' + (boundingBox.y-1) + 'px)';

	                    letters[i].yOffset = boundingBox.y-1;

	                } else {
	                    tCont.setAttribute('width',1);
	                    tCont.setAttribute('height',1);
	                }
	                    tParent.appendChild(tCont);
	            }else {
	                this.innerElem.appendChild(tSpan);
	            }
	        }else {
	            tSpan.textContent = letters[i].val;
	            tSpan.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space","preserve");
	            if(!this.isMasked){
	                this.innerElem.appendChild(tParent);
	                //
	                tSpan.style.transform = tSpan.style.webkitTransform = 'translate3d(0,'+ -documentData.finalSize/1.2+'px,0)';
	            } else {
	                this.innerElem.appendChild(tSpan);
	            }
	        }
	        //
	        if(!this.isMasked){
	            this.textSpans[cnt] = tParent;
	        }else {
	            this.textSpans[cnt] = tSpan;
	        }
	        this.textSpans[cnt].style.display = 'block';
	        this.textPaths[cnt] = tSpan;
	        cnt += 1;
	    }
	    while(cnt < this.textSpans.length){
	        this.textSpans[cnt].style.display = 'none';
	        cnt += 1;
	    }
	};

	HTextElement.prototype.renderInnerContent = function() {

	    if(this.data.singleShape){
	        if(!this._isFirstFrame && !this.lettersChangedFlag){
	            return;
	        } else {
	            // Todo Benchmark if using this is better than getBBox
	             if(this.isMasked && this.finalTransform._matMdf){
	                 this.svgElement.setAttribute('viewBox',-this.finalTransform.mProp.p.v[0]+' '+ -this.finalTransform.mProp.p.v[1]+' '+this.compW+' '+this.compH);
	                this.svgElement.style.transform = this.svgElement.style.webkitTransform = 'translate(' + -this.finalTransform.mProp.p.v[0] + 'px,' + -this.finalTransform.mProp.p.v[1] + 'px)';
	             }
	        }
	    }

	    this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
	    if(!this.lettersChangedFlag && !this.textAnimator.lettersChangedFlag){
	        return;
	    }
	    var  i,len, count = 0;
	    var renderedLetters = this.textAnimator.renderedLetters;

	    var letters = this.textProperty.currentData.l;

	    len = letters.length;
	    var renderedLetter, textSpan, textPath;
	    for(i=0;i<len;i+=1){
	        if(letters[i].n){
	            count += 1;
	            continue;
	        }
	        textSpan = this.textSpans[i];
	        textPath = this.textPaths[i];
	        renderedLetter = renderedLetters[count];
	        count += 1;
	        if(renderedLetter._mdf.m) {
	            if(!this.isMasked){
	                textSpan.style.transform = textSpan.style.webkitTransform = renderedLetter.m;
	            }else {
	                textSpan.setAttribute('transform',renderedLetter.m);
	            }
	        }
	        ////textSpan.setAttribute('opacity',renderedLetter.o);
	        textSpan.style.opacity = renderedLetter.o;
	        if(renderedLetter.sw && renderedLetter._mdf.sw){
	            textPath.setAttribute('stroke-width',renderedLetter.sw);
	        }
	        if(renderedLetter.sc && renderedLetter._mdf.sc){
	            textPath.setAttribute('stroke',renderedLetter.sc);
	        }
	        if(renderedLetter.fc && renderedLetter._mdf.fc){
	            textPath.setAttribute('fill',renderedLetter.fc);
	            textPath.style.color = renderedLetter.fc;
	        }
	    }

	    if(this.innerElem.getBBox && !this.hidden && (this._isFirstFrame || this._mdf)){
	        var boundingBox = this.innerElem.getBBox();

	        if(this.currentBBox.w !== boundingBox.width){
	            this.currentBBox.w = boundingBox.width;
	            this.svgElement.setAttribute('width',boundingBox.width);
	        }
	        if(this.currentBBox.h !== boundingBox.height){
	            this.currentBBox.h = boundingBox.height;
	            this.svgElement.setAttribute('height',boundingBox.height);
	        }

	        var margin = 1;
	        if(this.currentBBox.w !== (boundingBox.width + margin*2) || this.currentBBox.h !== (boundingBox.height + margin*2)  || this.currentBBox.x !== (boundingBox.x - margin)  || this.currentBBox.y !== (boundingBox.y - margin)){
	            this.currentBBox.w = boundingBox.width + margin*2;
	            this.currentBBox.h = boundingBox.height + margin*2;
	            this.currentBBox.x = boundingBox.x - margin;
	            this.currentBBox.y = boundingBox.y - margin;

	            this.svgElement.setAttribute('viewBox',this.currentBBox.x+' '+this.currentBBox.y+' '+this.currentBBox.w+' '+this.currentBBox.h);
	            this.svgElement.style.transform = this.svgElement.style.webkitTransform = 'translate(' + this.currentBBox.x + 'px,' + this.currentBBox.y + 'px)';
	        }
	    }
	};
	function HImageElement(data,globalData,comp){
	    this.assetData = globalData.getAssetData(data.refId);
	    this.initElement(data,globalData,comp);
	}

	extendPrototype([BaseElement,TransformElement,HBaseElement,HSolidElement,HierarchyElement,FrameElement,RenderableElement], HImageElement);


	HImageElement.prototype.createContent = function(){
	    var assetPath = this.globalData.getAssetsPath(this.assetData);
	    var img = new Image();

	    if(this.data.hasMask){
	        this.imageElem = createNS('image');
	        this.imageElem.setAttribute('width',this.assetData.w+"px");
	        this.imageElem.setAttribute('height',this.assetData.h+"px");
	        this.imageElem.setAttributeNS('http://www.w3.org/1999/xlink','href',assetPath);
	        this.layerElement.appendChild(this.imageElem);
	        this.baseElement.setAttribute('width',this.assetData.w);
	        this.baseElement.setAttribute('height',this.assetData.h);
	    } else {
	        this.layerElement.appendChild(img);
	    }
	    img.src = assetPath;
	    if(this.data.ln){
	        this.baseElement.setAttribute('id',this.data.ln);
	    }
	};
	function HCameraElement(data,globalData,comp){
	    this.initFrame();
	    this.initBaseData(data,globalData,comp);
	    this.initHierarchy();
	    var getProp = PropertyFactory.getProp;
	    this.pe = getProp(this,data.pe,0,0,this);
	    if(data.ks.p.s){
	        this.px = getProp(this,data.ks.p.x,1,0,this);
	        this.py = getProp(this,data.ks.p.y,1,0,this);
	        this.pz = getProp(this,data.ks.p.z,1,0,this);
	    }else {
	        this.p = getProp(this,data.ks.p,1,0,this);
	    }
	    if(data.ks.a){
	        this.a = getProp(this,data.ks.a,1,0,this);
	    }
	    if(data.ks.or.k.length && data.ks.or.k[0].to){
	        var i,len = data.ks.or.k.length;
	        for(i=0;i<len;i+=1){
	            data.ks.or.k[i].to = null;
	            data.ks.or.k[i].ti = null;
	        }
	    }
	    this.or = getProp(this,data.ks.or,1,degToRads,this);
	    this.or.sh = true;
	    this.rx = getProp(this,data.ks.rx,0,degToRads,this);
	    this.ry = getProp(this,data.ks.ry,0,degToRads,this);
	    this.rz = getProp(this,data.ks.rz,0,degToRads,this);
	    this.mat = new Matrix();
	    this._prevMat = new Matrix();
	    this._isFirstFrame = true;
	    
	    // TODO: find a better way to make the HCamera element to be compatible with the LayerInterface and TransformInterface.
	    this.finalTransform = {
	        mProp: this
	    };
	}
	extendPrototype([BaseElement, FrameElement, HierarchyElement], HCameraElement);

	HCameraElement.prototype.setup = function() {
	    var i, len = this.comp.threeDElements.length, comp;
	    for(i=0;i<len;i+=1){
	        //[perspectiveElem,container]
	        comp = this.comp.threeDElements[i];
	        if(comp.type === '3d') {
	            comp.perspectiveElem.style.perspective = comp.perspectiveElem.style.webkitPerspective = this.pe.v+'px';
	            comp.container.style.transformOrigin = comp.container.style.mozTransformOrigin = comp.container.style.webkitTransformOrigin = "0px 0px 0px";
	            comp.perspectiveElem.style.transform = comp.perspectiveElem.style.webkitTransform = 'matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)';
	        }
	    }
	};

	HCameraElement.prototype.createElements = function(){
	};

	HCameraElement.prototype.hide = function(){
	};

	HCameraElement.prototype.renderFrame = function(){
	    var _mdf = this._isFirstFrame;
	    var i, len;
	    if(this.hierarchy){
	        len = this.hierarchy.length;
	        for(i=0;i<len;i+=1){
	            _mdf = this.hierarchy[i].finalTransform.mProp._mdf || _mdf;
	        }
	    }
	    if(_mdf || this.pe._mdf || (this.p && this.p._mdf) || (this.px && (this.px._mdf || this.py._mdf || this.pz._mdf)) || this.rx._mdf || this.ry._mdf || this.rz._mdf || this.or._mdf || (this.a && this.a._mdf)) {
	        this.mat.reset();

	        if(this.hierarchy){
	            len = this.hierarchy.length - 1;
	            for (i = len; i >= 0; i -= 1) {
	                var mTransf = this.hierarchy[i].finalTransform.mProp;
	                this.mat.translate(-mTransf.p.v[0],-mTransf.p.v[1],mTransf.p.v[2]);
	                this.mat.rotateX(-mTransf.or.v[0]).rotateY(-mTransf.or.v[1]).rotateZ(mTransf.or.v[2]);
	                this.mat.rotateX(-mTransf.rx.v).rotateY(-mTransf.ry.v).rotateZ(mTransf.rz.v);
	                this.mat.scale(1/mTransf.s.v[0],1/mTransf.s.v[1],1/mTransf.s.v[2]);
	                this.mat.translate(mTransf.a.v[0],mTransf.a.v[1],mTransf.a.v[2]);
	            }
	        }
	        if (this.p) {
	            this.mat.translate(-this.p.v[0],-this.p.v[1],this.p.v[2]);
	        } else {
	            this.mat.translate(-this.px.v,-this.py.v,this.pz.v);
	        }
	        if (this.a) {
	            var diffVector;
	            if (this.p) {
	                diffVector = [this.p.v[0] - this.a.v[0], this.p.v[1] - this.a.v[1], this.p.v[2] - this.a.v[2]];
	            } else {
	                diffVector = [this.px.v - this.a.v[0], this.py.v - this.a.v[1], this.pz.v - this.a.v[2]];
	            }
	            var mag = Math.sqrt(Math.pow(diffVector[0],2)+Math.pow(diffVector[1],2)+Math.pow(diffVector[2],2));
	            //var lookDir = getNormalizedPoint(getDiffVector(this.a.v,this.p.v));
	            var lookDir = [diffVector[0]/mag,diffVector[1]/mag,diffVector[2]/mag];
	            var lookLengthOnXZ = Math.sqrt( lookDir[2]*lookDir[2] + lookDir[0]*lookDir[0] );
	            var m_rotationX = (Math.atan2( lookDir[1], lookLengthOnXZ ));
	            var m_rotationY = (Math.atan2( lookDir[0], -lookDir[2]));
	            this.mat.rotateY(m_rotationY).rotateX(-m_rotationX);

	        }
	        this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v);
	        this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]);
	        this.mat.translate(this.globalData.compSize.w/2,this.globalData.compSize.h/2,0);
	        this.mat.translate(0,0,this.pe.v);


	        

	        var hasMatrixChanged = !this._prevMat.equals(this.mat);
	        if((hasMatrixChanged || this.pe._mdf) && this.comp.threeDElements) {
	            len = this.comp.threeDElements.length;
	            var comp;
	            for(i=0;i<len;i+=1){
	                comp = this.comp.threeDElements[i];
	                if(comp.type === '3d') {
	                    if(hasMatrixChanged) {
	                        comp.container.style.transform = comp.container.style.webkitTransform = this.mat.toCSS();
	                    }
	                    if(this.pe._mdf) {
	                        comp.perspectiveElem.style.perspective = comp.perspectiveElem.style.webkitPerspective = this.pe.v+'px';
	                    }
	                }
	            }
	            this.mat.clone(this._prevMat);
	        }
	    }
	    this._isFirstFrame = false;
	};

	HCameraElement.prototype.prepareFrame = function(num) {
	    this.prepareProperties(num, true);
	};

	HCameraElement.prototype.destroy = function(){
	};
	HCameraElement.prototype.getBaseElement = function(){return null;};
	var animationManager = (function(){
	    var moduleOb = {};
	    var registeredAnimations = [];
	    var initTime = 0;
	    var len = 0;
	    var playingAnimationsNum = 0;
	    var _stopped = true;
	    var _isFrozen = false;

	    function removeElement(ev){
	        var i = 0;
	        var animItem = ev.target;
	        while(i<len) {
	            if (registeredAnimations[i].animation === animItem) {
	                registeredAnimations.splice(i, 1);
	                i -= 1;
	                len -= 1;
	                if(!animItem.isPaused){
	                    subtractPlayingCount();
	                }
	            }
	            i += 1;
	        }
	    }

	    function registerAnimation(element, animationData){
	        if(!element){
	            return null;
	        }
	        var i=0;
	        while(i<len){
	            if(registeredAnimations[i].elem == element && registeredAnimations[i].elem !== null ){
	                return registeredAnimations[i].animation;
	            }
	            i+=1;
	        }
	        var animItem = new AnimationItem();
	        setupAnimation(animItem, element);
	        animItem.setData(element, animationData);
	        return animItem;
	    }

	    function getRegisteredAnimations() {
	        var i, len = registeredAnimations.length;
	        var animations = [];
	        for(i = 0; i < len; i += 1) {
	            animations.push(registeredAnimations[i].animation);
	        }
	        return animations;
	    }

	    function addPlayingCount(){
	        playingAnimationsNum += 1;
	        activate();
	    }

	    function subtractPlayingCount(){
	        playingAnimationsNum -= 1;
	    }

	    function setupAnimation(animItem, element){
	        animItem.addEventListener('destroy',removeElement);
	        animItem.addEventListener('_active',addPlayingCount);
	        animItem.addEventListener('_idle',subtractPlayingCount);
	        registeredAnimations.push({elem: element,animation:animItem});
	        len += 1;
	    }

	    function loadAnimation(params){
	        var animItem = new AnimationItem();
	        setupAnimation(animItem, null);
	        animItem.setParams(params);
	        return animItem;
	    }


	    function setSpeed(val,animation){
	        var i;
	        for(i=0;i<len;i+=1){
	            registeredAnimations[i].animation.setSpeed(val, animation);
	        }
	    }

	    function setDirection(val, animation){
	        var i;
	        for(i=0;i<len;i+=1){
	            registeredAnimations[i].animation.setDirection(val, animation);
	        }
	    }

	    function play(animation){
	        var i;
	        for(i=0;i<len;i+=1){
	            registeredAnimations[i].animation.play(animation);
	        }
	    }
	    function resume(nowTime) {
	        var elapsedTime = nowTime - initTime;
	        var i;
	        for(i=0;i<len;i+=1){
	            registeredAnimations[i].animation.advanceTime(elapsedTime);
	        }
	        initTime = nowTime;
	        if(playingAnimationsNum && !_isFrozen) {
	            window.requestAnimationFrame(resume);
	        } else {
	            _stopped = true;
	        }
	    }

	    function first(nowTime){
	        initTime = nowTime;
	        window.requestAnimationFrame(resume);
	    }

	    function pause(animation) {
	        var i;
	        for(i=0;i<len;i+=1){
	            registeredAnimations[i].animation.pause(animation);
	        }
	    }

	    function goToAndStop(value,isFrame,animation) {
	        var i;
	        for(i=0;i<len;i+=1){
	            registeredAnimations[i].animation.goToAndStop(value,isFrame,animation);
	        }
	    }

	    function stop(animation) {
	        var i;
	        for(i=0;i<len;i+=1){
	            registeredAnimations[i].animation.stop(animation);
	        }
	    }

	    function togglePause(animation) {
	        var i;
	        for(i=0;i<len;i+=1){
	            registeredAnimations[i].animation.togglePause(animation);
	        }
	    }

	    function destroy(animation) {
	        var i;
	        for(i=(len-1);i>=0;i-=1){
	            registeredAnimations[i].animation.destroy(animation);
	        }
	    }

	    function searchAnimations(animationData, standalone, renderer){
	        var animElements = [].concat([].slice.call(document.getElementsByClassName('lottie')),
	                  [].slice.call(document.getElementsByClassName('bodymovin')));
	        var i, len = animElements.length;
	        for(i=0;i<len;i+=1){
	            if(renderer){
	                animElements[i].setAttribute('data-bm-type',renderer);
	            }
	            registerAnimation(animElements[i], animationData);
	        }
	        if(standalone && len === 0){
	            if(!renderer){
	                renderer = 'svg';
	            }
	            var body = document.getElementsByTagName('body')[0];
	            body.innerHTML = '';
	            var div = createTag('div');
	            div.style.width = '100%';
	            div.style.height = '100%';
	            div.setAttribute('data-bm-type',renderer);
	            body.appendChild(div);
	            registerAnimation(div, animationData);
	        }
	    }

	    function resize(){
	        var i;
	        for(i=0;i<len;i+=1){
	            registeredAnimations[i].animation.resize();
	        }
	    }

	    function activate(){
	        if(!_isFrozen && playingAnimationsNum){
	            if(_stopped) {
	                window.requestAnimationFrame(first);
	                _stopped = false;
	            }
	        }
	    }

	    function freeze() {
	        _isFrozen = true;
	    }

	    function unfreeze() {
	        _isFrozen = false;
	        activate();
	    }

	    moduleOb.registerAnimation = registerAnimation;
	    moduleOb.loadAnimation = loadAnimation;
	    moduleOb.setSpeed = setSpeed;
	    moduleOb.setDirection = setDirection;
	    moduleOb.play = play;
	    moduleOb.pause = pause;
	    moduleOb.stop = stop;
	    moduleOb.togglePause = togglePause;
	    moduleOb.searchAnimations = searchAnimations;
	    moduleOb.resize = resize;
	    //moduleOb.start = start;
	    moduleOb.goToAndStop = goToAndStop;
	    moduleOb.destroy = destroy;
	    moduleOb.freeze = freeze;
	    moduleOb.unfreeze = unfreeze;
	    moduleOb.getRegisteredAnimations = getRegisteredAnimations;
	    return moduleOb;
	}());

	var AnimationItem = function () {
	    this._cbs = [];
	    this.name = '';
	    this.path = '';
	    this.isLoaded = false;
	    this.currentFrame = 0;
	    this.currentRawFrame = 0;
	    this.firstFrame = 0;
	    this.totalFrames = 0;
	    this.frameRate = 0;
	    this.frameMult = 0;
	    this.playSpeed = 1;
	    this.playDirection = 1;
	    this.playCount = 0;
	    this.animationData = {};
	    this.assets = [];
	    this.isPaused = true;
	    this.autoplay = false;
	    this.loop = true;
	    this.renderer = null;
	    this.animationID = createElementID();
	    this.assetsPath = '';
	    this.timeCompleted = 0;
	    this.segmentPos = 0;
	    this.isSubframeEnabled = subframeEnabled;
	    this.segments = [];
	    this._idle = true;
	    this._completedLoop = false;
	    this.projectInterface = ProjectInterface();
	    this.imagePreloader = new ImagePreloader();
	};

	extendPrototype([BaseEvent], AnimationItem);

	AnimationItem.prototype.setParams = function(params) {
	    if(params.wrapper || params.container){
	        this.wrapper = params.wrapper || params.container;
	    }
	    var animType = params.animType ? params.animType : params.renderer ? params.renderer : 'svg';
	    switch(animType){
	        case 'canvas':
	            this.renderer = new CanvasRenderer(this, params.rendererSettings);
	            break;
	        case 'svg':
	            this.renderer = new SVGRenderer(this, params.rendererSettings);
	            break;
	        default:
	            this.renderer = new HybridRenderer(this, params.rendererSettings);
	            break;
	    }
	    this.imagePreloader.setCacheType(animType);
	    this.renderer.setProjectInterface(this.projectInterface);
	    this.animType = animType;
	    if (params.loop === ''
	        || params.loop === null
	        || params.loop === undefined
	        || params.loop === true)
	    {
	        this.loop = true;
	    } else if (params.loop === false) {
	        this.loop = false;
	    } else {
	        this.loop = parseInt(params.loop);
	    }
	    this.autoplay = 'autoplay' in params ? params.autoplay : true;
	    this.name = params.name ? params.name :  '';
	    this.autoloadSegments = params.hasOwnProperty('autoloadSegments') ? params.autoloadSegments :  true;
	    this.assetsPath = params.assetsPath;
	    this.initialSegment = params.initialSegment;
	    if (params.animationData) {
	        this.configAnimation(params.animationData);
	    } else if(params.path){

	        if( params.path.lastIndexOf('\\') !== -1){
	            this.path = params.path.substr(0,params.path.lastIndexOf('\\')+1);
	        } else {
	            this.path = params.path.substr(0,params.path.lastIndexOf('/')+1);
	        }
	        this.fileName = params.path.substr(params.path.lastIndexOf('/')+1);
	        this.fileName = this.fileName.substr(0,this.fileName.lastIndexOf('.json'));

	        assetLoader.load(params.path, this.configAnimation.bind(this), function() {
	            this.trigger('data_failed');
	        }.bind(this));
	    }

	};

	AnimationItem.prototype.setData = function (wrapper, animationData) {
	    var params = {
	        wrapper: wrapper,
	        animationData: animationData ? (typeof animationData  === "object") ? animationData : JSON.parse(animationData) : null
	    };
	    var wrapperAttributes = wrapper.attributes;

	    params.path = wrapperAttributes.getNamedItem('data-animation-path') ? wrapperAttributes.getNamedItem('data-animation-path').value : wrapperAttributes.getNamedItem('data-bm-path') ? wrapperAttributes.getNamedItem('data-bm-path').value :  wrapperAttributes.getNamedItem('bm-path') ? wrapperAttributes.getNamedItem('bm-path').value : '';
	    params.animType = wrapperAttributes.getNamedItem('data-anim-type') ? wrapperAttributes.getNamedItem('data-anim-type').value : wrapperAttributes.getNamedItem('data-bm-type') ? wrapperAttributes.getNamedItem('data-bm-type').value : wrapperAttributes.getNamedItem('bm-type') ? wrapperAttributes.getNamedItem('bm-type').value :  wrapperAttributes.getNamedItem('data-bm-renderer') ? wrapperAttributes.getNamedItem('data-bm-renderer').value : wrapperAttributes.getNamedItem('bm-renderer') ? wrapperAttributes.getNamedItem('bm-renderer').value : 'canvas';

	    var loop = wrapperAttributes.getNamedItem('data-anim-loop') ? wrapperAttributes.getNamedItem('data-anim-loop').value :  wrapperAttributes.getNamedItem('data-bm-loop') ? wrapperAttributes.getNamedItem('data-bm-loop').value :  wrapperAttributes.getNamedItem('bm-loop') ? wrapperAttributes.getNamedItem('bm-loop').value : '';
	    if(loop === '');else if(loop === 'false'){
	        params.loop = false;
	    }else if(loop === 'true'){
	        params.loop = true;
	    }else {
	        params.loop = parseInt(loop);
	    }
	    var autoplay = wrapperAttributes.getNamedItem('data-anim-autoplay') ? wrapperAttributes.getNamedItem('data-anim-autoplay').value :  wrapperAttributes.getNamedItem('data-bm-autoplay') ? wrapperAttributes.getNamedItem('data-bm-autoplay').value :  wrapperAttributes.getNamedItem('bm-autoplay') ? wrapperAttributes.getNamedItem('bm-autoplay').value : true;
	    params.autoplay = autoplay !== "false";

	    params.name = wrapperAttributes.getNamedItem('data-name') ? wrapperAttributes.getNamedItem('data-name').value :  wrapperAttributes.getNamedItem('data-bm-name') ? wrapperAttributes.getNamedItem('data-bm-name').value : wrapperAttributes.getNamedItem('bm-name') ? wrapperAttributes.getNamedItem('bm-name').value :  '';
	    var prerender = wrapperAttributes.getNamedItem('data-anim-prerender') ? wrapperAttributes.getNamedItem('data-anim-prerender').value :  wrapperAttributes.getNamedItem('data-bm-prerender') ? wrapperAttributes.getNamedItem('data-bm-prerender').value :  wrapperAttributes.getNamedItem('bm-prerender') ? wrapperAttributes.getNamedItem('bm-prerender').value : '';

	    if(prerender === 'false'){
	        params.prerender = false;
	    }
	    this.setParams(params);
	};

	AnimationItem.prototype.includeLayers = function(data) {
	    if(data.op > this.animationData.op){
	        this.animationData.op = data.op;
	        this.totalFrames = Math.floor(data.op - this.animationData.ip);
	    }
	    var layers = this.animationData.layers;
	    var i, len = layers.length;
	    var newLayers = data.layers;
	    var j, jLen = newLayers.length;
	    for(j=0;j<jLen;j+=1){
	        i = 0;
	        while(i<len){
	            if(layers[i].id == newLayers[j].id){
	                layers[i] = newLayers[j];
	                break;
	            }
	            i += 1;
	        }
	    }
	    if(data.chars || data.fonts){
	        this.renderer.globalData.fontManager.addChars(data.chars);
	        this.renderer.globalData.fontManager.addFonts(data.fonts, this.renderer.globalData.defs);
	    }
	    if(data.assets){
	        len = data.assets.length;
	        for(i = 0; i < len; i += 1){
	            this.animationData.assets.push(data.assets[i]);
	        }
	    }
	    this.animationData.__complete = false;
	    dataManager.completeData(this.animationData,this.renderer.globalData.fontManager);
	    this.renderer.includeLayers(data.layers);
	    if(expressionsPlugin){
	        expressionsPlugin.initExpressions(this);
	    }
	    this.loadNextSegment();
	};

	AnimationItem.prototype.loadNextSegment = function() {
	    var segments = this.animationData.segments;
	    if(!segments || segments.length === 0 || !this.autoloadSegments){
	        this.trigger('data_ready');
	        this.timeCompleted = this.totalFrames;
	        return;
	    }
	    var segment = segments.shift();
	    this.timeCompleted = segment.time * this.frameRate;
	    var segmentPath = this.path+this.fileName+'_' + this.segmentPos + '.json';
	    this.segmentPos += 1;
	    assetLoader.load(segmentPath, this.includeLayers.bind(this), function() {
	        this.trigger('data_failed');
	    }.bind(this));
	};

	AnimationItem.prototype.loadSegments = function() {
	    var segments = this.animationData.segments;
	    if(!segments) {
	        this.timeCompleted = this.totalFrames;
	    }
	    this.loadNextSegment();
	};

	AnimationItem.prototype.imagesLoaded = function() {
	    this.trigger('loaded_images');
	    this.checkLoaded();
	};

	AnimationItem.prototype.preloadImages = function() {
	    this.imagePreloader.setAssetsPath(this.assetsPath);
	    this.imagePreloader.setPath(this.path);
	    this.imagePreloader.loadAssets(this.animationData.assets, this.imagesLoaded.bind(this));
	};

	AnimationItem.prototype.configAnimation = function (animData) {
	    if(!this.renderer){
	        return;
	    }
	    try {
	        this.animationData = animData;

	        if (this.initialSegment) {
	            this.totalFrames = Math.floor(this.initialSegment[1] - this.initialSegment[0]);
	            this.firstFrame = Math.round(this.initialSegment[0]);
	        } else {
	            this.totalFrames = Math.floor(this.animationData.op - this.animationData.ip);
	            this.firstFrame = Math.round(this.animationData.ip);
	        }
	        this.renderer.configAnimation(animData);
	        if(!animData.assets){
	            animData.assets = [];
	        }

	        this.assets = this.animationData.assets;
	        this.frameRate = this.animationData.fr;
	        this.frameMult = this.animationData.fr / 1000;
	        this.renderer.searchExtraCompositions(animData.assets);
	        this.trigger('config_ready');
	        this.preloadImages();
	        this.loadSegments();
	        this.updaFrameModifier();
	        this.waitForFontsLoaded();
	    } catch(error) {
	        this.triggerConfigError(error);
	    }
	};

	AnimationItem.prototype.waitForFontsLoaded = function(){
	    if(!this.renderer) {
	        return;
	    }
	    if(this.renderer.globalData.fontManager.isLoaded){
	        this.checkLoaded();
	    }else {
	        setTimeout(this.waitForFontsLoaded.bind(this),20);
	    }
	};

	AnimationItem.prototype.checkLoaded = function () {
	    if (!this.isLoaded 
	        && this.renderer.globalData.fontManager.isLoaded
	        && (this.imagePreloader.loaded() || this.renderer.rendererType !== 'canvas')
	    ) {
	        this.isLoaded = true;
	        dataManager.completeData(this.animationData, this.renderer.globalData.fontManager);
	        if(expressionsPlugin){
	            expressionsPlugin.initExpressions(this);
	        }
	        this.renderer.initItems();
	        setTimeout(function() {
	            this.trigger('DOMLoaded');
	        }.bind(this), 0);
	        this.gotoFrame();
	        if(this.autoplay){
	            this.play();
	        }
	    }
	};

	AnimationItem.prototype.resize = function () {
	    this.renderer.updateContainerSize();
	};

	AnimationItem.prototype.setSubframe = function(flag){
	    this.isSubframeEnabled = !!flag;
	};

	AnimationItem.prototype.gotoFrame = function () {
	    this.currentFrame = this.isSubframeEnabled ? this.currentRawFrame : ~~this.currentRawFrame;

	    if(this.timeCompleted !== this.totalFrames && this.currentFrame > this.timeCompleted){
	        this.currentFrame = this.timeCompleted;
	    }
	    this.trigger('enterFrame');
	    this.renderFrame();
	};

	AnimationItem.prototype.renderFrame = function () {
	    if(this.isLoaded === false){
	        return;
	    }
	    try {
	        this.renderer.renderFrame(this.currentFrame + this.firstFrame);
	    } catch(error) {
	        this.triggerRenderFrameError(error);
	    }
	};

	AnimationItem.prototype.play = function (name) {
	    if(name && this.name != name){
	        return;
	    }
	    if(this.isPaused === true){
	        this.isPaused = false;
	        if(this._idle){
	            this._idle = false;
	            this.trigger('_active');
	        }
	    }
	};

	AnimationItem.prototype.pause = function (name) {
	    if(name && this.name != name){
	        return;
	    }
	    if(this.isPaused === false){
	        this.isPaused = true;
	        this._idle = true;
	        this.trigger('_idle');
	    }
	};

	AnimationItem.prototype.togglePause = function (name) {
	    if(name && this.name != name){
	        return;
	    }
	    if(this.isPaused === true){
	        this.play();
	    }else {
	        this.pause();
	    }
	};

	AnimationItem.prototype.stop = function (name) {
	    if(name && this.name != name){
	        return;
	    }
	    this.pause();
	    this.playCount = 0;
	    this._completedLoop = false;
	    this.setCurrentRawFrameValue(0);
	};

	AnimationItem.prototype.goToAndStop = function (value, isFrame, name) {
	    if(name && this.name != name){
	        return;
	    }
	    if(isFrame){
	        this.setCurrentRawFrameValue(value);
	    }else {
	        this.setCurrentRawFrameValue(value * this.frameModifier);
	    }
	    this.pause();
	};

	AnimationItem.prototype.goToAndPlay = function (value, isFrame, name) {
	    this.goToAndStop(value, isFrame, name);
	    this.play();
	};

	AnimationItem.prototype.advanceTime = function (value) {
	    if (this.isPaused === true || this.isLoaded === false) {
	        return;
	    }
	    var nextValue = this.currentRawFrame + value * this.frameModifier;
	    var _isComplete = false;
	    // Checking if nextValue > totalFrames - 1 for addressing non looping and looping animations.
	    // If animation won't loop, it should stop at totalFrames - 1. If it will loop it should complete the last frame and then loop.
	    if (nextValue >= this.totalFrames - 1 && this.frameModifier > 0) {
	        if (!this.loop || this.playCount === this.loop) {
	            if (!this.checkSegments(nextValue >  this.totalFrames ? nextValue % this.totalFrames : 0)) {
	                _isComplete = true;
	                nextValue = this.totalFrames - 1;
	            }
	        } else if (nextValue >= this.totalFrames) {
	            this.playCount += 1;
	            if (!this.checkSegments(nextValue % this.totalFrames)) {
	                this.setCurrentRawFrameValue(nextValue % this.totalFrames);
	                this._completedLoop = true;
	                this.trigger('loopComplete');
	            }
	        } else {
	            this.setCurrentRawFrameValue(nextValue);
	        }
	    } else if(nextValue < 0) {
	        if (!this.checkSegments(nextValue % this.totalFrames)) {
	            if (this.loop && !(this.playCount-- <= 0 && this.loop !== true)) {
	                this.setCurrentRawFrameValue(this.totalFrames + (nextValue % this.totalFrames));
	                if(!this._completedLoop) {
	                    this._completedLoop = true;
	                } else {
	                    this.trigger('loopComplete');
	                }
	            } else {
	                _isComplete = true;
	                nextValue = 0;
	            }
	        }
	    } else {
	        this.setCurrentRawFrameValue(nextValue);
	    }
	    if (_isComplete) {
	        this.setCurrentRawFrameValue(nextValue);
	        this.pause();
	        this.trigger('complete');
	    }
	};

	AnimationItem.prototype.adjustSegment = function(arr, offset){
	    this.playCount = 0;
	    if(arr[1] < arr[0]){
	        if(this.frameModifier > 0){
	            if(this.playSpeed < 0){
	                this.setSpeed(-this.playSpeed);
	            } else {
	                this.setDirection(-1);
	            }
	        }
	        this.timeCompleted = this.totalFrames = arr[0] - arr[1];
	        this.firstFrame = arr[1];
	        this.setCurrentRawFrameValue(this.totalFrames - 0.001 - offset);
	    } else if(arr[1] > arr[0]){
	        if(this.frameModifier < 0){
	            if(this.playSpeed < 0){
	                this.setSpeed(-this.playSpeed);
	            } else {
	                this.setDirection(1);
	            }
	        }
	        this.timeCompleted = this.totalFrames = arr[1] - arr[0];
	        this.firstFrame = arr[0];
	        this.setCurrentRawFrameValue(0.001 + offset);
	    }
	    this.trigger('segmentStart');
	};
	AnimationItem.prototype.setSegment = function (init,end) {
	    var pendingFrame = -1;
	    if(this.isPaused) {
	        if (this.currentRawFrame + this.firstFrame < init) {
	            pendingFrame = init;
	        } else if (this.currentRawFrame + this.firstFrame > end) {
	            pendingFrame = end - init;
	        }
	    }

	    this.firstFrame = init;
	    this.timeCompleted = this.totalFrames = end - init;
	    if(pendingFrame !== -1) {
	        this.goToAndStop(pendingFrame,true);
	    }
	};

	AnimationItem.prototype.playSegments = function (arr, forceFlag) {
	    if (forceFlag) {
	        this.segments.length = 0;
	    }
	    if (typeof arr[0] === 'object') {
	        var i, len = arr.length;
	        for (i = 0; i < len; i += 1) {
	            this.segments.push(arr[i]);
	        }
	    } else {
	        this.segments.push(arr);
	    }
	    if (this.segments.length && forceFlag) {
	        this.adjustSegment(this.segments.shift(), 0);
	    }
	    if (this.isPaused) {
	        this.play();
	    }
	};

	AnimationItem.prototype.resetSegments = function (forceFlag) {
	    this.segments.length = 0;
	    this.segments.push([this.animationData.ip,this.animationData.op]);
	    //this.segments.push([this.animationData.ip*this.frameRate,Math.floor(this.animationData.op - this.animationData.ip+this.animationData.ip*this.frameRate)]);
	    if (forceFlag) {
	        this.checkSegments(0);
	    }
	};
	AnimationItem.prototype.checkSegments = function(offset) {
	    if (this.segments.length) {
	        this.adjustSegment(this.segments.shift(), offset);
	        return true;
	    }
	    return false;
	};

	AnimationItem.prototype.destroy = function (name) {
	    if ((name && this.name != name) || !this.renderer) {
	        return;
	    }
	    this.renderer.destroy();
	    this.imagePreloader.destroy();
	    this.trigger('destroy');
	    this._cbs = null;
	    this.onEnterFrame = this.onLoopComplete = this.onComplete = this.onSegmentStart = this.onDestroy = null;
	    this.renderer = null;
	};

	AnimationItem.prototype.setCurrentRawFrameValue = function(value){
	    this.currentRawFrame = value;
	    this.gotoFrame();
	};

	AnimationItem.prototype.setSpeed = function (val) {
	    this.playSpeed = val;
	    this.updaFrameModifier();
	};

	AnimationItem.prototype.setDirection = function (val) {
	    this.playDirection = val < 0 ? -1 : 1;
	    this.updaFrameModifier();
	};

	AnimationItem.prototype.updaFrameModifier = function () {
	    this.frameModifier = this.frameMult * this.playSpeed * this.playDirection;
	};

	AnimationItem.prototype.getPath = function () {
	    return this.path;
	};

	AnimationItem.prototype.getAssetsPath = function (assetData) {
	    var path = '';
	    if(assetData.e) {
	        path = assetData.p;
	    } else if(this.assetsPath){
	        var imagePath = assetData.p;
	        if(imagePath.indexOf('images/') !== -1){
	            imagePath = imagePath.split('/')[1];
	        }
	        path = this.assetsPath + imagePath;
	    } else {
	        path = this.path;
	        path += assetData.u ? assetData.u : '';
	        path += assetData.p;
	    }
	    return path;
	};

	AnimationItem.prototype.getAssetData = function (id) {
	    var i = 0, len = this.assets.length;
	    while (i < len) {
	        if(id == this.assets[i].id){
	            return this.assets[i];
	        }
	        i += 1;
	    }
	};

	AnimationItem.prototype.hide = function () {
	    this.renderer.hide();
	};

	AnimationItem.prototype.show = function () {
	    this.renderer.show();
	};

	AnimationItem.prototype.getDuration = function (isFrame) {
	    return isFrame ? this.totalFrames : this.totalFrames / this.frameRate;
	};

	AnimationItem.prototype.trigger = function(name){
	    if(this._cbs && this._cbs[name]){
	        switch(name){
	            case 'enterFrame':
	                this.triggerEvent(name,new BMEnterFrameEvent(name,this.currentFrame,this.totalFrames,this.frameModifier));
	                break;
	            case 'loopComplete':
	                this.triggerEvent(name,new BMCompleteLoopEvent(name,this.loop,this.playCount,this.frameMult));
	                break;
	            case 'complete':
	                this.triggerEvent(name,new BMCompleteEvent(name,this.frameMult));
	                break;
	            case 'segmentStart':
	                this.triggerEvent(name,new BMSegmentStartEvent(name,this.firstFrame,this.totalFrames));
	                break;
	            case 'destroy':
	                this.triggerEvent(name,new BMDestroyEvent(name,this));
	                break;
	            default:
	                this.triggerEvent(name);
	        }
	    }
	    if(name === 'enterFrame' && this.onEnterFrame){
	        this.onEnterFrame.call(this,new BMEnterFrameEvent(name,this.currentFrame,this.totalFrames,this.frameMult));
	    }
	    if(name === 'loopComplete' && this.onLoopComplete){
	        this.onLoopComplete.call(this,new BMCompleteLoopEvent(name,this.loop,this.playCount,this.frameMult));
	    }
	    if(name === 'complete' && this.onComplete){
	        this.onComplete.call(this,new BMCompleteEvent(name,this.frameMult));
	    }
	    if(name === 'segmentStart' && this.onSegmentStart){
	        this.onSegmentStart.call(this,new BMSegmentStartEvent(name,this.firstFrame,this.totalFrames));
	    }
	    if(name === 'destroy' && this.onDestroy){
	        this.onDestroy.call(this,new BMDestroyEvent(name,this));
	    }
	};

	AnimationItem.prototype.triggerRenderFrameError = function(nativeError) {

	    var error = new BMRenderFrameErrorEvent(nativeError, this.currentFrame);
	    this.triggerEvent('error', error);

	    if (this.onError) {
	        this.onError.call(this, error);
	    }
	};

	AnimationItem.prototype.triggerConfigError = function(nativeError) {

	    var error = new BMConfigErrorEvent(nativeError, this.currentFrame);
	    this.triggerEvent('error', error);

	    if (this.onError) {
	        this.onError.call(this, error);
	    }
	};
	var Expressions = (function(){
	    var ob = {};
	    ob.initExpressions = initExpressions;


	    function initExpressions(animation){

	    	var stackCount = 0;
	    	var registers = [];

	    	function pushExpression() {
				stackCount += 1;
	    	}

	    	function popExpression() {
				stackCount -= 1;
				if (stackCount === 0) {
					releaseInstances();
				}
	    	}

	    	function registerExpressionProperty(expression) {
	    		if (registers.indexOf(expression) === -1) {
					registers.push(expression);
	    		}
	    	}

	    	function releaseInstances() {
	    		var i, len = registers.length;
	    		for (i = 0; i < len; i += 1) {
					registers[i].release();
	    		}
	    		registers.length = 0;
	    	}

	        animation.renderer.compInterface = CompExpressionInterface(animation.renderer);
	        animation.renderer.globalData.projectInterface.registerComposition(animation.renderer);
	        animation.renderer.globalData.pushExpression = pushExpression;
	        animation.renderer.globalData.popExpression = popExpression;
	        animation.renderer.globalData.registerExpressionProperty = registerExpressionProperty;
	    }
	   return ob;
	}());

	expressionsPlugin = Expressions;

	var ExpressionManager = (function(){
	    var ob = {};
	    var Math = BMMath;

	    var easeInBez = BezierFactory.getBezierEasing(0.333,0,.833,.833, 'easeIn').get;
	    var easeOutBez = BezierFactory.getBezierEasing(0.167,0.167,.667,1, 'easeOut').get;
	    var easeInOutBez = BezierFactory.getBezierEasing(.33,0,.667,1, 'easeInOut').get;

	    function initiateExpression(elem,data,property){
	        var val = data.x;
	        var needsVelocity = /velocity(?![\w\d])/.test(val);
	        var _needsRandom = val.indexOf('random') !== -1;
	        var elemType = elem.data.ty;
	        var transform,content,effect;
	        var thisProperty = property;
	        thisProperty.valueAtTime = thisProperty.getValueAtTime;
	        Object.defineProperty(thisProperty, 'value', {
	            get: function() {
	                return thisProperty.v
	            }
	        });
	        elem.comp.frameDuration = 1/elem.comp.globalData.frameRate;
	        elem.comp.displayStartTime = 0;
	        var inPoint = elem.data.ip/elem.comp.globalData.frameRate;
	        var outPoint = elem.data.op/elem.comp.globalData.frameRate;
	        var width = elem.data.sw ? elem.data.sw : 0;
	        var height = elem.data.sh ? elem.data.sh : 0;
	        var name = elem.data.nm;
	        var loopIn, loopOut, smooth;
	        var toWorld,fromWorld,fromComp,toComp,anchorPoint, thisLayer, thisComp,mask,valueAtTime,velocityAtTime;
	        var __expression_functions = [];
	        if(data.xf) {
	            var i, len = data.xf.length;
	            for(i = 0; i < len; i += 1) {
	                __expression_functions[i] = eval('(function(){ return ' + data.xf[i] + '}())');
	            }
	        }

	        var scoped_bm_rt;
	        var expression_function = eval('[function _expression_function(){' + val+';scoped_bm_rt=$bm_rt}' + ']')[0];
	        var numKeys = property.kf ? data.k.length : 0;

	        var active = !this.data || this.data.hd !== true;

	        var wiggle = function wiggle(freq,amp){
	            var i,j, len = this.pv.length ? this.pv.length : 1;
	            var addedAmps = createTypedArray('float32', len);
	            freq = 5;
	            var iterations = Math.floor(time*freq);
	            i = 0;
	            j = 0;
	            while(i<iterations){
	                //var rnd = BMMath.random();
	                for(j=0;j<len;j+=1){
	                    addedAmps[j] += -amp + amp*2*BMMath.random();
	                    //addedAmps[j] += -amp + amp*2*rnd;
	                }
	                i += 1;
	            }
	            //var rnd2 = BMMath.random();
	            var periods = time*freq;
	            var perc = periods - Math.floor(periods);
	            var arr = createTypedArray('float32', len);
	            if(len>1){
	                for(j=0;j<len;j+=1){
	                    arr[j] = this.pv[j] + addedAmps[j] + (-amp + amp*2*BMMath.random())*perc;
	                    //arr[j] = this.pv[j] + addedAmps[j] + (-amp + amp*2*rnd)*perc;
	                    //arr[i] = this.pv[i] + addedAmp + amp1*perc + amp2*(1-perc);
	                }
	                return arr;
	            } else {
	                return this.pv + addedAmps[0] + (-amp + amp*2*BMMath.random())*perc;
	            }
	        }.bind(this);

	        if(thisProperty.loopIn) {
	            loopIn = thisProperty.loopIn.bind(thisProperty);
	        }

	        if(thisProperty.loopOut) {
	            loopOut = thisProperty.loopOut.bind(thisProperty);
	        }

	        if(thisProperty.smooth) {
	            smooth = thisProperty.smooth.bind(thisProperty);
	        }

	        if(this.getValueAtTime) {
	            valueAtTime = this.getValueAtTime.bind(this);
	        }

	        if(this.getVelocityAtTime) {
	            velocityAtTime = this.getVelocityAtTime.bind(this);
	        }

	        var comp = elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface);

	        function seedRandom(seed){
	            BMMath.seedrandom(randSeed + seed);
	        }

	        var time, velocity, value, text, textIndex, textTotal, selectorValue;
	        var index = elem.data.ind;
	        var hasParent = !!(elem.hierarchy && elem.hierarchy.length);
	        var parent;
	        var randSeed = Math.floor(Math.random()*1000000);
	        var globalData = elem.globalData;
	        function executeExpression(_value) {
	            // globalData.pushExpression();
	            value = _value;
	            if (_needsRandom) {
	                seedRandom(randSeed);
	            }
	            if (this.frameExpressionId === elem.globalData.frameId && this.propType !== 'textSelector') {
	                return value;
	            }
	            if(this.propType === 'textSelector'){
	                textIndex = this.textIndex;
	                textTotal = this.textTotal;
	                selectorValue = this.selectorValue;
	            }
	            if (!thisLayer) {
	                text = elem.layerInterface.text;
	                thisLayer = elem.layerInterface;
	                thisComp = elem.comp.compInterface;
	                toWorld = thisLayer.toWorld.bind(thisLayer);
	                fromWorld = thisLayer.fromWorld.bind(thisLayer);
	                fromComp = thisLayer.fromComp.bind(thisLayer);
	                toComp = thisLayer.toComp.bind(thisLayer);
	                mask = thisLayer.mask ? thisLayer.mask.bind(thisLayer) : null;
	            }
	            if (!transform) {
	                transform = elem.layerInterface("ADBE Transform Group");
	                if(transform) {
	                    anchorPoint = transform.anchorPoint;
	                    /*position = transform.position;
	                    rotation = transform.rotation;
	                    scale = transform.scale;*/
	                }
	            }
	            
	            if (elemType === 4 && !content) {
	                content = thisLayer("ADBE Root Vectors Group");
	            }
	            if (!effect) {
	                effect = thisLayer(4);
	            }
	            hasParent = !!(elem.hierarchy && elem.hierarchy.length);
	            if (hasParent && !parent) {
	                parent = elem.hierarchy[0].layerInterface;
	            }
	            time = this.comp.renderedFrame/this.comp.globalData.frameRate;
	            if (needsVelocity) {
	                velocity = velocityAtTime(time);
	            }
	            expression_function();
	            this.frameExpressionId = elem.globalData.frameId;

	            //TODO: Check if it's possible to return on ShapeInterface the .v value
	            if (scoped_bm_rt.propType === "shape") ;
	            // globalData.popExpression();
	            return scoped_bm_rt;
	        }
	        return executeExpression;
	    }

	    ob.initiateExpression = initiateExpression;
	    return ob;
	}());
	var expressionHelpers = (function(){

	    function searchExpressions(elem,data,prop){
	        if(data.x){
	            prop.k = true;
	            prop.x = true;
	            prop.initiateExpression = ExpressionManager.initiateExpression;
	            prop.effectsSequence.push(prop.initiateExpression(elem,data,prop).bind(prop));
	        }
	    }

	    function getValueAtTime(frameNum) {
	        frameNum *= this.elem.globalData.frameRate;
	        frameNum -= this.offsetTime;
	        if(frameNum !== this._cachingAtTime.lastFrame) {
	            this._cachingAtTime.lastIndex = this._cachingAtTime.lastFrame < frameNum ? this._cachingAtTime.lastIndex : 0;
	            this._cachingAtTime.value = this.interpolateValue(frameNum, this._cachingAtTime);
	            this._cachingAtTime.lastFrame = frameNum;
	        }
	        return this._cachingAtTime.value;

	    }

	    function getSpeedAtTime(frameNum) {
	        var delta = -0.01;
	        var v1 = this.getValueAtTime(frameNum);
	        var v2 = this.getValueAtTime(frameNum + delta);
	        var speed = 0;
	        if(v1.length){
	            var i;
	            for(i=0;i<v1.length;i+=1){
	                speed += Math.pow(v2[i] - v1[i], 2);
	            }
	            speed = Math.sqrt(speed) * 100;
	        } else {
	            speed = 0;
	        }
	        return speed;
	    }

	    function getVelocityAtTime(frameNum) {
	        if(this.vel !== undefined){
	            return this.vel;
	        }
	        var delta = -0.001;
	        //frameNum += this.elem.data.st;
	        var v1 = this.getValueAtTime(frameNum);
	        var v2 = this.getValueAtTime(frameNum + delta);
	        var velocity;
	        if(v1.length){
	            velocity = createTypedArray('float32', v1.length);
	            var i;
	            for(i=0;i<v1.length;i+=1){
	                //removing frameRate
	                //if needed, don't add it here
	                //velocity[i] = this.elem.globalData.frameRate*((v2[i] - v1[i])/delta);
	                velocity[i] = (v2[i] - v1[i])/delta;
	            }
	        } else {
	            velocity = (v2 - v1)/delta;
	        }
	        return velocity;
	    }

	    function getStaticValueAtTime() {
	        return this.pv;
	    }

	    function setGroupProperty(propertyGroup){
	        this.propertyGroup = propertyGroup;
	    }

		return {
			searchExpressions: searchExpressions,
			getSpeedAtTime: getSpeedAtTime,
			getVelocityAtTime: getVelocityAtTime,
			getValueAtTime: getValueAtTime,
			getStaticValueAtTime: getStaticValueAtTime,
			setGroupProperty: setGroupProperty,
		}
	}());
	(function addPropertyDecorator() {

	    function loopOut(type,duration,durationFlag){
	        if(!this.k || !this.keyframes){
	            return this.pv;
	        }
	        type = type ? type.toLowerCase() : '';
	        var currentFrame = this.comp.renderedFrame;
	        var keyframes = this.keyframes;
	        var lastKeyFrame = keyframes[keyframes.length - 1].t;
	        if(currentFrame<=lastKeyFrame){
	            return this.pv;
	        }else {
	            var cycleDuration, firstKeyFrame;
	            if(!durationFlag){
	                if(!duration || duration > keyframes.length - 1){
	                    duration = keyframes.length - 1;
	                }
	                firstKeyFrame = keyframes[keyframes.length - 1 - duration].t;
	                cycleDuration = lastKeyFrame - firstKeyFrame;
	            } else {
	                if(!duration){
	                    cycleDuration = Math.max(0,lastKeyFrame - this.elem.data.ip);
	                } else {
	                    cycleDuration = Math.abs(lastKeyFrame - elem.comp.globalData.frameRate*duration);
	                }
	                firstKeyFrame = lastKeyFrame - cycleDuration;
	            }
	            var i, len, ret;
	            if(type === 'pingpong') {
	                var iterations = Math.floor((currentFrame - firstKeyFrame)/cycleDuration);
	                if(iterations % 2 !== 0){
	                    return this.getValueAtTime(((cycleDuration - (currentFrame - firstKeyFrame) % cycleDuration +  firstKeyFrame)) / this.comp.globalData.frameRate, 0);
	                }
	            } else if(type === 'offset'){
	                var initV = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
	                var endV = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
	                var current = this.getValueAtTime(((currentFrame - firstKeyFrame) % cycleDuration +  firstKeyFrame) / this.comp.globalData.frameRate, 0);
	                var repeats = Math.floor((currentFrame - firstKeyFrame)/cycleDuration);
	                if(this.pv.length){
	                    ret = new Array(initV.length);
	                    len = ret.length;
	                    for(i=0;i<len;i+=1){
	                        ret[i] = (endV[i]-initV[i])*repeats + current[i];
	                    }
	                    return ret;
	                }
	                return (endV-initV)*repeats + current;
	            } else if(type === 'continue'){
	                var lastValue = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
	                var nextLastValue = this.getValueAtTime((lastKeyFrame - 0.001) / this.comp.globalData.frameRate, 0);
	                if(this.pv.length){
	                    ret = new Array(lastValue.length);
	                    len = ret.length;
	                    for(i=0;i<len;i+=1){
	                        ret[i] = lastValue[i] + (lastValue[i]-nextLastValue[i])*((currentFrame - lastKeyFrame)/ this.comp.globalData.frameRate)/0.0005;
	                    }
	                    return ret;
	                }
	                return lastValue + (lastValue-nextLastValue)*(((currentFrame - lastKeyFrame))/0.001);
	            }
	            return this.getValueAtTime((((currentFrame - firstKeyFrame) % cycleDuration +  firstKeyFrame)) / this.comp.globalData.frameRate, 0);
	        }
	    }

	    function loopIn(type,duration, durationFlag) {
	        if(!this.k){
	            return this.pv;
	        }
	        type = type ? type.toLowerCase() : '';
	        var currentFrame = this.comp.renderedFrame;
	        var keyframes = this.keyframes;
	        var firstKeyFrame = keyframes[0].t;
	        if(currentFrame>=firstKeyFrame){
	            return this.pv;
	        }else {
	            var cycleDuration, lastKeyFrame;
	            if(!durationFlag){
	                if(!duration || duration > keyframes.length - 1){
	                    duration = keyframes.length - 1;
	                }
	                lastKeyFrame = keyframes[duration].t;
	                cycleDuration = lastKeyFrame - firstKeyFrame;
	            } else {
	                if(!duration){
	                    cycleDuration = Math.max(0,this.elem.data.op - firstKeyFrame);
	                } else {
	                    cycleDuration = Math.abs(elem.comp.globalData.frameRate*duration);
	                }
	                lastKeyFrame = firstKeyFrame + cycleDuration;
	            }
	            var i, len, ret;
	            if(type === 'pingpong') {
	                var iterations = Math.floor((firstKeyFrame - currentFrame)/cycleDuration);
	                if(iterations % 2 === 0){
	                    return this.getValueAtTime((((firstKeyFrame - currentFrame)%cycleDuration +  firstKeyFrame)) / this.comp.globalData.frameRate, 0);
	                }
	            } else if(type === 'offset'){
	                var initV = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
	                var endV = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
	                var current = this.getValueAtTime((cycleDuration - (firstKeyFrame - currentFrame)%cycleDuration +  firstKeyFrame) / this.comp.globalData.frameRate, 0);
	                var repeats = Math.floor((firstKeyFrame - currentFrame)/cycleDuration)+1;
	                if(this.pv.length){
	                    ret = new Array(initV.length);
	                    len = ret.length;
	                    for(i=0;i<len;i+=1){
	                        ret[i] = current[i]-(endV[i]-initV[i])*repeats;
	                    }
	                    return ret;
	                }
	                return current-(endV-initV)*repeats;
	            } else if(type === 'continue'){
	                var firstValue = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
	                var nextFirstValue = this.getValueAtTime((firstKeyFrame + 0.001) / this.comp.globalData.frameRate, 0);
	                if(this.pv.length){
	                    ret = new Array(firstValue.length);
	                    len = ret.length;
	                    for(i=0;i<len;i+=1){
	                        ret[i] = firstValue[i] + (firstValue[i]-nextFirstValue[i])*(firstKeyFrame - currentFrame)/0.001;
	                    }
	                    return ret;
	                }
	                return firstValue + (firstValue-nextFirstValue)*(firstKeyFrame - currentFrame)/0.001;
	            }
	            return this.getValueAtTime(((cycleDuration - (firstKeyFrame - currentFrame) % cycleDuration +  firstKeyFrame)) / this.comp.globalData.frameRate, 0);
	        }
	    }

	    function smooth(width, samples) {
	        if (!this.k){
	            return this.pv;
	        }
	        width = (width || 0.4) * 0.5;
	        samples = Math.floor(samples || 5);
	        if (samples <= 1) {
	            return this.pv;
	        }
	        var currentTime = this.comp.renderedFrame / this.comp.globalData.frameRate;
	        var initFrame = currentTime - width;
	        var endFrame = currentTime + width;
	        var sampleFrequency = samples > 1 ? (endFrame - initFrame) / (samples - 1) : 1;
	        var i = 0, j = 0;
	        var value;
	        if (this.pv.length) {
	            value = createTypedArray('float32', this.pv.length);
	        } else {
	            value = 0;
	        }
	        var sampleValue;
	        while (i < samples) {
	            sampleValue = this.getValueAtTime(initFrame + i * sampleFrequency);
	            if(this.pv.length) {
	                for (j = 0; j < this.pv.length; j += 1) {
	                    value[j] += sampleValue[j];
	                }
	            } else {
	                value += sampleValue;
	            }
	            i += 1;
	        }
	        if(this.pv.length) {
	            for (j = 0; j < this.pv.length; j += 1) {
	                value[j] /= samples;
	            }
	        } else {
	            value /= samples;
	        }
	        return value;
	    }

	    function getTransformValueAtTime(time) {
	        console.warn('Transform at time not supported');
	    }

	    function getTransformStaticValueAtTime(time) {

	    }

	    var getTransformProperty = TransformPropertyFactory.getTransformProperty;
	    TransformPropertyFactory.getTransformProperty = function(elem, data, container) {
	        var prop = getTransformProperty(elem, data, container);
	        if(prop.dynamicProperties.length) {
	            prop.getValueAtTime = getTransformValueAtTime.bind(prop);
	        } else {
	            prop.getValueAtTime = getTransformStaticValueAtTime.bind(prop);
	        }
	        prop.setGroupProperty = expressionHelpers.setGroupProperty;
	        return prop;
	    };

	    var propertyGetProp = PropertyFactory.getProp;
	    PropertyFactory.getProp = function(elem,data,type, mult, container){
	        var prop = propertyGetProp(elem,data,type, mult, container);
	        //prop.getVelocityAtTime = getVelocityAtTime;
	        //prop.loopOut = loopOut;
	        //prop.loopIn = loopIn;
	        if(prop.kf){
	            prop.getValueAtTime = expressionHelpers.getValueAtTime.bind(prop);
	        } else {
	            prop.getValueAtTime = expressionHelpers.getStaticValueAtTime.bind(prop);
	        }
	        prop.setGroupProperty = expressionHelpers.setGroupProperty;
	        prop.loopOut = loopOut;
	        prop.loopIn = loopIn;
	        prop.smooth = smooth;
	        prop.getVelocityAtTime = expressionHelpers.getVelocityAtTime.bind(prop);
	        prop.getSpeedAtTime = expressionHelpers.getSpeedAtTime.bind(prop);
	        prop.numKeys = data.a === 1 ? data.k.length : 0;
	        prop.propertyIndex = data.ix;
	        var value = 0;
	        if(type !== 0) {
	            value = createTypedArray('float32', data.a === 1 ?  data.k[0].s.length : data.k.length);
	        }
	        prop._cachingAtTime = {
	            lastFrame: initialDefaultFrame,
	            lastIndex: 0,
	            value: value
	        };
	        expressionHelpers.searchExpressions(elem,data,prop);
	        if(prop.k){
	            container.addDynamicProperty(prop);
	        }

	        return prop;
	    };

	    function getShapeValueAtTime(frameNum) {
	        //For now this caching object is created only when needed instead of creating it when the shape is initialized.
	        if (!this._cachingAtTime) {
	            this._cachingAtTime = {
	                shapeValue: shape_pool.clone(this.pv),
	                lastIndex: 0,
	                lastTime: initialDefaultFrame
	            };
	        }
	        
	        frameNum *= this.elem.globalData.frameRate;
	        frameNum -= this.offsetTime;
	        if(frameNum !== this._cachingAtTime.lastTime) {
	            this._cachingAtTime.lastIndex = this._cachingAtTime.lastTime < frameNum ? this._caching.lastIndex : 0;
	            this._cachingAtTime.lastTime = frameNum;
	            this.interpolateShape(frameNum, this._cachingAtTime.shapeValue, this._cachingAtTime);
	        }
	        return this._cachingAtTime.shapeValue;
	    }

	    var ShapePropertyConstructorFunction = ShapePropertyFactory.getConstructorFunction();
	    var KeyframedShapePropertyConstructorFunction = ShapePropertyFactory.getKeyframedConstructorFunction();

	    function ShapeExpressions(){}
	    ShapeExpressions.prototype = {
	        vertices: function(prop, time){
	            if (this.k) {
	                this.getValue();
	            }
	            var shapePath = this.v;
	            if(time !== undefined) {
	                shapePath = this.getValueAtTime(time, 0);
	            }
	            var i, len = shapePath._length;
	            var vertices = shapePath[prop];
	            var points = shapePath.v;
	            var arr = createSizedArray(len);
	            for(i = 0; i < len; i += 1) {
	                if(prop === 'i' || prop === 'o') {
	                    arr[i] = [vertices[i][0] - points[i][0], vertices[i][1] - points[i][1]];
	                } else {
	                    arr[i] = [vertices[i][0], vertices[i][1]];
	                }
	                
	            }
	            return arr;
	        },
	        points: function(time){
	            return this.vertices('v', time);
	        },
	        inTangents: function(time){
	            return this.vertices('i', time);
	        },
	        outTangents: function(time){
	            return this.vertices('o', time);
	        },
	        isClosed: function(){
	            return this.v.c;
	        },
	        pointOnPath: function(perc, time){
	            var shapePath = this.v;
	            if(time !== undefined) {
	                shapePath = this.getValueAtTime(time, 0);
	            }
	            if(!this._segmentsLength) {
	                this._segmentsLength = bez.getSegmentsLength(shapePath);
	            }

	            var segmentsLength = this._segmentsLength;
	            var lengths = segmentsLength.lengths;
	            var lengthPos = segmentsLength.totalLength * perc;
	            var i = 0, len = lengths.length;
	            var accumulatedLength = 0, pt;
	            while(i < len) {
	                if(accumulatedLength + lengths[i].addedLength > lengthPos) {
	                    var initIndex = i;
	                    var endIndex = (shapePath.c && i === len - 1) ? 0 : i + 1;
	                    var segmentPerc = (lengthPos - accumulatedLength)/lengths[i].addedLength;
	                    pt = bez.getPointInSegment(shapePath.v[initIndex], shapePath.v[endIndex], shapePath.o[initIndex], shapePath.i[endIndex], segmentPerc, lengths[i]);
	                    break;
	                } else {
	                    accumulatedLength += lengths[i].addedLength;
	                }
	                i += 1;
	            }
	            if(!pt){
	                pt = shapePath.c ? [shapePath.v[0][0],shapePath.v[0][1]]:[shapePath.v[shapePath._length-1][0],shapePath.v[shapePath._length-1][1]];
	            }
	            return pt;
	        },
	        vectorOnPath: function(perc, time, vectorType){
	            //perc doesn't use triple equality because it can be a Number object as well as a primitive.
	            perc = perc == 1 ? this.v.c ? 0 : 0.999 : perc;
	            var pt1 = this.pointOnPath(perc, time);
	            var pt2 = this.pointOnPath(perc + 0.001, time);
	            var xLength = pt2[0] - pt1[0];
	            var yLength = pt2[1] - pt1[1];
	            var magnitude = Math.sqrt(Math.pow(xLength,2) + Math.pow(yLength,2));
	            if (magnitude === 0) {
	                return [0,0];
	            }
	            var unitVector = vectorType === 'tangent' ? [xLength/magnitude, yLength/magnitude] : [-yLength/magnitude, xLength/magnitude];
	            return unitVector;
	        },
	        tangentOnPath: function(perc, time){
	            return this.vectorOnPath(perc, time, 'tangent');
	        },
	        normalOnPath: function(perc, time){
	            return this.vectorOnPath(perc, time, 'normal');
	        },
	        setGroupProperty: expressionHelpers.setGroupProperty,
	        getValueAtTime: expressionHelpers.getStaticValueAtTime
	    };
	    extendPrototype([ShapeExpressions], ShapePropertyConstructorFunction);
	    extendPrototype([ShapeExpressions], KeyframedShapePropertyConstructorFunction);
	    KeyframedShapePropertyConstructorFunction.prototype.getValueAtTime = getShapeValueAtTime;
	    KeyframedShapePropertyConstructorFunction.prototype.initiateExpression = ExpressionManager.initiateExpression;

	    var propertyGetShapeProp = ShapePropertyFactory.getShapeProp;
	    ShapePropertyFactory.getShapeProp = function(elem,data,type, arr, trims){
	        var prop = propertyGetShapeProp(elem,data,type, arr, trims);
	        prop.propertyIndex = data.ix;
	        prop.lock = false;
	        if(type === 3){
	            expressionHelpers.searchExpressions(elem,data.pt,prop);
	        } else if(type === 4){
	            expressionHelpers.searchExpressions(elem,data.ks,prop);
	        }
	        if(prop.k){
	            elem.addDynamicProperty(prop);
	        }
	        return prop;
	    };
	}());
	(function addDecorator() {

	    function searchExpressions(){
	        if(this.data.d.x){
	            this.calculateExpression = ExpressionManager.initiateExpression.bind(this)(this.elem,this.data.d,this);
	            this.addEffect(this.getExpressionValue.bind(this));
	            return true;
	        }
	    }

	    TextProperty.prototype.getExpressionValue = function(currentValue, text) {
	        var newValue = this.calculateExpression(text);
	        if(currentValue.t !== newValue) {
	            var newData = {};
	            this.copyData(newData, currentValue);
	            newData.t = newValue.toString();
	            newData.__complete = false;
	            return newData;
	        }
	        return currentValue;
	    };

	    TextProperty.prototype.searchProperty = function(){

	        var isKeyframed = this.searchKeyframes();
	        var hasExpressions = this.searchExpressions();
	        this.kf = isKeyframed || hasExpressions;
	        return this.kf;
	    };

	    TextProperty.prototype.searchExpressions = searchExpressions;
	    
	}());
	var ShapePathInterface = (

		function() {

			return function pathInterfaceFactory(shape,view,propertyGroup){
			    var prop = view.sh;

			    function interfaceFunction(val){
			        if(val === 'Shape' || val === 'shape' || val === 'Path' || val === 'path' || val === 'ADBE Vector Shape' || val === 2){
			            return interfaceFunction.path;
			        }
			    }

			    var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
			    prop.setGroupProperty(PropertyInterface('Path', _propertyGroup));
			    Object.defineProperties(interfaceFunction, {
			        'path': {
			            get: function(){
			                if(prop.k){
			                    prop.getValue();
			                }
			                return prop;
			            }
			        },
			        'shape': {
			            get: function(){
			                if(prop.k){
			                    prop.getValue();
			                }
			                return prop;
			            }
			        },
			        '_name': { value: shape.nm },
			        'ix': { value: shape.ix },
			        'propertyIndex': { value: shape.ix },
			        'mn': { value: shape.mn },
			        'propertyGroup': {value: propertyGroup},
			    });
			    return interfaceFunction;
			}
		}()
	);
	var propertyGroupFactory = (function() {
		return function(interfaceFunction, parentPropertyGroup) {
			return function(val) {
				val = val === undefined ? 1 : val;
				if(val <= 0){
				    return interfaceFunction;
				} else {
				    return parentPropertyGroup(val-1);
				}
			}
		}
	}());
	var PropertyInterface = (function() {
		return function(propertyName, propertyGroup) {

			var interfaceFunction = {
				_name: propertyName
			};

			function _propertyGroup(val){
			    val = val === undefined ? 1 : val;
			    if(val <= 0){
			        return interfaceFunction;
			    } else {
			        return propertyGroup(--val);
			    }
			}

			return _propertyGroup;
		}
	}());
	var ShapeExpressionInterface = (function(){

	    function iterateElements(shapes,view, propertyGroup){
	        var arr = [];
	        var i, len = shapes ? shapes.length : 0;
	        for(i=0;i<len;i+=1){
	            if(shapes[i].ty == 'gr'){
	                arr.push(groupInterfaceFactory(shapes[i],view[i],propertyGroup));
	            }else if(shapes[i].ty == 'fl'){
	                arr.push(fillInterfaceFactory(shapes[i],view[i],propertyGroup));
	            }else if(shapes[i].ty == 'st'){
	                arr.push(strokeInterfaceFactory(shapes[i],view[i],propertyGroup));
	            }else if(shapes[i].ty == 'tm'){
	                arr.push(trimInterfaceFactory(shapes[i],view[i],propertyGroup));
	            }else if(shapes[i].ty == 'tr');else if(shapes[i].ty == 'el'){
	                arr.push(ellipseInterfaceFactory(shapes[i],view[i],propertyGroup));
	            }else if(shapes[i].ty == 'sr'){
	                arr.push(starInterfaceFactory(shapes[i],view[i],propertyGroup));
	            } else if(shapes[i].ty == 'sh'){
	                arr.push(ShapePathInterface(shapes[i],view[i],propertyGroup));
	            } else if(shapes[i].ty == 'rc'){
	                arr.push(rectInterfaceFactory(shapes[i],view[i],propertyGroup));
	            } else if(shapes[i].ty == 'rd'){
	                arr.push(roundedInterfaceFactory(shapes[i],view[i],propertyGroup));
	            } else if(shapes[i].ty == 'rp'){
	                arr.push(repeaterInterfaceFactory(shapes[i],view[i],propertyGroup));
	            }
	        }
	        return arr;
	    }

	    function contentsInterfaceFactory(shape,view, propertyGroup){
	       var interfaces;
	       var interfaceFunction = function _interfaceFunction(value){
	           var i = 0, len = interfaces.length;
	            while(i<len){
	                if(interfaces[i]._name === value || interfaces[i].mn === value || interfaces[i].propertyIndex === value || interfaces[i].ix === value || interfaces[i].ind === value){
	                   return interfaces[i];
	                }
	                i+=1;
	            }
	            if(typeof value === 'number'){
	               return interfaces[value-1];
	            }
	       };

	       interfaceFunction.propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
	       interfaces = iterateElements(shape.it, view.it, interfaceFunction.propertyGroup);
	       interfaceFunction.numProperties = interfaces.length;
	       var transformInterface = transformInterfaceFactory(shape.it[shape.it.length - 1],view.it[view.it.length - 1],interfaceFunction.propertyGroup);
	       interfaceFunction.transform = transformInterface;
	       interfaceFunction.propertyIndex = shape.cix;
	       interfaceFunction._name = shape.nm;

	       return interfaceFunction;
	   }

	    function groupInterfaceFactory(shape,view, propertyGroup){
	        var interfaceFunction = function _interfaceFunction(value){
	            switch(value){
	                case 'ADBE Vectors Group':
	                case 'Contents':
	                case 2:
	                    return interfaceFunction.content;
	                //Not necessary for now. Keeping them here in case a new case appears
	                //case 'ADBE Vector Transform Group':
	                //case 3:
	                default:
	                    return interfaceFunction.transform;
	            }
	        };
	        interfaceFunction.propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
	        var content = contentsInterfaceFactory(shape,view,interfaceFunction.propertyGroup);
	        var transformInterface = transformInterfaceFactory(shape.it[shape.it.length - 1],view.it[view.it.length - 1],interfaceFunction.propertyGroup);
	        interfaceFunction.content = content;
	        interfaceFunction.transform = transformInterface;
	        Object.defineProperty(interfaceFunction, '_name', {
	            get: function(){
	                return shape.nm;
	            }
	        });
	        //interfaceFunction.content = interfaceFunction;
	        interfaceFunction.numProperties = shape.np;
	        interfaceFunction.propertyIndex = shape.ix;
	        interfaceFunction.nm = shape.nm;
	        interfaceFunction.mn = shape.mn;
	        return interfaceFunction;
	    }

	    function fillInterfaceFactory(shape,view,propertyGroup){
	        function interfaceFunction(val){
	            if(val === 'Color' || val === 'color'){
	                return interfaceFunction.color;
	            } else if(val === 'Opacity' || val === 'opacity'){
	                return interfaceFunction.opacity;
	            }
	        }
	        Object.defineProperties(interfaceFunction, {
	            'color': {
	                get: ExpressionPropertyInterface(view.c)
	            },
	            'opacity': {
	                get: ExpressionPropertyInterface(view.o)
	            },
	            '_name': { value: shape.nm },
	            'mn': { value: shape.mn }
	        });

	        view.c.setGroupProperty(PropertyInterface('Color', propertyGroup));
	        view.o.setGroupProperty(PropertyInterface('Opacity', propertyGroup));
	        return interfaceFunction;
	    }

	    function strokeInterfaceFactory(shape,view,propertyGroup){
	        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
	        var _dashPropertyGroup = propertyGroupFactory(dashOb, _propertyGroup);
	        function addPropertyToDashOb(i) {
	            Object.defineProperty(dashOb, shape.d[i].nm, {
	                get: ExpressionPropertyInterface(view.d.dataProps[i].p)
	            });
	        }
	        var i, len = shape.d ? shape.d.length : 0;
	        var dashOb = {};
	        for (i = 0; i < len; i += 1) {
	            addPropertyToDashOb(i);
	            view.d.dataProps[i].p.setGroupProperty(_dashPropertyGroup);
	        }

	        function interfaceFunction(val){
	            if(val === 'Color' || val === 'color'){
	                return interfaceFunction.color;
	            } else if(val === 'Opacity' || val === 'opacity'){
	                return interfaceFunction.opacity;
	            } else if(val === 'Stroke Width' || val === 'stroke width'){
	                return interfaceFunction.strokeWidth;
	            }
	        }
	        Object.defineProperties(interfaceFunction, {
	            'color': {
	                get: ExpressionPropertyInterface(view.c)
	            },
	            'opacity': {
	                get: ExpressionPropertyInterface(view.o)
	            },
	            'strokeWidth': {
	                get: ExpressionPropertyInterface(view.w)
	            },
	            'dash': {
	                get: function() {
	                    return dashOb;
	                }
	            },
	            '_name': { value: shape.nm },
	            'mn': { value: shape.mn }
	        });

	        view.c.setGroupProperty(PropertyInterface('Color', _propertyGroup));
	        view.o.setGroupProperty(PropertyInterface('Opacity', _propertyGroup));
	        view.w.setGroupProperty(PropertyInterface('Stroke Width', _propertyGroup));
	        return interfaceFunction;
	    }

	    function trimInterfaceFactory(shape,view,propertyGroup){

	        function interfaceFunction(val){
	            if(val === shape.e.ix || val === 'End' || val === 'end'){
	                return interfaceFunction.end;
	            }
	            if(val === shape.s.ix){
	                return interfaceFunction.start;
	            }
	            if(val === shape.o.ix){
	                return interfaceFunction.offset;
	            }
	        }

	        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
	        interfaceFunction.propertyIndex = shape.ix;

	        view.s.setGroupProperty(PropertyInterface('Start', _propertyGroup));
	        view.e.setGroupProperty(PropertyInterface('End', _propertyGroup));
	        view.o.setGroupProperty(PropertyInterface('Offset', _propertyGroup));
	        interfaceFunction.propertyIndex = shape.ix;
	        interfaceFunction.propertyGroup = propertyGroup;

	        Object.defineProperties(interfaceFunction, {
	            'start': {
	                get: ExpressionPropertyInterface(view.s)
	            },
	            'end': {
	                get: ExpressionPropertyInterface(view.e)
	            },
	            'offset': {
	                get: ExpressionPropertyInterface(view.o)
	            },
	            '_name': { value: shape.nm }
	        });
	        interfaceFunction.mn = shape.mn;
	        return interfaceFunction;
	    }

	    function transformInterfaceFactory(shape,view,propertyGroup){

	        function interfaceFunction(value){
	            if(shape.a.ix === value || value === 'Anchor Point'){
	                return interfaceFunction.anchorPoint;
	            }
	            if(shape.o.ix === value || value === 'Opacity'){
	                return interfaceFunction.opacity;
	            }
	            if(shape.p.ix === value || value === 'Position'){
	                return interfaceFunction.position;
	            }
	            if(shape.r.ix === value || value === 'Rotation' || value === 'ADBE Vector Rotation'){
	                return interfaceFunction.rotation;
	            }
	            if(shape.s.ix === value || value === 'Scale'){
	                return interfaceFunction.scale;
	            }
	            if(shape.sk && shape.sk.ix === value || value === 'Skew'){
	                return interfaceFunction.skew;
	            }
	            if(shape.sa && shape.sa.ix === value || value === 'Skew Axis'){
	                return interfaceFunction.skewAxis;
	            }
	        }
	        
	        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
	        view.transform.mProps.o.setGroupProperty(PropertyInterface('Opacity', _propertyGroup));
	        view.transform.mProps.p.setGroupProperty(PropertyInterface('Position', _propertyGroup));
	        view.transform.mProps.a.setGroupProperty(PropertyInterface('Anchor Point', _propertyGroup));
	        view.transform.mProps.s.setGroupProperty(PropertyInterface('Scale', _propertyGroup));
	        view.transform.mProps.r.setGroupProperty(PropertyInterface('Rotation', _propertyGroup));
	        if(view.transform.mProps.sk){
	            view.transform.mProps.sk.setGroupProperty(PropertyInterface('Skew', _propertyGroup));
	            view.transform.mProps.sa.setGroupProperty(PropertyInterface('Skew Angle', _propertyGroup));
	        }
	        view.transform.op.setGroupProperty(PropertyInterface('Opacity', _propertyGroup));
	        Object.defineProperties(interfaceFunction, {
	            'opacity': {
	                get: ExpressionPropertyInterface(view.transform.mProps.o)
	            },
	            'position': {
	                get: ExpressionPropertyInterface(view.transform.mProps.p)
	            },
	            'anchorPoint': {
	                get: ExpressionPropertyInterface(view.transform.mProps.a)
	            },
	            'scale': {
	                get: ExpressionPropertyInterface(view.transform.mProps.s)
	            },
	            'rotation': {
	                get: ExpressionPropertyInterface(view.transform.mProps.r)
	            },
	            'skew': {
	                get: ExpressionPropertyInterface(view.transform.mProps.sk)
	            },
	            'skewAxis': {
	                get: ExpressionPropertyInterface(view.transform.mProps.sa)
	            },
	            '_name': { value: shape.nm }
	        });
	        interfaceFunction.ty = 'tr';
	        interfaceFunction.mn = shape.mn;
	        interfaceFunction.propertyGroup = propertyGroup;
	        return interfaceFunction;
	    }

	    function ellipseInterfaceFactory(shape,view,propertyGroup){

	        function interfaceFunction(value){
	            if(shape.p.ix === value){
	                return interfaceFunction.position;
	            }
	            if(shape.s.ix === value){
	                return interfaceFunction.size;
	            }
	        }
	        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
	        interfaceFunction.propertyIndex = shape.ix;
	        var prop = view.sh.ty === 'tm' ? view.sh.prop : view.sh;
	        prop.s.setGroupProperty(PropertyInterface('Size', _propertyGroup));
	        prop.p.setGroupProperty(PropertyInterface('Position', _propertyGroup));

	        Object.defineProperties(interfaceFunction, {
	            'size': {
	                get: ExpressionPropertyInterface(prop.s)
	            },
	            'position': {
	                get: ExpressionPropertyInterface(prop.p)
	            },
	            '_name': { value: shape.nm }
	        });
	        interfaceFunction.mn = shape.mn;
	        return interfaceFunction;
	    }

	    function starInterfaceFactory(shape,view,propertyGroup){

	        function interfaceFunction(value){
	            if(shape.p.ix === value){
	                return interfaceFunction.position;
	            }
	            if(shape.r.ix === value){
	                return interfaceFunction.rotation;
	            }
	            if(shape.pt.ix === value){
	                return interfaceFunction.points;
	            }
	            if(shape.or.ix === value || 'ADBE Vector Star Outer Radius' === value){
	                return interfaceFunction.outerRadius;
	            }
	            if(shape.os.ix === value){
	                return interfaceFunction.outerRoundness;
	            }
	            if(shape.ir && (shape.ir.ix === value || 'ADBE Vector Star Inner Radius' === value)){
	                return interfaceFunction.innerRadius;
	            }
	            if(shape.is && shape.is.ix === value){
	                return interfaceFunction.innerRoundness;
	            }

	        }

	        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
	        var prop = view.sh.ty === 'tm' ? view.sh.prop : view.sh;
	        interfaceFunction.propertyIndex = shape.ix;
	        prop.or.setGroupProperty(PropertyInterface('Outer Radius', _propertyGroup));
	        prop.os.setGroupProperty(PropertyInterface('Outer Roundness', _propertyGroup));
	        prop.pt.setGroupProperty(PropertyInterface('Points', _propertyGroup));
	        prop.p.setGroupProperty(PropertyInterface('Position', _propertyGroup));
	        prop.r.setGroupProperty(PropertyInterface('Rotation', _propertyGroup));
	        if(shape.ir){
	            prop.ir.setGroupProperty(PropertyInterface('Inner Radius', _propertyGroup));
	            prop.is.setGroupProperty(PropertyInterface('Inner Roundness', _propertyGroup));
	        }

	        Object.defineProperties(interfaceFunction, {
	            'position': {
	                get: ExpressionPropertyInterface(prop.p)
	            },
	            'rotation': {
	                get: ExpressionPropertyInterface(prop.r)
	            },
	            'points': {
	                get: ExpressionPropertyInterface(prop.pt)
	            },
	            'outerRadius': {
	                get: ExpressionPropertyInterface(prop.or)
	            },
	            'outerRoundness': {
	                get: ExpressionPropertyInterface(prop.os)
	            },
	            'innerRadius': {
	                get: ExpressionPropertyInterface(prop.ir)
	            },
	            'innerRoundness': {
	                get: ExpressionPropertyInterface(prop.is)
	            },
	            '_name': { value: shape.nm }
	        });
	        interfaceFunction.mn = shape.mn;
	        return interfaceFunction;
	    }

	    function rectInterfaceFactory(shape,view,propertyGroup){

	        function interfaceFunction(value){
	            if(shape.p.ix === value){
	                return interfaceFunction.position;
	            }
	            if(shape.r.ix === value){
	                return interfaceFunction.roundness;
	            }
	            if(shape.s.ix === value || value === 'Size' || value === 'ADBE Vector Rect Size'){
	                return interfaceFunction.size;
	            }

	        }
	        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);

	        var prop = view.sh.ty === 'tm' ? view.sh.prop : view.sh;
	        interfaceFunction.propertyIndex = shape.ix;
	        prop.p.setGroupProperty(PropertyInterface('Position', _propertyGroup));
	        prop.s.setGroupProperty(PropertyInterface('Size', _propertyGroup));
	        prop.r.setGroupProperty(PropertyInterface('Rotation', _propertyGroup));

	        Object.defineProperties(interfaceFunction, {
	            'position': {
	                get: ExpressionPropertyInterface(prop.p)
	            },
	            'roundness': {
	                get: ExpressionPropertyInterface(prop.r)
	            },
	            'size': {
	                get: ExpressionPropertyInterface(prop.s)
	            },
	            '_name': { value: shape.nm }
	        });
	        interfaceFunction.mn = shape.mn;
	        return interfaceFunction;
	    }

	    function roundedInterfaceFactory(shape,view,propertyGroup){
	       
	        function interfaceFunction(value){
	            if(shape.r.ix === value || 'Round Corners 1' === value){
	                return interfaceFunction.radius;
	            }
	        }

	        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
	        var prop = view;
	        interfaceFunction.propertyIndex = shape.ix;
	        prop.rd.setGroupProperty(PropertyInterface('Radius', _propertyGroup));

	        Object.defineProperties(interfaceFunction, {
	            'radius': {
	                get: ExpressionPropertyInterface(prop.rd)
	            },
	            '_name': { value: shape.nm }
	        });
	        interfaceFunction.mn = shape.mn;
	        return interfaceFunction;
	    }

	    function repeaterInterfaceFactory(shape,view,propertyGroup){

	        function interfaceFunction(value){
	            if(shape.c.ix === value || 'Copies' === value){
	                return interfaceFunction.copies;
	            } else if(shape.o.ix === value || 'Offset' === value){
	                return interfaceFunction.offset;
	            }
	        }

	        var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
	        var prop = view;
	        interfaceFunction.propertyIndex = shape.ix;
	        prop.c.setGroupProperty(PropertyInterface('Copies', _propertyGroup));
	        prop.o.setGroupProperty(PropertyInterface('Offset', _propertyGroup));
	        Object.defineProperties(interfaceFunction, {
	            'copies': {
	                get: ExpressionPropertyInterface(prop.c)
	            },
	            'offset': {
	                get: ExpressionPropertyInterface(prop.o)
	            },
	            '_name': { value: shape.nm }
	        });
	        interfaceFunction.mn = shape.mn;
	        return interfaceFunction;
	    }

	    return function(shapes,view,propertyGroup) {
	        var interfaces;
	        function _interfaceFunction(value){
	            if(typeof value === 'number'){
	                value = value === undefined ? 1 : value;
	                if (value === 0) {
	                    return propertyGroup
	                } else {
	                    return interfaces[value-1];
	                }
	            } else {
	                var i = 0, len = interfaces.length;
	                while(i<len){
	                    if(interfaces[i]._name === value){
	                        return interfaces[i];
	                    }
	                    i+=1;
	                }
	            }
	        }
	        _interfaceFunction.propertyGroup = propertyGroup;
	        interfaces = iterateElements(shapes, view, _interfaceFunction);
	        _interfaceFunction.numProperties = interfaces.length;
	        return _interfaceFunction;
	    };
	}());

	var TextExpressionInterface = (function(){
		return function(elem){
	        var _prevValue, _sourceText;
	        function _thisLayerFunction(){
	        }
	        Object.defineProperty(_thisLayerFunction, "sourceText", {
	            get: function(){
	                elem.textProperty.getValue();
	                var stringValue = elem.textProperty.currentData.t;
	                if(stringValue !== _prevValue) {
	                    elem.textProperty.currentData.t = _prevValue;
	                    _sourceText = new String(stringValue);
	                    //If stringValue is an empty string, eval returns undefined, so it has to be returned as a String primitive
	                    _sourceText.value = stringValue ? stringValue : new String(stringValue);
	                }
	                return _sourceText;
	            }
	        });
	        return _thisLayerFunction;
	    };
	}());
	var LayerExpressionInterface = (function (){
	    function toWorld(arr, time){
	        var toWorldMat = new Matrix();
	        toWorldMat.reset();
	        var transformMat;
	        if(time) {
	            //Todo implement value at time on transform properties
	            //transformMat = this._elem.finalTransform.mProp.getValueAtTime(time);
	            transformMat = this._elem.finalTransform.mProp;
	        } else {
	            transformMat = this._elem.finalTransform.mProp;
	        }
	        transformMat.applyToMatrix(toWorldMat);
	        if(this._elem.hierarchy && this._elem.hierarchy.length){
	            var i, len = this._elem.hierarchy.length;
	            for(i=0;i<len;i+=1){
	                this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(toWorldMat);
	            }
	            return toWorldMat.applyToPointArray(arr[0],arr[1],arr[2]||0);
	        }
	        return toWorldMat.applyToPointArray(arr[0],arr[1],arr[2]||0);
	    }
	    function fromWorld(arr, time){
	        var toWorldMat = new Matrix();
	        toWorldMat.reset();
	        var transformMat;
	        if(time) {
	            //Todo implement value at time on transform properties
	            //transformMat = this._elem.finalTransform.mProp.getValueAtTime(time);
	            transformMat = this._elem.finalTransform.mProp;
	        } else {
	            transformMat = this._elem.finalTransform.mProp;
	        }
	        transformMat.applyToMatrix(toWorldMat);
	        if(this._elem.hierarchy && this._elem.hierarchy.length){
	            var i, len = this._elem.hierarchy.length;
	            for(i=0;i<len;i+=1){
	                this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(toWorldMat);
	            }
	            return toWorldMat.inversePoint(arr);
	        }
	        return toWorldMat.inversePoint(arr);
	    }
	    function fromComp(arr){
	        var toWorldMat = new Matrix();
	        toWorldMat.reset();
	        this._elem.finalTransform.mProp.applyToMatrix(toWorldMat);
	        if(this._elem.hierarchy && this._elem.hierarchy.length){
	            var i, len = this._elem.hierarchy.length;
	            for(i=0;i<len;i+=1){
	                this._elem.hierarchy[i].finalTransform.mProp.applyToMatrix(toWorldMat);
	            }
	            return toWorldMat.inversePoint(arr);
	        }
	        return toWorldMat.inversePoint(arr);
	    }

	    function sampleImage() {
	        return [1,1,1,1];
	    }


	    return function(elem){

	        var transformInterface;

	        function _registerMaskInterface(maskManager){
	            _thisLayerFunction.mask = new MaskManagerInterface(maskManager, elem);
	        }
	        function _registerEffectsInterface(effects){
	            _thisLayerFunction.effect = effects;
	        }

	        function _thisLayerFunction(name){
	            switch(name){
	                case "ADBE Root Vectors Group":
	                case "Contents":
	                case 2:
	                    return _thisLayerFunction.shapeInterface;
	                case 1:
	                case 6:
	                case "Transform":
	                case "transform":
	                case "ADBE Transform Group":
	                    return transformInterface;
	                case 4:
	                case "ADBE Effect Parade":
	                case "effects":
	                case "Effects":
	                    return _thisLayerFunction.effect;
	            }
	        }
	        _thisLayerFunction.toWorld = toWorld;
	        _thisLayerFunction.fromWorld = fromWorld;
	        _thisLayerFunction.toComp = toWorld;
	        _thisLayerFunction.fromComp = fromComp;
	        _thisLayerFunction.sampleImage = sampleImage;
	        _thisLayerFunction.sourceRectAtTime = elem.sourceRectAtTime.bind(elem);
	        _thisLayerFunction._elem = elem;
	        transformInterface = TransformExpressionInterface(elem.finalTransform.mProp);
	        var anchorPointDescriptor = getDescriptor(transformInterface, 'anchorPoint');
	        Object.defineProperties(_thisLayerFunction,{
	            hasParent: {
	                get: function(){
	                    return elem.hierarchy.length;
	                }
	            },
	            parent: {
	                get: function(){
	                    return elem.hierarchy[0].layerInterface;
	                }
	            },
	            rotation: getDescriptor(transformInterface, 'rotation'),
	            scale: getDescriptor(transformInterface, 'scale'),
	            position: getDescriptor(transformInterface, 'position'),
	            opacity: getDescriptor(transformInterface, 'opacity'),
	            anchorPoint: anchorPointDescriptor,
	            anchor_point: anchorPointDescriptor,
	            transform: {
	                get: function () {
	                    return transformInterface;
	                }
	            },
	            active: {
	                get: function(){
	                    return elem.isInRange;
	                }
	            }
	        });

	        _thisLayerFunction.startTime = elem.data.st;
	        _thisLayerFunction.index = elem.data.ind;
	        _thisLayerFunction.source = elem.data.refId;
	        _thisLayerFunction.height = elem.data.ty === 0 ? elem.data.h : 100;
	        _thisLayerFunction.width = elem.data.ty === 0 ? elem.data.w : 100;
	        _thisLayerFunction.inPoint = elem.data.ip/elem.comp.globalData.frameRate;
	        _thisLayerFunction.outPoint = elem.data.op/elem.comp.globalData.frameRate;
	        _thisLayerFunction._name = elem.data.nm;

	        _thisLayerFunction.registerMaskInterface = _registerMaskInterface;
	        _thisLayerFunction.registerEffectsInterface = _registerEffectsInterface;
	        return _thisLayerFunction;
	    };
	}());

	var CompExpressionInterface = (function () {
	    return function(comp) {
	        function _thisLayerFunction(name) {
	            var i = 0, len = comp.layers.length;
	            while ( i < len) {
	                if (comp.layers[i].nm === name || comp.layers[i].ind === name) {
	                    return comp.elements[i].layerInterface;
	                }
	                i += 1;
	            }
	            return null;
	            //return {active:false};
	        }
	        Object.defineProperty(_thisLayerFunction, "_name", { value: comp.data.nm });
	        _thisLayerFunction.layer = _thisLayerFunction;
	        _thisLayerFunction.pixelAspect = 1;
	        _thisLayerFunction.height = comp.data.h || comp.globalData.compSize.h;
	        _thisLayerFunction.width = comp.data.w || comp.globalData.compSize.w;
	        _thisLayerFunction.pixelAspect = 1;
	        _thisLayerFunction.frameDuration = 1 / comp.globalData.frameRate;
	        _thisLayerFunction.displayStartTime = 0;
	        _thisLayerFunction.numLayers = comp.layers.length;
	        return _thisLayerFunction;
	    };
	}());
	var TransformExpressionInterface = (function (){
	    return function(transform){
	        function _thisFunction(name){
	            switch(name){
	                case "scale":
	                case "Scale":
	                case "ADBE Scale":
	                case 6:
	                    return _thisFunction.scale;
	                case "rotation":
	                case "Rotation":
	                case "ADBE Rotation":
	                case "ADBE Rotate Z":
	                case 10:
	                    return _thisFunction.rotation;
	                case "ADBE Rotate X":
	                    return _thisFunction.xRotation;
	                case "ADBE Rotate Y":
	                    return _thisFunction.yRotation;
	                case "position":
	                case "Position":
	                case "ADBE Position":
	                case 2:
	                    return _thisFunction.position;
	                case 'ADBE Position_0':
	                    return _thisFunction.xPosition;
	                case 'ADBE Position_1':
	                    return _thisFunction.yPosition;
	                case 'ADBE Position_2':
	                    return _thisFunction.zPosition;
	                case "anchorPoint":
	                case "AnchorPoint":
	                case "Anchor Point":
	                case "ADBE AnchorPoint":
	                case 1:
	                    return _thisFunction.anchorPoint;
	                case "opacity":
	                case "Opacity":
	                case 11:
	                    return _thisFunction.opacity;
	            }
	        }

	        Object.defineProperty(_thisFunction, "rotation", {
	            get: ExpressionPropertyInterface(transform.r || transform.rz)
	        });

	        Object.defineProperty(_thisFunction, "zRotation", {
	            get: ExpressionPropertyInterface(transform.rz || transform.r)
	        });

	        Object.defineProperty(_thisFunction, "xRotation", {
	            get: ExpressionPropertyInterface(transform.rx)
	        });

	        Object.defineProperty(_thisFunction, "yRotation", {
	            get: ExpressionPropertyInterface(transform.ry)
	        });
	        Object.defineProperty(_thisFunction, "scale", {
	            get: ExpressionPropertyInterface(transform.s)
	        });

	        if(transform.p) {
	            var _transformFactory = ExpressionPropertyInterface(transform.p);
	        } else {
	            var _px = ExpressionPropertyInterface(transform.px);
	            var _py = ExpressionPropertyInterface(transform.py);
	            var _pz;
	            if (transform.pz) {
	                _pz = ExpressionPropertyInterface(transform.pz);
	            }
	        }
	        Object.defineProperty(_thisFunction, "position", {
	            get: function () {
	                if(transform.p) {
	                    return _transformFactory();
	                } else {
	                    return [
	                        _px(),
	                        _py(),
	                        _pz ? _pz() : 0];
	                }
	            }
	        });

	        Object.defineProperty(_thisFunction, "xPosition", {
	            get: ExpressionPropertyInterface(transform.px)
	        });

	        Object.defineProperty(_thisFunction, "yPosition", {
	            get: ExpressionPropertyInterface(transform.py)
	        });

	        Object.defineProperty(_thisFunction, "zPosition", {
	            get: ExpressionPropertyInterface(transform.pz)
	        });

	        Object.defineProperty(_thisFunction, "anchorPoint", {
	            get: ExpressionPropertyInterface(transform.a)
	        });

	        Object.defineProperty(_thisFunction, "opacity", {
	            get: ExpressionPropertyInterface(transform.o)
	        });

	        Object.defineProperty(_thisFunction, "skew", {
	            get: ExpressionPropertyInterface(transform.sk)
	        });

	        Object.defineProperty(_thisFunction, "skewAxis", {
	            get: ExpressionPropertyInterface(transform.sa)
	        });

	        Object.defineProperty(_thisFunction, "orientation", {
	            get: ExpressionPropertyInterface(transform.or)
	        });

	        return _thisFunction;
	    };
	}());
	var ProjectInterface = (function (){

	    function registerComposition(comp){
	        this.compositions.push(comp);
	    }

	    return function(){
	        function _thisProjectFunction(name){
	            var i = 0, len = this.compositions.length;
	            while(i<len){
	                if(this.compositions[i].data && this.compositions[i].data.nm === name){
	                    if(this.compositions[i].prepareFrame && this.compositions[i].data.xt) {
	                        this.compositions[i].prepareFrame(this.currentFrame);
	                    }
	                    return this.compositions[i].compInterface;
	                }
	                i+=1;
	            }
	        }

	        _thisProjectFunction.compositions = [];
	        _thisProjectFunction.currentFrame = 0;

	        _thisProjectFunction.registerComposition = registerComposition;



	        return _thisProjectFunction;
	    };
	}());
	var EffectsExpressionInterface = (function (){
	    var ob = {
	        createEffectsInterface: createEffectsInterface
	    };

	    function createEffectsInterface(elem, propertyGroup){
	        if(elem.effectsManager){

	            var effectElements = [];
	            var effectsData = elem.data.ef;
	            var i, len = elem.effectsManager.effectElements.length;
	            for(i=0;i<len;i+=1){
	                effectElements.push(createGroupInterface(effectsData[i],elem.effectsManager.effectElements[i],propertyGroup,elem));
	            }

	            var effects = elem.data.ef || [];
	            var groupInterface = function(name){
	                i = 0, len = effects.length;
	                while(i<len) {
	                    if(name === effects[i].nm || name === effects[i].mn || name === effects[i].ix){
	                        return effectElements[i];
	                    }
	                    i += 1;
	                }
	            };
	            Object.defineProperty(groupInterface, 'numProperties', {
	                get: function(){
	                    return effects.length;
	                }
	            });
	            return groupInterface
	        }
	    }

	    function createGroupInterface(data,elements, propertyGroup, elem){

	        function groupInterface(name){
	            var effects = data.ef, i = 0, len = effects.length;
	            while(i<len) {
	                if(name === effects[i].nm || name === effects[i].mn || name === effects[i].ix){
	                    if(effects[i].ty === 5){
	                        return effectElements[i];
	                    } else {
	                        return effectElements[i]();
	                    }
	                }
	                i += 1;
	            }
	            return effectElements[0]();
	        }        var _propertyGroup = propertyGroupFactory(groupInterface, propertyGroup);

	        var effectElements = [];
	        var i, len = data.ef.length;
	        for(i=0;i<len;i+=1){
	            if(data.ef[i].ty === 5){
	                effectElements.push(createGroupInterface(data.ef[i],elements.effectElements[i],elements.effectElements[i].propertyGroup, elem));
	            } else {
	                effectElements.push(createValueInterface(elements.effectElements[i],data.ef[i].ty, elem, _propertyGroup));
	            }
	        }

	        if(data.mn === 'ADBE Color Control'){
	            Object.defineProperty(groupInterface, 'color', {
	                get: function(){
	                    return effectElements[0]();
	                }
	            });
	        }
	        Object.defineProperties(groupInterface, {
	            numProperties: {
	                get: function(){
	                    return data.np;
	                }
	            },
	            _name: { value: data.nm },
	            propertyGroup: {value: _propertyGroup},
	        });
	        groupInterface.active = groupInterface.enabled = data.en !== 0;
	        return groupInterface;
	    }

	    function createValueInterface(element, type, elem, propertyGroup){
	        var expressionProperty = ExpressionPropertyInterface(element.p);
	        function interfaceFunction(){
	            if(type === 10){
	                return elem.comp.compInterface(element.p.v);
	            }
	            return expressionProperty();
	        }

	        if(element.p.setGroupProperty) {
	            element.p.setGroupProperty(PropertyInterface('', propertyGroup));
	        }

	        return interfaceFunction;
	    }

	    return ob;

	}());
	var MaskManagerInterface = (function(){

		function MaskInterface(mask, data){
			this._mask = mask;
			this._data = data;
		}
		Object.defineProperty(MaskInterface.prototype, 'maskPath', {
	        get: function(){
	            if(this._mask.prop.k){
	                this._mask.prop.getValue();
	            }
	            return this._mask.prop;
	        }
	    });
		Object.defineProperty(MaskInterface.prototype, 'maskOpacity', {
	        get: function(){
	            if(this._mask.op.k){
	                this._mask.op.getValue();
	            }
	            return this._mask.op.v * 100;
	        }
	    });

		var MaskManager = function(maskManager, elem){
			var _masksInterfaces = createSizedArray(maskManager.viewData.length);
			var i, len = maskManager.viewData.length;
			for(i = 0; i < len; i += 1) {
				_masksInterfaces[i] = new MaskInterface(maskManager.viewData[i], maskManager.masksProperties[i]);
			}

			var maskFunction = function(name){
				i = 0;
			    while(i<len){
			        if(maskManager.masksProperties[i].nm === name){
			            return _masksInterfaces[i];
			        }
			        i += 1;
			    }
			};
			return maskFunction;
		};
		return MaskManager;
	}());

	var ExpressionPropertyInterface = (function() {

	    var defaultUnidimensionalValue = {pv:0, v:0, mult: 1};
	    var defaultMultidimensionalValue = {pv:[0,0,0], v:[0,0,0], mult: 1};

	    function completeProperty(expressionValue, property, type) {
	        Object.defineProperty(expressionValue, 'velocity', {
	            get: function(){
	                return property.getVelocityAtTime(property.comp.currentFrame);
	            }
	        });
	        expressionValue.numKeys = property.keyframes ? property.keyframes.length : 0;
	        expressionValue.key = function(pos) {
	            if (!expressionValue.numKeys) {
	                return 0;
	            } else {
	                var value = '';
	                if ('s' in property.keyframes[pos-1]) {
	                    value = property.keyframes[pos-1].s;
	                } else if ('e' in property.keyframes[pos-2]) {
	                    value = property.keyframes[pos-2].e;
	                } else {
	                    value = property.keyframes[pos-2].s;
	                }
	                var valueProp = type === 'unidimensional' ? new Number(value) : Object.assign({}, value);
	                valueProp.time = property.keyframes[pos-1].t / property.elem.comp.globalData.frameRate;
	                return valueProp;
	            }
	        };
	        expressionValue.valueAtTime = property.getValueAtTime;
	        expressionValue.speedAtTime = property.getSpeedAtTime;
	        expressionValue.velocityAtTime = property.getVelocityAtTime;
	        expressionValue.propertyGroup = property.propertyGroup;
	    }

	    function UnidimensionalPropertyInterface(property) {
	        if(!property || !('pv' in property)) {
	            property = defaultUnidimensionalValue;
	        }
	        var mult = 1 / property.mult;
	        var val = property.pv * mult;
	        var expressionValue = new Number(val);
	        expressionValue.value = val;
	        completeProperty(expressionValue, property, 'unidimensional');

	        return function() {
	            if (property.k) {
	                property.getValue();
	            }
	            val = property.v * mult;
	            if(expressionValue.value !== val) {
	                expressionValue = new Number(val);
	                expressionValue.value = val;
	                completeProperty(expressionValue, property, 'unidimensional');
	            }
	            return expressionValue;
	        }
	    }

	    function MultidimensionalPropertyInterface(property) {
	        if(!property || !('pv' in property)) {
	            property = defaultMultidimensionalValue;
	        }
	        var mult = 1 / property.mult;
	        var len = property.pv.length;
	        var expressionValue = createTypedArray('float32', len);
	        var arrValue = createTypedArray('float32', len);
	        expressionValue.value = arrValue;
	        completeProperty(expressionValue, property, 'multidimensional');

	        return function() {
	            if (property.k) {
	                property.getValue();
	            }
	            for (var i = 0; i < len; i += 1) {
	                expressionValue[i] = arrValue[i] = property.v[i] * mult;
	            }
	            return expressionValue;
	        }
	    }

	    //TODO: try to avoid using this getter
	    function defaultGetter() {
	        return defaultUnidimensionalValue;
	    }
	    
	    return function(property) {
	        if(!property) {
	            return defaultGetter;
	        } else if (property.propType === 'unidimensional') {
	            return UnidimensionalPropertyInterface(property);
	        } else {
	            return MultidimensionalPropertyInterface(property);
	        }
	    }
	}());

	(function(){

	    var TextExpressionSelectorProp = (function(){

	        function getValueProxy(index,total){
	            this.textIndex = index+1;
	            this.textTotal = total;
	            this.v = this.getValue() * this.mult;
	            return this.v;
	        }

	        return function TextExpressionSelectorProp(elem,data){
	            this.pv = 1;
	            this.comp = elem.comp;
	            this.elem = elem;
	            this.mult = 0.01;
	            this.propType = 'textSelector';
	            this.textTotal = data.totalChars;
	            this.selectorValue = 100;
	            this.lastValue = [1,1,1];
	            this.k = true;
	            this.x = true;
	            this.getValue = ExpressionManager.initiateExpression.bind(this)(elem,data,this);
	            this.getMult = getValueProxy;
	            this.getVelocityAtTime = expressionHelpers.getVelocityAtTime;
	            if(this.kf){
	                this.getValueAtTime = expressionHelpers.getValueAtTime.bind(this);
	            } else {
	                this.getValueAtTime = expressionHelpers.getStaticValueAtTime.bind(this);
	            }
	            this.setGroupProperty = expressionHelpers.setGroupProperty;
	        };
	    }());

		var propertyGetTextProp = TextSelectorProp.getTextSelectorProp;
		TextSelectorProp.getTextSelectorProp = function(elem, data,arr){
		    if(data.t === 1){
		        return new TextExpressionSelectorProp(elem, data,arr);
		    } else {
		        return propertyGetTextProp(elem,data,arr);
		    }
		};
	}());
	function SliderEffect(data,elem, container){
	    this.p = PropertyFactory.getProp(elem,data.v,0,0,container);
	}
	function AngleEffect(data,elem, container){
	    this.p = PropertyFactory.getProp(elem,data.v,0,0,container);
	}
	function ColorEffect(data,elem, container){
	    this.p = PropertyFactory.getProp(elem,data.v,1,0,container);
	}
	function PointEffect(data,elem, container){
	    this.p = PropertyFactory.getProp(elem,data.v,1,0,container);
	}
	function LayerIndexEffect(data,elem, container){
	    this.p = PropertyFactory.getProp(elem,data.v,0,0,container);
	}
	function MaskIndexEffect(data,elem, container){
	    this.p = PropertyFactory.getProp(elem,data.v,0,0,container);
	}
	function CheckboxEffect(data,elem, container){
	    this.p = PropertyFactory.getProp(elem,data.v,0,0,container);
	}
	function NoValueEffect(){
	    this.p = {};
	}
	function EffectsManager(){}
	function EffectsManager(data,element){
	    var effects = data.ef || [];
	    this.effectElements = [];
	    var i,len = effects.length;
	    var effectItem;
	    for(i=0;i<len;i++) {
	        effectItem = new GroupEffect(effects[i],element);
	        this.effectElements.push(effectItem);
	    }
	}

	function GroupEffect(data,element){
	    this.init(data,element);
	}

	extendPrototype([DynamicPropertyContainer], GroupEffect);

	GroupEffect.prototype.getValue = GroupEffect.prototype.iterateDynamicProperties;

	GroupEffect.prototype.init = function(data,element){
	    this.data = data;
	    this.effectElements = [];
	    this.initDynamicPropertyContainer(element);
	    var i, len = this.data.ef.length;
	    var eff, effects = this.data.ef;
	    for(i=0;i<len;i+=1){
	        eff = null;
	        switch(effects[i].ty){
	            case 0:
	                eff = new SliderEffect(effects[i],element,this);
	                break;
	            case 1:
	                eff = new AngleEffect(effects[i],element,this);
	                break;
	            case 2:
	                eff = new ColorEffect(effects[i],element,this);
	                break;
	            case 3:
	                eff = new PointEffect(effects[i],element,this);
	                break;
	            case 4:
	            case 7:
	                eff = new CheckboxEffect(effects[i],element,this);
	                break;
	            case 10:
	                eff = new LayerIndexEffect(effects[i],element,this);
	                break;
	            case 11:
	                eff = new MaskIndexEffect(effects[i],element,this);
	                break;
	            case 5:
	                eff = new EffectsManager(effects[i],element,this);
	                break;
	            //case 6:
	            default:
	                eff = new NoValueEffect(effects[i],element,this);
	                break;
	        }
	        if(eff) {
	            this.effectElements.push(eff);
	        }
	    }
	};

	var lottie = {};

	function setLocationHref (href) {
	    locationHref = href;
	}

	function searchAnimations() {
	    {
	        animationManager.searchAnimations();
	    }
	}

	function setSubframeRendering(flag) {
	    subframeEnabled = flag;
	}

	function loadAnimation(params) {
	    return animationManager.loadAnimation(params);
	}

	function setQuality(value) {
	    if (typeof value === 'string') {
	        switch (value) {
	            case 'high':
	                defaultCurveSegments = 200;
	                break;
	            case 'medium':
	                defaultCurveSegments = 50;
	                break;
	            case 'low':
	                defaultCurveSegments = 10;
	                break;
	        }
	    } else if (!isNaN(value) && value > 1) {
	        defaultCurveSegments = value;
	    }
	}

	function inBrowser() {
	    return typeof navigator !== 'undefined';
	}

	function installPlugin(type, plugin) {
	    if (type === 'expressions') {
	        expressionsPlugin = plugin;
	    }
	}

	function getFactory(name) {
	    switch (name) {
	        case "propertyFactory":
	            return PropertyFactory;
	        case "shapePropertyFactory":
	            return ShapePropertyFactory;
	        case "matrix":
	            return Matrix;
	    }
	}

	lottie.play = animationManager.play;
	lottie.pause = animationManager.pause;
	lottie.setLocationHref = setLocationHref;
	lottie.togglePause = animationManager.togglePause;
	lottie.setSpeed = animationManager.setSpeed;
	lottie.setDirection = animationManager.setDirection;
	lottie.stop = animationManager.stop;
	lottie.searchAnimations = searchAnimations;
	lottie.registerAnimation = animationManager.registerAnimation;
	lottie.loadAnimation = loadAnimation;
	lottie.setSubframeRendering = setSubframeRendering;
	lottie.resize = animationManager.resize;
	//lottie.start = start;
	lottie.goToAndStop = animationManager.goToAndStop;
	lottie.destroy = animationManager.destroy;
	lottie.setQuality = setQuality;
	lottie.inBrowser = inBrowser;
	lottie.installPlugin = installPlugin;
	lottie.freeze = animationManager.freeze;
	lottie.unfreeze = animationManager.unfreeze;
	lottie.getRegisteredAnimations = animationManager.getRegisteredAnimations;
	lottie.__getFactory = getFactory;
	lottie.version = '5.7.1';

	function checkReady() {
	    if (document.readyState === "complete") {
	        clearInterval(readyStateCheckInterval);
	        searchAnimations();
	    }
	}

	function getQueryVariable(variable) {
	    var vars = queryString.split('&');
	    for (var i = 0; i < vars.length; i++) {
	        var pair = vars[i].split('=');
	        if (decodeURIComponent(pair[0]) == variable) {
	            return decodeURIComponent(pair[1]);
	        }
	    }
	}
	var renderer = '';
	{
	    var scripts = document.getElementsByTagName('script');
	    var index = scripts.length - 1;
	    var myScript = scripts[index] || {
	        src: ''
	    };
	    var queryString = myScript.src.replace(/^[^\?]+\??/, '');
	    renderer = getQueryVariable('renderer');
	}
	var readyStateCheckInterval = setInterval(checkReady, 100);

	return lottie;
	}));
	});

	var getEffect_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = void 0;
	var animations = {
	  activity: 'LOOP_PLAY',
	  airplay: 'LOOP_PLAY',
	  alertCircle: 'LOOP_PLAY',
	  alertOctagon: 'LOOP_PLAY',
	  alertTriangle: 'LOOP_PLAY',
	  archive: 'HOVER_PLAY_AND_BACKWARDS',
	  arrowDown: 'LOOP_PLAY',
	  arrowDownCircle: 'CLICK_PLAY_AND_BACKWARDS',
	  arrowLeftCircle: 'CLICK_PLAY_AND_BACKWARDS',
	  arrowRightCircle: 'CLICK_PLAY_AND_BACKWARDS',
	  arrowUp: 'LOOP_PLAY',
	  arrowUpCircle: 'CLICK_PLAY_AND_BACKWARDS',
	  bookmark: 'CLICK_PLAY_AND_BACKWARDS',
	  calendar: 'HOVER_PLAY_AND_STOP',
	  checkBox: 'CLICK_PLAY_AND_BACKWARDS',
	  codepen: 'HOVER_PLAY_AND_STOP',
	  copy: 'CLICK_PLAY',
	  download: 'CLICK_PLAY',
	  edit: 'CLICK_PLAY',
	  explore: 'HOVER_PLAY_AND_BACKWARDS',
	  facebook: 'HOVER_PLAY_AND_STOP',
	  github: 'HOVER_PLAY_AND_STOP',
	  heart: 'CLICK_PLAY_AND_BACKWARDS',
	  infinity: 'LOOP_PLAY',
	  info: 'HOVER_PLAY_AND_BACKWARDS',
	  instagram: 'HOVER_PLAY_AND_STOP',
	  linkedin: 'HOVER_PLAY_AND_STOP',
	  loading: 'LOOP_PLAY',
	  loading2: 'LOOP_PLAY',
	  loading3: 'LOOP_PLAY',
	  lock: 'CLICK_PLAY_AND_BACKWARDS',
	  mail: 'CLICK_PLAY',
	  maximizeMinimize: 'CLICK_PLAY_AND_BACKWARDS',
	  maximizeMinimize2: 'CLICK_PLAY_AND_BACKWARDS',
	  menu: 'CLICK_PLAY_AND_BACKWARDS',
	  menu2: 'CLICK_PLAY_AND_BACKWARDS',
	  menu3: 'CLICK_PLAY_AND_BACKWARDS',
	  menu4: 'CLICK_PLAY_AND_BACKWARDS',
	  microphone: 'CLICK_PLAY_AND_BACKWARDS',
	  microphone2: 'CLICK_PLAY_AND_BACKWARDS',
	  notification: 'CLICK_PLAY_AND_BACKWARDS',
	  notification2: 'CLICK_PLAY_AND_BACKWARDS',
	  playPause: 'CLICK_PLAY_AND_BACKWARDS',
	  playPauseCircle: 'CLICK_PLAY_AND_BACKWARDS',
	  plusToX: 'CLICK_PLAY_AND_BACKWARDS',
	  pocket: 'HOVER_PLAY_AND_STOP',
	  radioButton: 'CLICK_PLAY_AND_BACKWARDS',
	  scrollDown: 'LOOP_PLAY',
	  searchToX: 'CLICK_PLAY_AND_BACKWARDS',
	  settings: 'HOVER_PLAY_AND_BACKWARDS',
	  settings2: 'CLICK_PLAY_AND_BACKWARDS',
	  skipForward: 'CLICK_PLAY_AND_SEGMENTS',
	  skipBack: 'CLICK_PLAY_AND_SEGMENTS',
	  share: 'HOVER_PLAY_AND_BACKWARDS',
	  star: 'CLICK_PLAY_AND_BACKWARDS',
	  toggle: 'CLICK_PLAY_AND_BACKWARDS',
	  trash: 'HOVER_PLAY_AND_BACKWARDS',
	  trash2: 'HOVER_PLAY_AND_BACKWARDS',
	  thumbUp: 'CLICK_PLAY_AND_BACKWARDS',
	  twitter: 'HOVER_PLAY_AND_STOP',
	  userMinus: 'HOVER_PLAY_AND_STOP',
	  userPlus: 'HOVER_PLAY_AND_STOP',
	  userX: 'HOVER_PLAY_AND_STOP',
	  video: 'CLICK_PLAY_AND_BACKWARDS',
	  video2: 'CLICK_PLAY_AND_BACKWARDS',
	  visibility: 'CLICK_PLAY_AND_BACKWARDS',
	  visibility2: 'CLICK_PLAY_AND_BACKWARDS',
	  volume: 'CLICK_PLAY_AND_BACKWARDS',
	  youtube: 'HOVER_PLAY_AND_STOP',
	  youtube2: 'HOVER_PLAY_AND_STOP'
	};

	var getEffect = function getEffect(animationKey) {
	  return animations[animationKey] || '';
	};

	var _default = getEffect;
	exports["default"] = _default;
	});

	unwrapExports(getEffect_1);

	var getEvents_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = void 0;

	var getClickAndPlaySegmentsEvents = function getClickAndPlaySegmentsEvents(animation) {
	  return {
	    onClick: function onClick() {
	      return animation.playSegments([0, 60], true);
	    }
	  };
	};

	var getClickPlayEvents = function getClickPlayEvents(animation) {
	  return {
	    onClick: function onClick() {
	      animation.stop();
	      animation.play();
	    }
	  };
	};

	var getHoverPlayAndStop = function getHoverPlayAndStop(animation) {
	  return {
	    onMouseEnter: function onMouseEnter() {
	      return animation.play();
	    },
	    onMouseLeave: function onMouseLeave() {
	      return animation.stop();
	    }
	  };
	};

	var getHoverPlayBackwardsEvents = function getHoverPlayBackwardsEvents(animation) {
	  return {
	    onMouseEnter: function onMouseEnter() {
	      animation.setDirection(1);
	      animation.play();
	    },
	    onMouseLeave: function onMouseLeave() {
	      animation.setDirection(-1);
	      animation.play();
	    }
	  };
	};

	var getClickAndPlayBackwardsEvents = function getClickAndPlayBackwardsEvents(animation, reverse) {
	  var directionMenu = 1; // EG CHECKBOX WHICH NEED TO BE CHECKED AS INITIAL STATE, LET'S PLAY THE ANIMATION ASAP AUTOMATICALLY

	  if (reverse) {
	    animation.setDirection(directionMenu);
	    animation.play();
	    directionMenu *= -1;
	  }

	  return {
	    onClick: function onClick() {
	      animation.setDirection(directionMenu);
	      animation.play();
	      directionMenu *= -1;
	    }
	  };
	};

	var getEvents = function getEvents(_ref) {
	  var animation = _ref.animation,
	      reverse = _ref.reverse,
	      animEffect = _ref.animEffect;

	  if (animEffect === 'CLICK_PLAY_AND_SEGMENTS') {
	    return getClickAndPlaySegmentsEvents(animation);
	  }

	  if (animEffect === 'CLICK_PLAY') {
	    return getClickPlayEvents(animation);
	  }

	  if (animEffect === 'HOVER_PLAY_AND_STOP') {
	    return getHoverPlayAndStop(animation);
	  }

	  if (animEffect === 'HOVER_PLAY_AND_BACKWARDS') {
	    return getHoverPlayBackwardsEvents(animation);
	  }

	  if (animEffect === 'CLICK_PLAY_AND_BACKWARDS') {
	    return getClickAndPlayBackwardsEvents(animation, reverse);
	  }

	  return getClickPlayEvents(animation);
	};

	var _default = getEvents;
	exports["default"] = _default;
	});

	unwrapExports(getEvents_1);

	var utils$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "getEffect", {
	  enumerable: true,
	  get: function get() {
	    return _getEffect["default"];
	  }
	});
	Object.defineProperty(exports, "getEvents", {
	  enumerable: true,
	  get: function get() {
	    return _getEvents["default"];
	  }
	});

	var _getEffect = _interopRequireDefault(getEffect_1);

	var _getEvents = _interopRequireDefault(getEvents_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	});

	unwrapExports(utils$1);

	var reactUseanimations = createCommonjsModule(function (module, exports) {

	function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = void 0;

	var _react = _interopRequireWildcard(react);

	var _lottieWeb = _interopRequireDefault(lottie);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

	function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

	function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

	function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

	function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

	function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

	function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	var getRandomId = function getRandomId(key) {
	  return "".concat(key, "_i").concat(Math.floor(Math.random() * 10000 + 1));
	};

	var UseAnimations = function UseAnimations(_ref) {
	  var _ref$animation = _ref.animation,
	      animationData = _ref$animation.animationData,
	      animationKey = _ref$animation.animationKey,
	      _ref$reverse = _ref.reverse,
	      reverse = _ref$reverse === void 0 ? false : _ref$reverse,
	      _ref$size = _ref.size,
	      size = _ref$size === void 0 ? 24 : _ref$size,
	      strokeColor = _ref.strokeColor,
	      pathCss = _ref.pathCss,
	      loop = _ref.loop,
	      autoplay = _ref.autoplay,
	      wrapperStyle = _ref.wrapperStyle,
	      options = _ref.options,
	      _onClick = _ref.onClick,
	      render = _ref.render,
	      other = _objectWithoutProperties(_ref, ["animation", "reverse", "size", "strokeColor", "pathCss", "loop", "autoplay", "wrapperStyle", "options", "onClick", "render"]);

	  var _useState = (0, _react.useState)(),
	      _useState2 = _slicedToArray(_useState, 2),
	      animation = _useState2[0],
	      setAnimation = _useState2[1];

	  var ref = (0, _react.useRef)(null);
	  (0, _react.useEffect)(function () {
	    var animEffect = (0, utils$1.getEffect)(animationKey);
	    var animationId = getRandomId(animationKey);

	    if (strokeColor || pathCss) {
	      try {
	        var css = "#".concat(animationId, " path { stroke: ").concat(strokeColor || 'inherit', "; ").concat(pathCss || '', "}");
	        var sheetEl = document.getElementById('useAnimationsSheet'); // STYLESHEET HASN'T BEEN CREATED YET

	        if (!sheetEl) {
	          sheetEl = document.createElement('style');
	          sheetEl.setAttribute('id', 'useAnimationsSheet');
	          sheetEl.appendChild(document.createTextNode(''));
	          document.head.appendChild(sheetEl);
	        }

	        var sheet = sheetEl ? sheetEl.sheet || sheetEl.styleSheet : null;
	        sheet.insertRule(css);
	      } catch (err) {
	        // eslint-disable-next-line
	        console.warn("There's been a problem with deleting a CSSRule, please report that issue in https://github.com/useAnimations/react-useanimations", err);
	      }
	    }

	    var defaultOptions = _objectSpread({
	      container: ref.current,
	      renderer: 'svg',
	      animationData: animationData,
	      loop: loop || animEffect === 'LOOP_PLAY',
	      autoplay: autoplay || animEffect === 'LOOP_PLAY',
	      rendererSettings: {
	        // LOADS DOM ELEMENTS WHEN NEEDED. MIGHT SPEED UP INITIALIZATION FOR LARGE NUMBER OF ELEMENTS.
	        progressiveLoad: true,
	        // lottie-web missing id type
	        // @ts-ignore-next-line
	        id: animationId
	      }
	    }, options);

	    setAnimation(_lottieWeb["default"].loadAnimation(defaultOptions));
	    return function () {
	      animation === null || animation === void 0 ? void 0 : animation.destroy();
	      setAnimation(undefined); // DELETE CSS RULE

	      try {
	        var _sheetEl = document.getElementById('useAnimationsSheet');

	        var _sheet = _sheetEl ? _sheetEl.sheet || _sheetEl.styleSheet : null;

	        if (_sheet) {
	          var animationRuleIndex = Array.from(_sheet.cssRules).findIndex(function (rule) {
	            return rule.selectorText === "#".concat(animationId, " path");
	          });

	          if (animationRuleIndex !== -1) {
	            _sheet.deleteRule(animationRuleIndex);
	          }
	        }
	      } catch (err) {
	        // eslint-disable-next-line
	        console.warn("There's been a problem with deleting a CSSRule, please report that issue in https://github.com/useAnimations/react-useanimations", err);
	      }
	    };
	  }, []);

	  var defaultStyles = _objectSpread({
	    overflow: 'hidden',
	    outline: 'none',
	    width: "".concat(size, "px"),
	    height: "".concat(size, "px")
	  }, wrapperStyle);

	  var events = animation ? (0, utils$1.getEvents)({
	    animation: animation,
	    reverse: reverse,
	    animEffect: (0, utils$1.getEffect)(animationKey)
	  }) : undefined;

	  var eventProps = _objectSpread(_objectSpread({}, events), {}, {
	    onClick: function onClick(e) {
	      if (_onClick) _onClick(e);
	      if (events && 'onClick' in events) events.onClick();
	    }
	  });

	  var animationProps = _objectSpread(_objectSpread({
	    ref: ref
	  }, other), {}, {
	    style: defaultStyles
	  });

	  return render ? render(eventProps, animationProps) : /*#__PURE__*/_react["default"].createElement("div", _extends({}, eventProps, animationProps));
	};

	var _default = UseAnimations;
	exports["default"] = _default;
	});

	var UseAnimations = unwrapExports(reactUseanimations);

	var v = "5.6.5";
	var fr = 30;
	var ip = 0;
	var op = 60;
	var w = 24;
	var h = 24;
	var nm = "skip-back";
	var ddd = 0;
	var assets = [
	];
	var layers = [
		{
			ddd: 0,
			ind: 1,
			ty: 4,
			nm: "line",
			sr: 1,
			ks: {
				o: {
					a: 0,
					k: 100,
					ix: 11
				},
				r: {
					a: 0,
					k: 180,
					ix: 10
				},
				p: {
					a: 1,
					k: [
						{
							i: {
								x: 0.667,
								y: 1
							},
							o: {
								x: 1,
								y: 0
							},
							t: 20,
							s: [
								12,
								12,
								0
							],
							to: [
								2.708,
								0,
								0
							],
							ti: [
								0,
								0,
								0
							]
						},
						{
							i: {
								x: 0,
								y: 1
							},
							o: {
								x: 0.333,
								y: 0
							},
							t: 40,
							s: [
								28.25,
								12,
								0
							],
							to: [
								0,
								0,
								0
							],
							ti: [
								2.708,
								0,
								0
							]
						},
						{
							t: 60,
							s: [
								12,
								12,
								0
							]
						}
					],
					ix: 2
				},
				a: {
					a: 0,
					k: [
						12,
						12,
						0
					],
					ix: 1
				},
				s: {
					a: 0,
					k: [
						100,
						100,
						100
					],
					ix: 6
				}
			},
			ao: 0,
			shapes: [
				{
					ty: "gr",
					it: [
						{
							ind: 0,
							ty: "sh",
							ix: 1,
							ks: {
								a: 0,
								k: {
									i: [
										[
											0,
											0
										],
										[
											0,
											0
										]
									],
									o: [
										[
											0,
											0
										],
										[
											0,
											0
										]
									],
									v: [
										[
											19,
											5
										],
										[
											19,
											19
										]
									],
									c: false
								},
								ix: 2
							},
							nm: "Path 1",
							mn: "ADBE Vector Shape - Group",
							hd: false
						},
						{
							ty: "st",
							c: {
								a: 0,
								k: [
									0,
									0,
									0,
									1
								],
								ix: 3
							},
							o: {
								a: 0,
								k: 100,
								ix: 4
							},
							w: {
								a: 0,
								k: 2,
								ix: 5
							},
							lc: 2,
							lj: 2,
							bm: 0,
							nm: "Stroke 1",
							mn: "ADBE Vector Graphic - Stroke",
							hd: false
						},
						{
							ty: "tr",
							p: {
								a: 0,
								k: [
									0,
									0
								],
								ix: 2
							},
							a: {
								a: 0,
								k: [
									0,
									0
								],
								ix: 1
							},
							s: {
								a: 0,
								k: [
									100,
									100
								],
								ix: 3
							},
							r: {
								a: 0,
								k: 0,
								ix: 6
							},
							o: {
								a: 0,
								k: 100,
								ix: 7
							},
							sk: {
								a: 0,
								k: 0,
								ix: 4
							},
							sa: {
								a: 0,
								k: 0,
								ix: 5
							},
							nm: "Transform"
						}
					],
					nm: "line",
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: "ADBE Vector Group",
					hd: false
				}
			],
			ip: 0,
			op: 60,
			st: 0,
			bm: 0
		},
		{
			ddd: 0,
			ind: 2,
			ty: 4,
			nm: "triangle 2",
			sr: 1,
			ks: {
				o: {
					a: 0,
					k: 100,
					ix: 11
				},
				r: {
					a: 0,
					k: 180,
					ix: 10
				},
				p: {
					a: 0,
					k: [
						12,
						12,
						0
					],
					ix: 2
				},
				a: {
					a: 0,
					k: [
						12,
						12,
						0
					],
					ix: 1
				},
				s: {
					a: 1,
					k: [
						{
							i: {
								x: [
									0,
									0,
									0.667
								],
								y: [
									1,
									1,
									1
								]
							},
							o: {
								x: [
									0.333,
									0.333,
									0.333
								],
								y: [
									0,
									0,
									0
								]
							},
							t: 50,
							s: [
								75,
								75,
								100
							]
						},
						{
							t: 60,
							s: [
								100,
								100,
								100
							]
						}
					],
					ix: 6
				}
			},
			ao: 0,
			hasMask: true,
			masksProperties: [
				{
					inv: false,
					mode: "a",
					pt: {
						a: 1,
						k: [
							{
								i: {
									x: 0.833,
									y: 0.833
								},
								o: {
									x: 0.167,
									y: 0.167
								},
								t: 40,
								s: [
									{
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												-15.5,
												-1.167
											],
											[
												-15.5,
												24.5
											],
											[
												-0.333,
												24.5
											],
											[
												-0.333,
												-1.167
											]
										],
										c: true
									}
								]
							},
							{
								i: {
									x: 0.833,
									y: 0.833
								},
								o: {
									x: 0.167,
									y: 0.167
								},
								t: 43,
								s: [
									{
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												-12.333,
												-1.333
											],
											[
												-12.333,
												24.333
											],
											[
												2.833,
												24.333
											],
											[
												2.833,
												-1.333
											]
										],
										c: true
									}
								]
							},
							{
								i: {
									x: 0.833,
									y: 0.833
								},
								o: {
									x: 0.167,
									y: 0.167
								},
								t: 44,
								s: [
									{
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												-8.5,
												-0.833
											],
											[
												-8.5,
												24.833
											],
											[
												6.667,
												24.833
											],
											[
												6.667,
												-0.833
											]
										],
										c: true
									}
								]
							},
							{
								i: {
									x: 0.833,
									y: 0.833
								},
								o: {
									x: 0.167,
									y: 0.167
								},
								t: 45,
								s: [
									{
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												-4.833,
												-0.833
											],
											[
												-4.833,
												24.833
											],
											[
												10.333,
												24.833
											],
											[
												10.333,
												-0.833
											]
										],
										c: true
									}
								]
							},
							{
								i: {
									x: 0.833,
									y: 0.833
								},
								o: {
									x: 0.167,
									y: 0.167
								},
								t: 46,
								s: [
									{
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												-2,
												-0.833
											],
											[
												-2,
												24.833
											],
											[
												13.167,
												24.833
											],
											[
												13.167,
												-0.833
											]
										],
										c: true
									}
								]
							},
							{
								i: {
									x: 0.833,
									y: 0.833
								},
								o: {
									x: 0.167,
									y: 0.167
								},
								t: 47,
								s: [
									{
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												-0.167,
												-0.833
											],
											[
												-0.167,
												24.833
											],
											[
												15,
												24.833
											],
											[
												15,
												-0.833
											]
										],
										c: true
									}
								]
							},
							{
								t: 48,
								s: [
									{
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												2.5,
												-0.833
											],
											[
												2.5,
												24.833
											],
											[
												17.667,
												24.833
											],
											[
												17.667,
												-0.833
											]
										],
										c: true
									}
								]
							}
						],
						ix: 1
					},
					o: {
						a: 0,
						k: 100,
						ix: 3
					},
					x: {
						a: 0,
						k: 0,
						ix: 4
					},
					nm: "Mask 1"
				}
			],
			shapes: [
				{
					ty: "gr",
					it: [
						{
							ind: 0,
							ty: "sh",
							ix: 1,
							ks: {
								a: 0,
								k: {
									i: [
										[
											0,
											0
										],
										[
											0,
											0
										],
										[
											0,
											0
										]
									],
									o: [
										[
											0,
											0
										],
										[
											0,
											0
										],
										[
											0,
											0
										]
									],
									v: [
										[
											-5,
											-8
										],
										[
											5,
											0
										],
										[
											-5,
											8
										]
									],
									c: true
								},
								ix: 2
							},
							nm: "Path 1",
							mn: "ADBE Vector Shape - Group",
							hd: false
						},
						{
							ty: "st",
							c: {
								a: 0,
								k: [
									0,
									0,
									0,
									1
								],
								ix: 3
							},
							o: {
								a: 0,
								k: 100,
								ix: 4
							},
							w: {
								a: 0,
								k: 2,
								ix: 5
							},
							lc: 2,
							lj: 2,
							bm: 0,
							nm: "Stroke 1",
							mn: "ADBE Vector Graphic - Stroke",
							hd: false
						},
						{
							ty: "tr",
							p: {
								a: 0,
								k: [
									10,
									12
								],
								ix: 2
							},
							a: {
								a: 0,
								k: [
									0,
									0
								],
								ix: 1
							},
							s: {
								a: 0,
								k: [
									100,
									100
								],
								ix: 3
							},
							r: {
								a: 0,
								k: 0,
								ix: 6
							},
							o: {
								a: 0,
								k: 100,
								ix: 7
							},
							sk: {
								a: 0,
								k: 0,
								ix: 4
							},
							sa: {
								a: 0,
								k: 0,
								ix: 5
							},
							nm: "Transform"
						}
					],
					nm: "triangle",
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: "ADBE Vector Group",
					hd: false
				}
			],
			ip: 40,
			op: 60,
			st: 40,
			bm: 0
		},
		{
			ddd: 0,
			ind: 3,
			ty: 4,
			nm: "triangle",
			sr: 1,
			ks: {
				o: {
					a: 0,
					k: 100,
					ix: 11
				},
				r: {
					a: 0,
					k: 180,
					ix: 10
				},
				p: {
					a: 1,
					k: [
						{
							i: {
								x: 0.833,
								y: 1
							},
							o: {
								x: 1,
								y: 0
							},
							t: 0,
							s: [
								12,
								12,
								0
							],
							to: [
								-3.333,
								0,
								0
							],
							ti: [
								3.333,
								0,
								0
							]
						},
						{
							t: 15,
							s: [
								-8,
								12,
								0
							]
						}
					],
					ix: 2
				},
				a: {
					a: 0,
					k: [
						12,
						12,
						0
					],
					ix: 1
				},
				s: {
					a: 1,
					k: [
						{
							i: {
								x: [
									0,
									0,
									0.667
								],
								y: [
									1,
									1,
									1
								]
							},
							o: {
								x: [
									0.333,
									0.333,
									0.333
								],
								y: [
									0,
									0,
									0
								]
							},
							t: 0,
							s: [
								100,
								100,
								100
							]
						},
						{
							t: 20,
							s: [
								75,
								75,
								100
							]
						}
					],
					ix: 6
				}
			},
			ao: 0,
			hasMask: true,
			masksProperties: [
				{
					inv: false,
					mode: "a",
					pt: {
						a: 1,
						k: [
							{
								i: {
									x: 0.833,
									y: 0.833
								},
								o: {
									x: 0.167,
									y: 0.167
								},
								t: 0,
								s: [
									{
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												0.125,
												0.125
											],
											[
												0.125,
												24
											],
											[
												19.125,
												24
											],
											[
												19.125,
												0.125
											]
										],
										c: true
									}
								]
							},
							{
								i: {
									x: 0.833,
									y: 0.833
								},
								o: {
									x: 0.167,
									y: 0.167
								},
								t: 5,
								s: [
									{
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												0.125,
												0.125
											],
											[
												0.125,
												23.571
											],
											[
												19.232,
												23.571
											],
											[
												19.232,
												0.125
											]
										],
										c: true
									}
								]
							},
							{
								i: {
									x: 0.833,
									y: 0.833
								},
								o: {
									x: 0.167,
									y: 0.167
								},
								t: 7,
								s: [
									{
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												-0.936,
												0.277
											],
											[
												-0.936,
												23.723
											],
											[
												18.172,
												23.723
											],
											[
												18.172,
												0.277
											]
										],
										c: true
									}
								]
							},
							{
								i: {
									x: 0.833,
									y: 0.833
								},
								o: {
									x: 0.167,
									y: 0.167
								},
								t: 8,
								s: [
									{
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												-1.717,
												0.12
											],
											[
												-1.717,
												23.567
											],
											[
												17.39,
												23.567
											],
											[
												17.39,
												0.12
											]
										],
										c: true
									}
								]
							},
							{
								i: {
									x: 0.833,
									y: 0.833
								},
								o: {
									x: 0.167,
									y: 0.167
								},
								t: 9,
								s: [
									{
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												-2.846,
												0.282
											],
											[
												-2.846,
												23.728
											],
											[
												16.261,
												23.728
											],
											[
												16.261,
												0.282
											]
										],
										c: true
									}
								]
							},
							{
								i: {
									x: 0.833,
									y: 0.833
								},
								o: {
									x: 0.167,
									y: 0.167
								},
								t: 10,
								s: [
									{
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												-4.513,
												0.282
											],
											[
												-4.513,
												23.728
											],
											[
												14.595,
												23.728
											],
											[
												14.595,
												0.282
											]
										],
										c: true
									}
								]
							},
							{
								i: {
									x: 0.833,
									y: 0.833
								},
								o: {
									x: 0.167,
									y: 0.167
								},
								t: 11,
								s: [
									{
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												-7.013,
												0.615
											],
											[
												-7.013,
												24.061
											],
											[
												12.095,
												24.061
											],
											[
												12.095,
												0.615
											]
										],
										c: true
									}
								]
							},
							{
								i: {
									x: 0.833,
									y: 0.833
								},
								o: {
									x: 0.167,
									y: 0.167
								},
								t: 12,
								s: [
									{
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												-10.179,
												0.615
											],
											[
												-10.179,
												24.061
											],
											[
												8.928,
												24.061
											],
											[
												8.928,
												0.615
											]
										],
										c: true
									}
								]
							},
							{
								i: {
									x: 0.833,
									y: 0.833
								},
								o: {
									x: 0.167,
									y: 0.167
								},
								t: 13,
								s: [
									{
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												-15.179,
												0.115
											],
											[
												-15.179,
												23.561
											],
											[
												3.928,
												23.561
											],
											[
												3.928,
												0.115
											]
										],
										c: true
									}
								]
							},
							{
								t: 14,
								s: [
									{
										i: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										o: [
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											],
											[
												0,
												0
											]
										],
										v: [
											[
												-22.013,
												0.282
											],
											[
												-22.013,
												23.728
											],
											[
												-2.905,
												23.728
											],
											[
												-2.905,
												0.282
											]
										],
										c: true
									}
								]
							}
						],
						ix: 1
					},
					o: {
						a: 0,
						k: 100,
						ix: 3
					},
					x: {
						a: 0,
						k: 0,
						ix: 4
					},
					nm: "Mask 1"
				}
			],
			shapes: [
				{
					ty: "gr",
					it: [
						{
							ind: 0,
							ty: "sh",
							ix: 1,
							ks: {
								a: 0,
								k: {
									i: [
										[
											0,
											0
										],
										[
											0,
											0
										],
										[
											0,
											0
										]
									],
									o: [
										[
											0,
											0
										],
										[
											0,
											0
										],
										[
											0,
											0
										]
									],
									v: [
										[
											-5,
											-8
										],
										[
											5,
											0
										],
										[
											-5,
											8
										]
									],
									c: true
								},
								ix: 2
							},
							nm: "Path 1",
							mn: "ADBE Vector Shape - Group",
							hd: false
						},
						{
							ty: "st",
							c: {
								a: 0,
								k: [
									0,
									0,
									0,
									1
								],
								ix: 3
							},
							o: {
								a: 0,
								k: 100,
								ix: 4
							},
							w: {
								a: 0,
								k: 2,
								ix: 5
							},
							lc: 2,
							lj: 2,
							bm: 0,
							nm: "Stroke 1",
							mn: "ADBE Vector Graphic - Stroke",
							hd: false
						},
						{
							ty: "tr",
							p: {
								a: 0,
								k: [
									10,
									12
								],
								ix: 2
							},
							a: {
								a: 0,
								k: [
									0,
									0
								],
								ix: 1
							},
							s: {
								a: 0,
								k: [
									100,
									100
								],
								ix: 3
							},
							r: {
								a: 0,
								k: 0,
								ix: 6
							},
							o: {
								a: 0,
								k: 100,
								ix: 7
							},
							sk: {
								a: 0,
								k: 0,
								ix: 4
							},
							sa: {
								a: 0,
								k: 0,
								ix: 5
							},
							nm: "Transform"
						}
					],
					nm: "triangle",
					np: 2,
					cix: 2,
					bm: 0,
					ix: 1,
					mn: "ADBE Vector Group",
					hd: false
				}
			],
			ip: 0,
			op: 15,
			st: 0,
			bm: 0
		}
	];
	var markers = [
	];
	var skipBack = {
		v: v,
		fr: fr,
		ip: ip,
		op: op,
		w: w,
		h: h,
		nm: nm,
		ddd: ddd,
		assets: assets,
		layers: layers,
		markers: markers
	};

	var skipBack$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		v: v,
		fr: fr,
		ip: ip,
		op: op,
		w: w,
		h: h,
		nm: nm,
		ddd: ddd,
		assets: assets,
		layers: layers,
		markers: markers,
		'default': skipBack
	});

	var require$$0 = getCjsExportFromNamespace(skipBack$1);

	var skipBack$2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = void 0;

	var _skipBack = _interopRequireDefault(require$$0);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _default = {
	  animationData: _skipBack["default"],
	  animationKey: 'skipBack'
	};
	exports["default"] = _default;
	});

	var skipBack$3 = unwrapExports(skipBack$2);

	function getUserAgent() {
	    if (typeof navigator === "object" && "userAgent" in navigator) {
	        return navigator.userAgent;
	    }
	    if (typeof process === "object" && "version" in process) {
	        return `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`;
	    }
	    return "<environment undetectable>";
	}

	var register_1 = register;

	function register (state, name, method, options) {
	  if (typeof method !== 'function') {
	    throw new Error('method for before hook must be a function')
	  }

	  if (!options) {
	    options = {};
	  }

	  if (Array.isArray(name)) {
	    return name.reverse().reduce(function (callback, name) {
	      return register.bind(null, state, name, callback, options)
	    }, method)()
	  }

	  return Promise.resolve()
	    .then(function () {
	      if (!state.registry[name]) {
	        return method(options)
	      }

	      return (state.registry[name]).reduce(function (method, registered) {
	        return registered.hook.bind(null, method, options)
	      }, method)()
	    })
	}

	var add = addHook;

	function addHook (state, kind, name, hook) {
	  var orig = hook;
	  if (!state.registry[name]) {
	    state.registry[name] = [];
	  }

	  if (kind === 'before') {
	    hook = function (method, options) {
	      return Promise.resolve()
	        .then(orig.bind(null, options))
	        .then(method.bind(null, options))
	    };
	  }

	  if (kind === 'after') {
	    hook = function (method, options) {
	      var result;
	      return Promise.resolve()
	        .then(method.bind(null, options))
	        .then(function (result_) {
	          result = result_;
	          return orig(result, options)
	        })
	        .then(function () {
	          return result
	        })
	    };
	  }

	  if (kind === 'error') {
	    hook = function (method, options) {
	      return Promise.resolve()
	        .then(method.bind(null, options))
	        .catch(function (error) {
	          return orig(error, options)
	        })
	    };
	  }

	  state.registry[name].push({
	    hook: hook,
	    orig: orig
	  });
	}

	var remove$1 = removeHook;

	function removeHook (state, name, method) {
	  if (!state.registry[name]) {
	    return
	  }

	  var index = state.registry[name]
	    .map(function (registered) { return registered.orig })
	    .indexOf(method);

	  if (index === -1) {
	    return
	  }

	  state.registry[name].splice(index, 1);
	}

	// bind with array of arguments: https://stackoverflow.com/a/21792913
	var bind = Function.bind;
	var bindable = bind.bind(bind);

	function bindApi (hook, state, name) {
	  var removeHookRef = bindable(remove$1, null).apply(null, name ? [state, name] : [state]);
	  hook.api = { remove: removeHookRef };
	  hook.remove = removeHookRef

	  ;['before', 'error', 'after', 'wrap'].forEach(function (kind) {
	    var args = name ? [state, kind, name] : [state, kind];
	    hook[kind] = hook.api[kind] = bindable(add, null).apply(null, args);
	  });
	}

	function HookSingular () {
	  var singularHookName = 'h';
	  var singularHookState = {
	    registry: {}
	  };
	  var singularHook = register_1.bind(null, singularHookState, singularHookName);
	  bindApi(singularHook, singularHookState, singularHookName);
	  return singularHook
	}

	function HookCollection () {
	  var state = {
	    registry: {}
	  };

	  var hook = register_1.bind(null, state);
	  bindApi(hook, state);

	  return hook
	}

	var collectionHookDeprecationMessageDisplayed = false;
	function Hook () {
	  if (!collectionHookDeprecationMessageDisplayed) {
	    console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4');
	    collectionHookDeprecationMessageDisplayed = true;
	  }
	  return HookCollection()
	}

	Hook.Singular = HookSingular.bind();
	Hook.Collection = HookCollection.bind();

	var beforeAfterHook = Hook;
	// expose constructors as a named property for TypeScript
	var Hook_1 = Hook;
	var Singular = Hook.Singular;
	var Collection = Hook.Collection;
	beforeAfterHook.Hook = Hook_1;
	beforeAfterHook.Singular = Singular;
	beforeAfterHook.Collection = Collection;

	/*!
	 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
	 *
	 * Copyright (c) 2014-2017, Jon Schlinkert.
	 * Released under the MIT License.
	 */

	function isObject(o) {
	  return Object.prototype.toString.call(o) === '[object Object]';
	}

	function isPlainObject(o) {
	  var ctor,prot;

	  if (isObject(o) === false) return false;

	  // If has modified constructor
	  ctor = o.constructor;
	  if (ctor === undefined) return true;

	  // If has modified prototype
	  prot = ctor.prototype;
	  if (isObject(prot) === false) return false;

	  // If constructor does not have an Object-specific method
	  if (prot.hasOwnProperty('isPrototypeOf') === false) {
	    return false;
	  }

	  // Most likely a plain Object
	  return true;
	}

	function lowercaseKeys(object) {
	    if (!object) {
	        return {};
	    }
	    return Object.keys(object).reduce((newObj, key) => {
	        newObj[key.toLowerCase()] = object[key];
	        return newObj;
	    }, {});
	}

	function mergeDeep(defaults, options) {
	    const result = Object.assign({}, defaults);
	    Object.keys(options).forEach((key) => {
	        if (isPlainObject(options[key])) {
	            if (!(key in defaults))
	                Object.assign(result, { [key]: options[key] });
	            else
	                result[key] = mergeDeep(defaults[key], options[key]);
	        }
	        else {
	            Object.assign(result, { [key]: options[key] });
	        }
	    });
	    return result;
	}

	function merge(defaults, route, options) {
	    if (typeof route === "string") {
	        let [method, url] = route.split(" ");
	        options = Object.assign(url ? { method, url } : { url: method }, options);
	    }
	    else {
	        options = Object.assign({}, route);
	    }
	    // lowercase header names before merging with defaults to avoid duplicates
	    options.headers = lowercaseKeys(options.headers);
	    const mergedOptions = mergeDeep(defaults || {}, options);
	    // mediaType.previews arrays are merged, instead of overwritten
	    if (defaults && defaults.mediaType.previews.length) {
	        mergedOptions.mediaType.previews = defaults.mediaType.previews
	            .filter((preview) => !mergedOptions.mediaType.previews.includes(preview))
	            .concat(mergedOptions.mediaType.previews);
	    }
	    mergedOptions.mediaType.previews = mergedOptions.mediaType.previews.map((preview) => preview.replace(/-preview/, ""));
	    return mergedOptions;
	}

	function addQueryParameters(url, parameters) {
	    const separator = /\?/.test(url) ? "&" : "?";
	    const names = Object.keys(parameters);
	    if (names.length === 0) {
	        return url;
	    }
	    return (url +
	        separator +
	        names
	            .map((name) => {
	            if (name === "q") {
	                return ("q=" + parameters.q.split("+").map(encodeURIComponent).join("+"));
	            }
	            return `${name}=${encodeURIComponent(parameters[name])}`;
	        })
	            .join("&"));
	}

	const urlVariableRegex = /\{[^}]+\}/g;
	function removeNonChars(variableName) {
	    return variableName.replace(/^\W+|\W+$/g, "").split(/,/);
	}
	function extractUrlVariableNames(url) {
	    const matches = url.match(urlVariableRegex);
	    if (!matches) {
	        return [];
	    }
	    return matches.map(removeNonChars).reduce((a, b) => a.concat(b), []);
	}

	function omit(object, keysToOmit) {
	    return Object.keys(object)
	        .filter((option) => !keysToOmit.includes(option))
	        .reduce((obj, key) => {
	        obj[key] = object[key];
	        return obj;
	    }, {});
	}

	// Based on https://github.com/bramstein/url-template, licensed under BSD
	// TODO: create separate package.
	//
	// Copyright (c) 2012-2014, Bram Stein
	// All rights reserved.
	// Redistribution and use in source and binary forms, with or without
	// modification, are permitted provided that the following conditions
	// are met:
	//  1. Redistributions of source code must retain the above copyright
	//     notice, this list of conditions and the following disclaimer.
	//  2. Redistributions in binary form must reproduce the above copyright
	//     notice, this list of conditions and the following disclaimer in the
	//     documentation and/or other materials provided with the distribution.
	//  3. The name of the author may not be used to endorse or promote products
	//     derived from this software without specific prior written permission.
	// THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
	// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
	// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
	// EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	/* istanbul ignore file */
	function encodeReserved(str) {
	    return str
	        .split(/(%[0-9A-Fa-f]{2})/g)
	        .map(function (part) {
	        if (!/%[0-9A-Fa-f]/.test(part)) {
	            part = encodeURI(part).replace(/%5B/g, "[").replace(/%5D/g, "]");
	        }
	        return part;
	    })
	        .join("");
	}
	function encodeUnreserved(str) {
	    return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
	        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
	    });
	}
	function encodeValue(operator, value, key) {
	    value =
	        operator === "+" || operator === "#"
	            ? encodeReserved(value)
	            : encodeUnreserved(value);
	    if (key) {
	        return encodeUnreserved(key) + "=" + value;
	    }
	    else {
	        return value;
	    }
	}
	function isDefined(value) {
	    return value !== undefined && value !== null;
	}
	function isKeyOperator(operator) {
	    return operator === ";" || operator === "&" || operator === "?";
	}
	function getValues(context, operator, key, modifier) {
	    var value = context[key], result = [];
	    if (isDefined(value) && value !== "") {
	        if (typeof value === "string" ||
	            typeof value === "number" ||
	            typeof value === "boolean") {
	            value = value.toString();
	            if (modifier && modifier !== "*") {
	                value = value.substring(0, parseInt(modifier, 10));
	            }
	            result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : ""));
	        }
	        else {
	            if (modifier === "*") {
	                if (Array.isArray(value)) {
	                    value.filter(isDefined).forEach(function (value) {
	                        result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : ""));
	                    });
	                }
	                else {
	                    Object.keys(value).forEach(function (k) {
	                        if (isDefined(value[k])) {
	                            result.push(encodeValue(operator, value[k], k));
	                        }
	                    });
	                }
	            }
	            else {
	                const tmp = [];
	                if (Array.isArray(value)) {
	                    value.filter(isDefined).forEach(function (value) {
	                        tmp.push(encodeValue(operator, value));
	                    });
	                }
	                else {
	                    Object.keys(value).forEach(function (k) {
	                        if (isDefined(value[k])) {
	                            tmp.push(encodeUnreserved(k));
	                            tmp.push(encodeValue(operator, value[k].toString()));
	                        }
	                    });
	                }
	                if (isKeyOperator(operator)) {
	                    result.push(encodeUnreserved(key) + "=" + tmp.join(","));
	                }
	                else if (tmp.length !== 0) {
	                    result.push(tmp.join(","));
	                }
	            }
	        }
	    }
	    else {
	        if (operator === ";") {
	            if (isDefined(value)) {
	                result.push(encodeUnreserved(key));
	            }
	        }
	        else if (value === "" && (operator === "&" || operator === "?")) {
	            result.push(encodeUnreserved(key) + "=");
	        }
	        else if (value === "") {
	            result.push("");
	        }
	    }
	    return result;
	}
	function parseUrl(template) {
	    return {
	        expand: expand.bind(null, template),
	    };
	}
	function expand(template, context) {
	    var operators = ["+", "#", ".", "/", ";", "?", "&"];
	    return template.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g, function (_, expression, literal) {
	        if (expression) {
	            let operator = "";
	            const values = [];
	            if (operators.indexOf(expression.charAt(0)) !== -1) {
	                operator = expression.charAt(0);
	                expression = expression.substr(1);
	            }
	            expression.split(/,/g).forEach(function (variable) {
	                var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
	                values.push(getValues(context, operator, tmp[1], tmp[2] || tmp[3]));
	            });
	            if (operator && operator !== "+") {
	                var separator = ",";
	                if (operator === "?") {
	                    separator = "&";
	                }
	                else if (operator !== "#") {
	                    separator = operator;
	                }
	                return (values.length !== 0 ? operator : "") + values.join(separator);
	            }
	            else {
	                return values.join(",");
	            }
	        }
	        else {
	            return encodeReserved(literal);
	        }
	    });
	}

	function parse$1(options) {
	    // https://fetch.spec.whatwg.org/#methods
	    let method = options.method.toUpperCase();
	    // replace :varname with {varname} to make it RFC 6570 compatible
	    let url = (options.url || "/").replace(/:([a-z]\w+)/g, "{+$1}");
	    let headers = Object.assign({}, options.headers);
	    let body;
	    let parameters = omit(options, [
	        "method",
	        "baseUrl",
	        "url",
	        "headers",
	        "request",
	        "mediaType",
	    ]);
	    // extract variable names from URL to calculate remaining variables later
	    const urlVariableNames = extractUrlVariableNames(url);
	    url = parseUrl(url).expand(parameters);
	    if (!/^http/.test(url)) {
	        url = options.baseUrl + url;
	    }
	    const omittedParameters = Object.keys(options)
	        .filter((option) => urlVariableNames.includes(option))
	        .concat("baseUrl");
	    const remainingParameters = omit(parameters, omittedParameters);
	    const isBinaryRequset = /application\/octet-stream/i.test(headers.accept);
	    if (!isBinaryRequset) {
	        if (options.mediaType.format) {
	            // e.g. application/vnd.github.v3+json => application/vnd.github.v3.raw
	            headers.accept = headers.accept
	                .split(/,/)
	                .map((preview) => preview.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/, `application/vnd$1$2.${options.mediaType.format}`))
	                .join(",");
	        }
	        if (options.mediaType.previews.length) {
	            const previewsFromAcceptHeader = headers.accept.match(/[\w-]+(?=-preview)/g) || [];
	            headers.accept = previewsFromAcceptHeader
	                .concat(options.mediaType.previews)
	                .map((preview) => {
	                const format = options.mediaType.format
	                    ? `.${options.mediaType.format}`
	                    : "+json";
	                return `application/vnd.github.${preview}-preview${format}`;
	            })
	                .join(",");
	        }
	    }
	    // for GET/HEAD requests, set URL query parameters from remaining parameters
	    // for PATCH/POST/PUT/DELETE requests, set request body from remaining parameters
	    if (["GET", "HEAD"].includes(method)) {
	        url = addQueryParameters(url, remainingParameters);
	    }
	    else {
	        if ("data" in remainingParameters) {
	            body = remainingParameters.data;
	        }
	        else {
	            if (Object.keys(remainingParameters).length) {
	                body = remainingParameters;
	            }
	            else {
	                headers["content-length"] = 0;
	            }
	        }
	    }
	    // default content-type for JSON if body is set
	    if (!headers["content-type"] && typeof body !== "undefined") {
	        headers["content-type"] = "application/json; charset=utf-8";
	    }
	    // GitHub expects 'content-length: 0' header for PUT/PATCH requests without body.
	    // fetch does not allow to set `content-length` header, but we can set body to an empty string
	    if (["PATCH", "PUT"].includes(method) && typeof body === "undefined") {
	        body = "";
	    }
	    // Only return body/request keys if present
	    return Object.assign({ method, url, headers }, typeof body !== "undefined" ? { body } : null, options.request ? { request: options.request } : null);
	}

	function endpointWithDefaults(defaults, route, options) {
	    return parse$1(merge(defaults, route, options));
	}

	function withDefaults(oldDefaults, newDefaults) {
	    const DEFAULTS = merge(oldDefaults, newDefaults);
	    const endpoint = endpointWithDefaults.bind(null, DEFAULTS);
	    return Object.assign(endpoint, {
	        DEFAULTS,
	        defaults: withDefaults.bind(null, DEFAULTS),
	        merge: merge.bind(null, DEFAULTS),
	        parse: parse$1,
	    });
	}

	const VERSION = "6.0.5";

	const userAgent = `octokit-endpoint.js/${VERSION} ${getUserAgent()}`;
	// DEFAULTS has all properties set that EndpointOptions has, except url.
	// So we use RequestParameters and add method as additional required property.
	const DEFAULTS = {
	    method: "GET",
	    baseUrl: "https://api.github.com",
	    headers: {
	        accept: "application/vnd.github.v3+json",
	        "user-agent": userAgent,
	    },
	    mediaType: {
	        format: "",
	        previews: [],
	    },
	};

	const endpoint = withDefaults(null, DEFAULTS);

	var browser$2 = createCommonjsModule(function (module, exports) {

	// ref: https://github.com/tc39/proposal-global
	var getGlobal = function () {
		// the only reliable means to get the global object is
		// `Function('return this')()`
		// However, this causes CSP violations in Chrome apps.
		if (typeof self !== 'undefined') { return self; }
		if (typeof window !== 'undefined') { return window; }
		if (typeof global !== 'undefined') { return global; }
		throw new Error('unable to locate global object');
	};

	var global = getGlobal();

	module.exports = exports = global.fetch;

	// Needed for TypeScript and Webpack.
	exports.default = global.fetch.bind(global);

	exports.Headers = global.Headers;
	exports.Request = global.Request;
	exports.Response = global.Response;
	});
	var browser_1 = browser$2.Headers;
	var browser_2 = browser$2.Request;
	var browser_3 = browser$2.Response;

	class Deprecation extends Error {
	  constructor(message) {
	    super(message); // Maintains proper stack trace (only available on V8)

	    /* istanbul ignore next */

	    if (Error.captureStackTrace) {
	      Error.captureStackTrace(this, this.constructor);
	    }

	    this.name = 'Deprecation';
	  }

	}

	// Returns a wrapper function that returns a wrapped callback
	// The wrapper function should do some stuff, and return a
	// presumably different callback function.
	// This makes sure that own properties are retained, so that
	// decorations and such are not lost along the way.
	var wrappy_1 = wrappy;
	function wrappy (fn, cb) {
	  if (fn && cb) return wrappy(fn)(cb)

	  if (typeof fn !== 'function')
	    throw new TypeError('need wrapper function')

	  Object.keys(fn).forEach(function (k) {
	    wrapper[k] = fn[k];
	  });

	  return wrapper

	  function wrapper() {
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }
	    var ret = fn.apply(this, args);
	    var cb = args[args.length-1];
	    if (typeof ret === 'function' && ret !== cb) {
	      Object.keys(cb).forEach(function (k) {
	        ret[k] = cb[k];
	      });
	    }
	    return ret
	  }
	}

	var once_1 = wrappy_1(once$1);
	var strict = wrappy_1(onceStrict);

	once$1.proto = once$1(function () {
	  Object.defineProperty(Function.prototype, 'once', {
	    value: function () {
	      return once$1(this)
	    },
	    configurable: true
	  });

	  Object.defineProperty(Function.prototype, 'onceStrict', {
	    value: function () {
	      return onceStrict(this)
	    },
	    configurable: true
	  });
	});

	function once$1 (fn) {
	  var f = function () {
	    if (f.called) return f.value
	    f.called = true;
	    return f.value = fn.apply(this, arguments)
	  };
	  f.called = false;
	  return f
	}

	function onceStrict (fn) {
	  var f = function () {
	    if (f.called)
	      throw new Error(f.onceError)
	    f.called = true;
	    return f.value = fn.apply(this, arguments)
	  };
	  var name = fn.name || 'Function wrapped with `once`';
	  f.onceError = name + " shouldn't be called more than once";
	  f.called = false;
	  return f
	}
	once_1.strict = strict;

	const logOnce = once_1((deprecation) => console.warn(deprecation));
	/**
	 * Error with extra properties to help with debugging
	 */
	class RequestError extends Error {
	    constructor(message, statusCode, options) {
	        super(message);
	        // Maintains proper stack trace (only available on V8)
	        /* istanbul ignore next */
	        if (Error.captureStackTrace) {
	            Error.captureStackTrace(this, this.constructor);
	        }
	        this.name = "HttpError";
	        this.status = statusCode;
	        Object.defineProperty(this, "code", {
	            get() {
	                logOnce(new Deprecation("[@octokit/request-error] `error.code` is deprecated, use `error.status`."));
	                return statusCode;
	            },
	        });
	        this.headers = options.headers || {};
	        // redact request credentials without mutating original request options
	        const requestCopy = Object.assign({}, options.request);
	        if (options.request.headers.authorization) {
	            requestCopy.headers = Object.assign({}, options.request.headers, {
	                authorization: options.request.headers.authorization.replace(/ .*$/, " [REDACTED]"),
	            });
	        }
	        requestCopy.url = requestCopy.url
	            // client_id & client_secret can be passed as URL query parameters to increase rate limit
	            // see https://developer.github.com/v3/#increasing-the-unauthenticated-rate-limit-for-oauth-applications
	            .replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]")
	            // OAuth tokens can be passed as URL query parameters, although it is not recommended
	            // see https://developer.github.com/v3/#oauth2-token-sent-in-a-header
	            .replace(/\baccess_token=\w+/g, "access_token=[REDACTED]");
	        this.request = requestCopy;
	    }
	}

	const VERSION$1 = "5.4.7";

	function getBufferResponse(response) {
	    return response.arrayBuffer();
	}

	function fetchWrapper(requestOptions) {
	    if (isPlainObject(requestOptions.body) ||
	        Array.isArray(requestOptions.body)) {
	        requestOptions.body = JSON.stringify(requestOptions.body);
	    }
	    let headers = {};
	    let status;
	    let url;
	    const fetch = (requestOptions.request && requestOptions.request.fetch) || browser$2;
	    return fetch(requestOptions.url, Object.assign({
	        method: requestOptions.method,
	        body: requestOptions.body,
	        headers: requestOptions.headers,
	        redirect: requestOptions.redirect,
	    }, requestOptions.request))
	        .then((response) => {
	        url = response.url;
	        status = response.status;
	        for (const keyAndValue of response.headers) {
	            headers[keyAndValue[0]] = keyAndValue[1];
	        }
	        if (status === 204 || status === 205) {
	            return;
	        }
	        // GitHub API returns 200 for HEAD requests
	        if (requestOptions.method === "HEAD") {
	            if (status < 400) {
	                return;
	            }
	            throw new RequestError(response.statusText, status, {
	                headers,
	                request: requestOptions,
	            });
	        }
	        if (status === 304) {
	            throw new RequestError("Not modified", status, {
	                headers,
	                request: requestOptions,
	            });
	        }
	        if (status >= 400) {
	            return response
	                .text()
	                .then((message) => {
	                const error = new RequestError(message, status, {
	                    headers,
	                    request: requestOptions,
	                });
	                try {
	                    let responseBody = JSON.parse(error.message);
	                    Object.assign(error, responseBody);
	                    let errors = responseBody.errors;
	                    // Assumption `errors` would always be in Array format
	                    error.message =
	                        error.message + ": " + errors.map(JSON.stringify).join(", ");
	                }
	                catch (e) {
	                    // ignore, see octokit/rest.js#684
	                }
	                throw error;
	            });
	        }
	        const contentType = response.headers.get("content-type");
	        if (/application\/json/.test(contentType)) {
	            return response.json();
	        }
	        if (!contentType || /^text\/|charset=utf-8$/.test(contentType)) {
	            return response.text();
	        }
	        return getBufferResponse(response);
	    })
	        .then((data) => {
	        return {
	            status,
	            url,
	            headers,
	            data,
	        };
	    })
	        .catch((error) => {
	        if (error instanceof RequestError) {
	            throw error;
	        }
	        throw new RequestError(error.message, 500, {
	            headers,
	            request: requestOptions,
	        });
	    });
	}

	function withDefaults$1(oldEndpoint, newDefaults) {
	    const endpoint = oldEndpoint.defaults(newDefaults);
	    const newApi = function (route, parameters) {
	        const endpointOptions = endpoint.merge(route, parameters);
	        if (!endpointOptions.request || !endpointOptions.request.hook) {
	            return fetchWrapper(endpoint.parse(endpointOptions));
	        }
	        const request = (route, parameters) => {
	            return fetchWrapper(endpoint.parse(endpoint.merge(route, parameters)));
	        };
	        Object.assign(request, {
	            endpoint,
	            defaults: withDefaults$1.bind(null, endpoint),
	        });
	        return endpointOptions.request.hook(request, endpointOptions);
	    };
	    return Object.assign(newApi, {
	        endpoint,
	        defaults: withDefaults$1.bind(null, endpoint),
	    });
	}

	const request = withDefaults$1(endpoint, {
	    headers: {
	        "user-agent": `octokit-request.js/${VERSION$1} ${getUserAgent()}`,
	    },
	});

	const VERSION$2 = "4.5.4";

	class GraphqlError extends Error {
	    constructor(request, response) {
	        const message = response.data.errors[0].message;
	        super(message);
	        Object.assign(this, response.data);
	        Object.assign(this, { headers: response.headers });
	        this.name = "GraphqlError";
	        this.request = request;
	        // Maintains proper stack trace (only available on V8)
	        /* istanbul ignore next */
	        if (Error.captureStackTrace) {
	            Error.captureStackTrace(this, this.constructor);
	        }
	    }
	}

	const NON_VARIABLE_OPTIONS = [
	    "method",
	    "baseUrl",
	    "url",
	    "headers",
	    "request",
	    "query",
	    "mediaType",
	];
	function graphql(request, query, options) {
	    options =
	        typeof query === "string"
	            ? (options = Object.assign({ query }, options))
	            : (options = query);
	    const requestOptions = Object.keys(options).reduce((result, key) => {
	        if (NON_VARIABLE_OPTIONS.includes(key)) {
	            result[key] = options[key];
	            return result;
	        }
	        if (!result.variables) {
	            result.variables = {};
	        }
	        result.variables[key] = options[key];
	        return result;
	    }, {});
	    return request(requestOptions).then((response) => {
	        if (response.data.errors) {
	            const headers = {};
	            for (const key of Object.keys(response.headers)) {
	                headers[key] = response.headers[key];
	            }
	            throw new GraphqlError(requestOptions, {
	                headers,
	                data: response.data,
	            });
	        }
	        return response.data.data;
	    });
	}

	function withDefaults$2(request$1, newDefaults) {
	    const newRequest = request$1.defaults(newDefaults);
	    const newApi = (query, options) => {
	        return graphql(newRequest, query, options);
	    };
	    return Object.assign(newApi, {
	        defaults: withDefaults$2.bind(null, newRequest),
	        endpoint: request.endpoint,
	    });
	}

	const graphql$1 = withDefaults$2(request, {
	    headers: {
	        "user-agent": `octokit-graphql.js/${VERSION$2} ${getUserAgent()}`,
	    },
	    method: "POST",
	    url: "/graphql",
	});
	function withCustomRequest(customRequest) {
	    return withDefaults$2(customRequest, {
	        method: "POST",
	        url: "/graphql",
	    });
	}

	async function auth(token) {
	    const tokenType = token.split(/\./).length === 3
	        ? "app"
	        : /^v\d+\./.test(token)
	            ? "installation"
	            : "oauth";
	    return {
	        type: "token",
	        token: token,
	        tokenType
	    };
	}

	/**
	 * Prefix token for usage in the Authorization header
	 *
	 * @param token OAuth token or JSON Web Token
	 */
	function withAuthorizationPrefix(token) {
	    if (token.split(/\./).length === 3) {
	        return `bearer ${token}`;
	    }
	    return `token ${token}`;
	}

	async function hook(token, request, route, parameters) {
	    const endpoint = request.endpoint.merge(route, parameters);
	    endpoint.headers.authorization = withAuthorizationPrefix(token);
	    return request(endpoint);
	}

	const createTokenAuth = function createTokenAuth(token) {
	    if (!token) {
	        throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");
	    }
	    if (typeof token !== "string") {
	        throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");
	    }
	    token = token.replace(/^(token|bearer) +/i, "");
	    return Object.assign(auth.bind(null, token), {
	        hook: hook.bind(null, token)
	    });
	};

	const VERSION$3 = "3.1.2";

	class Octokit {
	    constructor(options = {}) {
	        const hook = new Collection();
	        const requestDefaults = {
	            baseUrl: request.endpoint.DEFAULTS.baseUrl,
	            headers: {},
	            request: Object.assign({}, options.request, {
	                hook: hook.bind(null, "request"),
	            }),
	            mediaType: {
	                previews: [],
	                format: "",
	            },
	        };
	        // prepend default user agent with `options.userAgent` if set
	        requestDefaults.headers["user-agent"] = [
	            options.userAgent,
	            `octokit-core.js/${VERSION$3} ${getUserAgent()}`,
	        ]
	            .filter(Boolean)
	            .join(" ");
	        if (options.baseUrl) {
	            requestDefaults.baseUrl = options.baseUrl;
	        }
	        if (options.previews) {
	            requestDefaults.mediaType.previews = options.previews;
	        }
	        if (options.timeZone) {
	            requestDefaults.headers["time-zone"] = options.timeZone;
	        }
	        this.request = request.defaults(requestDefaults);
	        this.graphql = withCustomRequest(this.request).defaults({
	            ...requestDefaults,
	            baseUrl: requestDefaults.baseUrl.replace(/\/api\/v3$/, "/api"),
	        });
	        this.log = Object.assign({
	            debug: () => { },
	            info: () => { },
	            warn: console.warn.bind(console),
	            error: console.error.bind(console),
	        }, options.log);
	        this.hook = hook;
	        // (1) If neither `options.authStrategy` nor `options.auth` are set, the `octokit` instance
	        //     is unauthenticated. The `this.auth()` method is a no-op and no request hook is registred.
	        // (2) If only `options.auth` is set, use the default token authentication strategy.
	        // (3) If `options.authStrategy` is set then use it and pass in `options.auth`. Always pass own request as many strategies accept a custom request instance.
	        // TODO: type `options.auth` based on `options.authStrategy`.
	        if (!options.authStrategy) {
	            if (!options.auth) {
	                // (1)
	                this.auth = async () => ({
	                    type: "unauthenticated",
	                });
	            }
	            else {
	                // (2)
	                const auth = createTokenAuth(options.auth);
	                // @ts-ignore  ¯\_(ツ)_/¯
	                hook.wrap("request", auth.hook);
	                this.auth = auth;
	            }
	        }
	        else {
	            const auth = options.authStrategy(Object.assign({
	                request: this.request,
	            }, options.auth));
	            // @ts-ignore  ¯\_(ツ)_/¯
	            hook.wrap("request", auth.hook);
	            this.auth = auth;
	        }
	        // apply plugins
	        // https://stackoverflow.com/a/16345172
	        const classConstructor = this.constructor;
	        classConstructor.plugins.forEach((plugin) => {
	            Object.assign(this, plugin(this, options));
	        });
	    }
	    static defaults(defaults) {
	        const OctokitWithDefaults = class extends this {
	            constructor(...args) {
	                const options = args[0] || {};
	                if (typeof defaults === "function") {
	                    super(defaults(options));
	                    return;
	                }
	                super(Object.assign({}, defaults, options, options.userAgent && defaults.userAgent
	                    ? {
	                        userAgent: `${options.userAgent} ${defaults.userAgent}`,
	                    }
	                    : null));
	            }
	        };
	        return OctokitWithDefaults;
	    }
	    /**
	     * Attach a plugin (or many) to your Octokit instance.
	     *
	     * @example
	     * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)
	     */
	    static plugin(...newPlugins) {
	        var _a;
	        const currentPlugins = this.plugins;
	        const NewOctokit = (_a = class extends this {
	            },
	            _a.plugins = currentPlugins.concat(newPlugins.filter((plugin) => !currentPlugins.includes(plugin))),
	            _a);
	        return NewOctokit;
	    }
	}
	Octokit.VERSION = VERSION$3;
	Octokit.plugins = [];

	const VERSION$4 = "1.0.0";

	/**
	 * @param octokit Octokit instance
	 * @param options Options passed to Octokit constructor
	 */
	function requestLog(octokit) {
	    octokit.hook.wrap("request", (request, options) => {
	        octokit.log.debug("request", options);
	        const start = Date.now();
	        const requestOptions = octokit.request.endpoint.parse(options);
	        const path = requestOptions.url.replace(options.baseUrl, "");
	        return request(options)
	            .then(response => {
	            octokit.log.info(`${requestOptions.method} ${path} - ${response.status} in ${Date.now() - start}ms`);
	            return response;
	        })
	            .catch(error => {
	            octokit.log.info(`${requestOptions.method} ${path} - ${error.status} in ${Date.now() -
                start}ms`);
	            throw error;
	        });
	    });
	}
	requestLog.VERSION = VERSION$4;

	const VERSION$5 = "2.3.0";

	/**
	 * Some “list” response that can be paginated have a different response structure
	 *
	 * They have a `total_count` key in the response (search also has `incomplete_results`,
	 * /installation/repositories also has `repository_selection`), as well as a key with
	 * the list of the items which name varies from endpoint to endpoint.
	 *
	 * Octokit normalizes these responses so that paginated results are always returned following
	 * the same structure. One challenge is that if the list response has only one page, no Link
	 * header is provided, so this header alone is not sufficient to check wether a response is
	 * paginated or not.
	 *
	 * We check if a "total_count" key is present in the response data, but also make sure that
	 * a "url" property is not, as the "Get the combined status for a specific ref" endpoint would
	 * otherwise match: https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref
	 */
	function normalizePaginatedListResponse(response) {
	    const responseNeedsNormalization = "total_count" in response.data && !("url" in response.data);
	    if (!responseNeedsNormalization)
	        return response;
	    // keep the additional properties intact as there is currently no other way
	    // to retrieve the same information.
	    const incompleteResults = response.data.incomplete_results;
	    const repositorySelection = response.data.repository_selection;
	    const totalCount = response.data.total_count;
	    delete response.data.incomplete_results;
	    delete response.data.repository_selection;
	    delete response.data.total_count;
	    const namespaceKey = Object.keys(response.data)[0];
	    const data = response.data[namespaceKey];
	    response.data = data;
	    if (typeof incompleteResults !== "undefined") {
	        response.data.incomplete_results = incompleteResults;
	    }
	    if (typeof repositorySelection !== "undefined") {
	        response.data.repository_selection = repositorySelection;
	    }
	    response.data.total_count = totalCount;
	    return response;
	}

	function iterator(octokit, route, parameters) {
	    const options = typeof route === "function"
	        ? route.endpoint(parameters)
	        : octokit.request.endpoint(route, parameters);
	    const requestMethod = typeof route === "function" ? route : octokit.request;
	    const method = options.method;
	    const headers = options.headers;
	    let url = options.url;
	    return {
	        [Symbol.asyncIterator]: () => ({
	            next() {
	                if (!url) {
	                    return Promise.resolve({ done: true });
	                }
	                return requestMethod({ method, url, headers })
	                    .then(normalizePaginatedListResponse)
	                    .then((response) => {
	                    // `response.headers.link` format:
	                    // '<https://api.github.com/users/aseemk/followers?page=2>; rel="next", <https://api.github.com/users/aseemk/followers?page=2>; rel="last"'
	                    // sets `url` to undefined if "next" URL is not present or `link` header is not set
	                    url = ((response.headers.link || "").match(/<([^>]+)>;\s*rel="next"/) || [])[1];
	                    return { value: response };
	                });
	            },
	        }),
	    };
	}

	function paginate(octokit, route, parameters, mapFn) {
	    if (typeof parameters === "function") {
	        mapFn = parameters;
	        parameters = undefined;
	    }
	    return gather(octokit, [], iterator(octokit, route, parameters)[Symbol.asyncIterator](), mapFn);
	}
	function gather(octokit, results, iterator, mapFn) {
	    return iterator.next().then((result) => {
	        if (result.done) {
	            return results;
	        }
	        let earlyExit = false;
	        function done() {
	            earlyExit = true;
	        }
	        results = results.concat(mapFn ? mapFn(result.value, done) : result.value.data);
	        if (earlyExit) {
	            return results;
	        }
	        return gather(octokit, results, iterator, mapFn);
	    });
	}

	/**
	 * @param octokit Octokit instance
	 * @param options Options passed to Octokit constructor
	 */
	function paginateRest(octokit) {
	    return {
	        paginate: Object.assign(paginate.bind(null, octokit), {
	            iterator: iterator.bind(null, octokit),
	        }),
	    };
	}
	paginateRest.VERSION = VERSION$5;

	const Endpoints = {
	    actions: {
	        addSelectedRepoToOrgSecret: [
	            "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}",
	        ],
	        cancelWorkflowRun: [
	            "POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel",
	        ],
	        createOrUpdateOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}"],
	        createOrUpdateRepoSecret: [
	            "PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}",
	        ],
	        createRegistrationTokenForOrg: [
	            "POST /orgs/{org}/actions/runners/registration-token",
	        ],
	        createRegistrationTokenForRepo: [
	            "POST /repos/{owner}/{repo}/actions/runners/registration-token",
	        ],
	        createRemoveTokenForOrg: ["POST /orgs/{org}/actions/runners/remove-token"],
	        createRemoveTokenForRepo: [
	            "POST /repos/{owner}/{repo}/actions/runners/remove-token",
	        ],
	        createWorkflowDispatch: [
	            "POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches",
	        ],
	        deleteArtifact: [
	            "DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}",
	        ],
	        deleteOrgSecret: ["DELETE /orgs/{org}/actions/secrets/{secret_name}"],
	        deleteRepoSecret: [
	            "DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}",
	        ],
	        deleteSelfHostedRunnerFromOrg: [
	            "DELETE /orgs/{org}/actions/runners/{runner_id}",
	        ],
	        deleteSelfHostedRunnerFromRepo: [
	            "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}",
	        ],
	        deleteWorkflowRun: ["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],
	        deleteWorkflowRunLogs: [
	            "DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs",
	        ],
	        downloadArtifact: [
	            "GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}",
	        ],
	        downloadJobLogsForWorkflowRun: [
	            "GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs",
	        ],
	        downloadWorkflowRunLogs: [
	            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs",
	        ],
	        getArtifact: ["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],
	        getJobForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],
	        getOrgPublicKey: ["GET /orgs/{org}/actions/secrets/public-key"],
	        getOrgSecret: ["GET /orgs/{org}/actions/secrets/{secret_name}"],
	        getRepoPublicKey: ["GET /repos/{owner}/{repo}/actions/secrets/public-key"],
	        getRepoSecret: ["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
	        getSelfHostedRunnerForOrg: ["GET /orgs/{org}/actions/runners/{runner_id}"],
	        getSelfHostedRunnerForRepo: [
	            "GET /repos/{owner}/{repo}/actions/runners/{runner_id}",
	        ],
	        getWorkflow: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],
	        getWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],
	        getWorkflowRunUsage: [
	            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing",
	        ],
	        getWorkflowUsage: [
	            "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing",
	        ],
	        listArtifactsForRepo: ["GET /repos/{owner}/{repo}/actions/artifacts"],
	        listJobsForWorkflowRun: [
	            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
	        ],
	        listOrgSecrets: ["GET /orgs/{org}/actions/secrets"],
	        listRepoSecrets: ["GET /repos/{owner}/{repo}/actions/secrets"],
	        listRepoWorkflows: ["GET /repos/{owner}/{repo}/actions/workflows"],
	        listRunnerApplicationsForOrg: ["GET /orgs/{org}/actions/runners/downloads"],
	        listRunnerApplicationsForRepo: [
	            "GET /repos/{owner}/{repo}/actions/runners/downloads",
	        ],
	        listSelectedReposForOrgSecret: [
	            "GET /orgs/{org}/actions/secrets/{secret_name}/repositories",
	        ],
	        listSelfHostedRunnersForOrg: ["GET /orgs/{org}/actions/runners"],
	        listSelfHostedRunnersForRepo: ["GET /repos/{owner}/{repo}/actions/runners"],
	        listWorkflowRunArtifacts: [
	            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
	        ],
	        listWorkflowRuns: [
	            "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
	        ],
	        listWorkflowRunsForRepo: ["GET /repos/{owner}/{repo}/actions/runs"],
	        reRunWorkflow: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],
	        removeSelectedRepoFromOrgSecret: [
	            "DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}",
	        ],
	        setSelectedReposForOrgSecret: [
	            "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories",
	        ],
	    },
	    activity: {
	        checkRepoIsStarredByAuthenticatedUser: ["GET /user/starred/{owner}/{repo}"],
	        deleteRepoSubscription: ["DELETE /repos/{owner}/{repo}/subscription"],
	        deleteThreadSubscription: [
	            "DELETE /notifications/threads/{thread_id}/subscription",
	        ],
	        getFeeds: ["GET /feeds"],
	        getRepoSubscription: ["GET /repos/{owner}/{repo}/subscription"],
	        getThread: ["GET /notifications/threads/{thread_id}"],
	        getThreadSubscriptionForAuthenticatedUser: [
	            "GET /notifications/threads/{thread_id}/subscription",
	        ],
	        listEventsForAuthenticatedUser: ["GET /users/{username}/events"],
	        listNotificationsForAuthenticatedUser: ["GET /notifications"],
	        listOrgEventsForAuthenticatedUser: [
	            "GET /users/{username}/events/orgs/{org}",
	        ],
	        listPublicEvents: ["GET /events"],
	        listPublicEventsForRepoNetwork: ["GET /networks/{owner}/{repo}/events"],
	        listPublicEventsForUser: ["GET /users/{username}/events/public"],
	        listPublicOrgEvents: ["GET /orgs/{org}/events"],
	        listReceivedEventsForUser: ["GET /users/{username}/received_events"],
	        listReceivedPublicEventsForUser: [
	            "GET /users/{username}/received_events/public",
	        ],
	        listRepoEvents: ["GET /repos/{owner}/{repo}/events"],
	        listRepoNotificationsForAuthenticatedUser: [
	            "GET /repos/{owner}/{repo}/notifications",
	        ],
	        listReposStarredByAuthenticatedUser: ["GET /user/starred"],
	        listReposStarredByUser: ["GET /users/{username}/starred"],
	        listReposWatchedByUser: ["GET /users/{username}/subscriptions"],
	        listStargazersForRepo: ["GET /repos/{owner}/{repo}/stargazers"],
	        listWatchedReposForAuthenticatedUser: ["GET /user/subscriptions"],
	        listWatchersForRepo: ["GET /repos/{owner}/{repo}/subscribers"],
	        markNotificationsAsRead: ["PUT /notifications"],
	        markRepoNotificationsAsRead: ["PUT /repos/{owner}/{repo}/notifications"],
	        markThreadAsRead: ["PATCH /notifications/threads/{thread_id}"],
	        setRepoSubscription: ["PUT /repos/{owner}/{repo}/subscription"],
	        setThreadSubscription: [
	            "PUT /notifications/threads/{thread_id}/subscription",
	        ],
	        starRepoForAuthenticatedUser: ["PUT /user/starred/{owner}/{repo}"],
	        unstarRepoForAuthenticatedUser: ["DELETE /user/starred/{owner}/{repo}"],
	    },
	    apps: {
	        addRepoToInstallation: [
	            "PUT /user/installations/{installation_id}/repositories/{repository_id}",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        checkToken: ["POST /applications/{client_id}/token"],
	        createContentAttachment: [
	            "POST /content_references/{content_reference_id}/attachments",
	            { mediaType: { previews: ["corsair"] } },
	        ],
	        createFromManifest: ["POST /app-manifests/{code}/conversions"],
	        createInstallationAccessToken: [
	            "POST /app/installations/{installation_id}/access_tokens",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        deleteAuthorization: ["DELETE /applications/{client_id}/grant"],
	        deleteInstallation: [
	            "DELETE /app/installations/{installation_id}",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        deleteToken: ["DELETE /applications/{client_id}/token"],
	        getAuthenticated: [
	            "GET /app",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        getBySlug: [
	            "GET /apps/{app_slug}",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        getInstallation: [
	            "GET /app/installations/{installation_id}",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        getOrgInstallation: [
	            "GET /orgs/{org}/installation",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        getRepoInstallation: [
	            "GET /repos/{owner}/{repo}/installation",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        getSubscriptionPlanForAccount: [
	            "GET /marketplace_listing/accounts/{account_id}",
	        ],
	        getSubscriptionPlanForAccountStubbed: [
	            "GET /marketplace_listing/stubbed/accounts/{account_id}",
	        ],
	        getUserInstallation: [
	            "GET /users/{username}/installation",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        listAccountsForPlan: ["GET /marketplace_listing/plans/{plan_id}/accounts"],
	        listAccountsForPlanStubbed: [
	            "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts",
	        ],
	        listInstallationReposForAuthenticatedUser: [
	            "GET /user/installations/{installation_id}/repositories",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        listInstallations: [
	            "GET /app/installations",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        listInstallationsForAuthenticatedUser: [
	            "GET /user/installations",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        listPlans: ["GET /marketplace_listing/plans"],
	        listPlansStubbed: ["GET /marketplace_listing/stubbed/plans"],
	        listReposAccessibleToInstallation: [
	            "GET /installation/repositories",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        listSubscriptionsForAuthenticatedUser: ["GET /user/marketplace_purchases"],
	        listSubscriptionsForAuthenticatedUserStubbed: [
	            "GET /user/marketplace_purchases/stubbed",
	        ],
	        removeRepoFromInstallation: [
	            "DELETE /user/installations/{installation_id}/repositories/{repository_id}",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        resetToken: ["PATCH /applications/{client_id}/token"],
	        revokeInstallationAccessToken: ["DELETE /installation/token"],
	        suspendInstallation: ["PUT /app/installations/{installation_id}/suspended"],
	        unsuspendInstallation: [
	            "DELETE /app/installations/{installation_id}/suspended",
	        ],
	    },
	    billing: {
	        getGithubActionsBillingOrg: ["GET /orgs/{org}/settings/billing/actions"],
	        getGithubActionsBillingUser: [
	            "GET /users/{username}/settings/billing/actions",
	        ],
	        getGithubPackagesBillingOrg: ["GET /orgs/{org}/settings/billing/packages"],
	        getGithubPackagesBillingUser: [
	            "GET /users/{username}/settings/billing/packages",
	        ],
	        getSharedStorageBillingOrg: [
	            "GET /orgs/{org}/settings/billing/shared-storage",
	        ],
	        getSharedStorageBillingUser: [
	            "GET /users/{username}/settings/billing/shared-storage",
	        ],
	    },
	    checks: {
	        create: [
	            "POST /repos/{owner}/{repo}/check-runs",
	            { mediaType: { previews: ["antiope"] } },
	        ],
	        createSuite: [
	            "POST /repos/{owner}/{repo}/check-suites",
	            { mediaType: { previews: ["antiope"] } },
	        ],
	        get: [
	            "GET /repos/{owner}/{repo}/check-runs/{check_run_id}",
	            { mediaType: { previews: ["antiope"] } },
	        ],
	        getSuite: [
	            "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}",
	            { mediaType: { previews: ["antiope"] } },
	        ],
	        listAnnotations: [
	            "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
	            { mediaType: { previews: ["antiope"] } },
	        ],
	        listForRef: [
	            "GET /repos/{owner}/{repo}/commits/{ref}/check-runs",
	            { mediaType: { previews: ["antiope"] } },
	        ],
	        listForSuite: [
	            "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
	            { mediaType: { previews: ["antiope"] } },
	        ],
	        listSuitesForRef: [
	            "GET /repos/{owner}/{repo}/commits/{ref}/check-suites",
	            { mediaType: { previews: ["antiope"] } },
	        ],
	        rerequestSuite: [
	            "POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest",
	            { mediaType: { previews: ["antiope"] } },
	        ],
	        setSuitesPreferences: [
	            "PATCH /repos/{owner}/{repo}/check-suites/preferences",
	            { mediaType: { previews: ["antiope"] } },
	        ],
	        update: [
	            "PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}",
	            { mediaType: { previews: ["antiope"] } },
	        ],
	    },
	    codeScanning: {
	        getAlert: ["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_id}"],
	        listAlertsForRepo: ["GET /repos/{owner}/{repo}/code-scanning/alerts"],
	    },
	    codesOfConduct: {
	        getAllCodesOfConduct: [
	            "GET /codes_of_conduct",
	            { mediaType: { previews: ["scarlet-witch"] } },
	        ],
	        getConductCode: [
	            "GET /codes_of_conduct/{key}",
	            { mediaType: { previews: ["scarlet-witch"] } },
	        ],
	        getForRepo: [
	            "GET /repos/{owner}/{repo}/community/code_of_conduct",
	            { mediaType: { previews: ["scarlet-witch"] } },
	        ],
	    },
	    emojis: { get: ["GET /emojis"] },
	    gists: {
	        checkIsStarred: ["GET /gists/{gist_id}/star"],
	        create: ["POST /gists"],
	        createComment: ["POST /gists/{gist_id}/comments"],
	        delete: ["DELETE /gists/{gist_id}"],
	        deleteComment: ["DELETE /gists/{gist_id}/comments/{comment_id}"],
	        fork: ["POST /gists/{gist_id}/forks"],
	        get: ["GET /gists/{gist_id}"],
	        getComment: ["GET /gists/{gist_id}/comments/{comment_id}"],
	        getRevision: ["GET /gists/{gist_id}/{sha}"],
	        list: ["GET /gists"],
	        listComments: ["GET /gists/{gist_id}/comments"],
	        listCommits: ["GET /gists/{gist_id}/commits"],
	        listForUser: ["GET /users/{username}/gists"],
	        listForks: ["GET /gists/{gist_id}/forks"],
	        listPublic: ["GET /gists/public"],
	        listStarred: ["GET /gists/starred"],
	        star: ["PUT /gists/{gist_id}/star"],
	        unstar: ["DELETE /gists/{gist_id}/star"],
	        update: ["PATCH /gists/{gist_id}"],
	        updateComment: ["PATCH /gists/{gist_id}/comments/{comment_id}"],
	    },
	    git: {
	        createBlob: ["POST /repos/{owner}/{repo}/git/blobs"],
	        createCommit: ["POST /repos/{owner}/{repo}/git/commits"],
	        createRef: ["POST /repos/{owner}/{repo}/git/refs"],
	        createTag: ["POST /repos/{owner}/{repo}/git/tags"],
	        createTree: ["POST /repos/{owner}/{repo}/git/trees"],
	        deleteRef: ["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],
	        getBlob: ["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],
	        getCommit: ["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],
	        getRef: ["GET /repos/{owner}/{repo}/git/ref/{ref}"],
	        getTag: ["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],
	        getTree: ["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],
	        listMatchingRefs: ["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],
	        updateRef: ["PATCH /repos/{owner}/{repo}/git/refs/{ref}"],
	    },
	    gitignore: {
	        getAllTemplates: ["GET /gitignore/templates"],
	        getTemplate: ["GET /gitignore/templates/{name}"],
	    },
	    interactions: {
	        getRestrictionsForOrg: [
	            "GET /orgs/{org}/interaction-limits",
	            { mediaType: { previews: ["sombra"] } },
	        ],
	        getRestrictionsForRepo: [
	            "GET /repos/{owner}/{repo}/interaction-limits",
	            { mediaType: { previews: ["sombra"] } },
	        ],
	        removeRestrictionsForOrg: [
	            "DELETE /orgs/{org}/interaction-limits",
	            { mediaType: { previews: ["sombra"] } },
	        ],
	        removeRestrictionsForRepo: [
	            "DELETE /repos/{owner}/{repo}/interaction-limits",
	            { mediaType: { previews: ["sombra"] } },
	        ],
	        setRestrictionsForOrg: [
	            "PUT /orgs/{org}/interaction-limits",
	            { mediaType: { previews: ["sombra"] } },
	        ],
	        setRestrictionsForRepo: [
	            "PUT /repos/{owner}/{repo}/interaction-limits",
	            { mediaType: { previews: ["sombra"] } },
	        ],
	    },
	    issues: {
	        addAssignees: [
	            "POST /repos/{owner}/{repo}/issues/{issue_number}/assignees",
	        ],
	        addLabels: ["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],
	        checkUserCanBeAssigned: ["GET /repos/{owner}/{repo}/assignees/{assignee}"],
	        create: ["POST /repos/{owner}/{repo}/issues"],
	        createComment: [
	            "POST /repos/{owner}/{repo}/issues/{issue_number}/comments",
	        ],
	        createLabel: ["POST /repos/{owner}/{repo}/labels"],
	        createMilestone: ["POST /repos/{owner}/{repo}/milestones"],
	        deleteComment: [
	            "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}",
	        ],
	        deleteLabel: ["DELETE /repos/{owner}/{repo}/labels/{name}"],
	        deleteMilestone: [
	            "DELETE /repos/{owner}/{repo}/milestones/{milestone_number}",
	        ],
	        get: ["GET /repos/{owner}/{repo}/issues/{issue_number}"],
	        getComment: ["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],
	        getEvent: ["GET /repos/{owner}/{repo}/issues/events/{event_id}"],
	        getLabel: ["GET /repos/{owner}/{repo}/labels/{name}"],
	        getMilestone: ["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],
	        list: ["GET /issues"],
	        listAssignees: ["GET /repos/{owner}/{repo}/assignees"],
	        listComments: ["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],
	        listCommentsForRepo: ["GET /repos/{owner}/{repo}/issues/comments"],
	        listEvents: ["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],
	        listEventsForRepo: ["GET /repos/{owner}/{repo}/issues/events"],
	        listEventsForTimeline: [
	            "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline",
	            { mediaType: { previews: ["mockingbird"] } },
	        ],
	        listForAuthenticatedUser: ["GET /user/issues"],
	        listForOrg: ["GET /orgs/{org}/issues"],
	        listForRepo: ["GET /repos/{owner}/{repo}/issues"],
	        listLabelsForMilestone: [
	            "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels",
	        ],
	        listLabelsForRepo: ["GET /repos/{owner}/{repo}/labels"],
	        listLabelsOnIssue: [
	            "GET /repos/{owner}/{repo}/issues/{issue_number}/labels",
	        ],
	        listMilestones: ["GET /repos/{owner}/{repo}/milestones"],
	        lock: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],
	        removeAllLabels: [
	            "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels",
	        ],
	        removeAssignees: [
	            "DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees",
	        ],
	        removeLabel: [
	            "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}",
	        ],
	        setLabels: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],
	        unlock: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],
	        update: ["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],
	        updateComment: ["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],
	        updateLabel: ["PATCH /repos/{owner}/{repo}/labels/{name}"],
	        updateMilestone: [
	            "PATCH /repos/{owner}/{repo}/milestones/{milestone_number}",
	        ],
	    },
	    licenses: {
	        get: ["GET /licenses/{license}"],
	        getAllCommonlyUsed: ["GET /licenses"],
	        getForRepo: ["GET /repos/{owner}/{repo}/license"],
	    },
	    markdown: {
	        render: ["POST /markdown"],
	        renderRaw: [
	            "POST /markdown/raw",
	            { headers: { "content-type": "text/plain; charset=utf-8" } },
	        ],
	    },
	    meta: { get: ["GET /meta"] },
	    migrations: {
	        cancelImport: ["DELETE /repos/{owner}/{repo}/import"],
	        deleteArchiveForAuthenticatedUser: [
	            "DELETE /user/migrations/{migration_id}/archive",
	            { mediaType: { previews: ["wyandotte"] } },
	        ],
	        deleteArchiveForOrg: [
	            "DELETE /orgs/{org}/migrations/{migration_id}/archive",
	            { mediaType: { previews: ["wyandotte"] } },
	        ],
	        downloadArchiveForOrg: [
	            "GET /orgs/{org}/migrations/{migration_id}/archive",
	            { mediaType: { previews: ["wyandotte"] } },
	        ],
	        getArchiveForAuthenticatedUser: [
	            "GET /user/migrations/{migration_id}/archive",
	            { mediaType: { previews: ["wyandotte"] } },
	        ],
	        getCommitAuthors: ["GET /repos/{owner}/{repo}/import/authors"],
	        getImportStatus: ["GET /repos/{owner}/{repo}/import"],
	        getLargeFiles: ["GET /repos/{owner}/{repo}/import/large_files"],
	        getStatusForAuthenticatedUser: [
	            "GET /user/migrations/{migration_id}",
	            { mediaType: { previews: ["wyandotte"] } },
	        ],
	        getStatusForOrg: [
	            "GET /orgs/{org}/migrations/{migration_id}",
	            { mediaType: { previews: ["wyandotte"] } },
	        ],
	        listForAuthenticatedUser: [
	            "GET /user/migrations",
	            { mediaType: { previews: ["wyandotte"] } },
	        ],
	        listForOrg: [
	            "GET /orgs/{org}/migrations",
	            { mediaType: { previews: ["wyandotte"] } },
	        ],
	        listReposForOrg: [
	            "GET /orgs/{org}/migrations/{migration_id}/repositories",
	            { mediaType: { previews: ["wyandotte"] } },
	        ],
	        listReposForUser: [
	            "GET /user/migrations/{migration_id}/repositories",
	            { mediaType: { previews: ["wyandotte"] } },
	        ],
	        mapCommitAuthor: ["PATCH /repos/{owner}/{repo}/import/authors/{author_id}"],
	        setLfsPreference: ["PATCH /repos/{owner}/{repo}/import/lfs"],
	        startForAuthenticatedUser: ["POST /user/migrations"],
	        startForOrg: ["POST /orgs/{org}/migrations"],
	        startImport: ["PUT /repos/{owner}/{repo}/import"],
	        unlockRepoForAuthenticatedUser: [
	            "DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock",
	            { mediaType: { previews: ["wyandotte"] } },
	        ],
	        unlockRepoForOrg: [
	            "DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock",
	            { mediaType: { previews: ["wyandotte"] } },
	        ],
	        updateImport: ["PATCH /repos/{owner}/{repo}/import"],
	    },
	    orgs: {
	        blockUser: ["PUT /orgs/{org}/blocks/{username}"],
	        checkBlockedUser: ["GET /orgs/{org}/blocks/{username}"],
	        checkMembershipForUser: ["GET /orgs/{org}/members/{username}"],
	        checkPublicMembershipForUser: ["GET /orgs/{org}/public_members/{username}"],
	        convertMemberToOutsideCollaborator: [
	            "PUT /orgs/{org}/outside_collaborators/{username}",
	        ],
	        createInvitation: ["POST /orgs/{org}/invitations"],
	        createWebhook: ["POST /orgs/{org}/hooks"],
	        deleteWebhook: ["DELETE /orgs/{org}/hooks/{hook_id}"],
	        get: ["GET /orgs/{org}"],
	        getMembershipForAuthenticatedUser: ["GET /user/memberships/orgs/{org}"],
	        getMembershipForUser: ["GET /orgs/{org}/memberships/{username}"],
	        getWebhook: ["GET /orgs/{org}/hooks/{hook_id}"],
	        list: ["GET /organizations"],
	        listAppInstallations: [
	            "GET /orgs/{org}/installations",
	            { mediaType: { previews: ["machine-man"] } },
	        ],
	        listBlockedUsers: ["GET /orgs/{org}/blocks"],
	        listForAuthenticatedUser: ["GET /user/orgs"],
	        listForUser: ["GET /users/{username}/orgs"],
	        listInvitationTeams: ["GET /orgs/{org}/invitations/{invitation_id}/teams"],
	        listMembers: ["GET /orgs/{org}/members"],
	        listMembershipsForAuthenticatedUser: ["GET /user/memberships/orgs"],
	        listOutsideCollaborators: ["GET /orgs/{org}/outside_collaborators"],
	        listPendingInvitations: ["GET /orgs/{org}/invitations"],
	        listPublicMembers: ["GET /orgs/{org}/public_members"],
	        listWebhooks: ["GET /orgs/{org}/hooks"],
	        pingWebhook: ["POST /orgs/{org}/hooks/{hook_id}/pings"],
	        removeMember: ["DELETE /orgs/{org}/members/{username}"],
	        removeMembershipForUser: ["DELETE /orgs/{org}/memberships/{username}"],
	        removeOutsideCollaborator: [
	            "DELETE /orgs/{org}/outside_collaborators/{username}",
	        ],
	        removePublicMembershipForAuthenticatedUser: [
	            "DELETE /orgs/{org}/public_members/{username}",
	        ],
	        setMembershipForUser: ["PUT /orgs/{org}/memberships/{username}"],
	        setPublicMembershipForAuthenticatedUser: [
	            "PUT /orgs/{org}/public_members/{username}",
	        ],
	        unblockUser: ["DELETE /orgs/{org}/blocks/{username}"],
	        update: ["PATCH /orgs/{org}"],
	        updateMembershipForAuthenticatedUser: [
	            "PATCH /user/memberships/orgs/{org}",
	        ],
	        updateWebhook: ["PATCH /orgs/{org}/hooks/{hook_id}"],
	    },
	    projects: {
	        addCollaborator: [
	            "PUT /projects/{project_id}/collaborators/{username}",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        createCard: [
	            "POST /projects/columns/{column_id}/cards",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        createColumn: [
	            "POST /projects/{project_id}/columns",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        createForAuthenticatedUser: [
	            "POST /user/projects",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        createForOrg: [
	            "POST /orgs/{org}/projects",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        createForRepo: [
	            "POST /repos/{owner}/{repo}/projects",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        delete: [
	            "DELETE /projects/{project_id}",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        deleteCard: [
	            "DELETE /projects/columns/cards/{card_id}",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        deleteColumn: [
	            "DELETE /projects/columns/{column_id}",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        get: [
	            "GET /projects/{project_id}",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        getCard: [
	            "GET /projects/columns/cards/{card_id}",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        getColumn: [
	            "GET /projects/columns/{column_id}",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        getPermissionForUser: [
	            "GET /projects/{project_id}/collaborators/{username}/permission",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        listCards: [
	            "GET /projects/columns/{column_id}/cards",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        listCollaborators: [
	            "GET /projects/{project_id}/collaborators",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        listColumns: [
	            "GET /projects/{project_id}/columns",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        listForOrg: [
	            "GET /orgs/{org}/projects",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        listForRepo: [
	            "GET /repos/{owner}/{repo}/projects",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        listForUser: [
	            "GET /users/{username}/projects",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        moveCard: [
	            "POST /projects/columns/cards/{card_id}/moves",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        moveColumn: [
	            "POST /projects/columns/{column_id}/moves",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        removeCollaborator: [
	            "DELETE /projects/{project_id}/collaborators/{username}",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        update: [
	            "PATCH /projects/{project_id}",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        updateCard: [
	            "PATCH /projects/columns/cards/{card_id}",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        updateColumn: [
	            "PATCH /projects/columns/{column_id}",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	    },
	    pulls: {
	        checkIfMerged: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
	        create: ["POST /repos/{owner}/{repo}/pulls"],
	        createReplyForReviewComment: [
	            "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies",
	        ],
	        createReview: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
	        createReviewComment: [
	            "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments",
	        ],
	        deletePendingReview: [
	            "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
	        ],
	        deleteReviewComment: [
	            "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}",
	        ],
	        dismissReview: [
	            "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals",
	        ],
	        get: ["GET /repos/{owner}/{repo}/pulls/{pull_number}"],
	        getReview: [
	            "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
	        ],
	        getReviewComment: ["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],
	        list: ["GET /repos/{owner}/{repo}/pulls"],
	        listCommentsForReview: [
	            "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
	        ],
	        listCommits: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],
	        listFiles: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],
	        listRequestedReviewers: [
	            "GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
	        ],
	        listReviewComments: [
	            "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments",
	        ],
	        listReviewCommentsForRepo: ["GET /repos/{owner}/{repo}/pulls/comments"],
	        listReviews: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
	        merge: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
	        removeRequestedReviewers: [
	            "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
	        ],
	        requestReviewers: [
	            "POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
	        ],
	        submitReview: [
	            "POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events",
	        ],
	        update: ["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],
	        updateBranch: [
	            "PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch",
	            { mediaType: { previews: ["lydian"] } },
	        ],
	        updateReview: [
	            "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
	        ],
	        updateReviewComment: [
	            "PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}",
	        ],
	    },
	    rateLimit: { get: ["GET /rate_limit"] },
	    reactions: {
	        createForCommitComment: [
	            "POST /repos/{owner}/{repo}/comments/{comment_id}/reactions",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        createForIssue: [
	            "POST /repos/{owner}/{repo}/issues/{issue_number}/reactions",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        createForIssueComment: [
	            "POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        createForPullRequestReviewComment: [
	            "POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        createForTeamDiscussionCommentInOrg: [
	            "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        createForTeamDiscussionInOrg: [
	            "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        deleteForCommitComment: [
	            "DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        deleteForIssue: [
	            "DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        deleteForIssueComment: [
	            "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        deleteForPullRequestComment: [
	            "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        deleteForTeamDiscussion: [
	            "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        deleteForTeamDiscussionComment: [
	            "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        deleteLegacy: [
	            "DELETE /reactions/{reaction_id}",
	            { mediaType: { previews: ["squirrel-girl"] } },
	            {
	                deprecated: "octokit.reactions.deleteLegacy() is deprecated, see https://developer.github.com/v3/reactions/#delete-a-reaction-legacy",
	            },
	        ],
	        listForCommitComment: [
	            "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        listForIssue: [
	            "GET /repos/{owner}/{repo}/issues/{issue_number}/reactions",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        listForIssueComment: [
	            "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        listForPullRequestReviewComment: [
	            "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        listForTeamDiscussionCommentInOrg: [
	            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	        listForTeamDiscussionInOrg: [
	            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
	            { mediaType: { previews: ["squirrel-girl"] } },
	        ],
	    },
	    repos: {
	        acceptInvitation: ["PATCH /user/repository_invitations/{invitation_id}"],
	        addAppAccessRestrictions: [
	            "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
	            {},
	            { mapToData: "apps" },
	        ],
	        addCollaborator: ["PUT /repos/{owner}/{repo}/collaborators/{username}"],
	        addStatusCheckContexts: [
	            "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
	            {},
	            { mapToData: "contexts" },
	        ],
	        addTeamAccessRestrictions: [
	            "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
	            {},
	            { mapToData: "teams" },
	        ],
	        addUserAccessRestrictions: [
	            "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
	            {},
	            { mapToData: "users" },
	        ],
	        checkCollaborator: ["GET /repos/{owner}/{repo}/collaborators/{username}"],
	        checkVulnerabilityAlerts: [
	            "GET /repos/{owner}/{repo}/vulnerability-alerts",
	            { mediaType: { previews: ["dorian"] } },
	        ],
	        compareCommits: ["GET /repos/{owner}/{repo}/compare/{base}...{head}"],
	        createCommitComment: [
	            "POST /repos/{owner}/{repo}/commits/{commit_sha}/comments",
	        ],
	        createCommitSignatureProtection: [
	            "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
	            { mediaType: { previews: ["zzzax"] } },
	        ],
	        createCommitStatus: ["POST /repos/{owner}/{repo}/statuses/{sha}"],
	        createDeployKey: ["POST /repos/{owner}/{repo}/keys"],
	        createDeployment: ["POST /repos/{owner}/{repo}/deployments"],
	        createDeploymentStatus: [
	            "POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
	        ],
	        createDispatchEvent: ["POST /repos/{owner}/{repo}/dispatches"],
	        createForAuthenticatedUser: ["POST /user/repos"],
	        createFork: ["POST /repos/{owner}/{repo}/forks"],
	        createInOrg: ["POST /orgs/{org}/repos"],
	        createOrUpdateFileContents: ["PUT /repos/{owner}/{repo}/contents/{path}"],
	        createPagesSite: [
	            "POST /repos/{owner}/{repo}/pages",
	            { mediaType: { previews: ["switcheroo"] } },
	        ],
	        createRelease: ["POST /repos/{owner}/{repo}/releases"],
	        createUsingTemplate: [
	            "POST /repos/{template_owner}/{template_repo}/generate",
	            { mediaType: { previews: ["baptiste"] } },
	        ],
	        createWebhook: ["POST /repos/{owner}/{repo}/hooks"],
	        declineInvitation: ["DELETE /user/repository_invitations/{invitation_id}"],
	        delete: ["DELETE /repos/{owner}/{repo}"],
	        deleteAccessRestrictions: [
	            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
	        ],
	        deleteAdminBranchProtection: [
	            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
	        ],
	        deleteBranchProtection: [
	            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection",
	        ],
	        deleteCommitComment: ["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],
	        deleteCommitSignatureProtection: [
	            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
	            { mediaType: { previews: ["zzzax"] } },
	        ],
	        deleteDeployKey: ["DELETE /repos/{owner}/{repo}/keys/{key_id}"],
	        deleteDeployment: [
	            "DELETE /repos/{owner}/{repo}/deployments/{deployment_id}",
	        ],
	        deleteFile: ["DELETE /repos/{owner}/{repo}/contents/{path}"],
	        deleteInvitation: [
	            "DELETE /repos/{owner}/{repo}/invitations/{invitation_id}",
	        ],
	        deletePagesSite: [
	            "DELETE /repos/{owner}/{repo}/pages",
	            { mediaType: { previews: ["switcheroo"] } },
	        ],
	        deletePullRequestReviewProtection: [
	            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
	        ],
	        deleteRelease: ["DELETE /repos/{owner}/{repo}/releases/{release_id}"],
	        deleteReleaseAsset: [
	            "DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}",
	        ],
	        deleteWebhook: ["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],
	        disableAutomatedSecurityFixes: [
	            "DELETE /repos/{owner}/{repo}/automated-security-fixes",
	            { mediaType: { previews: ["london"] } },
	        ],
	        disableVulnerabilityAlerts: [
	            "DELETE /repos/{owner}/{repo}/vulnerability-alerts",
	            { mediaType: { previews: ["dorian"] } },
	        ],
	        downloadArchive: ["GET /repos/{owner}/{repo}/{archive_format}/{ref}"],
	        enableAutomatedSecurityFixes: [
	            "PUT /repos/{owner}/{repo}/automated-security-fixes",
	            { mediaType: { previews: ["london"] } },
	        ],
	        enableVulnerabilityAlerts: [
	            "PUT /repos/{owner}/{repo}/vulnerability-alerts",
	            { mediaType: { previews: ["dorian"] } },
	        ],
	        get: ["GET /repos/{owner}/{repo}"],
	        getAccessRestrictions: [
	            "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
	        ],
	        getAdminBranchProtection: [
	            "GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
	        ],
	        getAllStatusCheckContexts: [
	            "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
	        ],
	        getAllTopics: [
	            "GET /repos/{owner}/{repo}/topics",
	            { mediaType: { previews: ["mercy"] } },
	        ],
	        getAppsWithAccessToProtectedBranch: [
	            "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
	        ],
	        getBranch: ["GET /repos/{owner}/{repo}/branches/{branch}"],
	        getBranchProtection: [
	            "GET /repos/{owner}/{repo}/branches/{branch}/protection",
	        ],
	        getClones: ["GET /repos/{owner}/{repo}/traffic/clones"],
	        getCodeFrequencyStats: ["GET /repos/{owner}/{repo}/stats/code_frequency"],
	        getCollaboratorPermissionLevel: [
	            "GET /repos/{owner}/{repo}/collaborators/{username}/permission",
	        ],
	        getCombinedStatusForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/status"],
	        getCommit: ["GET /repos/{owner}/{repo}/commits/{ref}"],
	        getCommitActivityStats: ["GET /repos/{owner}/{repo}/stats/commit_activity"],
	        getCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}"],
	        getCommitSignatureProtection: [
	            "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
	            { mediaType: { previews: ["zzzax"] } },
	        ],
	        getCommunityProfileMetrics: [
	            "GET /repos/{owner}/{repo}/community/profile",
	            { mediaType: { previews: ["black-panther"] } },
	        ],
	        getContent: ["GET /repos/{owner}/{repo}/contents/{path}"],
	        getContributorsStats: ["GET /repos/{owner}/{repo}/stats/contributors"],
	        getDeployKey: ["GET /repos/{owner}/{repo}/keys/{key_id}"],
	        getDeployment: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],
	        getDeploymentStatus: [
	            "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}",
	        ],
	        getLatestPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/latest"],
	        getLatestRelease: ["GET /repos/{owner}/{repo}/releases/latest"],
	        getPages: ["GET /repos/{owner}/{repo}/pages"],
	        getPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],
	        getParticipationStats: ["GET /repos/{owner}/{repo}/stats/participation"],
	        getPullRequestReviewProtection: [
	            "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
	        ],
	        getPunchCardStats: ["GET /repos/{owner}/{repo}/stats/punch_card"],
	        getReadme: ["GET /repos/{owner}/{repo}/readme"],
	        getRelease: ["GET /repos/{owner}/{repo}/releases/{release_id}"],
	        getReleaseAsset: ["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],
	        getReleaseByTag: ["GET /repos/{owner}/{repo}/releases/tags/{tag}"],
	        getStatusChecksProtection: [
	            "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
	        ],
	        getTeamsWithAccessToProtectedBranch: [
	            "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
	        ],
	        getTopPaths: ["GET /repos/{owner}/{repo}/traffic/popular/paths"],
	        getTopReferrers: ["GET /repos/{owner}/{repo}/traffic/popular/referrers"],
	        getUsersWithAccessToProtectedBranch: [
	            "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
	        ],
	        getViews: ["GET /repos/{owner}/{repo}/traffic/views"],
	        getWebhook: ["GET /repos/{owner}/{repo}/hooks/{hook_id}"],
	        listBranches: ["GET /repos/{owner}/{repo}/branches"],
	        listBranchesForHeadCommit: [
	            "GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head",
	            { mediaType: { previews: ["groot"] } },
	        ],
	        listCollaborators: ["GET /repos/{owner}/{repo}/collaborators"],
	        listCommentsForCommit: [
	            "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments",
	        ],
	        listCommitCommentsForRepo: ["GET /repos/{owner}/{repo}/comments"],
	        listCommitStatusesForRef: [
	            "GET /repos/{owner}/{repo}/commits/{ref}/statuses",
	        ],
	        listCommits: ["GET /repos/{owner}/{repo}/commits"],
	        listContributors: ["GET /repos/{owner}/{repo}/contributors"],
	        listDeployKeys: ["GET /repos/{owner}/{repo}/keys"],
	        listDeploymentStatuses: [
	            "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
	        ],
	        listDeployments: ["GET /repos/{owner}/{repo}/deployments"],
	        listForAuthenticatedUser: ["GET /user/repos"],
	        listForOrg: ["GET /orgs/{org}/repos"],
	        listForUser: ["GET /users/{username}/repos"],
	        listForks: ["GET /repos/{owner}/{repo}/forks"],
	        listInvitations: ["GET /repos/{owner}/{repo}/invitations"],
	        listInvitationsForAuthenticatedUser: ["GET /user/repository_invitations"],
	        listLanguages: ["GET /repos/{owner}/{repo}/languages"],
	        listPagesBuilds: ["GET /repos/{owner}/{repo}/pages/builds"],
	        listPublic: ["GET /repositories"],
	        listPullRequestsAssociatedWithCommit: [
	            "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls",
	            { mediaType: { previews: ["groot"] } },
	        ],
	        listReleaseAssets: [
	            "GET /repos/{owner}/{repo}/releases/{release_id}/assets",
	        ],
	        listReleases: ["GET /repos/{owner}/{repo}/releases"],
	        listTags: ["GET /repos/{owner}/{repo}/tags"],
	        listTeams: ["GET /repos/{owner}/{repo}/teams"],
	        listWebhooks: ["GET /repos/{owner}/{repo}/hooks"],
	        merge: ["POST /repos/{owner}/{repo}/merges"],
	        pingWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],
	        removeAppAccessRestrictions: [
	            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
	            {},
	            { mapToData: "apps" },
	        ],
	        removeCollaborator: [
	            "DELETE /repos/{owner}/{repo}/collaborators/{username}",
	        ],
	        removeStatusCheckContexts: [
	            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
	            {},
	            { mapToData: "contexts" },
	        ],
	        removeStatusCheckProtection: [
	            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
	        ],
	        removeTeamAccessRestrictions: [
	            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
	            {},
	            { mapToData: "teams" },
	        ],
	        removeUserAccessRestrictions: [
	            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
	            {},
	            { mapToData: "users" },
	        ],
	        replaceAllTopics: [
	            "PUT /repos/{owner}/{repo}/topics",
	            { mediaType: { previews: ["mercy"] } },
	        ],
	        requestPagesBuild: ["POST /repos/{owner}/{repo}/pages/builds"],
	        setAdminBranchProtection: [
	            "POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
	        ],
	        setAppAccessRestrictions: [
	            "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
	            {},
	            { mapToData: "apps" },
	        ],
	        setStatusCheckContexts: [
	            "PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
	            {},
	            { mapToData: "contexts" },
	        ],
	        setTeamAccessRestrictions: [
	            "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
	            {},
	            { mapToData: "teams" },
	        ],
	        setUserAccessRestrictions: [
	            "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
	            {},
	            { mapToData: "users" },
	        ],
	        testPushWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],
	        transfer: ["POST /repos/{owner}/{repo}/transfer"],
	        update: ["PATCH /repos/{owner}/{repo}"],
	        updateBranchProtection: [
	            "PUT /repos/{owner}/{repo}/branches/{branch}/protection",
	        ],
	        updateCommitComment: ["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],
	        updateInformationAboutPagesSite: ["PUT /repos/{owner}/{repo}/pages"],
	        updateInvitation: [
	            "PATCH /repos/{owner}/{repo}/invitations/{invitation_id}",
	        ],
	        updatePullRequestReviewProtection: [
	            "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
	        ],
	        updateRelease: ["PATCH /repos/{owner}/{repo}/releases/{release_id}"],
	        updateReleaseAsset: [
	            "PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}",
	        ],
	        updateStatusCheckPotection: [
	            "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
	        ],
	        updateWebhook: ["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],
	        uploadReleaseAsset: [
	            "POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",
	            { baseUrl: "https://uploads.github.com" },
	        ],
	    },
	    search: {
	        code: ["GET /search/code"],
	        commits: ["GET /search/commits", { mediaType: { previews: ["cloak"] } }],
	        issuesAndPullRequests: ["GET /search/issues"],
	        labels: ["GET /search/labels"],
	        repos: ["GET /search/repositories"],
	        topics: ["GET /search/topics", { mediaType: { previews: ["mercy"] } }],
	        users: ["GET /search/users"],
	    },
	    teams: {
	        addOrUpdateMembershipForUserInOrg: [
	            "PUT /orgs/{org}/teams/{team_slug}/memberships/{username}",
	        ],
	        addOrUpdateProjectPermissionsInOrg: [
	            "PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        addOrUpdateRepoPermissionsInOrg: [
	            "PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
	        ],
	        checkPermissionsForProjectInOrg: [
	            "GET /orgs/{org}/teams/{team_slug}/projects/{project_id}",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        checkPermissionsForRepoInOrg: [
	            "GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
	        ],
	        create: ["POST /orgs/{org}/teams"],
	        createDiscussionCommentInOrg: [
	            "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
	        ],
	        createDiscussionInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions"],
	        deleteDiscussionCommentInOrg: [
	            "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
	        ],
	        deleteDiscussionInOrg: [
	            "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
	        ],
	        deleteInOrg: ["DELETE /orgs/{org}/teams/{team_slug}"],
	        getByName: ["GET /orgs/{org}/teams/{team_slug}"],
	        getDiscussionCommentInOrg: [
	            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
	        ],
	        getDiscussionInOrg: [
	            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
	        ],
	        getMembershipForUserInOrg: [
	            "GET /orgs/{org}/teams/{team_slug}/memberships/{username}",
	        ],
	        list: ["GET /orgs/{org}/teams"],
	        listChildInOrg: ["GET /orgs/{org}/teams/{team_slug}/teams"],
	        listDiscussionCommentsInOrg: [
	            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
	        ],
	        listDiscussionsInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions"],
	        listForAuthenticatedUser: ["GET /user/teams"],
	        listMembersInOrg: ["GET /orgs/{org}/teams/{team_slug}/members"],
	        listPendingInvitationsInOrg: [
	            "GET /orgs/{org}/teams/{team_slug}/invitations",
	        ],
	        listProjectsInOrg: [
	            "GET /orgs/{org}/teams/{team_slug}/projects",
	            { mediaType: { previews: ["inertia"] } },
	        ],
	        listReposInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos"],
	        removeMembershipForUserInOrg: [
	            "DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}",
	        ],
	        removeProjectInOrg: [
	            "DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}",
	        ],
	        removeRepoInOrg: [
	            "DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
	        ],
	        updateDiscussionCommentInOrg: [
	            "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
	        ],
	        updateDiscussionInOrg: [
	            "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
	        ],
	        updateInOrg: ["PATCH /orgs/{org}/teams/{team_slug}"],
	    },
	    users: {
	        addEmailForAuthenticated: ["POST /user/emails"],
	        block: ["PUT /user/blocks/{username}"],
	        checkBlocked: ["GET /user/blocks/{username}"],
	        checkFollowingForUser: ["GET /users/{username}/following/{target_user}"],
	        checkPersonIsFollowedByAuthenticated: ["GET /user/following/{username}"],
	        createGpgKeyForAuthenticated: ["POST /user/gpg_keys"],
	        createPublicSshKeyForAuthenticated: ["POST /user/keys"],
	        deleteEmailForAuthenticated: ["DELETE /user/emails"],
	        deleteGpgKeyForAuthenticated: ["DELETE /user/gpg_keys/{gpg_key_id}"],
	        deletePublicSshKeyForAuthenticated: ["DELETE /user/keys/{key_id}"],
	        follow: ["PUT /user/following/{username}"],
	        getAuthenticated: ["GET /user"],
	        getByUsername: ["GET /users/{username}"],
	        getContextForUser: ["GET /users/{username}/hovercard"],
	        getGpgKeyForAuthenticated: ["GET /user/gpg_keys/{gpg_key_id}"],
	        getPublicSshKeyForAuthenticated: ["GET /user/keys/{key_id}"],
	        list: ["GET /users"],
	        listBlockedByAuthenticated: ["GET /user/blocks"],
	        listEmailsForAuthenticated: ["GET /user/emails"],
	        listFollowedByAuthenticated: ["GET /user/following"],
	        listFollowersForAuthenticatedUser: ["GET /user/followers"],
	        listFollowersForUser: ["GET /users/{username}/followers"],
	        listFollowingForUser: ["GET /users/{username}/following"],
	        listGpgKeysForAuthenticated: ["GET /user/gpg_keys"],
	        listGpgKeysForUser: ["GET /users/{username}/gpg_keys"],
	        listPublicEmailsForAuthenticated: ["GET /user/public_emails"],
	        listPublicKeysForUser: ["GET /users/{username}/keys"],
	        listPublicSshKeysForAuthenticated: ["GET /user/keys"],
	        setPrimaryEmailVisibilityForAuthenticated: ["PATCH /user/email/visibility"],
	        unblock: ["DELETE /user/blocks/{username}"],
	        unfollow: ["DELETE /user/following/{username}"],
	        updateAuthenticated: ["PATCH /user"],
	    },
	};

	const VERSION$6 = "4.1.2";

	function endpointsToMethods(octokit, endpointsMap) {
	    const newMethods = {};
	    for (const [scope, endpoints] of Object.entries(endpointsMap)) {
	        for (const [methodName, endpoint] of Object.entries(endpoints)) {
	            const [route, defaults, decorations] = endpoint;
	            const [method, url] = route.split(/ /);
	            const endpointDefaults = Object.assign({ method, url }, defaults);
	            if (!newMethods[scope]) {
	                newMethods[scope] = {};
	            }
	            const scopeMethods = newMethods[scope];
	            if (decorations) {
	                scopeMethods[methodName] = decorate(octokit, scope, methodName, endpointDefaults, decorations);
	                continue;
	            }
	            scopeMethods[methodName] = octokit.request.defaults(endpointDefaults);
	        }
	    }
	    return newMethods;
	}
	function decorate(octokit, scope, methodName, defaults, decorations) {
	    const requestWithDefaults = octokit.request.defaults(defaults);
	    /* istanbul ignore next */
	    function withDecorations(...args) {
	        // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488
	        let options = requestWithDefaults.endpoint.merge(...args);
	        // There are currently no other decorations than `.mapToData`
	        if (decorations.mapToData) {
	            options = Object.assign({}, options, {
	                data: options[decorations.mapToData],
	                [decorations.mapToData]: undefined,
	            });
	            return requestWithDefaults(options);
	        }
	        if (decorations.renamed) {
	            const [newScope, newMethodName] = decorations.renamed;
	            octokit.log.warn(`octokit.${scope}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`);
	        }
	        if (decorations.deprecated) {
	            octokit.log.warn(decorations.deprecated);
	        }
	        if (decorations.renamedParameters) {
	            // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488
	            const options = requestWithDefaults.endpoint.merge(...args);
	            for (const [name, alias] of Object.entries(decorations.renamedParameters)) {
	                if (name in options) {
	                    octokit.log.warn(`"${name}" parameter is deprecated for "octokit.${scope}.${methodName}()". Use "${alias}" instead`);
	                    if (!(alias in options)) {
	                        options[alias] = options[name];
	                    }
	                    delete options[name];
	                }
	            }
	            return requestWithDefaults(options);
	        }
	        // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488
	        return requestWithDefaults(...args);
	    }
	    return Object.assign(withDecorations, requestWithDefaults);
	}

	/**
	 * This plugin is a 1:1 copy of internal @octokit/rest plugins. The primary
	 * goal is to rebuild @octokit/rest on top of @octokit/core. Once that is
	 * done, we will remove the registerEndpoints methods and return the methods
	 * directly as with the other plugins. At that point we will also remove the
	 * legacy workarounds and deprecations.
	 *
	 * See the plan at
	 * https://github.com/octokit/plugin-rest-endpoint-methods.js/pull/1
	 */
	function restEndpointMethods(octokit) {
	    return endpointsToMethods(octokit, Endpoints);
	}
	restEndpointMethods.VERSION = VERSION$6;

	const VERSION$7 = "18.0.3";

	const Octokit$1 = Octokit.plugin(requestLog, restEndpointMethods, paginateRest).defaults({
	    userAgent: `octokit-rest.js/${VERSION$7}`,
	});

	const authContext = react_14();
	function ProvideAuth(props) {
	    const auth = useProvideAuth();
	    return (react.createElement(authContext.Provider, { value: auth }, props.children));
	}
	const useAuth = () => {
	    return react_8(authContext);
	};
	function storeCredential(key, credential) {
	    localStorage.setItem(key + "_key", credential);
	}
	function loadCredential(key) {
	    return localStorage.getItem(key + "_key");
	}
	function useProvideAuth() {
	    const [data, setData] = react_6(null);
	    const [uid, setUid] = react_6(null);
	    const [loading, setLoading] = react_6(false);
	    var provider = new index_cjs$3.auth.GithubAuthProvider();
	    provider.addScope("gist");
	    function clearAuth() {
	        setData(null);
	        setUid(null);
	        localStorage.clear();
	    }
	    const signin = async () => {
	        setLoading(true);
	        return index_cjs$3
	            .auth()
	            .signInWithPopup(provider)
	            .then((response) => {
	            if (response.credential) {
	                storeCredential(response.user.uid, response.credential.accessToken);
	            }
	            logEvent$1("sign_in");
	            const r = gotUser(response.user, true);
	            r.then(() => setLoading(false));
	            return r;
	        })
	            .catch((e) => {
	            logEvent$1("cancel_signin");
	            setLoading(false);
	            logException(e);
	        });
	    };
	    const signout = async () => {
	        return index_cjs$3
	            .auth()
	            .signOut()
	            .then(() => {
	            logEvent$1("sign_out");
	            clearAuth();
	            location.reload();
	        });
	    };
	    async function gotUser(user, refresh = false) {
	        let token = loadCredential(user.uid);
	        setUid(user.uid);
	        if (token) {
	            const octokit = new Octokit$1({ auth: token });
	            const { data } = await octokit.request("/user");
	            if (data.id) {
	                if (refresh) {
	                    index_cjs$3
	                        .database()
	                        .ref()
	                        .child("users/" + user.uid + "/profile")
	                        .set({
	                        login: data.login,
	                        id: data.id,
	                        name: data.name,
	                        avatar_url: data.avatar_url,
	                    });
	                }
	                setData({ user, octokit, gh: data });
	                return user;
	            }
	        }
	        signout();
	        return null;
	    }
	    react_5(() => {
	        const unsubscribe = index_cjs$3.auth().onAuthStateChanged((user) => {
	            if (user) {
	                gotUser(user);
	            }
	            else {
	                clearAuth();
	            }
	        });
	        return () => unsubscribe();
	    }, []);
	    return {
	        uid,
	        data,
	        signin,
	        signout,
	        loading,
	    };
	}

	let isResizing = false;
	function ResizeableSidebar(props) {
	    const [currentSize, setCurrentSize] = react_6(props.size);
	    const cbHandleMouseMove = react_11(handleMousemove, []);
	    const cbHandleMouseUp = react_11(handleMouseup, []);
	    function handleMousedown(e) {
	        e.stopPropagation();
	        e.preventDefault();
	        document.addEventListener("mousemove", cbHandleMouseMove);
	        document.addEventListener("mouseup", cbHandleMouseUp);
	        isResizing = true;
	    }
	    function handleMousemove(e) {
	        if (!isResizing) {
	            return;
	        }
	        let size = e.clientX - document.body.offsetLeft;
	        let minWidth = 150;
	        if (size > minWidth) {
	            setCurrentSize(size);
	        }
	        else {
	            setCurrentSize(0);
	        }
	    }
	    function handleMouseup(e) {
	        if (!isResizing) {
	            return;
	        }
	        isResizing = false;
	        document.removeEventListener("mousemove", cbHandleMouseMove);
	        document.removeEventListener("mouseup", cbHandleMouseUp);
	    }
	    react_5(() => {
	        if (currentSize != props.size) {
	            props.onResize(currentSize);
	        }
	    }, [currentSize]);
	    return (react.createElement("div", { className: "sidebar-container" },
	        react.createElement("div", { className: `sidebar-dragger ${isResizing ? "active" : ""}`, onMouseDown: handleMousedown, style: { left: props.size } }),
	        props.children));
	}

	function Avatar(props) {
	    const [userData, setUserData] = react_6();
	    const authCtx = useAuth();
	    react_5(() => {
	        if (props.userId && authCtx.uid) {
	            index_cjs$3
	                .database()
	                .ref()
	                .child(`users/${props.userId}/profile`)
	                .once("value", function (owner) {
	                setUserData(owner.toJSON());
	            });
	        }
	    }, [props.userId]);
	    if (!userData)
	        return (react.createElement("img", { className: "avatar", height: "20", width: "20", title: "anonymous", alt: "anonymous", src: "https://user-images.githubusercontent.com/334891/29999089-2837c968-9009-11e7-92c1-6a7540a594d5.png", onClick: props.onClick }));
	    return (react.createElement("img", { className: `avatar avatar-small ${props.className}`, alt: userData.login, title: userData.login, "aria-label": userData.login, src: `${userData.avatar_url}&s=40`, width: "20", height: "20", onClick: props.onClick }));
	}

	function UserList(props) {
	    const authCtx = useAuth();
	    const [users, setUsers] = react_6({});
	    react_5(() => {
	        if (props.documentRef) {
	            setUsers({});
	            const ref = props.documentRef.child("users");
	            ref.on("value", (snap) => {
	                setUsers(snap.toJSON());
	            });
	            return () => {
	                ref.off();
	            };
	        }
	    }, [props.documentRef]);
	    return (react.createElement("div", { className: "AvatarStack AvatarStack--three-plus AvatarStack--right d-inline-block flex-self-center" },
	        react.createElement("div", { className: "AvatarStack-body" }, Object.keys(users || {}).map((userId) => authCtx.uid != userId && (react.createElement(Avatar, { userId: userId, className: "tooltipped tooltipped-sw tooltipped-align-right-1", key: userId }))))));
	}

	function UserMenu() {
	    const auth = useAuth();
	    if (!auth.data) {
	        return (react.createElement(react.Fragment, null,
	            react.createElement("details", { className: "dropdown details-reset details-overlay d-inline-block mr-2" },
	                react.createElement("summary", { "aria-haspopup": "true" },
	                    react.createElement("span", { className: "btn btn-invisible user-name", style: { color: "#000" } },
	                        react.createElement("span", { className: "mr-2" }, "Anonymous"),
	                        react.createElement("img", { className: "avatar avatar-small", alt: "Anonymous", src: "https://user-images.githubusercontent.com/334891/29999089-2837c968-9009-11e7-92c1-6a7540a594d5.png", width: "20", height: "20", "aria-label": "Sign in" }),
	                        react.createElement("div", { className: "dropdown-caret" }))),
	                react.createElement("ul", { className: "dropdown-menu dropdown-menu-sw" },
	                    react.createElement("li", null,
	                        react.createElement("a", { className: "dropdown-item", href: document.location.toString(), onClick: () => {
	                                auth
	                                    .signin()
	                                    .then(() => closeMenu())
	                                    .catch(() => closeMenu());
	                            } },
	                            react.createElement(MarkGithubIcon, { size: 16, className: "mr-2" }),
	                            react.createElement("span", null, "Sign in")))))));
	    }
	    return (react.createElement(react.Fragment, null,
	        react.createElement("details", { className: "dropdown details-reset details-overlay d-inline-block mr-2" },
	            react.createElement("summary", { "aria-haspopup": "true" },
	                react.createElement("span", { className: "btn btn-invisible user-name", style: { color: "#000" } },
	                    react.createElement("span", { className: "mr-2" }, auth.data.user.displayName),
	                    react.createElement("img", { className: "avatar avatar-small", alt: auth.data.user.displayName, src: `${auth.data.user.photoURL}&s=40`, width: "20", height: "20", "aria-label": auth.data.user.displayName }),
	                    react.createElement("div", { className: "dropdown-caret" }))),
	            react.createElement("ul", { className: "dropdown-menu dropdown-menu-sw" },
	                react.createElement("li", null,
	                    react.createElement("a", { className: "dropdown-item", href: "#/list", onClick: () => {
	                            navigateTo("/list");
	                        } },
	                        react.createElement("span", null, "My notebooks"))),
	                react.createElement("li", null,
	                    react.createElement("a", { className: "dropdown-item", href: document.location.toString(), onClick: () => {
	                            auth
	                                .signout()
	                                .then(() => closeMenu())
	                                .catch(() => closeMenu());
	                        } },
	                        react.createElement("span", null, "Sign out")))))));
	}

	class ErrorBoundary extends react.Component {
	    constructor(props) {
	        super(props);
	        this.state = { hasError: false };
	    }
	    static getDerivedStateFromError(error) {
	        return { hasError: true };
	    }
	    componentDidCatch(error, errorInfo) {
	        console.error(error);
	        console.log(errorInfo);
	        debugger;
	    }
	    render() {
	        if (this.state.hasError) {
	            return react.createElement("h1", null, "Something went wrong.");
	        }
	        return this.props.children;
	    }
	}

	function createCommonjsModule$1(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var expatlib = createCommonjsModule$1(function (module, exports) {
	var cpp = (function() {
	  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
	  
	  return (
	function(cpp) {
	  cpp = cpp || {};

	var Module=typeof cpp!=="undefined"?cpp:{};var readyPromiseResolve;Module["ready"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;});var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key];}}var arguments_=[];var thisProgram="./this.program";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=true;var scriptDirectory="";function locateFile(path){if(Module["locateFile"]){return Module["locateFile"](path,scriptDirectory)}return scriptDirectory+path}var read_,readBinary;{if(document.currentScript){scriptDirectory=document.currentScript.src;}if(_scriptDir){scriptDirectory=_scriptDir;}if(scriptDirectory.indexOf("blob:")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf("/")+1);}else {scriptDirectory="";}{read_=function shell_read(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText};}}var out=Module["print"]||console.log.bind(console);var err=Module["printErr"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key];}}moduleOverrides=null;if(Module["arguments"])arguments_=Module["arguments"];if(Module["thisProgram"])thisProgram=Module["thisProgram"];if(Module["quit"])quit_=Module["quit"];var wasmBinary;if(Module["wasmBinary"])wasmBinary=Module["wasmBinary"];var noExitRuntime;if(Module["noExitRuntime"])noExitRuntime=Module["noExitRuntime"];if(typeof WebAssembly!=="object"){err("no native wasm support detected");}var wasmMemory;var wasmTable=new WebAssembly.Table({"initial":153,"maximum":153+0,"element":"anyfunc"});var ABORT=false;function assert(condition,text){if(!condition){abort("Assertion failed: "+text);}}var UTF8Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf8"):undefined;function UTF8ArrayToString(heap,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heap[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heap.subarray&&UTF8Decoder){return UTF8Decoder.decode(heap.subarray(idx,endPtr))}else {var str="";while(idx<endPtr){var u0=heap[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heap[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heap[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2;}else {u0=(u0&7)<<18|u1<<12|u2<<6|heap[idx++]&63;}if(u0<65536){str+=String.fromCharCode(u0);}else {var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023);}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):""}function stringToUTF8Array(str,heap,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023;}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++]=u;}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++]=192|u>>6;heap[outIdx++]=128|u&63;}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++]=224|u>>12;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63;}else {if(outIdx+3>=endIdx)break;heap[outIdx++]=240|u>>18;heap[outIdx++]=128|u>>12&63;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63;}}heap[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4;}return len}function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i);}if(!dontAddNull)HEAP8[buffer>>0]=0;}var WASM_PAGE_SIZE=65536;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple;}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module["HEAP8"]=HEAP8=new Int8Array(buf);Module["HEAP16"]=HEAP16=new Int16Array(buf);Module["HEAP32"]=HEAP32=new Int32Array(buf);Module["HEAPU8"]=HEAPU8=new Uint8Array(buf);Module["HEAPU16"]=HEAPU16=new Uint16Array(buf);Module["HEAPU32"]=HEAPU32=new Uint32Array(buf);Module["HEAPF32"]=HEAPF32=new Float32Array(buf);Module["HEAPF64"]=HEAPF64=new Float64Array(buf);}var DYNAMIC_BASE=5251440,DYNAMICTOP_PTR=8400;var INITIAL_INITIAL_MEMORY=Module["INITIAL_MEMORY"]||16777216;if(Module["wasmMemory"]){wasmMemory=Module["wasmMemory"];}else {wasmMemory=new WebAssembly.Memory({"initial":INITIAL_INITIAL_MEMORY/WASM_PAGE_SIZE,"maximum":2147483648/WASM_PAGE_SIZE});}if(wasmMemory){buffer=wasmMemory.buffer;}INITIAL_INITIAL_MEMORY=buffer.byteLength;updateGlobalBufferAndViews(buffer);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback(Module);continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){Module["dynCall_v"](func);}else {Module["dynCall_vi"](func,callback.arg);}}else {func(callback.arg===undefined?null:callback.arg);}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATPOSTRUN__=[];function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift());}}callRuntimeCallbacks(__ATPRERUN__);}function initRuntime(){if(!Module["noFSInit"]&&!FS.init.initialized)FS.init();TTY.init();callRuntimeCallbacks(__ATINIT__);}function preMain(){FS.ignorePermissions=false;callRuntimeCallbacks(__ATMAIN__);}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift());}}callRuntimeCallbacks(__ATPOSTRUN__);}function addOnPreRun(cb){__ATPRERUN__.unshift(cb);}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb);}var Math_abs=Math.abs;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_min=Math.min;var runDependencies=0;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies);}}function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies);}if(runDependencies==0){if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback();}}}Module["preloadedImages"]={};Module["preloadedAudios"]={};function abort(what){if(Module["onAbort"]){Module["onAbort"](what);}what+="";out(what);err(what);ABORT=true;what="abort("+what+"). Build with -s ASSERTIONS=1 for more info.";throw new WebAssembly.RuntimeError(what)}function hasPrefix(str,prefix){return String.prototype.startsWith?str.startsWith(prefix):str.indexOf(prefix)===0}var dataURIPrefix="data:application/octet-stream;base64,";function isDataURI(filename){return hasPrefix(filename,dataURIPrefix)}var wasmBinaryFile="expatlib.wasm";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile);}function getBinary(){try{if(wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(wasmBinaryFile)}else {throw "both async and sync fetching of the wasm failed"}}catch(err){abort(err);}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB)&&typeof fetch==="function"){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){if(!response["ok"]){throw "failed to load wasm binary file at '"+wasmBinaryFile+"'"}return response["arrayBuffer"]()}).catch(function(){return getBinary()})}return new Promise(function(resolve,reject){resolve(getBinary());})}function createWasm(){var info={"a":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module["asm"]=exports;removeRunDependency();}addRunDependency();function receiveInstantiatedSource(output){receiveInstance(output["instance"]);}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err("failed to asynchronously prepare wasm: "+reason);abort(reason);})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming==="function"&&!isDataURI(wasmBinaryFile)&&typeof fetch==="function"){fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiatedSource,function(reason){err("wasm streaming compile failed: "+reason);err("falling back to ArrayBuffer instantiation");instantiateArrayBuffer(receiveInstantiatedSource);})});}else {return instantiateArrayBuffer(receiveInstantiatedSource)}}if(Module["instantiateWasm"]){try{var exports=Module["instantiateWasm"](info,receiveInstance);return exports}catch(e){err("Module.instantiateWasm callback failed with error: "+e);return false}}instantiateAsync();return {}}var tempDouble;var tempI64;var ASM_CONSTS={1284:function($0){var self=Module["getCache"](Module["CExpatJS"])[$0];if(!self.hasOwnProperty("startElement"))throw "a JSImplementation must implement all functions, you forgot CExpatJS::startElement.";self["startElement"]();},1504:function($0){var self=Module["getCache"](Module["CExpatJS"])[$0];if(!self.hasOwnProperty("endElement"))throw "a JSImplementation must implement all functions, you forgot CExpatJS::endElement.";self["endElement"]();},1716:function($0){var self=Module["getCache"](Module["CExpatJS"])[$0];if(!self.hasOwnProperty("characterData"))throw "a JSImplementation must implement all functions, you forgot CExpatJS::characterData.";self["characterData"]();}};function _emscripten_asm_const_iii(code,sigPtr,argbuf){var args=readAsmConstArgs(sigPtr,argbuf);return ASM_CONSTS[code].apply(null,args)}__ATINIT__.push({func:function(){___wasm_call_ctors();}});function demangle(func){return func}function demangleAll(text){var regex=/\b_Z[\w\d_]+/g;return text.replace(regex,function(x){var y=demangle(x);return x===y?x:y+" ["+x+"]"})}function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error}catch(e){err=e;}if(!err.stack){return "(no stack trace available)"}}return err.stack.toString()}function stackTrace(){var js=jsStackTrace();if(Module["extraStackTrace"])js+="\n"+Module["extraStackTrace"]();return demangleAll(js)}var PATH={splitPath:function(filename){var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;return splitPathRe.exec(filename).slice(1)},normalizeArray:function(parts,allowAboveRoot){var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==="."){parts.splice(i,1);}else if(last===".."){parts.splice(i,1);up++;}else if(up){parts.splice(i,1);up--;}}if(allowAboveRoot){for(;up;up--){parts.unshift("..");}}return parts},normalize:function(path){var isAbsolute=path.charAt(0)==="/",trailingSlash=path.substr(-1)==="/";path=PATH.normalizeArray(path.split("/").filter(function(p){return !!p}),!isAbsolute).join("/");if(!path&&!isAbsolute){path=".";}if(path&&trailingSlash){path+="/";}return (isAbsolute?"/":"")+path},dirname:function(path){var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return "."}if(dir){dir=dir.substr(0,dir.length-1);}return root+dir},basename:function(path){if(path==="/")return "/";var lastSlash=path.lastIndexOf("/");if(lastSlash===-1)return path;return path.substr(lastSlash+1)},extname:function(path){return PATH.splitPath(path)[3]},join:function(){var paths=Array.prototype.slice.call(arguments,0);return PATH.normalize(paths.join("/"))},join2:function(l,r){return PATH.normalize(l+"/"+r)}};function setErrNo(value){HEAP32[___errno_location()>>2]=value;return value}var PATH_FS={resolve:function(){var resolvedPath="",resolvedAbsolute=false;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:FS.cwd();if(typeof path!=="string"){throw new TypeError("Arguments to path.resolve must be strings")}else if(!path){return ""}resolvedPath=path+"/"+resolvedPath;resolvedAbsolute=path.charAt(0)==="/";}resolvedPath=PATH.normalizeArray(resolvedPath.split("/").filter(function(p){return !!p}),!resolvedAbsolute).join("/");return (resolvedAbsolute?"/":"")+resolvedPath||"."},relative:function(from,to){from=PATH_FS.resolve(from).substr(1);to=PATH_FS.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!=="")break}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!=="")break}if(start>end)return [];return arr.slice(start,end-start+1)}var fromParts=trim(from.split("/"));var toParts=trim(to.split("/"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push("..");}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join("/")}};var TTY={ttys:[],init:function(){},shutdown:function(){},register:function(dev,ops){TTY.ttys[dev]={input:[],output:[],ops:ops};FS.registerDevice(dev,TTY.stream_ops);},stream_ops:{open:function(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty){throw new FS.ErrnoError(43)}stream.tty=tty;stream.seekable=false;},close:function(stream){stream.tty.ops.flush(stream.tty);},flush:function(stream){stream.tty.ops.flush(stream.tty);},read:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char){throw new FS.ErrnoError(60)}var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=stream.tty.ops.get_char(stream.tty);}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result;}if(bytesRead){stream.node.timestamp=Date.now();}return bytesRead},write:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char){throw new FS.ErrnoError(60)}try{for(var i=0;i<length;i++){stream.tty.ops.put_char(stream.tty,buffer[offset+i]);}}catch(e){throw new FS.ErrnoError(29)}if(length){stream.node.timestamp=Date.now();}return i}},default_tty_ops:{get_char:function(tty){if(!tty.input.length){var result=null;if(typeof window!="undefined"&&typeof window.prompt=="function"){result=window.prompt("Input: ");if(result!==null){result+="\n";}}else if(typeof readline=="function"){result=readline();if(result!==null){result+="\n";}}if(!result){return null}tty.input=intArrayFromString(result,true);}return tty.input.shift()},put_char:function(tty,val){if(val===null||val===10){out(UTF8ArrayToString(tty.output,0));tty.output=[];}else {if(val!=0)tty.output.push(val);}},flush:function(tty){if(tty.output&&tty.output.length>0){out(UTF8ArrayToString(tty.output,0));tty.output=[];}}},default_tty1_ops:{put_char:function(tty,val){if(val===null||val===10){err(UTF8ArrayToString(tty.output,0));tty.output=[];}else {if(val!=0)tty.output.push(val);}},flush:function(tty){if(tty.output&&tty.output.length>0){err(UTF8ArrayToString(tty.output,0));tty.output=[];}}}};var MEMFS={ops_table:null,mount:function(mount){return MEMFS.createNode(null,"/",16384|511,0)},createNode:function(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode)){throw new FS.ErrnoError(63)}if(!MEMFS.ops_table){MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}};}var node=FS.createNode(parent,name,mode,dev);if(FS.isDir(node.mode)){node.node_ops=MEMFS.ops_table.dir.node;node.stream_ops=MEMFS.ops_table.dir.stream;node.contents={};}else if(FS.isFile(node.mode)){node.node_ops=MEMFS.ops_table.file.node;node.stream_ops=MEMFS.ops_table.file.stream;node.usedBytes=0;node.contents=null;}else if(FS.isLink(node.mode)){node.node_ops=MEMFS.ops_table.link.node;node.stream_ops=MEMFS.ops_table.link.stream;}else if(FS.isChrdev(node.mode)){node.node_ops=MEMFS.ops_table.chrdev.node;node.stream_ops=MEMFS.ops_table.chrdev.stream;}node.timestamp=Date.now();if(parent){parent.contents[name]=node;}return node},getFileDataAsRegularArray:function(node){if(node.contents&&node.contents.subarray){var arr=[];for(var i=0;i<node.usedBytes;++i)arr.push(node.contents[i]);return arr}return node.contents},getFileDataAsTypedArray:function(node){if(!node.contents)return new Uint8Array(0);if(node.contents.subarray)return node.contents.subarray(0,node.usedBytes);return new Uint8Array(node.contents)},expandFileStorage:function(node,newCapacity){var prevCapacity=node.contents?node.contents.length:0;if(prevCapacity>=newCapacity)return;var CAPACITY_DOUBLING_MAX=1024*1024;newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<CAPACITY_DOUBLING_MAX?2:1.125)>>>0);if(prevCapacity!=0)newCapacity=Math.max(newCapacity,256);var oldContents=node.contents;node.contents=new Uint8Array(newCapacity);if(node.usedBytes>0)node.contents.set(oldContents.subarray(0,node.usedBytes),0);return},resizeFileStorage:function(node,newSize){if(node.usedBytes==newSize)return;if(newSize==0){node.contents=null;node.usedBytes=0;return}if(!node.contents||node.contents.subarray){var oldContents=node.contents;node.contents=new Uint8Array(newSize);if(oldContents){node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes)));}node.usedBytes=newSize;return}if(!node.contents)node.contents=[];if(node.contents.length>newSize)node.contents.length=newSize;else while(node.contents.length<newSize)node.contents.push(0);node.usedBytes=newSize;},node_ops:{getattr:function(node){var attr={};attr.dev=FS.isChrdev(node.mode)?node.id:1;attr.ino=node.id;attr.mode=node.mode;attr.nlink=1;attr.uid=0;attr.gid=0;attr.rdev=node.rdev;if(FS.isDir(node.mode)){attr.size=4096;}else if(FS.isFile(node.mode)){attr.size=node.usedBytes;}else if(FS.isLink(node.mode)){attr.size=node.link.length;}else {attr.size=0;}attr.atime=new Date(node.timestamp);attr.mtime=new Date(node.timestamp);attr.ctime=new Date(node.timestamp);attr.blksize=4096;attr.blocks=Math.ceil(attr.size/attr.blksize);return attr},setattr:function(node,attr){if(attr.mode!==undefined){node.mode=attr.mode;}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp;}if(attr.size!==undefined){MEMFS.resizeFileStorage(node,attr.size);}},lookup:function(parent,name){throw FS.genericErrors[44]},mknod:function(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev)},rename:function(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name);}catch(e){}if(new_node){for(var i in new_node.contents){throw new FS.ErrnoError(55)}}}delete old_node.parent.contents[old_node.name];old_node.name=new_name;new_dir.contents[new_name]=old_node;old_node.parent=new_dir;},unlink:function(parent,name){delete parent.contents[name];},rmdir:function(parent,name){var node=FS.lookupNode(parent,name);for(var i in node.contents){throw new FS.ErrnoError(55)}delete parent.contents[name];},readdir:function(node){var entries=[".",".."];for(var key in node.contents){if(!node.contents.hasOwnProperty(key)){continue}entries.push(key);}return entries},symlink:function(parent,newname,oldpath){var node=MEMFS.createNode(parent,newname,511|40960,0);node.link=oldpath;return node},readlink:function(node){if(!FS.isLink(node.mode)){throw new FS.ErrnoError(28)}return node.link}},stream_ops:{read:function(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);if(size>8&&contents.subarray){buffer.set(contents.subarray(position,position+size),offset);}else {for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i];}return size},write:function(stream,buffer,offset,length,position,canOwn){if(buffer.buffer===HEAP8.buffer){canOwn=false;}if(!length)return 0;var node=stream.node;node.timestamp=Date.now();if(buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn){node.contents=buffer.subarray(offset,offset+length);node.usedBytes=length;return length}else if(node.usedBytes===0&&position===0){node.contents=buffer.slice(offset,offset+length);node.usedBytes=length;return length}else if(position+length<=node.usedBytes){node.contents.set(buffer.subarray(offset,offset+length),position);return length}}MEMFS.expandFileStorage(node,position+length);if(node.contents.subarray&&buffer.subarray)node.contents.set(buffer.subarray(offset,offset+length),position);else {for(var i=0;i<length;i++){node.contents[position+i]=buffer[offset+i];}}node.usedBytes=Math.max(node.usedBytes,position+length);return length},llseek:function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position;}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.usedBytes;}}if(position<0){throw new FS.ErrnoError(28)}return position},allocate:function(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length);stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length);},mmap:function(stream,buffer,offset,length,position,prot,flags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}var ptr;var allocated;var contents=stream.node.contents;if(!(flags&2)&&contents.buffer===buffer.buffer){allocated=false;ptr=contents.byteOffset;}else {if(position>0||position+length<contents.length){if(contents.subarray){contents=contents.subarray(position,position+length);}else {contents=Array.prototype.slice.call(contents,position,position+length);}}allocated=true;var fromHeap=buffer.buffer==HEAP8.buffer;ptr=_malloc(length);if(!ptr){throw new FS.ErrnoError(48)}(fromHeap?HEAP8:buffer).set(contents,ptr);}return {ptr:ptr,allocated:allocated}},msync:function(stream,buffer,offset,length,mmapFlags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}if(mmapFlags&2){return 0}var bytesWritten=MEMFS.stream_ops.write(stream,buffer,0,length,offset,false);return 0}}};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e){if(!(e instanceof FS.ErrnoError))throw e+" : "+stackTrace();return setErrNo(e.errno)},lookupPath:function(path,opts){path=PATH_FS.resolve(FS.cwd(),path);opts=opts||{};if(!path)return {path:"",node:null};var defaults={follow_mount:true,recurse_count:0};for(var key in defaults){if(opts[key]===undefined){opts[key]=defaults[key];}}if(opts.recurse_count>8){throw new FS.ErrnoError(32)}var parts=PATH.normalizeArray(path.split("/").filter(function(p){return !!p}),false);var current=FS.root;var current_path="/";for(var i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent){break}current=FS.lookupNode(current,parts[i]);current_path=PATH.join2(current_path,parts[i]);if(FS.isMountpoint(current)){if(!islast||islast&&opts.follow_mount){current=current.mounted.root;}}if(!islast||opts.follow){var count=0;while(FS.isLink(current.mode)){var link=FS.readlink(current_path);current_path=PATH_FS.resolve(PATH.dirname(current_path),link);var lookup=FS.lookupPath(current_path,{recurse_count:opts.recurse_count});current=lookup.node;if(count++>40){throw new FS.ErrnoError(32)}}}}return {path:current_path,node:current}},getPath:function(node){var path;while(true){if(FS.isRoot(node)){var mount=node.mount.mountpoint;if(!path)return mount;return mount[mount.length-1]!=="/"?mount+"/"+path:mount+path}path=path?node.name+"/"+path:node.name;node=node.parent;}},hashName:function(parentid,name){var hash=0;for(var i=0;i<name.length;i++){hash=(hash<<5)-hash+name.charCodeAt(i)|0;}return (parentid+hash>>>0)%FS.nameTable.length},hashAddNode:function(node){var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash];FS.nameTable[hash]=node;},hashRemoveNode:function(node){var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node){FS.nameTable[hash]=node.name_next;}else {var current=FS.nameTable[hash];while(current){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next;}}},lookupNode:function(parent,name){var errCode=FS.mayLookup(parent);if(errCode){throw new FS.ErrnoError(errCode,parent)}var hash=FS.hashName(parent.id,name);for(var node=FS.nameTable[hash];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name){return node}}return FS.lookup(parent,name)},createNode:function(parent,name,mode,rdev){var node=new FS.FSNode(parent,name,mode,rdev);FS.hashAddNode(node);return node},destroyNode:function(node){FS.hashRemoveNode(node);},isRoot:function(node){return node===node.parent},isMountpoint:function(node){return !!node.mounted},isFile:function(mode){return (mode&61440)===32768},isDir:function(mode){return (mode&61440)===16384},isLink:function(mode){return (mode&61440)===40960},isChrdev:function(mode){return (mode&61440)===8192},isBlkdev:function(mode){return (mode&61440)===24576},isFIFO:function(mode){return (mode&61440)===4096},isSocket:function(mode){return (mode&49152)===49152},flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str){var flags=FS.flagModes[str];if(typeof flags==="undefined"){throw new Error("Unknown file open mode: "+str)}return flags},flagsToPermissionString:function(flag){var perms=["r","w","rw"][flag&3];if(flag&512){perms+="w";}return perms},nodePermissions:function(node,perms){if(FS.ignorePermissions){return 0}if(perms.indexOf("r")!==-1&&!(node.mode&292)){return 2}else if(perms.indexOf("w")!==-1&&!(node.mode&146)){return 2}else if(perms.indexOf("x")!==-1&&!(node.mode&73)){return 2}return 0},mayLookup:function(dir){var errCode=FS.nodePermissions(dir,"x");if(errCode)return errCode;if(!dir.node_ops.lookup)return 2;return 0},mayCreate:function(dir,name){try{var node=FS.lookupNode(dir,name);return 20}catch(e){}return FS.nodePermissions(dir,"wx")},mayDelete:function(dir,name,isdir){var node;try{node=FS.lookupNode(dir,name);}catch(e){return e.errno}var errCode=FS.nodePermissions(dir,"wx");if(errCode){return errCode}if(isdir){if(!FS.isDir(node.mode)){return 54}if(FS.isRoot(node)||FS.getPath(node)===FS.cwd()){return 10}}else {if(FS.isDir(node.mode)){return 31}}return 0},mayOpen:function(node,flags){if(!node){return 44}if(FS.isLink(node.mode)){return 32}else if(FS.isDir(node.mode)){if(FS.flagsToPermissionString(flags)!=="r"||flags&512){return 31}}return FS.nodePermissions(node,FS.flagsToPermissionString(flags))},MAX_OPEN_FDS:4096,nextfd:function(fd_start,fd_end){fd_start=fd_start||0;fd_end=fd_end||FS.MAX_OPEN_FDS;for(var fd=fd_start;fd<=fd_end;fd++){if(!FS.streams[fd]){return fd}}throw new FS.ErrnoError(33)},getStream:function(fd){return FS.streams[fd]},createStream:function(stream,fd_start,fd_end){if(!FS.FSStream){FS.FSStream=function(){};FS.FSStream.prototype={object:{get:function(){return this.node},set:function(val){this.node=val;}},isRead:{get:function(){return (this.flags&2097155)!==1}},isWrite:{get:function(){return (this.flags&2097155)!==0}},isAppend:{get:function(){return this.flags&1024}}};}var newStream=new FS.FSStream;for(var p in stream){newStream[p]=stream[p];}stream=newStream;var fd=FS.nextfd(fd_start,fd_end);stream.fd=fd;FS.streams[fd]=stream;return stream},closeStream:function(fd){FS.streams[fd]=null;},chrdev_stream_ops:{open:function(stream){var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops;if(stream.stream_ops.open){stream.stream_ops.open(stream);}},llseek:function(){throw new FS.ErrnoError(70)}},major:function(dev){return dev>>8},minor:function(dev){return dev&255},makedev:function(ma,mi){return ma<<8|mi},registerDevice:function(dev,ops){FS.devices[dev]={stream_ops:ops};},getDevice:function(dev){return FS.devices[dev]},getMounts:function(mount){var mounts=[];var check=[mount];while(check.length){var m=check.pop();mounts.push(m);check.push.apply(check,m.mounts);}return mounts},syncfs:function(populate,callback){if(typeof populate==="function"){callback=populate;populate=false;}FS.syncFSRequests++;if(FS.syncFSRequests>1){err("warning: "+FS.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work");}var mounts=FS.getMounts(FS.root.mount);var completed=0;function doCallback(errCode){FS.syncFSRequests--;return callback(errCode)}function done(errCode){if(errCode){if(!done.errored){done.errored=true;return doCallback(errCode)}return}if(++completed>=mounts.length){doCallback(null);}}mounts.forEach(function(mount){if(!mount.type.syncfs){return done(null)}mount.type.syncfs(mount,populate,done);});},mount:function(type,opts,mountpoint){var root=mountpoint==="/";var pseudo=!mountpoint;var node;if(root&&FS.root){throw new FS.ErrnoError(10)}else if(!root&&!pseudo){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});mountpoint=lookup.path;node=lookup.node;if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}if(!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}}var mount={type:type,opts:opts,mountpoint:mountpoint,mounts:[]};var mountRoot=type.mount(mount);mountRoot.mount=mount;mount.root=mountRoot;if(root){FS.root=mountRoot;}else if(node){node.mounted=mount;if(node.mount){node.mount.mounts.push(mount);}}return mountRoot},unmount:function(mountpoint){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});if(!FS.isMountpoint(lookup.node)){throw new FS.ErrnoError(28)}var node=lookup.node;var mount=node.mounted;var mounts=FS.getMounts(mount);Object.keys(FS.nameTable).forEach(function(hash){var current=FS.nameTable[hash];while(current){var next=current.name_next;if(mounts.indexOf(current.mount)!==-1){FS.destroyNode(current);}current=next;}});node.mounted=null;var idx=node.mount.mounts.indexOf(mount);node.mount.mounts.splice(idx,1);},lookup:function(parent,name){return parent.node_ops.lookup(parent,name)},mknod:function(path,mode,dev){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);if(!name||name==="."||name===".."){throw new FS.ErrnoError(28)}var errCode=FS.mayCreate(parent,name);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.mknod){throw new FS.ErrnoError(63)}return parent.node_ops.mknod(parent,name,mode,dev)},create:function(path,mode){mode=mode!==undefined?mode:438;mode&=4095;mode|=32768;return FS.mknod(path,mode,0)},mkdir:function(path,mode){mode=mode!==undefined?mode:511;mode&=511|512;mode|=16384;return FS.mknod(path,mode,0)},mkdirTree:function(path,mode){var dirs=path.split("/");var d="";for(var i=0;i<dirs.length;++i){if(!dirs[i])continue;d+="/"+dirs[i];try{FS.mkdir(d,mode);}catch(e){if(e.errno!=20)throw e}}},mkdev:function(path,mode,dev){if(typeof dev==="undefined"){dev=mode;mode=438;}mode|=8192;return FS.mknod(path,mode,dev)},symlink:function(oldpath,newpath){if(!PATH_FS.resolve(oldpath)){throw new FS.ErrnoError(44)}var lookup=FS.lookupPath(newpath,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(44)}var newname=PATH.basename(newpath);var errCode=FS.mayCreate(parent,newname);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.symlink){throw new FS.ErrnoError(63)}return parent.node_ops.symlink(parent,newname,oldpath)},rename:function(old_path,new_path){var old_dirname=PATH.dirname(old_path);var new_dirname=PATH.dirname(new_path);var old_name=PATH.basename(old_path);var new_name=PATH.basename(new_path);var lookup,old_dir,new_dir;try{lookup=FS.lookupPath(old_path,{parent:true});old_dir=lookup.node;lookup=FS.lookupPath(new_path,{parent:true});new_dir=lookup.node;}catch(e){throw new FS.ErrnoError(10)}if(!old_dir||!new_dir)throw new FS.ErrnoError(44);if(old_dir.mount!==new_dir.mount){throw new FS.ErrnoError(75)}var old_node=FS.lookupNode(old_dir,old_name);var relative=PATH_FS.relative(old_path,new_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(28)}relative=PATH_FS.relative(new_path,old_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(55)}var new_node;try{new_node=FS.lookupNode(new_dir,new_name);}catch(e){}if(old_node===new_node){return}var isdir=FS.isDir(old_node.mode);var errCode=FS.mayDelete(old_dir,old_name,isdir);if(errCode){throw new FS.ErrnoError(errCode)}errCode=new_node?FS.mayDelete(new_dir,new_name,isdir):FS.mayCreate(new_dir,new_name);if(errCode){throw new FS.ErrnoError(errCode)}if(!old_dir.node_ops.rename){throw new FS.ErrnoError(63)}if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node)){throw new FS.ErrnoError(10)}if(new_dir!==old_dir){errCode=FS.nodePermissions(old_dir,"w");if(errCode){throw new FS.ErrnoError(errCode)}}try{if(FS.trackingDelegate["willMovePath"]){FS.trackingDelegate["willMovePath"](old_path,new_path);}}catch(e){err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message);}FS.hashRemoveNode(old_node);try{old_dir.node_ops.rename(old_node,new_dir,new_name);}catch(e){throw e}finally{FS.hashAddNode(old_node);}try{if(FS.trackingDelegate["onMovePath"])FS.trackingDelegate["onMovePath"](old_path,new_path);}catch(e){err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message);}},rmdir:function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,true);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.rmdir){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path);}}catch(e){err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message);}parent.node_ops.rmdir(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path);}catch(e){err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message);}},readdir:function(path){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node.node_ops.readdir){throw new FS.ErrnoError(54)}return node.node_ops.readdir(node)},unlink:function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,false);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.unlink){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path);}}catch(e){err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message);}parent.node_ops.unlink(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path);}catch(e){err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message);}},readlink:function(path){var lookup=FS.lookupPath(path);var link=lookup.node;if(!link){throw new FS.ErrnoError(44)}if(!link.node_ops.readlink){throw new FS.ErrnoError(28)}return PATH_FS.resolve(FS.getPath(link.parent),link.node_ops.readlink(link))},stat:function(path,dontFollow){var lookup=FS.lookupPath(path,{follow:!dontFollow});var node=lookup.node;if(!node){throw new FS.ErrnoError(44)}if(!node.node_ops.getattr){throw new FS.ErrnoError(63)}return node.node_ops.getattr(node)},lstat:function(path){return FS.stat(path,true)},chmod:function(path,mode,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node;}else {node=path;}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{mode:mode&4095|node.mode&~4095,timestamp:Date.now()});},lchmod:function(path,mode){FS.chmod(path,mode,true);},fchmod:function(fd,mode){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}FS.chmod(stream.node,mode);},chown:function(path,uid,gid,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node;}else {node=path;}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{timestamp:Date.now()});},lchown:function(path,uid,gid){FS.chown(path,uid,gid,true);},fchown:function(fd,uid,gid){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}FS.chown(stream.node,uid,gid);},truncate:function(path,len){if(len<0){throw new FS.ErrnoError(28)}var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:true});node=lookup.node;}else {node=path;}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}if(FS.isDir(node.mode)){throw new FS.ErrnoError(31)}if(!FS.isFile(node.mode)){throw new FS.ErrnoError(28)}var errCode=FS.nodePermissions(node,"w");if(errCode){throw new FS.ErrnoError(errCode)}node.node_ops.setattr(node,{size:len,timestamp:Date.now()});},ftruncate:function(fd,len){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(28)}FS.truncate(stream.node,len);},utime:function(path,atime,mtime){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;node.node_ops.setattr(node,{timestamp:Math.max(atime,mtime)});},open:function(path,flags,mode,fd_start,fd_end){if(path===""){throw new FS.ErrnoError(44)}flags=typeof flags==="string"?FS.modeStringToFlags(flags):flags;mode=typeof mode==="undefined"?438:mode;if(flags&64){mode=mode&4095|32768;}else {mode=0;}var node;if(typeof path==="object"){node=path;}else {path=PATH.normalize(path);try{var lookup=FS.lookupPath(path,{follow:!(flags&131072)});node=lookup.node;}catch(e){}}var created=false;if(flags&64){if(node){if(flags&128){throw new FS.ErrnoError(20)}}else {node=FS.mknod(path,mode,0);created=true;}}if(!node){throw new FS.ErrnoError(44)}if(FS.isChrdev(node.mode)){flags&=~512;}if(flags&65536&&!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}if(!created){var errCode=FS.mayOpen(node,flags);if(errCode){throw new FS.ErrnoError(errCode)}}if(flags&512){FS.truncate(node,0);}flags&=~(128|512|131072);var stream=FS.createStream({node:node,path:FS.getPath(node),flags:flags,seekable:true,position:0,stream_ops:node.stream_ops,ungotten:[],error:false},fd_start,fd_end);if(stream.stream_ops.open){stream.stream_ops.open(stream);}if(Module["logReadFiles"]&&!(flags&1)){if(!FS.readFiles)FS.readFiles={};if(!(path in FS.readFiles)){FS.readFiles[path]=1;err("FS.trackingDelegate error on read file: "+path);}}try{if(FS.trackingDelegate["onOpenFile"]){var trackingFlags=0;if((flags&2097155)!==1){trackingFlags|=FS.tracking.openFlags.READ;}if((flags&2097155)!==0){trackingFlags|=FS.tracking.openFlags.WRITE;}FS.trackingDelegate["onOpenFile"](path,trackingFlags);}}catch(e){err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: "+e.message);}return stream},close:function(stream){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(stream.getdents)stream.getdents=null;try{if(stream.stream_ops.close){stream.stream_ops.close(stream);}}catch(e){throw e}finally{FS.closeStream(stream.fd);}stream.fd=null;},isClosed:function(stream){return stream.fd===null},llseek:function(stream,offset,whence){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(!stream.seekable||!stream.stream_ops.llseek){throw new FS.ErrnoError(70)}if(whence!=0&&whence!=1&&whence!=2){throw new FS.ErrnoError(28)}stream.position=stream.stream_ops.llseek(stream,offset,whence);stream.ungotten=[];return stream.position},read:function(stream,buffer,offset,length,position){if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.read){throw new FS.ErrnoError(28)}var seeking=typeof position!=="undefined";if(!seeking){position=stream.position;}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesRead=stream.stream_ops.read(stream,buffer,offset,length,position);if(!seeking)stream.position+=bytesRead;return bytesRead},write:function(stream,buffer,offset,length,position,canOwn){if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.write){throw new FS.ErrnoError(28)}if(stream.seekable&&stream.flags&1024){FS.llseek(stream,0,2);}var seeking=typeof position!=="undefined";if(!seeking){position=stream.position;}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesWritten=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);if(!seeking)stream.position+=bytesWritten;try{if(stream.path&&FS.trackingDelegate["onWriteToFile"])FS.trackingDelegate["onWriteToFile"](stream.path);}catch(e){err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: "+e.message);}return bytesWritten},allocate:function(stream,offset,length){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(offset<0||length<=0){throw new FS.ErrnoError(28)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(!FS.isFile(stream.node.mode)&&!FS.isDir(stream.node.mode)){throw new FS.ErrnoError(43)}if(!stream.stream_ops.allocate){throw new FS.ErrnoError(138)}stream.stream_ops.allocate(stream,offset,length);},mmap:function(stream,buffer,offset,length,position,prot,flags){if((prot&2)!==0&&(flags&2)===0&&(stream.flags&2097155)!==2){throw new FS.ErrnoError(2)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(2)}if(!stream.stream_ops.mmap){throw new FS.ErrnoError(43)}return stream.stream_ops.mmap(stream,buffer,offset,length,position,prot,flags)},msync:function(stream,buffer,offset,length,mmapFlags){if(!stream||!stream.stream_ops.msync){return 0}return stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags)},munmap:function(stream){return 0},ioctl:function(stream,cmd,arg){if(!stream.stream_ops.ioctl){throw new FS.ErrnoError(59)}return stream.stream_ops.ioctl(stream,cmd,arg)},readFile:function(path,opts){opts=opts||{};opts.flags=opts.flags||"r";opts.encoding=opts.encoding||"binary";if(opts.encoding!=="utf8"&&opts.encoding!=="binary"){throw new Error('Invalid encoding type "'+opts.encoding+'"')}var ret;var stream=FS.open(path,opts.flags);var stat=FS.stat(path);var length=stat.size;var buf=new Uint8Array(length);FS.read(stream,buf,0,length,0);if(opts.encoding==="utf8"){ret=UTF8ArrayToString(buf,0);}else if(opts.encoding==="binary"){ret=buf;}FS.close(stream);return ret},writeFile:function(path,data,opts){opts=opts||{};opts.flags=opts.flags||"w";var stream=FS.open(path,opts.flags,opts.mode);if(typeof data==="string"){var buf=new Uint8Array(lengthBytesUTF8(data)+1);var actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(stream,buf,0,actualNumBytes,undefined,opts.canOwn);}else if(ArrayBuffer.isView(data)){FS.write(stream,data,0,data.byteLength,undefined,opts.canOwn);}else {throw new Error("Unsupported data type")}FS.close(stream);},cwd:function(){return FS.currentPath},chdir:function(path){var lookup=FS.lookupPath(path,{follow:true});if(lookup.node===null){throw new FS.ErrnoError(44)}if(!FS.isDir(lookup.node.mode)){throw new FS.ErrnoError(54)}var errCode=FS.nodePermissions(lookup.node,"x");if(errCode){throw new FS.ErrnoError(errCode)}FS.currentPath=lookup.path;},createDefaultDirectories:function(){FS.mkdir("/tmp");FS.mkdir("/home");FS.mkdir("/home/web_user");},createDefaultDevices:function(){FS.mkdir("/dev");FS.registerDevice(FS.makedev(1,3),{read:function(){return 0},write:function(stream,buffer,offset,length,pos){return length}});FS.mkdev("/dev/null",FS.makedev(1,3));TTY.register(FS.makedev(5,0),TTY.default_tty_ops);TTY.register(FS.makedev(6,0),TTY.default_tty1_ops);FS.mkdev("/dev/tty",FS.makedev(5,0));FS.mkdev("/dev/tty1",FS.makedev(6,0));var random_device;if(typeof crypto==="object"&&typeof crypto["getRandomValues"]==="function"){var randomBuffer=new Uint8Array(1);random_device=function(){crypto.getRandomValues(randomBuffer);return randomBuffer[0]};}if(!random_device){random_device=function(){abort("random_device");};}FS.createDevice("/dev","random",random_device);FS.createDevice("/dev","urandom",random_device);FS.mkdir("/dev/shm");FS.mkdir("/dev/shm/tmp");},createSpecialDirectories:function(){FS.mkdir("/proc");FS.mkdir("/proc/self");FS.mkdir("/proc/self/fd");FS.mount({mount:function(){var node=FS.createNode("/proc/self","fd",16384|511,73);node.node_ops={lookup:function(parent,name){var fd=+name;var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);var ret={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:function(){return stream.path}}};ret.parent=ret;return ret}};return node}},{},"/proc/self/fd");},createStandardStreams:function(){if(Module["stdin"]){FS.createDevice("/dev","stdin",Module["stdin"]);}else {FS.symlink("/dev/tty","/dev/stdin");}if(Module["stdout"]){FS.createDevice("/dev","stdout",null,Module["stdout"]);}else {FS.symlink("/dev/tty","/dev/stdout");}if(Module["stderr"]){FS.createDevice("/dev","stderr",null,Module["stderr"]);}else {FS.symlink("/dev/tty1","/dev/stderr");}var stdin=FS.open("/dev/stdin","r");var stdout=FS.open("/dev/stdout","w");var stderr=FS.open("/dev/stderr","w");},ensureErrnoError:function(){if(FS.ErrnoError)return;FS.ErrnoError=function ErrnoError(errno,node){this.node=node;this.setErrno=function(errno){this.errno=errno;};this.setErrno(errno);this.message="FS error";};FS.ErrnoError.prototype=new Error;FS.ErrnoError.prototype.constructor=FS.ErrnoError;[44].forEach(function(code){FS.genericErrors[code]=new FS.ErrnoError(code);FS.genericErrors[code].stack="<generic error, no stack>";});},staticInit:function(){FS.ensureErrnoError();FS.nameTable=new Array(4096);FS.mount(MEMFS,{},"/");FS.createDefaultDirectories();FS.createDefaultDevices();FS.createSpecialDirectories();FS.filesystems={"MEMFS":MEMFS};},init:function(input,output,error){FS.init.initialized=true;FS.ensureErrnoError();Module["stdin"]=input||Module["stdin"];Module["stdout"]=output||Module["stdout"];Module["stderr"]=error||Module["stderr"];FS.createStandardStreams();},quit:function(){FS.init.initialized=false;var fflush=Module["_fflush"];if(fflush)fflush(0);for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];if(!stream){continue}FS.close(stream);}},getMode:function(canRead,canWrite){var mode=0;if(canRead)mode|=292|73;if(canWrite)mode|=146;return mode},joinPath:function(parts,forceRelative){var path=PATH.join.apply(null,parts);if(forceRelative&&path[0]=="/")path=path.substr(1);return path},absolutePath:function(relative,base){return PATH_FS.resolve(base,relative)},standardizePath:function(path){return PATH.normalize(path)},findObject:function(path,dontResolveLastLink){var ret=FS.analyzePath(path,dontResolveLastLink);if(ret.exists){return ret.object}else {setErrNo(ret.error);return null}},analyzePath:function(path,dontResolveLastLink){try{var lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});path=lookup.path;}catch(e){}var ret={isRoot:false,exists:false,error:0,name:null,path:null,object:null,parentExists:false,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:true});ret.parentExists=true;ret.parentPath=lookup.path;ret.parentObject=lookup.node;ret.name=PATH.basename(path);lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});ret.exists=true;ret.path=lookup.path;ret.object=lookup.node;ret.name=lookup.node.name;ret.isRoot=lookup.path==="/";}catch(e){ret.error=e.errno;}return ret},createFolder:function(parent,name,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.mkdir(path,mode)},createPath:function(parent,path,canRead,canWrite){parent=typeof parent==="string"?parent:FS.getPath(parent);var parts=path.split("/").reverse();while(parts.length){var part=parts.pop();if(!part)continue;var current=PATH.join2(parent,part);try{FS.mkdir(current);}catch(e){}parent=current;}return current},createFile:function(parent,name,properties,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.create(path,mode)},createDataFile:function(parent,name,data,canRead,canWrite,canOwn){var path=name?PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name):parent;var mode=FS.getMode(canRead,canWrite);var node=FS.create(path,mode);if(data){if(typeof data==="string"){var arr=new Array(data.length);for(var i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr;}FS.chmod(node,mode|146);var stream=FS.open(node,"w");FS.write(stream,data,0,data.length,0,canOwn);FS.close(stream);FS.chmod(node,mode);}return node},createDevice:function(parent,name,input,output){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(!!input,!!output);if(!FS.createDevice.major)FS.createDevice.major=64;var dev=FS.makedev(FS.createDevice.major++,0);FS.registerDevice(dev,{open:function(stream){stream.seekable=false;},close:function(stream){if(output&&output.buffer&&output.buffer.length){output(10);}},read:function(stream,buffer,offset,length,pos){var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=input();}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result;}if(bytesRead){stream.node.timestamp=Date.now();}return bytesRead},write:function(stream,buffer,offset,length,pos){for(var i=0;i<length;i++){try{output(buffer[offset+i]);}catch(e){throw new FS.ErrnoError(29)}}if(length){stream.node.timestamp=Date.now();}return i}});return FS.mkdev(path,mode,dev)},createLink:function(parent,name,target,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);return FS.symlink(target,path)},forceLoadFile:function(obj){if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return true;var success=true;if(typeof XMLHttpRequest!=="undefined"){throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.")}else if(read_){try{obj.contents=intArrayFromString(read_(obj.url),true);obj.usedBytes=obj.contents.length;}catch(e){success=false;}}else {throw new Error("Cannot load without read() or XMLHttpRequest.")}if(!success)setErrNo(29);return success},createLazyFile:function(parent,name,url,canRead,canWrite){function LazyUint8Array(){this.lengthKnown=false;this.chunks=[];}LazyUint8Array.prototype.get=function LazyUint8Array_get(idx){if(idx>this.length-1||idx<0){return undefined}var chunkOffset=idx%this.chunkSize;var chunkNum=idx/this.chunkSize|0;return this.getter(chunkNum)[chunkOffset]};LazyUint8Array.prototype.setDataGetter=function LazyUint8Array_setDataGetter(getter){this.getter=getter;};LazyUint8Array.prototype.cacheLength=function LazyUint8Array_cacheLength(){var xhr=new XMLHttpRequest;xhr.open("HEAD",url,false);xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);var datalength=Number(xhr.getResponseHeader("Content-length"));var header;var hasByteServing=(header=xhr.getResponseHeader("Accept-Ranges"))&&header==="bytes";var usesGzip=(header=xhr.getResponseHeader("Content-Encoding"))&&header==="gzip";var chunkSize=1024*1024;if(!hasByteServing)chunkSize=datalength;var doXHR=function(from,to){if(from>to)throw new Error("invalid range ("+from+", "+to+") or no bytes requested!");if(to>datalength-1)throw new Error("only "+datalength+" bytes available! programmer error!");var xhr=new XMLHttpRequest;xhr.open("GET",url,false);if(datalength!==chunkSize)xhr.setRequestHeader("Range","bytes="+from+"-"+to);if(typeof Uint8Array!="undefined")xhr.responseType="arraybuffer";if(xhr.overrideMimeType){xhr.overrideMimeType("text/plain; charset=x-user-defined");}xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);if(xhr.response!==undefined){return new Uint8Array(xhr.response||[])}else {return intArrayFromString(xhr.responseText||"",true)}};var lazyArray=this;lazyArray.setDataGetter(function(chunkNum){var start=chunkNum*chunkSize;var end=(chunkNum+1)*chunkSize-1;end=Math.min(end,datalength-1);if(typeof lazyArray.chunks[chunkNum]==="undefined"){lazyArray.chunks[chunkNum]=doXHR(start,end);}if(typeof lazyArray.chunks[chunkNum]==="undefined")throw new Error("doXHR failed!");return lazyArray.chunks[chunkNum]});if(usesGzip||!datalength){chunkSize=datalength=1;datalength=this.getter(0).length;chunkSize=datalength;out("LazyFiles on gzip forces download of the whole file when length is accessed");}this._length=datalength;this._chunkSize=chunkSize;this.lengthKnown=true;};if(typeof XMLHttpRequest!=="undefined"){throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var lazyArray=new LazyUint8Array;var properties={isDevice:false,contents:lazyArray};}else {var properties={isDevice:false,url:url};}var node=FS.createFile(parent,name,properties,canRead,canWrite);if(properties.contents){node.contents=properties.contents;}else if(properties.url){node.contents=null;node.url=properties.url;}Object.defineProperties(node,{usedBytes:{get:function(){return this.contents.length}}});var stream_ops={};var keys=Object.keys(node.stream_ops);keys.forEach(function(key){var fn=node.stream_ops[key];stream_ops[key]=function forceLoadLazyFile(){if(!FS.forceLoadFile(node)){throw new FS.ErrnoError(29)}return fn.apply(null,arguments)};});stream_ops.read=function stream_ops_read(stream,buffer,offset,length,position){if(!FS.forceLoadFile(node)){throw new FS.ErrnoError(29)}var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);if(contents.slice){for(var i=0;i<size;i++){buffer[offset+i]=contents[position+i];}}else {for(var i=0;i<size;i++){buffer[offset+i]=contents.get(position+i);}}return size};node.stream_ops=stream_ops;return node},createPreloadedFile:function(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish){Browser.init();var fullname=name?PATH_FS.resolve(PATH.join2(parent,name)):parent;function processData(byteArray){function finish(byteArray){if(preFinish)preFinish();if(!dontCreateFile){FS.createDataFile(parent,name,byteArray,canRead,canWrite,canOwn);}if(onload)onload();removeRunDependency();}var handled=false;Module["preloadPlugins"].forEach(function(plugin){if(handled)return;if(plugin["canHandle"](fullname)){plugin["handle"](byteArray,fullname,finish,function(){if(onerror)onerror();removeRunDependency();});handled=true;}});if(!handled)finish(byteArray);}addRunDependency();if(typeof url=="string"){Browser.asyncLoad(url,function(byteArray){processData(byteArray);},onerror);}else {processData(url);}},indexedDB:function(){return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB},DB_NAME:function(){return "EM_FS_"+window.location.pathname},DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths,onload,onerror){onload=onload||function(){};onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION);}catch(e){return onerror(e)}openRequest.onupgradeneeded=function openRequest_onupgradeneeded(){out("creating db");var db=openRequest.result;db.createObjectStore(FS.DB_STORE_NAME);};openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;var transaction=db.transaction([FS.DB_STORE_NAME],"readwrite");var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror();}paths.forEach(function(path){var putRequest=files.put(FS.analyzePath(path).object.contents,path);putRequest.onsuccess=function putRequest_onsuccess(){ok++;if(ok+fail==total)finish();};putRequest.onerror=function putRequest_onerror(){fail++;if(ok+fail==total)finish();};});transaction.onerror=onerror;};openRequest.onerror=onerror;},loadFilesFromDB:function(paths,onload,onerror){onload=onload||function(){};onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION);}catch(e){return onerror(e)}openRequest.onupgradeneeded=onerror;openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;try{var transaction=db.transaction([FS.DB_STORE_NAME],"readonly");}catch(e){onerror(e);return}var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror();}paths.forEach(function(path){var getRequest=files.get(path);getRequest.onsuccess=function getRequest_onsuccess(){if(FS.analyzePath(path).exists){FS.unlink(path);}FS.createDataFile(PATH.dirname(path),PATH.basename(path),getRequest.result,true,true,true);ok++;if(ok+fail==total)finish();};getRequest.onerror=function getRequest_onerror(){fail++;if(ok+fail==total)finish();};});transaction.onerror=onerror;};openRequest.onerror=onerror;}};var SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd,path){if(path[0]!=="/"){var dir;if(dirfd===-100){dir=FS.cwd();}else {var dirstream=FS.getStream(dirfd);if(!dirstream)throw new FS.ErrnoError(8);dir=dirstream.path;}path=PATH.join2(dir,path);}return path},doStat:function(func,path,buf){try{var stat=func(path);}catch(e){if(e&&e.node&&PATH.normalize(path)!==PATH.normalize(FS.getPath(e.node))){return -54}throw e}HEAP32[buf>>2]=stat.dev;HEAP32[buf+4>>2]=0;HEAP32[buf+8>>2]=stat.ino;HEAP32[buf+12>>2]=stat.mode;HEAP32[buf+16>>2]=stat.nlink;HEAP32[buf+20>>2]=stat.uid;HEAP32[buf+24>>2]=stat.gid;HEAP32[buf+28>>2]=stat.rdev;HEAP32[buf+32>>2]=0;tempI64=[stat.size>>>0,(tempDouble=stat.size,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+40>>2]=tempI64[0],HEAP32[buf+44>>2]=tempI64[1];HEAP32[buf+48>>2]=4096;HEAP32[buf+52>>2]=stat.blocks;HEAP32[buf+56>>2]=stat.atime.getTime()/1e3|0;HEAP32[buf+60>>2]=0;HEAP32[buf+64>>2]=stat.mtime.getTime()/1e3|0;HEAP32[buf+68>>2]=0;HEAP32[buf+72>>2]=stat.ctime.getTime()/1e3|0;HEAP32[buf+76>>2]=0;tempI64=[stat.ino>>>0,(tempDouble=stat.ino,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+80>>2]=tempI64[0],HEAP32[buf+84>>2]=tempI64[1];return 0},doMsync:function(addr,stream,len,flags,offset){var buffer=HEAPU8.slice(addr,addr+len);FS.msync(stream,buffer,offset,len,flags);},doMkdir:function(path,mode){path=PATH.normalize(path);if(path[path.length-1]==="/")path=path.substr(0,path.length-1);FS.mkdir(path,mode,0);return 0},doMknod:function(path,mode,dev){switch(mode&61440){case 32768:case 8192:case 24576:case 4096:case 49152:break;default:return -28}FS.mknod(path,mode,dev);return 0},doReadlink:function(path,buf,bufsize){if(bufsize<=0)return -28;var ret=FS.readlink(path);var len=Math.min(bufsize,lengthBytesUTF8(ret));var endChar=HEAP8[buf+len];stringToUTF8(ret,buf,bufsize+1);HEAP8[buf+len]=endChar;return len},doAccess:function(path,amode){if(amode&~7){return -28}var node;var lookup=FS.lookupPath(path,{follow:true});node=lookup.node;if(!node){return -44}var perms="";if(amode&4)perms+="r";if(amode&2)perms+="w";if(amode&1)perms+="x";if(perms&&FS.nodePermissions(node,perms)){return -2}return 0},doDup:function(path,flags,suggestFD){var suggest=FS.getStream(suggestFD);if(suggest)FS.close(suggest);return FS.open(path,flags,0,suggestFD,suggestFD).fd},doReadv:function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.read(stream,HEAP8,ptr,len,offset);if(curr<0)return -1;ret+=curr;if(curr<len)break}return ret},doWritev:function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.write(stream,HEAP8,ptr,len,offset);if(curr<0)return -1;ret+=curr;}return ret},varargs:undefined,get:function(){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(ptr){var ret=UTF8ToString(ptr);return ret},getStreamFromFD:function(fd){var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);return stream},get64:function(low,high){return low}};function ___sys_getpid(){return 42}function _abort(){abort();}function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num);}function _emscripten_get_heap_size(){return HEAPU8.length}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){requestedSize=requestedSize>>>0;var oldSize=_emscripten_get_heap_size();var PAGE_MULTIPLE=65536;var maxHeapSize=2147483648;if(requestedSize>maxHeapSize){return false}var minHeapSize=16777216;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(minHeapSize,requestedSize,overGrownHeapSize),PAGE_MULTIPLE));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}var ENV={};function __getExecutableName(){return thisProgram||"./this.program"}function getEnvStrings(){if(!getEnvStrings.strings){var env={"USER":"web_user","LOGNAME":"web_user","PATH":"/","PWD":"/","HOME":"/home/web_user","LANG":(typeof navigator==="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8","_":__getExecutableName()};for(var x in ENV){env[x]=ENV[x];}var strings=[];for(var x in env){strings.push(x+"="+env[x]);}getEnvStrings.strings=strings;}return getEnvStrings.strings}function _environ_get(__environ,environ_buf){var bufSize=0;getEnvStrings().forEach(function(string,i){var ptr=environ_buf+bufSize;HEAP32[__environ+i*4>>2]=ptr;writeAsciiToMemory(string,ptr);bufSize+=string.length+1;});return 0}function _environ_sizes_get(penviron_count,penviron_buf_size){var strings=getEnvStrings();HEAP32[penviron_count>>2]=strings.length;var bufSize=0;strings.forEach(function(string){bufSize+=string.length+1;});HEAP32[penviron_buf_size>>2]=bufSize;return 0}function _fd_close(fd){try{var stream=SYSCALLS.getStreamFromFD(fd);FS.close(stream);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){try{var stream=SYSCALLS.getStreamFromFD(fd);var HIGH_OFFSET=4294967296;var offset=offset_high*HIGH_OFFSET+(offset_low>>>0);var DOUBLE_LIMIT=9007199254740992;if(offset<=-DOUBLE_LIMIT||offset>=DOUBLE_LIMIT){return -61}FS.llseek(stream,offset,whence);tempI64=[stream.position>>>0,(tempDouble=stream.position,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[newOffset>>2]=tempI64[0],HEAP32[newOffset+4>>2]=tempI64[1];if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_write(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doWritev(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _gettimeofday(ptr){var now=Date.now();HEAP32[ptr>>2]=now/1e3|0;HEAP32[ptr+4>>2]=now%1e3*1e3|0;return 0}function readAsmConstArgs(sigPtr,buf){if(!readAsmConstArgs.array){readAsmConstArgs.array=[];}var args=readAsmConstArgs.array;args.length=0;var ch;while(ch=HEAPU8[sigPtr++]){if(ch===100||ch===102){buf=buf+7&~7;args.push(HEAPF64[buf>>3]);buf+=8;}else {buf=buf+3&~3;args.push(HEAP32[buf>>2]);buf+=4;}}return args}var FSNode=function(parent,name,mode,rdev){if(!parent){parent=this;}this.parent=parent;this.mount=parent.mount;this.mounted=null;this.id=FS.nextInode++;this.name=name;this.mode=mode;this.node_ops={};this.stream_ops={};this.rdev=rdev;};var readMode=292|73;var writeMode=146;Object.defineProperties(FSNode.prototype,{read:{get:function(){return (this.mode&readMode)===readMode},set:function(val){val?this.mode|=readMode:this.mode&=~readMode;}},write:{get:function(){return (this.mode&writeMode)===writeMode},set:function(val){val?this.mode|=writeMode:this.mode&=~writeMode;}},isFolder:{get:function(){return FS.isDir(this.mode)}},isDevice:{get:function(){return FS.isChrdev(this.mode)}}});FS.FSNode=FSNode;FS.staticInit();function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}var asmLibraryArg={"j":___sys_getpid,"b":_abort,"a":_emscripten_asm_const_iii,"d":_emscripten_memcpy_big,"e":_emscripten_resize_heap,"f":_environ_get,"g":_environ_sizes_get,"h":_fd_close,"i":_fd_seek,"c":_fd_write,"k":_gettimeofday,"memory":wasmMemory,"table":wasmTable};var asm=createWasm();Module["asm"]=asm;var ___wasm_call_ctors=Module["___wasm_call_ctors"]=function(){return (___wasm_call_ctors=Module["___wasm_call_ctors"]=Module["asm"]["l"]).apply(null,arguments)};var ___em_js__array_bounds_check_error=Module["___em_js__array_bounds_check_error"]=function(){return (___em_js__array_bounds_check_error=Module["___em_js__array_bounds_check_error"]=Module["asm"]["m"]).apply(null,arguments)};var _emscripten_bind_CExpat_CExpat_0=Module["_emscripten_bind_CExpat_CExpat_0"]=function(){return (_emscripten_bind_CExpat_CExpat_0=Module["_emscripten_bind_CExpat_CExpat_0"]=Module["asm"]["n"]).apply(null,arguments)};var _emscripten_bind_CExpat_create_0=Module["_emscripten_bind_CExpat_create_0"]=function(){return (_emscripten_bind_CExpat_create_0=Module["_emscripten_bind_CExpat_create_0"]=Module["asm"]["o"]).apply(null,arguments)};var _emscripten_bind_CExpat_destroy_0=Module["_emscripten_bind_CExpat_destroy_0"]=function(){return (_emscripten_bind_CExpat_destroy_0=Module["_emscripten_bind_CExpat_destroy_0"]=Module["asm"]["p"]).apply(null,arguments)};var _emscripten_bind_CExpat_parse_1=Module["_emscripten_bind_CExpat_parse_1"]=function(){return (_emscripten_bind_CExpat_parse_1=Module["_emscripten_bind_CExpat_parse_1"]=Module["asm"]["q"]).apply(null,arguments)};var _emscripten_bind_CExpat_tag_0=Module["_emscripten_bind_CExpat_tag_0"]=function(){return (_emscripten_bind_CExpat_tag_0=Module["_emscripten_bind_CExpat_tag_0"]=Module["asm"]["r"]).apply(null,arguments)};var _emscripten_bind_CExpat_attrs_0=Module["_emscripten_bind_CExpat_attrs_0"]=function(){return (_emscripten_bind_CExpat_attrs_0=Module["_emscripten_bind_CExpat_attrs_0"]=Module["asm"]["s"]).apply(null,arguments)};var _emscripten_bind_CExpat_content_0=Module["_emscripten_bind_CExpat_content_0"]=function(){return (_emscripten_bind_CExpat_content_0=Module["_emscripten_bind_CExpat_content_0"]=Module["asm"]["t"]).apply(null,arguments)};var _emscripten_bind_CExpat_startElement_0=Module["_emscripten_bind_CExpat_startElement_0"]=function(){return (_emscripten_bind_CExpat_startElement_0=Module["_emscripten_bind_CExpat_startElement_0"]=Module["asm"]["u"]).apply(null,arguments)};var _emscripten_bind_CExpat_endElement_0=Module["_emscripten_bind_CExpat_endElement_0"]=function(){return (_emscripten_bind_CExpat_endElement_0=Module["_emscripten_bind_CExpat_endElement_0"]=Module["asm"]["v"]).apply(null,arguments)};var _emscripten_bind_CExpat_characterData_0=Module["_emscripten_bind_CExpat_characterData_0"]=function(){return (_emscripten_bind_CExpat_characterData_0=Module["_emscripten_bind_CExpat_characterData_0"]=Module["asm"]["w"]).apply(null,arguments)};var _emscripten_bind_CExpat___destroy___0=Module["_emscripten_bind_CExpat___destroy___0"]=function(){return (_emscripten_bind_CExpat___destroy___0=Module["_emscripten_bind_CExpat___destroy___0"]=Module["asm"]["x"]).apply(null,arguments)};var _emscripten_bind_CExpatJS_CExpatJS_0=Module["_emscripten_bind_CExpatJS_CExpatJS_0"]=function(){return (_emscripten_bind_CExpatJS_CExpatJS_0=Module["_emscripten_bind_CExpatJS_CExpatJS_0"]=Module["asm"]["y"]).apply(null,arguments)};var _emscripten_bind_CExpatJS_startElement_0=Module["_emscripten_bind_CExpatJS_startElement_0"]=function(){return (_emscripten_bind_CExpatJS_startElement_0=Module["_emscripten_bind_CExpatJS_startElement_0"]=Module["asm"]["z"]).apply(null,arguments)};var _emscripten_bind_CExpatJS_endElement_0=Module["_emscripten_bind_CExpatJS_endElement_0"]=function(){return (_emscripten_bind_CExpatJS_endElement_0=Module["_emscripten_bind_CExpatJS_endElement_0"]=Module["asm"]["A"]).apply(null,arguments)};var _emscripten_bind_CExpatJS_characterData_0=Module["_emscripten_bind_CExpatJS_characterData_0"]=function(){return (_emscripten_bind_CExpatJS_characterData_0=Module["_emscripten_bind_CExpatJS_characterData_0"]=Module["asm"]["B"]).apply(null,arguments)};var _emscripten_bind_CExpatJS___destroy___0=Module["_emscripten_bind_CExpatJS___destroy___0"]=function(){return (_emscripten_bind_CExpatJS___destroy___0=Module["_emscripten_bind_CExpatJS___destroy___0"]=Module["asm"]["C"]).apply(null,arguments)};var _emscripten_bind_VoidPtr___destroy___0=Module["_emscripten_bind_VoidPtr___destroy___0"]=function(){return (_emscripten_bind_VoidPtr___destroy___0=Module["_emscripten_bind_VoidPtr___destroy___0"]=Module["asm"]["D"]).apply(null,arguments)};var _malloc=Module["_malloc"]=function(){return (_malloc=Module["_malloc"]=Module["asm"]["E"]).apply(null,arguments)};var _free=Module["_free"]=function(){return (_free=Module["_free"]=Module["asm"]["F"]).apply(null,arguments)};var ___errno_location=Module["___errno_location"]=function(){return (___errno_location=Module["___errno_location"]=Module["asm"]["G"]).apply(null,arguments)};var dynCall_vi=Module["dynCall_vi"]=function(){return (dynCall_vi=Module["dynCall_vi"]=Module["asm"]["H"]).apply(null,arguments)};Module["asm"]=asm;var calledRun;dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller;};function run(args){if(runDependencies>0){return}preRun();if(runDependencies>0)return;function doRun(){if(calledRun)return;calledRun=true;Module["calledRun"]=true;if(ABORT)return;initRuntime();preMain();readyPromiseResolve(Module);if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();postRun();}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout(function(){setTimeout(function(){Module["setStatus"]("");},1);doRun();},1);}else {doRun();}}Module["run"]=run;if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()();}}noExitRuntime=true;run();function WrapperObject(){}WrapperObject.prototype=Object.create(WrapperObject.prototype);WrapperObject.prototype.constructor=WrapperObject;WrapperObject.prototype.__class__=WrapperObject;WrapperObject.__cache__={};Module["WrapperObject"]=WrapperObject;function getCache(__class__){return (__class__||WrapperObject).__cache__}Module["getCache"]=getCache;function wrapPointer(ptr,__class__){var cache=getCache(__class__);var ret=cache[ptr];if(ret)return ret;ret=Object.create((__class__||WrapperObject).prototype);ret.ptr=ptr;return cache[ptr]=ret}Module["wrapPointer"]=wrapPointer;function castObject(obj,__class__){return wrapPointer(obj.ptr,__class__)}Module["castObject"]=castObject;Module["NULL"]=wrapPointer(0);function destroy(obj){if(!obj["__destroy__"])throw "Error: Cannot destroy object. (Did you create it yourself?)";obj["__destroy__"]();delete getCache(obj.__class__)[obj.ptr];}Module["destroy"]=destroy;function compare(obj1,obj2){return obj1.ptr===obj2.ptr}Module["compare"]=compare;function getPointer(obj){return obj.ptr}Module["getPointer"]=getPointer;function getClass(obj){return obj.__class__}Module["getClass"]=getClass;var ensureCache={buffer:0,size:0,pos:0,temps:[],needed:0,prepare:function(){if(ensureCache.needed){for(var i=0;i<ensureCache.temps.length;i++){Module["_free"](ensureCache.temps[i]);}ensureCache.temps.length=0;Module["_free"](ensureCache.buffer);ensureCache.buffer=0;ensureCache.size+=ensureCache.needed;ensureCache.needed=0;}if(!ensureCache.buffer){ensureCache.size+=128;ensureCache.buffer=Module["_malloc"](ensureCache.size);assert(ensureCache.buffer);}ensureCache.pos=0;},alloc:function(array,view){assert(ensureCache.buffer);var bytes=view.BYTES_PER_ELEMENT;var len=array.length*bytes;len=len+7&-8;var ret;if(ensureCache.pos+len>=ensureCache.size){assert(len>0);ensureCache.needed+=len;ret=Module["_malloc"](len);ensureCache.temps.push(ret);}else {ret=ensureCache.buffer+ensureCache.pos;ensureCache.pos+=len;}return ret},copy:function(array,view,offset){offset>>>=0;var bytes=view.BYTES_PER_ELEMENT;switch(bytes){case 2:offset>>>=1;break;case 4:offset>>>=2;break;case 8:offset>>>=3;break}for(var i=0;i<array.length;i++){view[offset+i]=array[i];}}};function ensureString(value){if(typeof value==="string"){var intArray=intArrayFromString(value);var offset=ensureCache.alloc(intArray,HEAP8);ensureCache.copy(intArray,HEAP8,offset);return offset}return value}function CExpat(){this.ptr=_emscripten_bind_CExpat_CExpat_0();getCache(CExpat)[this.ptr]=this;}CExpat.prototype=Object.create(WrapperObject.prototype);CExpat.prototype.constructor=CExpat;CExpat.prototype.__class__=CExpat;CExpat.__cache__={};Module["CExpat"]=CExpat;CExpat.prototype["create"]=CExpat.prototype.create=function(){var self=this.ptr;return !!_emscripten_bind_CExpat_create_0(self)};CExpat.prototype["destroy"]=CExpat.prototype.destroy=function(){var self=this.ptr;_emscripten_bind_CExpat_destroy_0(self);};CExpat.prototype["parse"]=CExpat.prototype.parse=function(xml){var self=this.ptr;ensureCache.prepare();if(xml&&typeof xml==="object")xml=xml.ptr;else xml=ensureString(xml);return !!_emscripten_bind_CExpat_parse_1(self,xml)};CExpat.prototype["tag"]=CExpat.prototype.tag=function(){var self=this.ptr;return UTF8ToString(_emscripten_bind_CExpat_tag_0(self))};CExpat.prototype["attrs"]=CExpat.prototype.attrs=function(){var self=this.ptr;return UTF8ToString(_emscripten_bind_CExpat_attrs_0(self))};CExpat.prototype["content"]=CExpat.prototype.content=function(){var self=this.ptr;return UTF8ToString(_emscripten_bind_CExpat_content_0(self))};CExpat.prototype["startElement"]=CExpat.prototype.startElement=function(){var self=this.ptr;_emscripten_bind_CExpat_startElement_0(self);};CExpat.prototype["endElement"]=CExpat.prototype.endElement=function(){var self=this.ptr;_emscripten_bind_CExpat_endElement_0(self);};CExpat.prototype["characterData"]=CExpat.prototype.characterData=function(){var self=this.ptr;_emscripten_bind_CExpat_characterData_0(self);};CExpat.prototype["__destroy__"]=CExpat.prototype.__destroy__=function(){var self=this.ptr;_emscripten_bind_CExpat___destroy___0(self);};function CExpatJS(){this.ptr=_emscripten_bind_CExpatJS_CExpatJS_0();getCache(CExpatJS)[this.ptr]=this;}CExpatJS.prototype=Object.create(CExpat.prototype);CExpatJS.prototype.constructor=CExpatJS;CExpatJS.prototype.__class__=CExpatJS;CExpatJS.__cache__={};Module["CExpatJS"]=CExpatJS;CExpatJS.prototype["startElement"]=CExpatJS.prototype.startElement=function(){var self=this.ptr;_emscripten_bind_CExpatJS_startElement_0(self);};CExpatJS.prototype["endElement"]=CExpatJS.prototype.endElement=function(){var self=this.ptr;_emscripten_bind_CExpatJS_endElement_0(self);};CExpatJS.prototype["characterData"]=CExpatJS.prototype.characterData=function(){var self=this.ptr;_emscripten_bind_CExpatJS_characterData_0(self);};CExpatJS.prototype["__destroy__"]=CExpatJS.prototype.__destroy__=function(){var self=this.ptr;_emscripten_bind_CExpatJS___destroy___0(self);};function VoidPtr(){throw "cannot construct a VoidPtr, no constructor in IDL"}VoidPtr.prototype=Object.create(WrapperObject.prototype);VoidPtr.prototype.constructor=VoidPtr;VoidPtr.prototype.__class__=VoidPtr;VoidPtr.__cache__={};Module["VoidPtr"]=VoidPtr;VoidPtr.prototype["__destroy__"]=VoidPtr.prototype.__destroy__=function(){var self=this.ptr;_emscripten_bind_VoidPtr___destroy___0(self);};


	  return cpp.ready
	}
	);
	})();
	module.exports = cpp;
	});

	var globalNS = new Function("return this;")();
	var _wasmFolder = globalNS.__hpcc_wasmFolder || undefined;
	function wasmFolder(_) {
	    if (_ === void 0)
	        return _wasmFolder;
	    var retVal = _wasmFolder;
	    _wasmFolder = _;
	    return retVal;
	}
	function trimEnd(str, charToRemove) {
	    while (str.charAt(str.length - 1) === charToRemove) {
	        str = str.substring(0, str.length - 1);
	    }
	    return str;
	}
	function trimStart(str, charToRemove) {
	    while (str.charAt(0) === charToRemove) {
	        str = str.substring(1);
	    }
	    return str;
	}
	function loadWasm(_wasmLib, wf) {
	    var wasmLib = _wasmLib.default || _wasmLib;
	    //  Prevent double load ---
	    if (!wasmLib.__hpcc_promise) {
	        wasmLib.__hpcc_promise = new Promise(function (resolve) {
	            wasmLib({
	                locateFile: function (path, prefix) {
	                    return trimEnd(wf || wasmFolder() || prefix || ".", "/") + "/" + trimStart(path, "/");
	                }
	            }).then(function (instance) {
	                //  Not a real promise, remove "then" to prevent infinite loop  ---
	                delete instance.then;
	                resolve(instance);
	            });
	        });
	    }
	    return wasmLib.__hpcc_promise;
	}

	// @ts-ignore
	var StackElement = /** @class */ (function () {
	    function StackElement(tag, attrs) {
	        this.tag = tag;
	        this.attrs = attrs;
	        this._content = "";
	    }
	    Object.defineProperty(StackElement.prototype, "content", {
	        get: function () {
	            return this._content;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    StackElement.prototype.appendContent = function (content) {
	        this._content += content;
	    };
	    return StackElement;
	}());

	var graphvizlib = createCommonjsModule$1(function (module, exports) {
	var cpp = (function() {
	  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
	  
	  return (
	function(cpp) {
	  cpp = cpp || {};

	var Module=typeof cpp!=="undefined"?cpp:{};var readyPromiseResolve;Module["ready"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;});var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key];}}var arguments_=[];var thisProgram="./this.program";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=true;var scriptDirectory="";function locateFile(path){if(Module["locateFile"]){return Module["locateFile"](path,scriptDirectory)}return scriptDirectory+path}var read_,readBinary;{if(document.currentScript){scriptDirectory=document.currentScript.src;}if(_scriptDir){scriptDirectory=_scriptDir;}if(scriptDirectory.indexOf("blob:")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf("/")+1);}else {scriptDirectory="";}{read_=function shell_read(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText};}}var out=Module["print"]||console.log.bind(console);var err=Module["printErr"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key];}}moduleOverrides=null;if(Module["arguments"])arguments_=Module["arguments"];if(Module["thisProgram"])thisProgram=Module["thisProgram"];if(Module["quit"])quit_=Module["quit"];var tempRet0=0;var setTempRet0=function(value){tempRet0=value;};var getTempRet0=function(){return tempRet0};var wasmBinary;if(Module["wasmBinary"])wasmBinary=Module["wasmBinary"];var noExitRuntime;if(Module["noExitRuntime"])noExitRuntime=Module["noExitRuntime"];if(typeof WebAssembly!=="object"){err("no native wasm support detected");}var wasmMemory;var wasmTable=new WebAssembly.Table({"initial":928,"maximum":928+0,"element":"anyfunc"});var ABORT=false;function assert(condition,text){if(!condition){abort("Assertion failed: "+text);}}var UTF8Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf8"):undefined;function UTF8ArrayToString(heap,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heap[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heap.subarray&&UTF8Decoder){return UTF8Decoder.decode(heap.subarray(idx,endPtr))}else {var str="";while(idx<endPtr){var u0=heap[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heap[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heap[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2;}else {u0=(u0&7)<<18|u1<<12|u2<<6|heap[idx++]&63;}if(u0<65536){str+=String.fromCharCode(u0);}else {var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023);}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):""}function stringToUTF8Array(str,heap,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023;}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++]=u;}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++]=192|u>>6;heap[outIdx++]=128|u&63;}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++]=224|u>>12;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63;}else {if(outIdx+3>=endIdx)break;heap[outIdx++]=240|u>>18;heap[outIdx++]=128|u>>12&63;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63;}}heap[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4;}return len}function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer);}function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i);}if(!dontAddNull)HEAP8[buffer>>0]=0;}var WASM_PAGE_SIZE=65536;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple;}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module["HEAP8"]=HEAP8=new Int8Array(buf);Module["HEAP16"]=HEAP16=new Int16Array(buf);Module["HEAP32"]=HEAP32=new Int32Array(buf);Module["HEAPU8"]=HEAPU8=new Uint8Array(buf);Module["HEAPU16"]=HEAPU16=new Uint16Array(buf);Module["HEAPU32"]=HEAPU32=new Uint32Array(buf);Module["HEAPF32"]=HEAPF32=new Float32Array(buf);Module["HEAPF64"]=HEAPF64=new Float64Array(buf);}var DYNAMIC_BASE=5461776,DYNAMICTOP_PTR=218736;var INITIAL_INITIAL_MEMORY=Module["INITIAL_MEMORY"]||16777216;if(Module["wasmMemory"]){wasmMemory=Module["wasmMemory"];}else {wasmMemory=new WebAssembly.Memory({"initial":INITIAL_INITIAL_MEMORY/WASM_PAGE_SIZE,"maximum":2147483648/WASM_PAGE_SIZE});}if(wasmMemory){buffer=wasmMemory.buffer;}INITIAL_INITIAL_MEMORY=buffer.byteLength;updateGlobalBufferAndViews(buffer);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback(Module);continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){Module["dynCall_v"](func);}else {Module["dynCall_vi"](func,callback.arg);}}else {func(callback.arg===undefined?null:callback.arg);}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATPOSTRUN__=[];function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift());}}callRuntimeCallbacks(__ATPRERUN__);}function initRuntime(){if(!Module["noFSInit"]&&!FS.init.initialized)FS.init();TTY.init();callRuntimeCallbacks(__ATINIT__);}function preMain(){FS.ignorePermissions=false;callRuntimeCallbacks(__ATMAIN__);}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift());}}callRuntimeCallbacks(__ATPOSTRUN__);}function addOnPreRun(cb){__ATPRERUN__.unshift(cb);}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb);}var Math_abs=Math.abs;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_min=Math.min;var runDependencies=0;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies);}}function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies);}if(runDependencies==0){if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback();}}}Module["preloadedImages"]={};Module["preloadedAudios"]={};function abort(what){if(Module["onAbort"]){Module["onAbort"](what);}what+="";out(what);err(what);ABORT=true;what="abort("+what+"). Build with -s ASSERTIONS=1 for more info.";throw new WebAssembly.RuntimeError(what)}function hasPrefix(str,prefix){return String.prototype.startsWith?str.startsWith(prefix):str.indexOf(prefix)===0}var dataURIPrefix="data:application/octet-stream;base64,";function isDataURI(filename){return hasPrefix(filename,dataURIPrefix)}var wasmBinaryFile="graphvizlib.wasm";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile);}function getBinary(){try{if(wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(wasmBinaryFile)}else {throw "both async and sync fetching of the wasm failed"}}catch(err){abort(err);}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB)&&typeof fetch==="function"){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){if(!response["ok"]){throw "failed to load wasm binary file at '"+wasmBinaryFile+"'"}return response["arrayBuffer"]()}).catch(function(){return getBinary()})}return new Promise(function(resolve,reject){resolve(getBinary());})}function createWasm(){var info={"a":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module["asm"]=exports;removeRunDependency();}addRunDependency();function receiveInstantiatedSource(output){receiveInstance(output["instance"]);}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err("failed to asynchronously prepare wasm: "+reason);abort(reason);})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming==="function"&&!isDataURI(wasmBinaryFile)&&typeof fetch==="function"){fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiatedSource,function(reason){err("wasm streaming compile failed: "+reason);err("falling back to ArrayBuffer instantiation");instantiateArrayBuffer(receiveInstantiatedSource);})});}else {return instantiateArrayBuffer(receiveInstantiatedSource)}}if(Module["instantiateWasm"]){try{var exports=Module["instantiateWasm"](info,receiveInstance);return exports}catch(e){err("Module.instantiateWasm callback failed with error: "+e);return false}}instantiateAsync();return {}}var tempDouble;var tempI64;var ASM_CONSTS={1186:function($0,$1){var path=UTF8ToString($0);var data=UTF8ToString($1);FS.createPath("/",PATH.dirname(path));FS.writeFile(PATH.join("/",path),data);}};function _emscripten_asm_const_iii(code,sigPtr,argbuf){var args=readAsmConstArgs(sigPtr,argbuf);return ASM_CONSTS[code].apply(null,args)}__ATINIT__.push({func:function(){___wasm_call_ctors();}});function demangle(func){return func}function demangleAll(text){var regex=/\b_Z[\w\d_]+/g;return text.replace(regex,function(x){var y=demangle(x);return x===y?x:y+" ["+x+"]"})}function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error}catch(e){err=e;}if(!err.stack){return "(no stack trace available)"}}return err.stack.toString()}function stackTrace(){var js=jsStackTrace();if(Module["extraStackTrace"])js+="\n"+Module["extraStackTrace"]();return demangleAll(js)}var _emscripten_get_now;_emscripten_get_now=function(){return performance.now()};var _emscripten_get_now_is_monotonic=true;function setErrNo(value){HEAP32[___errno_location()>>2]=value;return value}function _clock_gettime(clk_id,tp){var now;if(clk_id===0){now=Date.now();}else if((clk_id===1||clk_id===4)&&_emscripten_get_now_is_monotonic){now=_emscripten_get_now();}else {setErrNo(28);return -1}HEAP32[tp>>2]=now/1e3|0;HEAP32[tp+4>>2]=now%1e3*1e3*1e3|0;return 0}function ___clock_gettime(a0,a1){return _clock_gettime(a0,a1)}function ___cxa_allocate_exception(size){return _malloc(size)}function ___cxa_throw(ptr,type,destructor){throw ptr}function ___map_file(pathname,size){setErrNo(63);return -1}var PATH={splitPath:function(filename){var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;return splitPathRe.exec(filename).slice(1)},normalizeArray:function(parts,allowAboveRoot){var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==="."){parts.splice(i,1);}else if(last===".."){parts.splice(i,1);up++;}else if(up){parts.splice(i,1);up--;}}if(allowAboveRoot){for(;up;up--){parts.unshift("..");}}return parts},normalize:function(path){var isAbsolute=path.charAt(0)==="/",trailingSlash=path.substr(-1)==="/";path=PATH.normalizeArray(path.split("/").filter(function(p){return !!p}),!isAbsolute).join("/");if(!path&&!isAbsolute){path=".";}if(path&&trailingSlash){path+="/";}return (isAbsolute?"/":"")+path},dirname:function(path){var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return "."}if(dir){dir=dir.substr(0,dir.length-1);}return root+dir},basename:function(path){if(path==="/")return "/";var lastSlash=path.lastIndexOf("/");if(lastSlash===-1)return path;return path.substr(lastSlash+1)},extname:function(path){return PATH.splitPath(path)[3]},join:function(){var paths=Array.prototype.slice.call(arguments,0);return PATH.normalize(paths.join("/"))},join2:function(l,r){return PATH.normalize(l+"/"+r)}};var PATH_FS={resolve:function(){var resolvedPath="",resolvedAbsolute=false;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:FS.cwd();if(typeof path!=="string"){throw new TypeError("Arguments to path.resolve must be strings")}else if(!path){return ""}resolvedPath=path+"/"+resolvedPath;resolvedAbsolute=path.charAt(0)==="/";}resolvedPath=PATH.normalizeArray(resolvedPath.split("/").filter(function(p){return !!p}),!resolvedAbsolute).join("/");return (resolvedAbsolute?"/":"")+resolvedPath||"."},relative:function(from,to){from=PATH_FS.resolve(from).substr(1);to=PATH_FS.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!=="")break}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!=="")break}if(start>end)return [];return arr.slice(start,end-start+1)}var fromParts=trim(from.split("/"));var toParts=trim(to.split("/"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push("..");}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join("/")}};var TTY={ttys:[],init:function(){},shutdown:function(){},register:function(dev,ops){TTY.ttys[dev]={input:[],output:[],ops:ops};FS.registerDevice(dev,TTY.stream_ops);},stream_ops:{open:function(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty){throw new FS.ErrnoError(43)}stream.tty=tty;stream.seekable=false;},close:function(stream){stream.tty.ops.flush(stream.tty);},flush:function(stream){stream.tty.ops.flush(stream.tty);},read:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char){throw new FS.ErrnoError(60)}var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=stream.tty.ops.get_char(stream.tty);}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result;}if(bytesRead){stream.node.timestamp=Date.now();}return bytesRead},write:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char){throw new FS.ErrnoError(60)}try{for(var i=0;i<length;i++){stream.tty.ops.put_char(stream.tty,buffer[offset+i]);}}catch(e){throw new FS.ErrnoError(29)}if(length){stream.node.timestamp=Date.now();}return i}},default_tty_ops:{get_char:function(tty){if(!tty.input.length){var result=null;if(typeof window!="undefined"&&typeof window.prompt=="function"){result=window.prompt("Input: ");if(result!==null){result+="\n";}}else if(typeof readline=="function"){result=readline();if(result!==null){result+="\n";}}if(!result){return null}tty.input=intArrayFromString(result,true);}return tty.input.shift()},put_char:function(tty,val){if(val===null||val===10){out(UTF8ArrayToString(tty.output,0));tty.output=[];}else {if(val!=0)tty.output.push(val);}},flush:function(tty){if(tty.output&&tty.output.length>0){out(UTF8ArrayToString(tty.output,0));tty.output=[];}}},default_tty1_ops:{put_char:function(tty,val){if(val===null||val===10){err(UTF8ArrayToString(tty.output,0));tty.output=[];}else {if(val!=0)tty.output.push(val);}},flush:function(tty){if(tty.output&&tty.output.length>0){err(UTF8ArrayToString(tty.output,0));tty.output=[];}}}};var MEMFS={ops_table:null,mount:function(mount){return MEMFS.createNode(null,"/",16384|511,0)},createNode:function(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode)){throw new FS.ErrnoError(63)}if(!MEMFS.ops_table){MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}};}var node=FS.createNode(parent,name,mode,dev);if(FS.isDir(node.mode)){node.node_ops=MEMFS.ops_table.dir.node;node.stream_ops=MEMFS.ops_table.dir.stream;node.contents={};}else if(FS.isFile(node.mode)){node.node_ops=MEMFS.ops_table.file.node;node.stream_ops=MEMFS.ops_table.file.stream;node.usedBytes=0;node.contents=null;}else if(FS.isLink(node.mode)){node.node_ops=MEMFS.ops_table.link.node;node.stream_ops=MEMFS.ops_table.link.stream;}else if(FS.isChrdev(node.mode)){node.node_ops=MEMFS.ops_table.chrdev.node;node.stream_ops=MEMFS.ops_table.chrdev.stream;}node.timestamp=Date.now();if(parent){parent.contents[name]=node;}return node},getFileDataAsRegularArray:function(node){if(node.contents&&node.contents.subarray){var arr=[];for(var i=0;i<node.usedBytes;++i)arr.push(node.contents[i]);return arr}return node.contents},getFileDataAsTypedArray:function(node){if(!node.contents)return new Uint8Array(0);if(node.contents.subarray)return node.contents.subarray(0,node.usedBytes);return new Uint8Array(node.contents)},expandFileStorage:function(node,newCapacity){var prevCapacity=node.contents?node.contents.length:0;if(prevCapacity>=newCapacity)return;var CAPACITY_DOUBLING_MAX=1024*1024;newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<CAPACITY_DOUBLING_MAX?2:1.125)>>>0);if(prevCapacity!=0)newCapacity=Math.max(newCapacity,256);var oldContents=node.contents;node.contents=new Uint8Array(newCapacity);if(node.usedBytes>0)node.contents.set(oldContents.subarray(0,node.usedBytes),0);return},resizeFileStorage:function(node,newSize){if(node.usedBytes==newSize)return;if(newSize==0){node.contents=null;node.usedBytes=0;return}if(!node.contents||node.contents.subarray){var oldContents=node.contents;node.contents=new Uint8Array(newSize);if(oldContents){node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes)));}node.usedBytes=newSize;return}if(!node.contents)node.contents=[];if(node.contents.length>newSize)node.contents.length=newSize;else while(node.contents.length<newSize)node.contents.push(0);node.usedBytes=newSize;},node_ops:{getattr:function(node){var attr={};attr.dev=FS.isChrdev(node.mode)?node.id:1;attr.ino=node.id;attr.mode=node.mode;attr.nlink=1;attr.uid=0;attr.gid=0;attr.rdev=node.rdev;if(FS.isDir(node.mode)){attr.size=4096;}else if(FS.isFile(node.mode)){attr.size=node.usedBytes;}else if(FS.isLink(node.mode)){attr.size=node.link.length;}else {attr.size=0;}attr.atime=new Date(node.timestamp);attr.mtime=new Date(node.timestamp);attr.ctime=new Date(node.timestamp);attr.blksize=4096;attr.blocks=Math.ceil(attr.size/attr.blksize);return attr},setattr:function(node,attr){if(attr.mode!==undefined){node.mode=attr.mode;}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp;}if(attr.size!==undefined){MEMFS.resizeFileStorage(node,attr.size);}},lookup:function(parent,name){throw FS.genericErrors[44]},mknod:function(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev)},rename:function(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name);}catch(e){}if(new_node){for(var i in new_node.contents){throw new FS.ErrnoError(55)}}}delete old_node.parent.contents[old_node.name];old_node.name=new_name;new_dir.contents[new_name]=old_node;old_node.parent=new_dir;},unlink:function(parent,name){delete parent.contents[name];},rmdir:function(parent,name){var node=FS.lookupNode(parent,name);for(var i in node.contents){throw new FS.ErrnoError(55)}delete parent.contents[name];},readdir:function(node){var entries=[".",".."];for(var key in node.contents){if(!node.contents.hasOwnProperty(key)){continue}entries.push(key);}return entries},symlink:function(parent,newname,oldpath){var node=MEMFS.createNode(parent,newname,511|40960,0);node.link=oldpath;return node},readlink:function(node){if(!FS.isLink(node.mode)){throw new FS.ErrnoError(28)}return node.link}},stream_ops:{read:function(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);if(size>8&&contents.subarray){buffer.set(contents.subarray(position,position+size),offset);}else {for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i];}return size},write:function(stream,buffer,offset,length,position,canOwn){if(buffer.buffer===HEAP8.buffer){canOwn=false;}if(!length)return 0;var node=stream.node;node.timestamp=Date.now();if(buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn){node.contents=buffer.subarray(offset,offset+length);node.usedBytes=length;return length}else if(node.usedBytes===0&&position===0){node.contents=buffer.slice(offset,offset+length);node.usedBytes=length;return length}else if(position+length<=node.usedBytes){node.contents.set(buffer.subarray(offset,offset+length),position);return length}}MEMFS.expandFileStorage(node,position+length);if(node.contents.subarray&&buffer.subarray)node.contents.set(buffer.subarray(offset,offset+length),position);else {for(var i=0;i<length;i++){node.contents[position+i]=buffer[offset+i];}}node.usedBytes=Math.max(node.usedBytes,position+length);return length},llseek:function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position;}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.usedBytes;}}if(position<0){throw new FS.ErrnoError(28)}return position},allocate:function(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length);stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length);},mmap:function(stream,buffer,offset,length,position,prot,flags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}var ptr;var allocated;var contents=stream.node.contents;if(!(flags&2)&&contents.buffer===buffer.buffer){allocated=false;ptr=contents.byteOffset;}else {if(position>0||position+length<contents.length){if(contents.subarray){contents=contents.subarray(position,position+length);}else {contents=Array.prototype.slice.call(contents,position,position+length);}}allocated=true;var fromHeap=buffer.buffer==HEAP8.buffer;ptr=_malloc(length);if(!ptr){throw new FS.ErrnoError(48)}(fromHeap?HEAP8:buffer).set(contents,ptr);}return {ptr:ptr,allocated:allocated}},msync:function(stream,buffer,offset,length,mmapFlags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}if(mmapFlags&2){return 0}var bytesWritten=MEMFS.stream_ops.write(stream,buffer,0,length,offset,false);return 0}}};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e){if(!(e instanceof FS.ErrnoError))throw e+" : "+stackTrace();return setErrNo(e.errno)},lookupPath:function(path,opts){path=PATH_FS.resolve(FS.cwd(),path);opts=opts||{};if(!path)return {path:"",node:null};var defaults={follow_mount:true,recurse_count:0};for(var key in defaults){if(opts[key]===undefined){opts[key]=defaults[key];}}if(opts.recurse_count>8){throw new FS.ErrnoError(32)}var parts=PATH.normalizeArray(path.split("/").filter(function(p){return !!p}),false);var current=FS.root;var current_path="/";for(var i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent){break}current=FS.lookupNode(current,parts[i]);current_path=PATH.join2(current_path,parts[i]);if(FS.isMountpoint(current)){if(!islast||islast&&opts.follow_mount){current=current.mounted.root;}}if(!islast||opts.follow){var count=0;while(FS.isLink(current.mode)){var link=FS.readlink(current_path);current_path=PATH_FS.resolve(PATH.dirname(current_path),link);var lookup=FS.lookupPath(current_path,{recurse_count:opts.recurse_count});current=lookup.node;if(count++>40){throw new FS.ErrnoError(32)}}}}return {path:current_path,node:current}},getPath:function(node){var path;while(true){if(FS.isRoot(node)){var mount=node.mount.mountpoint;if(!path)return mount;return mount[mount.length-1]!=="/"?mount+"/"+path:mount+path}path=path?node.name+"/"+path:node.name;node=node.parent;}},hashName:function(parentid,name){var hash=0;for(var i=0;i<name.length;i++){hash=(hash<<5)-hash+name.charCodeAt(i)|0;}return (parentid+hash>>>0)%FS.nameTable.length},hashAddNode:function(node){var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash];FS.nameTable[hash]=node;},hashRemoveNode:function(node){var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node){FS.nameTable[hash]=node.name_next;}else {var current=FS.nameTable[hash];while(current){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next;}}},lookupNode:function(parent,name){var errCode=FS.mayLookup(parent);if(errCode){throw new FS.ErrnoError(errCode,parent)}var hash=FS.hashName(parent.id,name);for(var node=FS.nameTable[hash];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name){return node}}return FS.lookup(parent,name)},createNode:function(parent,name,mode,rdev){var node=new FS.FSNode(parent,name,mode,rdev);FS.hashAddNode(node);return node},destroyNode:function(node){FS.hashRemoveNode(node);},isRoot:function(node){return node===node.parent},isMountpoint:function(node){return !!node.mounted},isFile:function(mode){return (mode&61440)===32768},isDir:function(mode){return (mode&61440)===16384},isLink:function(mode){return (mode&61440)===40960},isChrdev:function(mode){return (mode&61440)===8192},isBlkdev:function(mode){return (mode&61440)===24576},isFIFO:function(mode){return (mode&61440)===4096},isSocket:function(mode){return (mode&49152)===49152},flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str){var flags=FS.flagModes[str];if(typeof flags==="undefined"){throw new Error("Unknown file open mode: "+str)}return flags},flagsToPermissionString:function(flag){var perms=["r","w","rw"][flag&3];if(flag&512){perms+="w";}return perms},nodePermissions:function(node,perms){if(FS.ignorePermissions){return 0}if(perms.indexOf("r")!==-1&&!(node.mode&292)){return 2}else if(perms.indexOf("w")!==-1&&!(node.mode&146)){return 2}else if(perms.indexOf("x")!==-1&&!(node.mode&73)){return 2}return 0},mayLookup:function(dir){var errCode=FS.nodePermissions(dir,"x");if(errCode)return errCode;if(!dir.node_ops.lookup)return 2;return 0},mayCreate:function(dir,name){try{var node=FS.lookupNode(dir,name);return 20}catch(e){}return FS.nodePermissions(dir,"wx")},mayDelete:function(dir,name,isdir){var node;try{node=FS.lookupNode(dir,name);}catch(e){return e.errno}var errCode=FS.nodePermissions(dir,"wx");if(errCode){return errCode}if(isdir){if(!FS.isDir(node.mode)){return 54}if(FS.isRoot(node)||FS.getPath(node)===FS.cwd()){return 10}}else {if(FS.isDir(node.mode)){return 31}}return 0},mayOpen:function(node,flags){if(!node){return 44}if(FS.isLink(node.mode)){return 32}else if(FS.isDir(node.mode)){if(FS.flagsToPermissionString(flags)!=="r"||flags&512){return 31}}return FS.nodePermissions(node,FS.flagsToPermissionString(flags))},MAX_OPEN_FDS:4096,nextfd:function(fd_start,fd_end){fd_start=fd_start||0;fd_end=fd_end||FS.MAX_OPEN_FDS;for(var fd=fd_start;fd<=fd_end;fd++){if(!FS.streams[fd]){return fd}}throw new FS.ErrnoError(33)},getStream:function(fd){return FS.streams[fd]},createStream:function(stream,fd_start,fd_end){if(!FS.FSStream){FS.FSStream=function(){};FS.FSStream.prototype={object:{get:function(){return this.node},set:function(val){this.node=val;}},isRead:{get:function(){return (this.flags&2097155)!==1}},isWrite:{get:function(){return (this.flags&2097155)!==0}},isAppend:{get:function(){return this.flags&1024}}};}var newStream=new FS.FSStream;for(var p in stream){newStream[p]=stream[p];}stream=newStream;var fd=FS.nextfd(fd_start,fd_end);stream.fd=fd;FS.streams[fd]=stream;return stream},closeStream:function(fd){FS.streams[fd]=null;},chrdev_stream_ops:{open:function(stream){var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops;if(stream.stream_ops.open){stream.stream_ops.open(stream);}},llseek:function(){throw new FS.ErrnoError(70)}},major:function(dev){return dev>>8},minor:function(dev){return dev&255},makedev:function(ma,mi){return ma<<8|mi},registerDevice:function(dev,ops){FS.devices[dev]={stream_ops:ops};},getDevice:function(dev){return FS.devices[dev]},getMounts:function(mount){var mounts=[];var check=[mount];while(check.length){var m=check.pop();mounts.push(m);check.push.apply(check,m.mounts);}return mounts},syncfs:function(populate,callback){if(typeof populate==="function"){callback=populate;populate=false;}FS.syncFSRequests++;if(FS.syncFSRequests>1){err("warning: "+FS.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work");}var mounts=FS.getMounts(FS.root.mount);var completed=0;function doCallback(errCode){FS.syncFSRequests--;return callback(errCode)}function done(errCode){if(errCode){if(!done.errored){done.errored=true;return doCallback(errCode)}return}if(++completed>=mounts.length){doCallback(null);}}mounts.forEach(function(mount){if(!mount.type.syncfs){return done(null)}mount.type.syncfs(mount,populate,done);});},mount:function(type,opts,mountpoint){var root=mountpoint==="/";var pseudo=!mountpoint;var node;if(root&&FS.root){throw new FS.ErrnoError(10)}else if(!root&&!pseudo){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});mountpoint=lookup.path;node=lookup.node;if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}if(!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}}var mount={type:type,opts:opts,mountpoint:mountpoint,mounts:[]};var mountRoot=type.mount(mount);mountRoot.mount=mount;mount.root=mountRoot;if(root){FS.root=mountRoot;}else if(node){node.mounted=mount;if(node.mount){node.mount.mounts.push(mount);}}return mountRoot},unmount:function(mountpoint){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});if(!FS.isMountpoint(lookup.node)){throw new FS.ErrnoError(28)}var node=lookup.node;var mount=node.mounted;var mounts=FS.getMounts(mount);Object.keys(FS.nameTable).forEach(function(hash){var current=FS.nameTable[hash];while(current){var next=current.name_next;if(mounts.indexOf(current.mount)!==-1){FS.destroyNode(current);}current=next;}});node.mounted=null;var idx=node.mount.mounts.indexOf(mount);node.mount.mounts.splice(idx,1);},lookup:function(parent,name){return parent.node_ops.lookup(parent,name)},mknod:function(path,mode,dev){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);if(!name||name==="."||name===".."){throw new FS.ErrnoError(28)}var errCode=FS.mayCreate(parent,name);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.mknod){throw new FS.ErrnoError(63)}return parent.node_ops.mknod(parent,name,mode,dev)},create:function(path,mode){mode=mode!==undefined?mode:438;mode&=4095;mode|=32768;return FS.mknod(path,mode,0)},mkdir:function(path,mode){mode=mode!==undefined?mode:511;mode&=511|512;mode|=16384;return FS.mknod(path,mode,0)},mkdirTree:function(path,mode){var dirs=path.split("/");var d="";for(var i=0;i<dirs.length;++i){if(!dirs[i])continue;d+="/"+dirs[i];try{FS.mkdir(d,mode);}catch(e){if(e.errno!=20)throw e}}},mkdev:function(path,mode,dev){if(typeof dev==="undefined"){dev=mode;mode=438;}mode|=8192;return FS.mknod(path,mode,dev)},symlink:function(oldpath,newpath){if(!PATH_FS.resolve(oldpath)){throw new FS.ErrnoError(44)}var lookup=FS.lookupPath(newpath,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(44)}var newname=PATH.basename(newpath);var errCode=FS.mayCreate(parent,newname);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.symlink){throw new FS.ErrnoError(63)}return parent.node_ops.symlink(parent,newname,oldpath)},rename:function(old_path,new_path){var old_dirname=PATH.dirname(old_path);var new_dirname=PATH.dirname(new_path);var old_name=PATH.basename(old_path);var new_name=PATH.basename(new_path);var lookup,old_dir,new_dir;try{lookup=FS.lookupPath(old_path,{parent:true});old_dir=lookup.node;lookup=FS.lookupPath(new_path,{parent:true});new_dir=lookup.node;}catch(e){throw new FS.ErrnoError(10)}if(!old_dir||!new_dir)throw new FS.ErrnoError(44);if(old_dir.mount!==new_dir.mount){throw new FS.ErrnoError(75)}var old_node=FS.lookupNode(old_dir,old_name);var relative=PATH_FS.relative(old_path,new_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(28)}relative=PATH_FS.relative(new_path,old_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(55)}var new_node;try{new_node=FS.lookupNode(new_dir,new_name);}catch(e){}if(old_node===new_node){return}var isdir=FS.isDir(old_node.mode);var errCode=FS.mayDelete(old_dir,old_name,isdir);if(errCode){throw new FS.ErrnoError(errCode)}errCode=new_node?FS.mayDelete(new_dir,new_name,isdir):FS.mayCreate(new_dir,new_name);if(errCode){throw new FS.ErrnoError(errCode)}if(!old_dir.node_ops.rename){throw new FS.ErrnoError(63)}if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node)){throw new FS.ErrnoError(10)}if(new_dir!==old_dir){errCode=FS.nodePermissions(old_dir,"w");if(errCode){throw new FS.ErrnoError(errCode)}}try{if(FS.trackingDelegate["willMovePath"]){FS.trackingDelegate["willMovePath"](old_path,new_path);}}catch(e){err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message);}FS.hashRemoveNode(old_node);try{old_dir.node_ops.rename(old_node,new_dir,new_name);}catch(e){throw e}finally{FS.hashAddNode(old_node);}try{if(FS.trackingDelegate["onMovePath"])FS.trackingDelegate["onMovePath"](old_path,new_path);}catch(e){err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message);}},rmdir:function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,true);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.rmdir){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path);}}catch(e){err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message);}parent.node_ops.rmdir(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path);}catch(e){err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message);}},readdir:function(path){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node.node_ops.readdir){throw new FS.ErrnoError(54)}return node.node_ops.readdir(node)},unlink:function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,false);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.unlink){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path);}}catch(e){err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message);}parent.node_ops.unlink(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path);}catch(e){err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message);}},readlink:function(path){var lookup=FS.lookupPath(path);var link=lookup.node;if(!link){throw new FS.ErrnoError(44)}if(!link.node_ops.readlink){throw new FS.ErrnoError(28)}return PATH_FS.resolve(FS.getPath(link.parent),link.node_ops.readlink(link))},stat:function(path,dontFollow){var lookup=FS.lookupPath(path,{follow:!dontFollow});var node=lookup.node;if(!node){throw new FS.ErrnoError(44)}if(!node.node_ops.getattr){throw new FS.ErrnoError(63)}return node.node_ops.getattr(node)},lstat:function(path){return FS.stat(path,true)},chmod:function(path,mode,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node;}else {node=path;}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{mode:mode&4095|node.mode&~4095,timestamp:Date.now()});},lchmod:function(path,mode){FS.chmod(path,mode,true);},fchmod:function(fd,mode){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}FS.chmod(stream.node,mode);},chown:function(path,uid,gid,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node;}else {node=path;}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{timestamp:Date.now()});},lchown:function(path,uid,gid){FS.chown(path,uid,gid,true);},fchown:function(fd,uid,gid){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}FS.chown(stream.node,uid,gid);},truncate:function(path,len){if(len<0){throw new FS.ErrnoError(28)}var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:true});node=lookup.node;}else {node=path;}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}if(FS.isDir(node.mode)){throw new FS.ErrnoError(31)}if(!FS.isFile(node.mode)){throw new FS.ErrnoError(28)}var errCode=FS.nodePermissions(node,"w");if(errCode){throw new FS.ErrnoError(errCode)}node.node_ops.setattr(node,{size:len,timestamp:Date.now()});},ftruncate:function(fd,len){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(28)}FS.truncate(stream.node,len);},utime:function(path,atime,mtime){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;node.node_ops.setattr(node,{timestamp:Math.max(atime,mtime)});},open:function(path,flags,mode,fd_start,fd_end){if(path===""){throw new FS.ErrnoError(44)}flags=typeof flags==="string"?FS.modeStringToFlags(flags):flags;mode=typeof mode==="undefined"?438:mode;if(flags&64){mode=mode&4095|32768;}else {mode=0;}var node;if(typeof path==="object"){node=path;}else {path=PATH.normalize(path);try{var lookup=FS.lookupPath(path,{follow:!(flags&131072)});node=lookup.node;}catch(e){}}var created=false;if(flags&64){if(node){if(flags&128){throw new FS.ErrnoError(20)}}else {node=FS.mknod(path,mode,0);created=true;}}if(!node){throw new FS.ErrnoError(44)}if(FS.isChrdev(node.mode)){flags&=~512;}if(flags&65536&&!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}if(!created){var errCode=FS.mayOpen(node,flags);if(errCode){throw new FS.ErrnoError(errCode)}}if(flags&512){FS.truncate(node,0);}flags&=~(128|512|131072);var stream=FS.createStream({node:node,path:FS.getPath(node),flags:flags,seekable:true,position:0,stream_ops:node.stream_ops,ungotten:[],error:false},fd_start,fd_end);if(stream.stream_ops.open){stream.stream_ops.open(stream);}if(Module["logReadFiles"]&&!(flags&1)){if(!FS.readFiles)FS.readFiles={};if(!(path in FS.readFiles)){FS.readFiles[path]=1;err("FS.trackingDelegate error on read file: "+path);}}try{if(FS.trackingDelegate["onOpenFile"]){var trackingFlags=0;if((flags&2097155)!==1){trackingFlags|=FS.tracking.openFlags.READ;}if((flags&2097155)!==0){trackingFlags|=FS.tracking.openFlags.WRITE;}FS.trackingDelegate["onOpenFile"](path,trackingFlags);}}catch(e){err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: "+e.message);}return stream},close:function(stream){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(stream.getdents)stream.getdents=null;try{if(stream.stream_ops.close){stream.stream_ops.close(stream);}}catch(e){throw e}finally{FS.closeStream(stream.fd);}stream.fd=null;},isClosed:function(stream){return stream.fd===null},llseek:function(stream,offset,whence){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(!stream.seekable||!stream.stream_ops.llseek){throw new FS.ErrnoError(70)}if(whence!=0&&whence!=1&&whence!=2){throw new FS.ErrnoError(28)}stream.position=stream.stream_ops.llseek(stream,offset,whence);stream.ungotten=[];return stream.position},read:function(stream,buffer,offset,length,position){if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.read){throw new FS.ErrnoError(28)}var seeking=typeof position!=="undefined";if(!seeking){position=stream.position;}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesRead=stream.stream_ops.read(stream,buffer,offset,length,position);if(!seeking)stream.position+=bytesRead;return bytesRead},write:function(stream,buffer,offset,length,position,canOwn){if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.write){throw new FS.ErrnoError(28)}if(stream.seekable&&stream.flags&1024){FS.llseek(stream,0,2);}var seeking=typeof position!=="undefined";if(!seeking){position=stream.position;}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesWritten=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);if(!seeking)stream.position+=bytesWritten;try{if(stream.path&&FS.trackingDelegate["onWriteToFile"])FS.trackingDelegate["onWriteToFile"](stream.path);}catch(e){err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: "+e.message);}return bytesWritten},allocate:function(stream,offset,length){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(offset<0||length<=0){throw new FS.ErrnoError(28)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(!FS.isFile(stream.node.mode)&&!FS.isDir(stream.node.mode)){throw new FS.ErrnoError(43)}if(!stream.stream_ops.allocate){throw new FS.ErrnoError(138)}stream.stream_ops.allocate(stream,offset,length);},mmap:function(stream,buffer,offset,length,position,prot,flags){if((prot&2)!==0&&(flags&2)===0&&(stream.flags&2097155)!==2){throw new FS.ErrnoError(2)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(2)}if(!stream.stream_ops.mmap){throw new FS.ErrnoError(43)}return stream.stream_ops.mmap(stream,buffer,offset,length,position,prot,flags)},msync:function(stream,buffer,offset,length,mmapFlags){if(!stream||!stream.stream_ops.msync){return 0}return stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags)},munmap:function(stream){return 0},ioctl:function(stream,cmd,arg){if(!stream.stream_ops.ioctl){throw new FS.ErrnoError(59)}return stream.stream_ops.ioctl(stream,cmd,arg)},readFile:function(path,opts){opts=opts||{};opts.flags=opts.flags||"r";opts.encoding=opts.encoding||"binary";if(opts.encoding!=="utf8"&&opts.encoding!=="binary"){throw new Error('Invalid encoding type "'+opts.encoding+'"')}var ret;var stream=FS.open(path,opts.flags);var stat=FS.stat(path);var length=stat.size;var buf=new Uint8Array(length);FS.read(stream,buf,0,length,0);if(opts.encoding==="utf8"){ret=UTF8ArrayToString(buf,0);}else if(opts.encoding==="binary"){ret=buf;}FS.close(stream);return ret},writeFile:function(path,data,opts){opts=opts||{};opts.flags=opts.flags||"w";var stream=FS.open(path,opts.flags,opts.mode);if(typeof data==="string"){var buf=new Uint8Array(lengthBytesUTF8(data)+1);var actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(stream,buf,0,actualNumBytes,undefined,opts.canOwn);}else if(ArrayBuffer.isView(data)){FS.write(stream,data,0,data.byteLength,undefined,opts.canOwn);}else {throw new Error("Unsupported data type")}FS.close(stream);},cwd:function(){return FS.currentPath},chdir:function(path){var lookup=FS.lookupPath(path,{follow:true});if(lookup.node===null){throw new FS.ErrnoError(44)}if(!FS.isDir(lookup.node.mode)){throw new FS.ErrnoError(54)}var errCode=FS.nodePermissions(lookup.node,"x");if(errCode){throw new FS.ErrnoError(errCode)}FS.currentPath=lookup.path;},createDefaultDirectories:function(){FS.mkdir("/tmp");FS.mkdir("/home");FS.mkdir("/home/web_user");},createDefaultDevices:function(){FS.mkdir("/dev");FS.registerDevice(FS.makedev(1,3),{read:function(){return 0},write:function(stream,buffer,offset,length,pos){return length}});FS.mkdev("/dev/null",FS.makedev(1,3));TTY.register(FS.makedev(5,0),TTY.default_tty_ops);TTY.register(FS.makedev(6,0),TTY.default_tty1_ops);FS.mkdev("/dev/tty",FS.makedev(5,0));FS.mkdev("/dev/tty1",FS.makedev(6,0));var random_device;if(typeof crypto==="object"&&typeof crypto["getRandomValues"]==="function"){var randomBuffer=new Uint8Array(1);random_device=function(){crypto.getRandomValues(randomBuffer);return randomBuffer[0]};}if(!random_device){random_device=function(){abort("random_device");};}FS.createDevice("/dev","random",random_device);FS.createDevice("/dev","urandom",random_device);FS.mkdir("/dev/shm");FS.mkdir("/dev/shm/tmp");},createSpecialDirectories:function(){FS.mkdir("/proc");FS.mkdir("/proc/self");FS.mkdir("/proc/self/fd");FS.mount({mount:function(){var node=FS.createNode("/proc/self","fd",16384|511,73);node.node_ops={lookup:function(parent,name){var fd=+name;var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);var ret={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:function(){return stream.path}}};ret.parent=ret;return ret}};return node}},{},"/proc/self/fd");},createStandardStreams:function(){if(Module["stdin"]){FS.createDevice("/dev","stdin",Module["stdin"]);}else {FS.symlink("/dev/tty","/dev/stdin");}if(Module["stdout"]){FS.createDevice("/dev","stdout",null,Module["stdout"]);}else {FS.symlink("/dev/tty","/dev/stdout");}if(Module["stderr"]){FS.createDevice("/dev","stderr",null,Module["stderr"]);}else {FS.symlink("/dev/tty1","/dev/stderr");}var stdin=FS.open("/dev/stdin","r");var stdout=FS.open("/dev/stdout","w");var stderr=FS.open("/dev/stderr","w");},ensureErrnoError:function(){if(FS.ErrnoError)return;FS.ErrnoError=function ErrnoError(errno,node){this.node=node;this.setErrno=function(errno){this.errno=errno;};this.setErrno(errno);this.message="FS error";};FS.ErrnoError.prototype=new Error;FS.ErrnoError.prototype.constructor=FS.ErrnoError;[44].forEach(function(code){FS.genericErrors[code]=new FS.ErrnoError(code);FS.genericErrors[code].stack="<generic error, no stack>";});},staticInit:function(){FS.ensureErrnoError();FS.nameTable=new Array(4096);FS.mount(MEMFS,{},"/");FS.createDefaultDirectories();FS.createDefaultDevices();FS.createSpecialDirectories();FS.filesystems={"MEMFS":MEMFS};},init:function(input,output,error){FS.init.initialized=true;FS.ensureErrnoError();Module["stdin"]=input||Module["stdin"];Module["stdout"]=output||Module["stdout"];Module["stderr"]=error||Module["stderr"];FS.createStandardStreams();},quit:function(){FS.init.initialized=false;var fflush=Module["_fflush"];if(fflush)fflush(0);for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];if(!stream){continue}FS.close(stream);}},getMode:function(canRead,canWrite){var mode=0;if(canRead)mode|=292|73;if(canWrite)mode|=146;return mode},joinPath:function(parts,forceRelative){var path=PATH.join.apply(null,parts);if(forceRelative&&path[0]=="/")path=path.substr(1);return path},absolutePath:function(relative,base){return PATH_FS.resolve(base,relative)},standardizePath:function(path){return PATH.normalize(path)},findObject:function(path,dontResolveLastLink){var ret=FS.analyzePath(path,dontResolveLastLink);if(ret.exists){return ret.object}else {setErrNo(ret.error);return null}},analyzePath:function(path,dontResolveLastLink){try{var lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});path=lookup.path;}catch(e){}var ret={isRoot:false,exists:false,error:0,name:null,path:null,object:null,parentExists:false,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:true});ret.parentExists=true;ret.parentPath=lookup.path;ret.parentObject=lookup.node;ret.name=PATH.basename(path);lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});ret.exists=true;ret.path=lookup.path;ret.object=lookup.node;ret.name=lookup.node.name;ret.isRoot=lookup.path==="/";}catch(e){ret.error=e.errno;}return ret},createFolder:function(parent,name,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.mkdir(path,mode)},createPath:function(parent,path,canRead,canWrite){parent=typeof parent==="string"?parent:FS.getPath(parent);var parts=path.split("/").reverse();while(parts.length){var part=parts.pop();if(!part)continue;var current=PATH.join2(parent,part);try{FS.mkdir(current);}catch(e){}parent=current;}return current},createFile:function(parent,name,properties,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.create(path,mode)},createDataFile:function(parent,name,data,canRead,canWrite,canOwn){var path=name?PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name):parent;var mode=FS.getMode(canRead,canWrite);var node=FS.create(path,mode);if(data){if(typeof data==="string"){var arr=new Array(data.length);for(var i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr;}FS.chmod(node,mode|146);var stream=FS.open(node,"w");FS.write(stream,data,0,data.length,0,canOwn);FS.close(stream);FS.chmod(node,mode);}return node},createDevice:function(parent,name,input,output){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(!!input,!!output);if(!FS.createDevice.major)FS.createDevice.major=64;var dev=FS.makedev(FS.createDevice.major++,0);FS.registerDevice(dev,{open:function(stream){stream.seekable=false;},close:function(stream){if(output&&output.buffer&&output.buffer.length){output(10);}},read:function(stream,buffer,offset,length,pos){var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=input();}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result;}if(bytesRead){stream.node.timestamp=Date.now();}return bytesRead},write:function(stream,buffer,offset,length,pos){for(var i=0;i<length;i++){try{output(buffer[offset+i]);}catch(e){throw new FS.ErrnoError(29)}}if(length){stream.node.timestamp=Date.now();}return i}});return FS.mkdev(path,mode,dev)},createLink:function(parent,name,target,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);return FS.symlink(target,path)},forceLoadFile:function(obj){if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return true;var success=true;if(typeof XMLHttpRequest!=="undefined"){throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.")}else if(read_){try{obj.contents=intArrayFromString(read_(obj.url),true);obj.usedBytes=obj.contents.length;}catch(e){success=false;}}else {throw new Error("Cannot load without read() or XMLHttpRequest.")}if(!success)setErrNo(29);return success},createLazyFile:function(parent,name,url,canRead,canWrite){function LazyUint8Array(){this.lengthKnown=false;this.chunks=[];}LazyUint8Array.prototype.get=function LazyUint8Array_get(idx){if(idx>this.length-1||idx<0){return undefined}var chunkOffset=idx%this.chunkSize;var chunkNum=idx/this.chunkSize|0;return this.getter(chunkNum)[chunkOffset]};LazyUint8Array.prototype.setDataGetter=function LazyUint8Array_setDataGetter(getter){this.getter=getter;};LazyUint8Array.prototype.cacheLength=function LazyUint8Array_cacheLength(){var xhr=new XMLHttpRequest;xhr.open("HEAD",url,false);xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);var datalength=Number(xhr.getResponseHeader("Content-length"));var header;var hasByteServing=(header=xhr.getResponseHeader("Accept-Ranges"))&&header==="bytes";var usesGzip=(header=xhr.getResponseHeader("Content-Encoding"))&&header==="gzip";var chunkSize=1024*1024;if(!hasByteServing)chunkSize=datalength;var doXHR=function(from,to){if(from>to)throw new Error("invalid range ("+from+", "+to+") or no bytes requested!");if(to>datalength-1)throw new Error("only "+datalength+" bytes available! programmer error!");var xhr=new XMLHttpRequest;xhr.open("GET",url,false);if(datalength!==chunkSize)xhr.setRequestHeader("Range","bytes="+from+"-"+to);if(typeof Uint8Array!="undefined")xhr.responseType="arraybuffer";if(xhr.overrideMimeType){xhr.overrideMimeType("text/plain; charset=x-user-defined");}xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);if(xhr.response!==undefined){return new Uint8Array(xhr.response||[])}else {return intArrayFromString(xhr.responseText||"",true)}};var lazyArray=this;lazyArray.setDataGetter(function(chunkNum){var start=chunkNum*chunkSize;var end=(chunkNum+1)*chunkSize-1;end=Math.min(end,datalength-1);if(typeof lazyArray.chunks[chunkNum]==="undefined"){lazyArray.chunks[chunkNum]=doXHR(start,end);}if(typeof lazyArray.chunks[chunkNum]==="undefined")throw new Error("doXHR failed!");return lazyArray.chunks[chunkNum]});if(usesGzip||!datalength){chunkSize=datalength=1;datalength=this.getter(0).length;chunkSize=datalength;out("LazyFiles on gzip forces download of the whole file when length is accessed");}this._length=datalength;this._chunkSize=chunkSize;this.lengthKnown=true;};if(typeof XMLHttpRequest!=="undefined"){throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var lazyArray=new LazyUint8Array;var properties={isDevice:false,contents:lazyArray};}else {var properties={isDevice:false,url:url};}var node=FS.createFile(parent,name,properties,canRead,canWrite);if(properties.contents){node.contents=properties.contents;}else if(properties.url){node.contents=null;node.url=properties.url;}Object.defineProperties(node,{usedBytes:{get:function(){return this.contents.length}}});var stream_ops={};var keys=Object.keys(node.stream_ops);keys.forEach(function(key){var fn=node.stream_ops[key];stream_ops[key]=function forceLoadLazyFile(){if(!FS.forceLoadFile(node)){throw new FS.ErrnoError(29)}return fn.apply(null,arguments)};});stream_ops.read=function stream_ops_read(stream,buffer,offset,length,position){if(!FS.forceLoadFile(node)){throw new FS.ErrnoError(29)}var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);if(contents.slice){for(var i=0;i<size;i++){buffer[offset+i]=contents[position+i];}}else {for(var i=0;i<size;i++){buffer[offset+i]=contents.get(position+i);}}return size};node.stream_ops=stream_ops;return node},createPreloadedFile:function(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish){Browser.init();var fullname=name?PATH_FS.resolve(PATH.join2(parent,name)):parent;function processData(byteArray){function finish(byteArray){if(preFinish)preFinish();if(!dontCreateFile){FS.createDataFile(parent,name,byteArray,canRead,canWrite,canOwn);}if(onload)onload();removeRunDependency();}var handled=false;Module["preloadPlugins"].forEach(function(plugin){if(handled)return;if(plugin["canHandle"](fullname)){plugin["handle"](byteArray,fullname,finish,function(){if(onerror)onerror();removeRunDependency();});handled=true;}});if(!handled)finish(byteArray);}addRunDependency();if(typeof url=="string"){Browser.asyncLoad(url,function(byteArray){processData(byteArray);},onerror);}else {processData(url);}},indexedDB:function(){return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB},DB_NAME:function(){return "EM_FS_"+window.location.pathname},DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths,onload,onerror){onload=onload||function(){};onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION);}catch(e){return onerror(e)}openRequest.onupgradeneeded=function openRequest_onupgradeneeded(){out("creating db");var db=openRequest.result;db.createObjectStore(FS.DB_STORE_NAME);};openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;var transaction=db.transaction([FS.DB_STORE_NAME],"readwrite");var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror();}paths.forEach(function(path){var putRequest=files.put(FS.analyzePath(path).object.contents,path);putRequest.onsuccess=function putRequest_onsuccess(){ok++;if(ok+fail==total)finish();};putRequest.onerror=function putRequest_onerror(){fail++;if(ok+fail==total)finish();};});transaction.onerror=onerror;};openRequest.onerror=onerror;},loadFilesFromDB:function(paths,onload,onerror){onload=onload||function(){};onerror=onerror||function(){};var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION);}catch(e){return onerror(e)}openRequest.onupgradeneeded=onerror;openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;try{var transaction=db.transaction([FS.DB_STORE_NAME],"readonly");}catch(e){onerror(e);return}var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror();}paths.forEach(function(path){var getRequest=files.get(path);getRequest.onsuccess=function getRequest_onsuccess(){if(FS.analyzePath(path).exists){FS.unlink(path);}FS.createDataFile(PATH.dirname(path),PATH.basename(path),getRequest.result,true,true,true);ok++;if(ok+fail==total)finish();};getRequest.onerror=function getRequest_onerror(){fail++;if(ok+fail==total)finish();};});transaction.onerror=onerror;};openRequest.onerror=onerror;}};var SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd,path){if(path[0]!=="/"){var dir;if(dirfd===-100){dir=FS.cwd();}else {var dirstream=FS.getStream(dirfd);if(!dirstream)throw new FS.ErrnoError(8);dir=dirstream.path;}path=PATH.join2(dir,path);}return path},doStat:function(func,path,buf){try{var stat=func(path);}catch(e){if(e&&e.node&&PATH.normalize(path)!==PATH.normalize(FS.getPath(e.node))){return -54}throw e}HEAP32[buf>>2]=stat.dev;HEAP32[buf+4>>2]=0;HEAP32[buf+8>>2]=stat.ino;HEAP32[buf+12>>2]=stat.mode;HEAP32[buf+16>>2]=stat.nlink;HEAP32[buf+20>>2]=stat.uid;HEAP32[buf+24>>2]=stat.gid;HEAP32[buf+28>>2]=stat.rdev;HEAP32[buf+32>>2]=0;tempI64=[stat.size>>>0,(tempDouble=stat.size,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+40>>2]=tempI64[0],HEAP32[buf+44>>2]=tempI64[1];HEAP32[buf+48>>2]=4096;HEAP32[buf+52>>2]=stat.blocks;HEAP32[buf+56>>2]=stat.atime.getTime()/1e3|0;HEAP32[buf+60>>2]=0;HEAP32[buf+64>>2]=stat.mtime.getTime()/1e3|0;HEAP32[buf+68>>2]=0;HEAP32[buf+72>>2]=stat.ctime.getTime()/1e3|0;HEAP32[buf+76>>2]=0;tempI64=[stat.ino>>>0,(tempDouble=stat.ino,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+80>>2]=tempI64[0],HEAP32[buf+84>>2]=tempI64[1];return 0},doMsync:function(addr,stream,len,flags,offset){var buffer=HEAPU8.slice(addr,addr+len);FS.msync(stream,buffer,offset,len,flags);},doMkdir:function(path,mode){path=PATH.normalize(path);if(path[path.length-1]==="/")path=path.substr(0,path.length-1);FS.mkdir(path,mode,0);return 0},doMknod:function(path,mode,dev){switch(mode&61440){case 32768:case 8192:case 24576:case 4096:case 49152:break;default:return -28}FS.mknod(path,mode,dev);return 0},doReadlink:function(path,buf,bufsize){if(bufsize<=0)return -28;var ret=FS.readlink(path);var len=Math.min(bufsize,lengthBytesUTF8(ret));var endChar=HEAP8[buf+len];stringToUTF8(ret,buf,bufsize+1);HEAP8[buf+len]=endChar;return len},doAccess:function(path,amode){if(amode&~7){return -28}var node;var lookup=FS.lookupPath(path,{follow:true});node=lookup.node;if(!node){return -44}var perms="";if(amode&4)perms+="r";if(amode&2)perms+="w";if(amode&1)perms+="x";if(perms&&FS.nodePermissions(node,perms)){return -2}return 0},doDup:function(path,flags,suggestFD){var suggest=FS.getStream(suggestFD);if(suggest)FS.close(suggest);return FS.open(path,flags,0,suggestFD,suggestFD).fd},doReadv:function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.read(stream,HEAP8,ptr,len,offset);if(curr<0)return -1;ret+=curr;if(curr<len)break}return ret},doWritev:function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.write(stream,HEAP8,ptr,len,offset);if(curr<0)return -1;ret+=curr;}return ret},varargs:undefined,get:function(){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(ptr){var ret=UTF8ToString(ptr);return ret},getStreamFromFD:function(fd){var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);return stream},get64:function(low,high){return low}};function ___sys_access(path,amode){try{path=SYSCALLS.getStr(path);return SYSCALLS.doAccess(path,amode)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return -e.errno}}function ___sys_fcntl64(fd,cmd,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(cmd){case 0:{var arg=SYSCALLS.get();if(arg<0){return -28}var newStream;newStream=FS.open(stream.path,stream.flags,0,arg);return newStream.fd}case 1:case 2:return 0;case 3:return stream.flags;case 4:{var arg=SYSCALLS.get();stream.flags|=arg;return 0}case 12:{var arg=SYSCALLS.get();var offset=0;HEAP16[arg+offset>>1]=2;return 0}case 13:case 14:return 0;case 16:case 8:return -28;case 9:setErrNo(28);return -1;default:{return -28}}}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return -e.errno}}function ___sys_fstat64(fd,buf){try{var stream=SYSCALLS.getStreamFromFD(fd);return SYSCALLS.doStat(FS.stat,stream.path,buf)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return -e.errno}}function ___sys_getpid(){return 42}function ___sys_ioctl(fd,op,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(op){case 21509:case 21505:{if(!stream.tty)return -59;return 0}case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:{if(!stream.tty)return -59;return 0}case 21519:{if(!stream.tty)return -59;var argp=SYSCALLS.get();HEAP32[argp>>2]=0;return 0}case 21520:{if(!stream.tty)return -59;return -28}case 21531:{var argp=SYSCALLS.get();return FS.ioctl(stream,op,argp)}case 21523:{if(!stream.tty)return -59;return 0}case 21524:{if(!stream.tty)return -59;return 0}default:abort("bad ioctl syscall "+op);}}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return -e.errno}}function syscallMmap2(addr,len,prot,flags,fd,off){off<<=12;var ptr;var allocated=false;if((flags&16)!==0&&addr%16384!==0){return -28}if((flags&32)!==0){ptr=_memalign(16384,len);if(!ptr)return -48;_memset(ptr,0,len);allocated=true;}else {var info=FS.getStream(fd);if(!info)return -8;var res=FS.mmap(info,HEAPU8,addr,len,off,prot,flags);ptr=res.ptr;allocated=res.allocated;}SYSCALLS.mappings[ptr]={malloc:ptr,len:len,allocated:allocated,fd:fd,prot:prot,flags:flags,offset:off};return ptr}function ___sys_mmap2(addr,len,prot,flags,fd,off){try{return syscallMmap2(addr,len,prot,flags,fd,off)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return -e.errno}}function syscallMunmap(addr,len){if((addr|0)===-1||len===0){return -28}var info=SYSCALLS.mappings[addr];if(!info)return 0;if(len===info.len){var stream=FS.getStream(info.fd);if(info.prot&2){SYSCALLS.doMsync(addr,stream,len,info.flags,info.offset);}FS.munmap(stream);SYSCALLS.mappings[addr]=null;if(info.allocated){_free(info.malloc);}}return 0}function ___sys_munmap(addr,len){try{return syscallMunmap(addr,len)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return -e.errno}}function ___sys_open(path,flags,varargs){SYSCALLS.varargs=varargs;try{var pathname=SYSCALLS.getStr(path);var mode=SYSCALLS.get();var stream=FS.open(pathname,flags,mode);return stream.fd}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return -e.errno}}function ___sys_stat64(path,buf){try{path=SYSCALLS.getStr(path);return SYSCALLS.doStat(FS.stat,path,buf)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return -e.errno}}function ___sys_unlink(path){try{path=SYSCALLS.getStr(path);FS.unlink(path);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return -e.errno}}function _abort(){abort();}var setjmpId=0;function _saveSetjmp(env,label,table,size){env=env|0;label=label|0;table=table|0;size=size|0;var i=0;setjmpId=setjmpId+1|0;HEAP32[env>>2]=setjmpId;while((i|0)<(size|0)){if((HEAP32[table+(i<<3)>>2]|0)==0){HEAP32[table+(i<<3)>>2]=setjmpId;HEAP32[table+((i<<3)+4)>>2]=label;HEAP32[table+((i<<3)+8)>>2]=0;setTempRet0(size|0);return table|0}i=i+1|0;}size=size*2|0;table=_realloc(table|0,8*(size+1|0)|0)|0;table=_saveSetjmp(env|0,label|0,table|0,size|0)|0;setTempRet0(size|0);return table|0}function _testSetjmp(id,table,size){id=id|0;table=table|0;size=size|0;var i=0,curr=0;while((i|0)<(size|0)){curr=HEAP32[table+(i<<3)>>2]|0;if((curr|0)==0)break;if((curr|0)==(id|0)){return HEAP32[table+((i<<3)+4)>>2]|0}i=i+1|0;}return 0}function _longjmp(env,value){_setThrew(env,value||1);throw "longjmp"}function _emscripten_longjmp(env,value){_longjmp(env,value);}function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num);}function _emscripten_get_heap_size(){return HEAPU8.length}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){requestedSize=requestedSize>>>0;var oldSize=_emscripten_get_heap_size();var PAGE_MULTIPLE=65536;var maxHeapSize=2147483648;if(requestedSize>maxHeapSize){return false}var minHeapSize=16777216;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(minHeapSize,requestedSize,overGrownHeapSize),PAGE_MULTIPLE));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}var ENV={};function __getExecutableName(){return thisProgram||"./this.program"}function getEnvStrings(){if(!getEnvStrings.strings){var env={"USER":"web_user","LOGNAME":"web_user","PATH":"/","PWD":"/","HOME":"/home/web_user","LANG":(typeof navigator==="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8","_":__getExecutableName()};for(var x in ENV){env[x]=ENV[x];}var strings=[];for(var x in env){strings.push(x+"="+env[x]);}getEnvStrings.strings=strings;}return getEnvStrings.strings}function _environ_get(__environ,environ_buf){var bufSize=0;getEnvStrings().forEach(function(string,i){var ptr=environ_buf+bufSize;HEAP32[__environ+i*4>>2]=ptr;writeAsciiToMemory(string,ptr);bufSize+=string.length+1;});return 0}function _environ_sizes_get(penviron_count,penviron_buf_size){var strings=getEnvStrings();HEAP32[penviron_count>>2]=strings.length;var bufSize=0;strings.forEach(function(string){bufSize+=string.length+1;});HEAP32[penviron_buf_size>>2]=bufSize;return 0}function _exit(status){exit(status);}function _fd_close(fd){try{var stream=SYSCALLS.getStreamFromFD(fd);FS.close(stream);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_fdstat_get(fd,pbuf){try{var stream=SYSCALLS.getStreamFromFD(fd);var type=stream.tty?2:FS.isDir(stream.mode)?3:FS.isLink(stream.mode)?7:4;HEAP8[pbuf>>0]=type;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_read(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doReadv(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){try{var stream=SYSCALLS.getStreamFromFD(fd);var HIGH_OFFSET=4294967296;var offset=offset_high*HIGH_OFFSET+(offset_low>>>0);var DOUBLE_LIMIT=9007199254740992;if(offset<=-DOUBLE_LIMIT||offset>=DOUBLE_LIMIT){return -61}FS.llseek(stream,offset,whence);tempI64=[stream.position>>>0,(tempDouble=stream.position,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[newOffset>>2]=tempI64[0],HEAP32[newOffset+4>>2]=tempI64[1];if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _fd_write(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doWritev(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return e.errno}}function _getTempRet0(){return getTempRet0()|0}function _gettimeofday(ptr){var now=Date.now();HEAP32[ptr>>2]=now/1e3|0;HEAP32[ptr+4>>2]=now%1e3*1e3|0;return 0}function _setTempRet0($i){setTempRet0($i|0);}function __isLeapYear(year){return year%4===0&&(year%100!==0||year%400===0)}function __arraySum(array,index){var sum=0;for(var i=0;i<=index;sum+=array[i++]){}return sum}var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date,days){var newDate=new Date(date.getTime());while(days>0){var leap=__isLeapYear(newDate.getFullYear());var currentMonth=newDate.getMonth();var daysInCurrentMonth=(leap?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR)[currentMonth];if(days>daysInCurrentMonth-newDate.getDate()){days-=daysInCurrentMonth-newDate.getDate()+1;newDate.setDate(1);if(currentMonth<11){newDate.setMonth(currentMonth+1);}else {newDate.setMonth(0);newDate.setFullYear(newDate.getFullYear()+1);}}else {newDate.setDate(newDate.getDate()+days);return newDate}}return newDate}function _strftime(s,maxsize,format,tm){var tm_zone=HEAP32[tm+40>>2];var date={tm_sec:HEAP32[tm>>2],tm_min:HEAP32[tm+4>>2],tm_hour:HEAP32[tm+8>>2],tm_mday:HEAP32[tm+12>>2],tm_mon:HEAP32[tm+16>>2],tm_year:HEAP32[tm+20>>2],tm_wday:HEAP32[tm+24>>2],tm_yday:HEAP32[tm+28>>2],tm_isdst:HEAP32[tm+32>>2],tm_gmtoff:HEAP32[tm+36>>2],tm_zone:tm_zone?UTF8ToString(tm_zone):""};var pattern=UTF8ToString(format);var EXPANSION_RULES_1={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var rule in EXPANSION_RULES_1){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_1[rule]);}var WEEKDAYS=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];var MONTHS=["January","February","March","April","May","June","July","August","September","October","November","December"];function leadingSomething(value,digits,character){var str=typeof value==="number"?value.toString():value||"";while(str.length<digits){str=character[0]+str;}return str}function leadingNulls(value,digits){return leadingSomething(value,digits,"0")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:value>0?1:0}var compare;if((compare=sgn(date1.getFullYear()-date2.getFullYear()))===0){if((compare=sgn(date1.getMonth()-date2.getMonth()))===0){compare=sgn(date1.getDate()-date2.getDate());}}return compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date){var thisDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);var janFourthThisYear=new Date(thisDate.getFullYear(),0,4);var janFourthNextYear=new Date(thisDate.getFullYear()+1,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);if(compareByDay(firstWeekStartThisYear,thisDate)<=0){if(compareByDay(firstWeekStartNextYear,thisDate)<=0){return thisDate.getFullYear()+1}else {return thisDate.getFullYear()}}else {return thisDate.getFullYear()-1}}var EXPANSION_RULES_2={"%a":function(date){return WEEKDAYS[date.tm_wday].substring(0,3)},"%A":function(date){return WEEKDAYS[date.tm_wday]},"%b":function(date){return MONTHS[date.tm_mon].substring(0,3)},"%B":function(date){return MONTHS[date.tm_mon]},"%C":function(date){var year=date.tm_year+1900;return leadingNulls(year/100|0,2)},"%d":function(date){return leadingNulls(date.tm_mday,2)},"%e":function(date){return leadingSomething(date.tm_mday,2," ")},"%g":function(date){return getWeekBasedYear(date).toString().substring(2)},"%G":function(date){return getWeekBasedYear(date)},"%H":function(date){return leadingNulls(date.tm_hour,2)},"%I":function(date){var twelveHour=date.tm_hour;if(twelveHour==0)twelveHour=12;else if(twelveHour>12)twelveHour-=12;return leadingNulls(twelveHour,2)},"%j":function(date){return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900)?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,date.tm_mon-1),3)},"%m":function(date){return leadingNulls(date.tm_mon+1,2)},"%M":function(date){return leadingNulls(date.tm_min,2)},"%n":function(){return "\n"},"%p":function(date){if(date.tm_hour>=0&&date.tm_hour<12){return "AM"}else {return "PM"}},"%S":function(date){return leadingNulls(date.tm_sec,2)},"%t":function(){return "\t"},"%u":function(date){return date.tm_wday||7},"%U":function(date){var janFirst=new Date(date.tm_year+1900,0,1);var firstSunday=janFirst.getDay()===0?janFirst:__addDays(janFirst,7-janFirst.getDay());var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstSunday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstSundayUntilEndJanuary=31-firstSunday.getDate();var days=firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstSunday,janFirst)===0?"01":"00"},"%V":function(date){var janFourthThisYear=new Date(date.tm_year+1900,0,4);var janFourthNextYear=new Date(date.tm_year+1901,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);var endDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);if(compareByDay(endDate,firstWeekStartThisYear)<0){return "53"}if(compareByDay(firstWeekStartNextYear,endDate)<=0){return "01"}var daysDifference;if(firstWeekStartThisYear.getFullYear()<date.tm_year+1900){daysDifference=date.tm_yday+32-firstWeekStartThisYear.getDate();}else {daysDifference=date.tm_yday+1-firstWeekStartThisYear.getDate();}return leadingNulls(Math.ceil(daysDifference/7),2)},"%w":function(date){return date.tm_wday},"%W":function(date){var janFirst=new Date(date.tm_year,0,1);var firstMonday=janFirst.getDay()===1?janFirst:__addDays(janFirst,janFirst.getDay()===0?1:7-janFirst.getDay()+1);var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstMonday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstMondayUntilEndJanuary=31-firstMonday.getDate();var days=firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstMonday,janFirst)===0?"01":"00"},"%y":function(date){return (date.tm_year+1900).toString().substring(2)},"%Y":function(date){return date.tm_year+1900},"%z":function(date){var off=date.tm_gmtoff;var ahead=off>=0;off=Math.abs(off)/60;off=off/60*100+off%60;return (ahead?"+":"-")+String("0000"+off).slice(-4)},"%Z":function(date){return date.tm_zone},"%%":function(){return "%"}};for(var rule in EXPANSION_RULES_2){if(pattern.indexOf(rule)>=0){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_2[rule](date));}}var bytes=intArrayFromString(pattern,false);if(bytes.length>maxsize){return 0}writeArrayToMemory(bytes,s);return bytes.length-1}function _strftime_l(s,maxsize,format,tm){return _strftime(s,maxsize,format,tm)}function _time(ptr){var ret=Date.now()/1e3|0;if(ptr){HEAP32[ptr>>2]=ret;}return ret}function _times(buffer){if(buffer!==0){_memset(buffer,0,16);}return 0}function readAsmConstArgs(sigPtr,buf){if(!readAsmConstArgs.array){readAsmConstArgs.array=[];}var args=readAsmConstArgs.array;args.length=0;var ch;while(ch=HEAPU8[sigPtr++]){if(ch===100||ch===102){buf=buf+7&~7;args.push(HEAPF64[buf>>3]);buf+=8;}else {buf=buf+3&~3;args.push(HEAP32[buf>>2]);buf+=4;}}return args}var FSNode=function(parent,name,mode,rdev){if(!parent){parent=this;}this.parent=parent;this.mount=parent.mount;this.mounted=null;this.id=FS.nextInode++;this.name=name;this.mode=mode;this.node_ops={};this.stream_ops={};this.rdev=rdev;};var readMode=292|73;var writeMode=146;Object.defineProperties(FSNode.prototype,{read:{get:function(){return (this.mode&readMode)===readMode},set:function(val){val?this.mode|=readMode:this.mode&=~readMode;}},write:{get:function(){return (this.mode&writeMode)===writeMode},set:function(val){val?this.mode|=writeMode:this.mode&=~writeMode;}},isFolder:{get:function(){return FS.isDir(this.mode)}},isDevice:{get:function(){return FS.isChrdev(this.mode)}}});FS.FSNode=FSNode;FS.staticInit();function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}var asmLibraryArg={"L":___clock_gettime,"k":___cxa_allocate_exception,"j":___cxa_throw,"J":___map_file,"Q":___sys_access,"x":___sys_fcntl64,"S":___sys_fstat64,"p":___sys_getpid,"N":___sys_ioctl,"O":___sys_mmap2,"P":___sys_munmap,"y":___sys_open,"R":___sys_stat64,"K":___sys_unlink,"v":_abort,"B":_emscripten_asm_const_iii,"d":_emscripten_longjmp,"D":_emscripten_memcpy_big,"E":_emscripten_resize_heap,"H":_environ_get,"I":_environ_sizes_get,"l":_exit,"o":_fd_close,"G":_fd_fdstat_get,"M":_fd_read,"C":_fd_seek,"w":_fd_write,"a":_getTempRet0,"V":_gettimeofday,"W":invoke_d,"T":invoke_di,"u":invoke_i,"f":invoke_ii,"e":invoke_iii,"g":invoke_iiii,"m":invoke_iiiii,"U":invoke_iiiiiii,"r":invoke_v,"h":invoke_vi,"n":invoke_vii,"t":invoke_viii,"s":invoke_viiii,"q":invoke_viiiii,"memory":wasmMemory,"i":_saveSetjmp,"b":_setTempRet0,"F":_strftime_l,"table":wasmTable,"c":_testSetjmp,"z":_time,"A":_times};var asm=createWasm();Module["asm"]=asm;var ___wasm_call_ctors=Module["___wasm_call_ctors"]=function(){return (___wasm_call_ctors=Module["___wasm_call_ctors"]=Module["asm"]["X"]).apply(null,arguments)};var ___em_js__array_bounds_check_error=Module["___em_js__array_bounds_check_error"]=function(){return (___em_js__array_bounds_check_error=Module["___em_js__array_bounds_check_error"]=Module["asm"]["Y"]).apply(null,arguments)};var _emscripten_bind_VoidPtr___destroy___0=Module["_emscripten_bind_VoidPtr___destroy___0"]=function(){return (_emscripten_bind_VoidPtr___destroy___0=Module["_emscripten_bind_VoidPtr___destroy___0"]=Module["asm"]["Z"]).apply(null,arguments)};var _emscripten_bind_Main_layout_3=Module["_emscripten_bind_Main_layout_3"]=function(){return (_emscripten_bind_Main_layout_3=Module["_emscripten_bind_Main_layout_3"]=Module["asm"]["_"]).apply(null,arguments)};var _emscripten_bind_Main_lastError_0=Module["_emscripten_bind_Main_lastError_0"]=function(){return (_emscripten_bind_Main_lastError_0=Module["_emscripten_bind_Main_lastError_0"]=Module["asm"]["$"]).apply(null,arguments)};var _emscripten_bind_Main_createFile_2=Module["_emscripten_bind_Main_createFile_2"]=function(){return (_emscripten_bind_Main_createFile_2=Module["_emscripten_bind_Main_createFile_2"]=Module["asm"]["aa"]).apply(null,arguments)};var _emscripten_bind_Main___destroy___0=Module["_emscripten_bind_Main___destroy___0"]=function(){return (_emscripten_bind_Main___destroy___0=Module["_emscripten_bind_Main___destroy___0"]=Module["asm"]["ba"]).apply(null,arguments)};var _malloc=Module["_malloc"]=function(){return (_malloc=Module["_malloc"]=Module["asm"]["ca"]).apply(null,arguments)};var _free=Module["_free"]=function(){return (_free=Module["_free"]=Module["asm"]["da"]).apply(null,arguments)};var _realloc=Module["_realloc"]=function(){return (_realloc=Module["_realloc"]=Module["asm"]["ea"]).apply(null,arguments)};var ___errno_location=Module["___errno_location"]=function(){return (___errno_location=Module["___errno_location"]=Module["asm"]["fa"]).apply(null,arguments)};var _memset=Module["_memset"]=function(){return (_memset=Module["_memset"]=Module["asm"]["ga"]).apply(null,arguments)};var _setThrew=Module["_setThrew"]=function(){return (_setThrew=Module["_setThrew"]=Module["asm"]["ha"]).apply(null,arguments)};var _memalign=Module["_memalign"]=function(){return (_memalign=Module["_memalign"]=Module["asm"]["ia"]).apply(null,arguments)};var dynCall_v=Module["dynCall_v"]=function(){return (dynCall_v=Module["dynCall_v"]=Module["asm"]["ja"]).apply(null,arguments)};var dynCall_vi=Module["dynCall_vi"]=function(){return (dynCall_vi=Module["dynCall_vi"]=Module["asm"]["ka"]).apply(null,arguments)};var dynCall_vii=Module["dynCall_vii"]=function(){return (dynCall_vii=Module["dynCall_vii"]=Module["asm"]["la"]).apply(null,arguments)};var dynCall_viii=Module["dynCall_viii"]=function(){return (dynCall_viii=Module["dynCall_viii"]=Module["asm"]["ma"]).apply(null,arguments)};var dynCall_viiii=Module["dynCall_viiii"]=function(){return (dynCall_viiii=Module["dynCall_viiii"]=Module["asm"]["na"]).apply(null,arguments)};var dynCall_viiiii=Module["dynCall_viiiii"]=function(){return (dynCall_viiiii=Module["dynCall_viiiii"]=Module["asm"]["oa"]).apply(null,arguments)};var dynCall_i=Module["dynCall_i"]=function(){return (dynCall_i=Module["dynCall_i"]=Module["asm"]["pa"]).apply(null,arguments)};var dynCall_ii=Module["dynCall_ii"]=function(){return (dynCall_ii=Module["dynCall_ii"]=Module["asm"]["qa"]).apply(null,arguments)};var dynCall_iii=Module["dynCall_iii"]=function(){return (dynCall_iii=Module["dynCall_iii"]=Module["asm"]["ra"]).apply(null,arguments)};var dynCall_iiii=Module["dynCall_iiii"]=function(){return (dynCall_iiii=Module["dynCall_iiii"]=Module["asm"]["sa"]).apply(null,arguments)};var dynCall_iiiii=Module["dynCall_iiiii"]=function(){return (dynCall_iiiii=Module["dynCall_iiiii"]=Module["asm"]["ta"]).apply(null,arguments)};var dynCall_iiiiiii=Module["dynCall_iiiiiii"]=function(){return (dynCall_iiiiiii=Module["dynCall_iiiiiii"]=Module["asm"]["ua"]).apply(null,arguments)};var dynCall_d=Module["dynCall_d"]=function(){return (dynCall_d=Module["dynCall_d"]=Module["asm"]["va"]).apply(null,arguments)};var dynCall_di=Module["dynCall_di"]=function(){return (dynCall_di=Module["dynCall_di"]=Module["asm"]["wa"]).apply(null,arguments)};var stackSave=Module["stackSave"]=function(){return (stackSave=Module["stackSave"]=Module["asm"]["xa"]).apply(null,arguments)};var stackRestore=Module["stackRestore"]=function(){return (stackRestore=Module["stackRestore"]=Module["asm"]["ya"]).apply(null,arguments)};function invoke_ii(index,a1){var sp=stackSave();try{return dynCall_ii(index,a1)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0);}}function invoke_i(index){var sp=stackSave();try{return dynCall_i(index)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0);}}function invoke_iii(index,a1,a2){var sp=stackSave();try{return dynCall_iii(index,a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0);}}function invoke_iiii(index,a1,a2,a3){var sp=stackSave();try{return dynCall_iiii(index,a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0);}}function invoke_vii(index,a1,a2){var sp=stackSave();try{dynCall_vii(index,a1,a2);}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0);}}function invoke_viii(index,a1,a2,a3){var sp=stackSave();try{dynCall_viii(index,a1,a2,a3);}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0);}}function invoke_viiii(index,a1,a2,a3,a4){var sp=stackSave();try{dynCall_viiii(index,a1,a2,a3,a4);}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0);}}function invoke_vi(index,a1){var sp=stackSave();try{dynCall_vi(index,a1);}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0);}}function invoke_v(index){var sp=stackSave();try{dynCall_v(index);}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0);}}function invoke_viiiii(index,a1,a2,a3,a4,a5){var sp=stackSave();try{dynCall_viiiii(index,a1,a2,a3,a4,a5);}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0);}}function invoke_d(index){var sp=stackSave();try{return dynCall_d(index)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0);}}function invoke_iiiii(index,a1,a2,a3,a4){var sp=stackSave();try{return dynCall_iiiii(index,a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0);}}function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0);}}function invoke_di(index,a1){var sp=stackSave();try{return dynCall_di(index,a1)}catch(e){stackRestore(sp);if(e!==e+0&&e!=="longjmp")throw e;_setThrew(1,0);}}Module["asm"]=asm;var calledRun;function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status;}dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller;};function run(args){if(runDependencies>0){return}preRun();if(runDependencies>0)return;function doRun(){if(calledRun)return;calledRun=true;Module["calledRun"]=true;if(ABORT)return;initRuntime();preMain();readyPromiseResolve(Module);if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();postRun();}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout(function(){setTimeout(function(){Module["setStatus"]("");},1);doRun();},1);}else {doRun();}}Module["run"]=run;function exit(status,implicit){if(implicit&&noExitRuntime&&status===0){return}if(noExitRuntime);else {ABORT=true;if(Module["onExit"])Module["onExit"](status);}quit_(status,new ExitStatus(status));}if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()();}}noExitRuntime=true;run();function WrapperObject(){}WrapperObject.prototype=Object.create(WrapperObject.prototype);WrapperObject.prototype.constructor=WrapperObject;WrapperObject.prototype.__class__=WrapperObject;WrapperObject.__cache__={};Module["WrapperObject"]=WrapperObject;function getCache(__class__){return (__class__||WrapperObject).__cache__}Module["getCache"]=getCache;function wrapPointer(ptr,__class__){var cache=getCache(__class__);var ret=cache[ptr];if(ret)return ret;ret=Object.create((__class__||WrapperObject).prototype);ret.ptr=ptr;return cache[ptr]=ret}Module["wrapPointer"]=wrapPointer;function castObject(obj,__class__){return wrapPointer(obj.ptr,__class__)}Module["castObject"]=castObject;Module["NULL"]=wrapPointer(0);function destroy(obj){if(!obj["__destroy__"])throw "Error: Cannot destroy object. (Did you create it yourself?)";obj["__destroy__"]();delete getCache(obj.__class__)[obj.ptr];}Module["destroy"]=destroy;function compare(obj1,obj2){return obj1.ptr===obj2.ptr}Module["compare"]=compare;function getPointer(obj){return obj.ptr}Module["getPointer"]=getPointer;function getClass(obj){return obj.__class__}Module["getClass"]=getClass;var ensureCache={buffer:0,size:0,pos:0,temps:[],needed:0,prepare:function(){if(ensureCache.needed){for(var i=0;i<ensureCache.temps.length;i++){Module["_free"](ensureCache.temps[i]);}ensureCache.temps.length=0;Module["_free"](ensureCache.buffer);ensureCache.buffer=0;ensureCache.size+=ensureCache.needed;ensureCache.needed=0;}if(!ensureCache.buffer){ensureCache.size+=128;ensureCache.buffer=Module["_malloc"](ensureCache.size);assert(ensureCache.buffer);}ensureCache.pos=0;},alloc:function(array,view){assert(ensureCache.buffer);var bytes=view.BYTES_PER_ELEMENT;var len=array.length*bytes;len=len+7&-8;var ret;if(ensureCache.pos+len>=ensureCache.size){assert(len>0);ensureCache.needed+=len;ret=Module["_malloc"](len);ensureCache.temps.push(ret);}else {ret=ensureCache.buffer+ensureCache.pos;ensureCache.pos+=len;}return ret},copy:function(array,view,offset){offset>>>=0;var bytes=view.BYTES_PER_ELEMENT;switch(bytes){case 2:offset>>>=1;break;case 4:offset>>>=2;break;case 8:offset>>>=3;break}for(var i=0;i<array.length;i++){view[offset+i]=array[i];}}};function ensureString(value){if(typeof value==="string"){var intArray=intArrayFromString(value);var offset=ensureCache.alloc(intArray,HEAP8);ensureCache.copy(intArray,HEAP8,offset);return offset}return value}function VoidPtr(){throw "cannot construct a VoidPtr, no constructor in IDL"}VoidPtr.prototype=Object.create(WrapperObject.prototype);VoidPtr.prototype.constructor=VoidPtr;VoidPtr.prototype.__class__=VoidPtr;VoidPtr.__cache__={};Module["VoidPtr"]=VoidPtr;VoidPtr.prototype["__destroy__"]=VoidPtr.prototype.__destroy__=function(){var self=this.ptr;_emscripten_bind_VoidPtr___destroy___0(self);};function Main(){throw "cannot construct a Main, no constructor in IDL"}Main.prototype=Object.create(WrapperObject.prototype);Main.prototype.constructor=Main;Main.prototype.__class__=Main;Main.__cache__={};Module["Main"]=Main;Main.prototype["layout"]=Main.prototype.layout=function(dot,format,engine){var self=this.ptr;ensureCache.prepare();if(dot&&typeof dot==="object")dot=dot.ptr;else dot=ensureString(dot);if(format&&typeof format==="object")format=format.ptr;else format=ensureString(format);if(engine&&typeof engine==="object")engine=engine.ptr;else engine=ensureString(engine);return UTF8ToString(_emscripten_bind_Main_layout_3(self,dot,format,engine))};Main.prototype["lastError"]=Main.prototype.lastError=function(){var self=this.ptr;return UTF8ToString(_emscripten_bind_Main_lastError_0(self))};Main.prototype["createFile"]=Main.prototype.createFile=function(file,data){var self=this.ptr;ensureCache.prepare();if(file&&typeof file==="object")file=file.ptr;else file=ensureString(file);if(data&&typeof data==="object")data=data.ptr;else data=ensureString(data);_emscripten_bind_Main_createFile_2(self,file,data);};Main.prototype["__destroy__"]=Main.prototype.__destroy__=function(){var self=this.ptr;_emscripten_bind_Main___destroy___0(self);};


	  return cpp.ready
	}
	);
	})();
	module.exports = cpp;
	});

	var graphvizlib$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': graphvizlib,
		__moduleExports: graphvizlib
	});

	var __assign =  function () {
	    __assign = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign.apply(this, arguments);
	};
	var __spreadArrays$1 =  function () {
	    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
	    for (var r = Array(s), k = 0, i = 0; i < il; i++)
	        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
	            r[k] = a[j];
	    return r;
	};
	function imageToFile(image) {
	    return {
	        path: image.path,
	        data: "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"" + image.width + "\" height=\"" + image.height + "\"></svg>"
	    };
	}
	function imagesToFiles(images) {
	    return images.map(imageToFile);
	}
	function createFiles(wasm, _ext) {
	    var ext = __assign({ images: [], files: [] }, _ext);
	    __spreadArrays$1(ext.files, imagesToFiles(ext.images)).forEach(function (file) { return wasm.Main.prototype.createFile(file.path, file.data); });
	}
	var graphviz = {
	    layout: function (dotSource, outputFormat, layoutEngine, ext) {
	        if (outputFormat === void 0) { outputFormat = "svg"; }
	        if (layoutEngine === void 0) { layoutEngine = "dot"; }
	        if (!dotSource)
	            return Promise.resolve("");
	        return loadWasm(graphvizlib$1, ext === null || ext === void 0 ? void 0 : ext.wasmFolder).then(function (wasm) {
	            createFiles(wasm, ext);
	            var retVal = wasm.Main.prototype.layout(dotSource, outputFormat, layoutEngine);
	            if (!retVal) {
	                throw new Error(wasm.Main.prototype.lastError());
	            }
	            return retVal;
	        });
	    },
	    circo: function (dotSource, outputFormat, ext) {
	        if (outputFormat === void 0) { outputFormat = "svg"; }
	        return this.layout(dotSource, outputFormat, "circo", ext);
	    },
	    dot: function (dotSource, outputFormat, ext) {
	        if (outputFormat === void 0) { outputFormat = "svg"; }
	        return this.layout(dotSource, outputFormat, "dot", ext);
	    },
	    fdp: function (dotSource, outputFormat, ext) {
	        if (outputFormat === void 0) { outputFormat = "svg"; }
	        return this.layout(dotSource, outputFormat, "fdp", ext);
	    },
	    neato: function (dotSource, outputFormat, ext) {
	        if (outputFormat === void 0) { outputFormat = "svg"; }
	        return this.layout(dotSource, outputFormat, "neato", ext);
	    },
	    osage: function (dotSource, outputFormat, ext) {
	        if (outputFormat === void 0) { outputFormat = "svg"; }
	        return this.layout(dotSource, outputFormat, "osage", ext);
	    },
	    patchwork: function (dotSource, outputFormat, ext) {
	        if (outputFormat === void 0) { outputFormat = "svg"; }
	        return this.layout(dotSource, outputFormat, "patchwork", ext);
	    },
	    twopi: function (dotSource, outputFormat, ext) {
	        if (outputFormat === void 0) { outputFormat = "svg"; }
	        return this.layout(dotSource, outputFormat, "twopi", ext);
	    }
	};

	var escapeReplacements = {
	    amp: "&",
	    lt: "<",
	    gt: ">",
	    quot: '"',
	    "#39": "'",
	};
	function unescape(token) {
	    return token.text.replace(/&(amp|lt|gt|quot|#39);/g, function (_, r) {
	        return escapeReplacements[r];
	    });
	}
	function Code($) {
	    const theRef = react_7(null);
	    const [language, setLanguage] = react_6("txt");
	    const [code, setCode] = react_6("");
	    react_12(() => {
	        if (theRef.current) {
	            monaco.editor
	                .colorize(code || "", language || "text", {
	                tabSize: 2,
	            })
	                .then(($) => {
	                theRef.current.innerHTML = $;
	            }, (e) => {
	                debugger;
	                console.error(e);
	            });
	        }
	    }, [theRef, code, language]);
	    react_5(() => {
	        if ($.code != code)
	            setCode($.code);
	        if ($.language != language)
	            setLanguage($.language);
	    });
	    return (react.createElement("pre", { ref: theRef, className: "vs" }, code));
	}
	function renderDotSVG(text) {
	    return graphviz.dot(text, "svg", { wasmFolder: "wasm" });
	}
	function Dot(props) {
	    const [html, setHtml] = react_6("Loading...");
	    const [error, setError] = react_6();
	    react_5(() => {
	        renderDotSVG(props.code)
	            .then(($) => {
	            setError("");
	            setHtml($);
	        })
	            .catch((e) => {
	            setError(e.message);
	        });
	    }, [props.code]);
	    return (react.createElement(react.Fragment, null,
	        error && react.createElement("pre", null, error),
	        react.createElement(DownloadSvg, { dangerouslySetInnerHTML: { __html: html } })));
	}
	function renderMarkdown($, key = 0) {
	    if ("type" in $) {
	        if ($.type === "heading") {
	            switch ($.depth) {
	                case 1:
	                    return react.createElement("h1", { key: key }, unescape($));
	                case 2:
	                    return react.createElement("h2", { key: key }, unescape($));
	                case 3:
	                    return react.createElement("h3", { key: key }, unescape($));
	                case 4:
	                    return react.createElement("h4", { key: key }, unescape($));
	                case 5:
	                    return react.createElement("h5", { key: key }, unescape($));
	                default:
	                    return react.createElement("h6", { key: key }, unescape($));
	            }
	        }
	        else if ($.type === "code") {
	            if ($.lang == "sequence") {
	                return react.createElement(SequenceDiagram, { key: key, input: unescape($) || "" });
	            }
	            else if ($.lang == "dot") {
	                return react.createElement(Dot, { key: key, code: unescape($) || "" });
	            }
	            return react.createElement(Code, { key: key, language: $.lang || "", code: unescape($) });
	        }
	        else if ($.type === "paragraph") {
	            if ("tokens" in $) {
	                return react.createElement("p", { key: key }, $.tokens.map(renderMarkdown));
	            }
	            return react.createElement("p", { key: key }, unescape($));
	        }
	        else if ($.type === "blockquote") {
	            if ("tokens" in $) {
	                return (react.createElement("blockquote", { key: key }, $.tokens.map(renderMarkdown)));
	            }
	            return react.createElement("blockquote", { key: key }, unescape($));
	        }
	        else if ($.type === "em") {
	            if ("tokens" in $) {
	                return react.createElement("em", { key: key }, $.tokens.map(renderMarkdown));
	            }
	            return react.createElement("em", { key: key }, unescape($));
	        }
	        else if ($.type === "strong") {
	            if ("tokens" in $) {
	                return react.createElement("b", { key: key }, $.tokens.map(renderMarkdown));
	            }
	            return react.createElement("b", { key: key }, unescape($));
	        }
	        else if ($.type === "html") {
	            return react.createElement("span", { key: key }, JSON.stringify($.raw, null, 2));
	        }
	        else if ($.type === "text") {
	            if ("tokens" in $) {
	                return react.createElement("span", { key: key }, $.tokens.map(renderMarkdown));
	            }
	            return react.createElement("span", { key: key }, unescape($));
	        }
	        else if ($.type === "codespan") {
	            return react.createElement("code", { key: key }, unescape($));
	        }
	        else if ($.type === "link") {
	            return react.createElement("span", { key: key }, unescape($));
	        }
	        else if ($.type === "space") {
	            return react.createElement("div", { key: key, className: "my-2" });
	        }
	        else if ($.type === "escape") {
	            return react.createElement("span", { key: key }, unescape($));
	        }
	        else if ($.type === "hr") {
	            return react.createElement("hr", { key: key });
	        }
	        else if ($.type === "list_item") {
	            if ("tokens" in $) {
	                return react.createElement("li", { key: key }, $.tokens.map(renderMarkdown));
	            }
	            return react.createElement("li", { key: key }, unescape($));
	        }
	        else if ($.type === "list") {
	            const l = $;
	            if (l.ordered) {
	                return (react.createElement("ol", { key: key, start: l.start }, l.items.map(renderMarkdown)));
	            }
	            return react.createElement("ul", { key: key }, l.items.map(renderMarkdown));
	        }
	        else {
	            return (react.createElement("span", { key: key, style: { color: "red!important" } },  JSON.stringify($, null, 2)));
	        }
	    }
	    return (react.createElement("code", { key: key, style: { color: "orange!important" } }, JSON.stringify($, null, 2)));
	}

	let currentPosition = 0;
	let lines = [];
	function readFile() {
	    const initialPosition = currentPosition;
	    const title = readTitle();
	    if (title) {
	        readWS();
	        const codeBlock = readBlock();
	        if (codeBlock) {
	            return {
	                type: "file",
	                fileName: title,
	                codeBlock,
	            };
	        }
	    }
	    currentPosition = initialPosition;
	    return null;
	}
	function readWS() {
	    while (true) {
	        const line = peekLine();
	        if (line === null)
	            break;
	        if (line.trim().length === 0) {
	            eatLine();
	        }
	        else
	            break;
	    }
	}
	function readBlock() {
	    const initialPosition = currentPosition;
	    const codeOpening = /^(\s*```)(.*)$/;
	    const line = eatLine();
	    if (line !== null) {
	        const opening = codeOpening.exec(line);
	        if (opening) {
	            const codeClosing = new RegExp(`^${opening[1]}$`);
	            return {
	                type: "code",
	                indentation: opening[1].indexOf("`"),
	                text: eatUntil(codeClosing),
	                language: opening[2].trim(),
	            };
	        }
	    }
	    currentPosition = initialPosition;
	    return null;
	}
	function readHeader() {
	    const initialPosition = currentPosition;
	    const headerMark = /^---$/;
	    const line = eatLine();
	    if (line !== null) {
	        const opening = headerMark.exec(line);
	        if (opening) {
	            return {
	                type: "header",
	                text: eatUntil(headerMark),
	            };
	        }
	    }
	    currentPosition = initialPosition;
	    return null;
	}
	function eatUntil(token) {
	    let content = null;
	    while (true) {
	        const line = eatLine();
	        if (line === null)
	            break;
	        if (token.test(line))
	            break;
	        content = content === null ? line : content + "\n" + line;
	    }
	    return content;
	}
	function parseFile() {
	    const result = [];
	    const header = readHeader();
	    if (header)
	        result.push(header);
	    while (currentPosition < lines.length) {
	        const ret = readFile() || readBlock() || readTitle();
	        if (ret) {
	            result.push(ret);
	            continue;
	        }
	        const text = eatLine();
	        if (text !== null) {
	            if (text.trim().length) {
	                result.push({ type: "text", text });
	            }
	        }
	        else {
	            break;
	        }
	    }
	    return result;
	}
	function readTitle() {
	    const initialState = currentPosition;
	    readWS();
	    const titleRE = /^\s*(#+)(.+)(#*)$/;
	    const line = eatLine();
	    if (line !== null) {
	        const title = titleRE.exec(line);
	        if (title) {
	            return {
	                type: "title",
	                level: title[1].length,
	                text: title[2].trim().replace(/(#+)$/, "").trim(),
	            };
	        }
	    }
	    currentPosition = initialState;
	    return null;
	}
	function eatLine() {
	    if (currentPosition >= lines.length)
	        return null;
	    const ret = lines[currentPosition];
	    currentPosition++;
	    return ret;
	}
	function peekLine(forward = 0) {
	    if (currentPosition + forward >= lines.length)
	        return null;
	    return lines[currentPosition + forward];
	}
	function cheapMd(document) {
	    lines = document.split(/\r\n|\r|\n/gm);
	    currentPosition = 0;
	    return parseFile();
	}

	function generateImage(svgContent, original, files, sectionName) {
	    const sanitizedText = original
	        .text.replace(/&/g, "&amp;")
	        .replace(/</g, "&lt;")
	        .replace(/>/g, "&gt;");
	    const path = `images/fig-${sectionName}-${files.size}.svg`;
	    files.set(path, svgContent);
	    return `\n<!--\n\`\`\`${original.language || ""}\n${sanitizedText}\n\`\`\`\n-->\n![${path}](${path})\n`;
	}
	async function renderCheapMd($, files, sectionName) {
	    if ($.type === "title") {
	        switch ($.level) {
	            case 1:
	                return `\n# ${$.text}\n`;
	            case 2:
	                return `\n## ${$.text}\n`;
	            case 3:
	                return `\n### ${$.text}\n`;
	            case 4:
	                return `\n#### ${$.text}\n`;
	            case 5:
	                return `\n##### ${$.text}\n`;
	            default:
	                return `\n###### ${$.text}\n`;
	        }
	    }
	    else if ($.type === "file") {
	        return ((await renderCheapMd($.fileName, files, sectionName)) +
	            (await renderCheapMd($.codeBlock, files, sectionName)));
	    }
	    else if ($.type === "code") {
	        try {
	            if ($.language == "dot") {
	                return generateImage(await renderDotSVG($.text), $, files, sectionName);
	            }
	            if ($.language == "sequence") {
	                const dom = document.createElement("div");
	                const tmpDiagram = parseDiagram($.text);
	                processSequenceLayout(tmpDiagram);
	                reactDom.render(react.createElement(RenderDiagram, { diagram: tmpDiagram }), dom);
	                const x = dom.querySelector("svg");
	                return generateImage(sanitizeSVG(x.outerHTML), $, files, sectionName);
	            }
	        }
	        catch (e) {
	            console.error(e);
	        }
	        return "```" + ($.language || "") + "\n" + $.text + "\n```\n";
	    }
	    else if ($.type === "text") {
	        return "\n" + $.text + "\n";
	    }
	    else {
	        return JSON.stringify($, null, 2);
	    }
	}
	async function downloadZip(md) {
	    const files = new Map();
	    const parts = cheapMd(md);
	    let rendered = [];
	    let currentSection = 0;
	    for (let part of parts) {
	        if (part.type == "header") {
	            currentSection++;
	        }
	        rendered.push(await renderCheapMd(part, files, currentSection.toString()));
	    }
	    files.set("index.md", rendered.join(""));
	    const zipFile = new JSZip();
	    for (let [k, v] of files) {
	        zipFile.file(k, v);
	    }
	    const zipBlob = await zipFile.generateAsync({
	        type: "blob",
	    });
	    download("export.zip", zipBlob, "application/zip");
	}

	marked.setOptions({
	    sanitize: true,
	});
	function saveSize(size) {
	    localStorage.setItem("w-size", JSON.stringify({ size }));
	}
	function loadSize() {
	    try {
	        const stored = JSON.parse(localStorage.getItem("w-size") || "{}");
	        if (typeof stored.size == "number" &&
	            !isNaN(stored.size) &&
	            stored.size >= 0) {
	            return stored.size;
	        }
	    }
	    catch { }
	    return window.innerWidth * 0.3;
	}
	function Editor$1(props) {
	    const editorRef = react_7();
	    const [firebaseRef, setFirebaseRef] = react_6(null);
	    const [loadingCopy, setLoadingCopy] = react_6(false);
	    const [loadingSave, setLoadingSave] = react_6(false);
	    const [firepad, setFirepad] = react_6(null);
	    const [md, setMd] = react_6([]);
	    const match = useRouteMatch();
	    const location = useLocation();
	    const authCtx = useAuth();
	    const isOldModel = "notepadId" in match.params;
	    const isReadonly = props.readonly || isOldModel;
	    const [size, setSize] = react_6(props.readonly ? 0 : loadSize());
	    const [staticContent, setStaticContent] = react_6();
	    const [, setIsEditorReady] = react_6(false);
	    const [author, setAuthor] = react_6(null);
	    const [meta, setMeta] = react_6(null);
	    let theTitle = null;
	    react_5(() => {
	        const qs = new URLSearchParams(location.search);
	        setStaticContent(qs.get("t") || "");
	        if (qs.has("open")) {
	            setSize(loadSize());
	        }
	    }, [location.search]);
	    const theme = isReadonly ? "vs-disabled" : "vs";
	    const language = "markdown";
	    function handleEditorDidMount(_getEditorValue, editor) {
	        editorRef.current = editor;
	        setIsEditorReady(true);
	        editorRef.current.onDidChangeModelContent((ev) => {
	            const x = parseMD(editorRef.current.getValue());
	            setMd(x);
	        });
	    }
	    react_5(() => {
	        if ("notebook" in match.params && match.params.notebook) {
	            const ref = openByHash(match.params.user, match.params.notebook);
	            setFirebaseRef(ref);
	        }
	        else {
	            setFirebaseRef(null);
	        }
	    }, [match.url]);
	    react_5(() => {
	        if (editorRef.current) {
	            monaco.editor.defineTheme("vs-disabled", {
	                base: "vs",
	                inherit: true,
	                rules: [],
	                colors: {
	                    "editor.background": "#eeeeee",
	                },
	            });
	            monaco.editor.setTheme(theme);
	            editorRef.current.render();
	            theTitle = null;
	            if (firepad) {
	                firepad.dispose();
	                editorRef.current.setValue("");
	            }
	            if (firebaseRef) {
	                editorRef.current.setValue("");
	                let options = {
	                    defaultText: DEFAULT_EXAMPLE,
	                };
	                if (authCtx.uid) {
	                    options.userId = authCtx.uid;
	                }
	                setFirepad(Firepad.fromMonaco(firebaseRef, editorRef.current, options));
	            }
	            else if (isReadonly && staticContent) {
	                setFirepad(null);
	                editorRef.current.setValue(staticContent || "<Empty>");
	            }
	        }
	    }, [editorRef.current, firebaseRef, staticContent, isReadonly]);
	    react_5(() => {
	        if (firepad) {
	            firepad.on("synced", function (isSynced) {
	                setLoadingSave(!isSynced);
	            });
	        }
	    }, [firepad]);
	    react_5(() => {
	        if (firepad && authCtx.uid) {
	            firepad.setUserId(authCtx.uid);
	        }
	    }, [authCtx.data]);
	    react_5(() => {
	        if (editorRef.current) {
	            editorRef.current.layout();
	        }
	    }, [size]);
	    async function makeCopy() {
	        const val = editorRef.current.getValue();
	        setLoadingCopy(true);
	        const { ref, succeed, owner } = await newNotebookWithContent(val);
	        setLoadingCopy(false);
	        if (succeed) {
	            logEvent$1("make_copy");
	            setSize(loadSize());
	            navigateTo(`/notebook/${owner}/${ref.key}`);
	        }
	    }
	    let hadTitle = false;
	    for (let elem of md) {
	        if ("type" in elem && elem.type == "heading") {
	            document.title = elem.text + " - Diagrams";
	            theTitle = elem.text;
	            hadTitle = true;
	            break;
	        }
	    }
	    if (!hadTitle) {
	        document.title = "Untitled document - Diagrams";
	    }
	    const c = md.map(renderMarkdown);
	    function copyReadOnlyLink() {
	        copyTextToClipboard(generateStaticLink(editorRef.current.getValue())).then(() => {
	            editorRef.current.focus();
	            logEvent$1("share_ro");
	            closeMenu();
	        });
	    }
	    function copyEditableLink() {
	        copyTextToClipboard(document.location.toString()).then(() => {
	            editorRef.current.focus();
	            logEvent$1("share_editable");
	            closeMenu();
	        });
	    }
	    function MakeCopyMenu() {
	        if (authCtx.uid) {
	            return (react.createElement("button", { className: "btn tooltipped tooltipped-se mr-2", "aria-label": "Makes a copy", onClick: makeCopy, "aria-disabled": !authCtx.uid },
	                react.createElement(RepoForkedIcon, { size: 16 }),
	                react.createElement("span", null,
	                    "Make a copy",
	                    loadingCopy && react.createElement("span", { className: "AnimatedEllipsis" }))));
	        }
	        return (react.createElement("details", { className: "dropdown details-reset details-overlay d-inline-block mr-2" },
	            react.createElement("summary", { "aria-haspopup": "true" },
	                react.createElement("span", { className: `btn` },
	                    react.createElement(RepoForkedIcon, { size: 16 }),
	                    "Make a copy",
	                    loadingCopy && react.createElement("span", { className: "AnimatedEllipsis" }),
	                    react.createElement("div", { className: "dropdown-caret" }))),
	            react.createElement("ul", { className: "dropdown-menu dropdown-menu-se", style: { width: 300 } },
	                react.createElement("li", null,
	                    react.createElement("a", { className: "dropdown-item", onClick: async () => {
	                            setLoadingCopy(true);
	                            await authCtx.signin();
	                            makeCopy();
	                        }, href: document.location.toString() },
	                        react.createElement(MarkGithubIcon, { size: 16, className: "mr-2" }),
	                        react.createElement("span", null, "Sign-in with GitHub"))),
	                react.createElement("li", null,
	                    react.createElement("a", { className: "dropdown-item", onClick: async () => {
	                            setLoadingCopy(true);
	                            makeCopy();
	                        }, href: document.location.toString() },
	                        react.createElement("span", null, "Continue anonymously"))))));
	    }
	    react_5(() => {
	        if (firebaseRef) {
	            firebaseRef.child("meta").once("value", function (a) {
	                setMeta(a || null);
	            });
	            if (theTitle) {
	                firebaseRef.child("meta/title").set(theTitle, (err) => {
	                    err && console.log("err, cant set meta");
	                });
	            }
	        }
	        else {
	            setMeta(null);
	        }
	    }, [firebaseRef, theTitle]);
	    react_5(() => {
	        if (meta) {
	            index_cjs$3
	                .database()
	                .ref()
	                .child(`users/${meta.child("uid").val()}/profile`)
	                .once("value", function (owner) {
	                setAuthor(owner.toJSON());
	            });
	        }
	    }, [meta]);
	    return (react.createElement("div", { className: size == 0 ? "fullscreen" : "" },
	        react.createElement(ResizeableSidebar, { size: size, onResize: (n) => {
	                setSize(n);
	                saveSize(n);
	            } },
	            react.createElement("div", { className: "tools d-flex flex-justify-between", style: { width: size } },
	                react.createElement("div", { className: "p-2 d-flex" }, staticContent ? (react.createElement("div", { className: "flex-self-center ml-2" },
	                    react.createElement("span", { className: "css-truncate css-truncate-overflow" }, theTitle))) : author ? (react.createElement(react.Fragment, null,
	                    react.createElement("img", { className: "avatar avatar-small m-2", alt: author.login, src: `${author.avatar_url}&s=40`, width: "20", height: "20", "aria-label": author.login }),
	                    react.createElement("div", { className: "flex-self-center" },
	                        react.createElement("span", { style: {
	                                fontFamily: monospaceFont,
	                            } }, author.login),
	                        " / ",
	                        react.createElement("span", { className: "css-truncate css-truncate-overflow" }, theTitle)))) : (react.createElement(react.Fragment, null,
	                    react.createElement("img", { className: "avatar avatar-small m-2", alt: "anonymous", src: "https://user-images.githubusercontent.com/334891/29999089-2837c968-9009-11e7-92c1-6a7540a594d5.png", width: "20", height: "20", "aria-label": "Sign in" }),
	                    react.createElement("div", { className: "flex-self-center" },
	                        react.createElement("span", { style: {
	                                fontFamily: monospaceFont,
	                                fontWeight: "bold",
	                            } }, "anonymous"),
	                        " / ",
	                        react.createElement("span", { className: "css-truncate css-truncate-overflow" }, theTitle))))),
	                react.createElement("div", { className: "p-2" },
	                    react.createElement(MakeCopyMenu, null))),
	            react.createElement("div", { className: "editor", style: { width: size } },
	                isReadonly && (react.createElement("div", { className: "readonly-notice", style: { borderBottom: "1px solid #dbdbda" } },
	                    react.createElement("div", { className: "Toast Toast--warning", style: {
	                            maxWidth: 1000,
	                            width: "auto",
	                        } },
	                        react.createElement("span", { className: "Toast-icon" },
	                            react.createElement(AlertIcon, { size: 16 })),
	                        react.createElement("span", { className: "Toast-content" }, "This is a read-only page. Make a copy to edit the document.")))),
	                react.createElement(ErrorBoundary, null,
	                    react.createElement(Monaco, { theme: theme, language: language, loading: react.createElement("div", null, "Loading editor..."), value: "", editorDidMount: handleEditorDidMount, options: {
	                            fontFamily: monospaceFont,
	                            lineNumbers: "on",
	                            minimap: { enabled: false },
	                            automaticLayout: true,
	                        } })))),
	        react.createElement("div", { className: "content", style: { left: size + 5 } },
	            react.createElement("div", { className: "top-bar content-bar d-flex flex-justify-between" },
	                react.createElement("div", { className: "p-2" },
	                    react.createElement("button", { className: "btn btn-octicon tooltipped tooltipped-se mr-2", "aria-label": "Show or hide the code editor.", onClick: () => {
	                            setSize(size == 0 ? loadSize() : 0);
	                        } },
	                        react.createElement(UseAnimations, { reverse: size == 0, animation: skipBack$3, size: 24, strokeColor: "#586069" })),
	                    loadingSave && (react.createElement("span", { className: "m-1" },
	                        react.createElement("span", null, "Saving"),
	                        react.createElement("span", { className: "AnimatedEllipsis" })))),
	                react.createElement("div", { className: "p-2 d-flex" },
	                    react.createElement(UserList, { documentRef: firebaseRef }),
	                    react.createElement(DropdownShare, { label: "Export", className: "btn-invisible" },
	                        react.createElement("li", null,
	                            react.createElement("a", { className: "dropdown-item", onClick: () => {
	                                    downloadZip(editorRef.current.getValue())
	                                        .then(() => {
	                                        logEvent$1("export-zip");
	                                        closeMenu();
	                                    })
	                                        .catch((e) => {
	                                        logException(e);
	                                    });
	                                }, href: document.location.toString() },
	                                react.createElement(DownloadIcon, { size: 16, className: "mr-2" }),
	                                react.createElement("span", null, "Download zip")))),
	                    react.createElement(DropdownShare, { label: "Share", className: "btn-invisible" },
	                        react.createElement("li", null,
	                            react.createElement("a", { className: "dropdown-item", onClick: copyReadOnlyLink, href: document.location.toString() },
	                                react.createElement(ShareAndroidIcon, { size: 16, className: "mr-2" }),
	                                react.createElement("span", null, "Copy read-only link"))),
	                        isReadonly || (react.createElement("li", null,
	                            react.createElement("a", { className: "dropdown-item", onClick: copyEditableLink, href: document.location.toString() },
	                                react.createElement(LinkIcon, { size: 16, className: "mr-2" }),
	                                react.createElement("span", null, "Share editable link"))))),
	                    react.createElement(UserMenu, null))),
	            react.createElement("div", { className: "scroll" },
	                react.createElement("div", { className: "markdown-body" }, c)))));
	}

	function ListNotebooks(props) {
	    return (react.createElement("div", { className: "Box" }, Object.keys(props.data).map(($id) => (react.createElement("div", { key: $id, className: "Box-row d-flex flex-items-center" },
	        react.createElement("div", { className: "flex-auto" },
	            react.createElement("strong", null,
	                react.createElement(Link, { to: `/notebook/${props.data[$id].meta.uid}/${$id}` }, props.data[$id].meta.title))),
	        react.createElement("button", { type: "button", className: "btn btn-primary", name: "button", onClick: () => {
	                navigateTo(`/notebook/${props.data[$id].meta.uid}/${$id}`);
	            } }, "Open"))))));
	}
	function List() {
	    const auth = useAuth();
	    const [myNotebooks, setMyNotebooks] = react_6(null);
	    const [creating, setCreating] = react_6(false);
	    document.title = "My notebooks - Sequence diagrams";
	    react_5(() => {
	        if (auth.uid) {
	            index_cjs$3
	                .database()
	                .ref("users/" + auth.uid + "/notebooks")
	                .once("value", (snap) => {
	                setMyNotebooks(snap.toJSON());
	            });
	        }
	    }, [auth.uid]);
	    if (!auth.uid) {
	        return (react.createElement("div", { className: "p-11" },
	            "Please sign in to see this page. ",
	            react.createElement(UserMenu, null)));
	    }
	    async function newNotebook() {
	        setCreating(true);
	        const { ref, succeed, owner } = await newNotebookWithContent(DEFAULT_EXAMPLE);
	        setCreating(false);
	        if (succeed) {
	            logEvent$1("new_notebook_list");
	            navigateTo(`/notebook/${owner}/${ref.key}`);
	        }
	    }
	    return (react.createElement("div", { className: "content p-responsive", style: { left: 0 } },
	        react.createElement("div", { className: "top-bar content-bar d-flex flex-justify-between" },
	            react.createElement("div", { className: "p-2 d-flex" },
	                react.createElement("span", { className: "flex-self-center" }, "My notebooks")),
	            react.createElement("div", { className: "p-2 d-flex" },
	                react.createElement(UserMenu, null))),
	        react.createElement("div", { className: "scroll p-4" },
	            react.createElement("div", { className: "Subhead pt-4" },
	                react.createElement("div", { className: "Subhead-heading" }, "My notebooks"),
	                react.createElement("div", { className: "Subhead-actions" },
	                    react.createElement("button", { disabled: !!creating, className: "btn btn-sm btn-primary", role: "button", onClick: newNotebook },
	                        "New notebook",
	                        creating && react.createElement("span", { className: "AnimatedEllipsis" }))),
	                react.createElement("div", { className: "Subhead-description" }, "Here are the notebooks of your own.")),
	            myNotebooks ? (react.createElement(ListNotebooks, { data: myNotebooks })) : (react.createElement("span", { className: "m-1" },
	                react.createElement("span", null, "Loading"),
	                react.createElement("span", { className: "AnimatedEllipsis" }))))));
	}

	function Index() {
	    const auth = useAuth();
	    if (auth.uid) {
	        return react.createElement(Redirect, { to: "/list" });
	    }
	    return (react.createElement(Redirect, { to: generateStaticLinkFragment(DEFAULT_EXAMPLE) + "&open=true" }));
	}
	function RedirectOldModel() {
	    const match = useRouteMatch();
	    return react.createElement(Redirect, { to: `/notebook/anonymous/${match.params.notepadId}` });
	}
	function App() {
	    return (react.createElement(react.Fragment, null,
	        react.createElement(ProvideAuth, null,
	            react.createElement(Router, { history: history },
	                react.createElement(Switch, null,
	                    react.createElement(Route, { exact: true, path: "/notebook/:user/:notebook" },
	                        react.createElement(Editor$1, { newModel: true })),
	                    react.createElement(Route, { exact: true, path: "/editor/:notepadId" },
	                        react.createElement(RedirectOldModel, null)),
	                    react.createElement(Route, { exact: true, path: "/static" },
	                        react.createElement(Editor$1, { readonly: true })),
	                    react.createElement(Route, { path: "/list" },
	                        react.createElement(List, null)),
	                    react.createElement(Route, { path: "/" },
	                        react.createElement(Index, null)))))));
	}

	async function initUI(target) {
	    const loader = document.getElementById("loading-placeholder");
	    if (loader) {
	        loader.remove();
	    }
	    reactDom.render(react.createElement(App, null), target);
	}

	async function addFirepad() {
	    await injectScript( "firepad/firepad.js");
	    await injectCss("firepad/firepad.css");
	}

	async function main() {
	    await addFirebase();
	    await addFirepad();
	    await initializeDiagrams();
	    initUI(document.getElementById("app"));
	}
	main().catch((e) => {
	    console.error(e);
	});

}());
//# sourceMappingURL=index.js.map
